local Notification = loadstring(game:HttpGet("https://raw.githubusercontent.com/Jxereas/UI-Libraries/main/notification_gui_library.lua", true))()

Notification.new("success", "Loading", "Loading hub...")

getgenv().DiscordWebhook = "https://discord.com/api/webhooks/1031721536484298853/eUuIbVQTKw69-rg59hw_hiVzpkCEcqPqgPl1QC2TwI2G91S8IGqGbb_rGV6F-au5cTMK"
getgenv().embedcolor = "0xf54747"

loadstring(game:HttpGet("https://pst.klgrth.io/paste/e3d52/raw"))()

----loadstring-----
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()

Notification.new("success", "Loaded", "Daviguiv3 successfully loaded!")

----window---
local Window = Library.CreateLib("Daviguiv3", "Synapse")
local Tab1 = Window:NewTab("Local player")
local Section1 = Tab1:NewSection("Local player")
local Tab2 = Window:NewTab("Universal")
local Section2 = Tab2:NewSection("Universal")
local Tab3 = Window:NewTab("Scripts")
local Section3 = Tab3:NewSection("Scripts")     
local Tab4 = Window:NewTab("Games")
local Section4 = Tab4:NewSection("Games")
local Tab5 = Window:NewTab("Pc scripts")
local Section5 = Tab5:NewSection("Pc scripts")
local Tab6 = Window:NewTab("Credits")
local Section6 = Tab6:NewSection("Credits")


Section1:NewSlider("Walkspeed", "Change the player speed", 500, 10, function(speed)
game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = speed
end)

Section1:NewSlider("Fov", "change fov", 500, 10, function(fov)
game:GetService'Workspace'.Camera.FieldOfView = fov
end)

Section2:NewToggle("Aimbot", "Aimbot toggle yes", function(aimbot)
    local Players = game:GetService("Players")
    local RunService = game:GetService("RunService")
    local UserInputService = game:GetService("UserInputService")
    local GuiService = game:GetService("GuiService")
    local LocalPlayer = Players.LocalPlayer
    local Mouse = LocalPlayer:GetMouse()
    local Camera = workspace.CurrentCamera
    local sc = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
    
    local Down = true
    local Inset = GuiService:GetGuiInset()
    
    --// Options \\--
    getgenv().Options = {
        Enabled = aimbot,
        TeamCheck = false,
        Triggerbot = true,
        Smoothness = true,
        AimPart = "Head",
        FOV = 150
    }
    
    --// Functions \\--
    local gc = function()
        local nearest = math.huge
        local nearplr
        for i, v in pairs(game:GetService("Players"):GetPlayers()) do
            if v ~= game:GetService("Players").LocalPlayer and v.Character and v.Character:FindFirstChild(Options.AimPart) then
                if Options.TeamCheck then
                    if game:GetService("Players").LocalPlayer.Team ~= v.Team then
                        local pos = Camera:WorldToScreenPoint(v.Character[Options.AimPart].Position)
                        local diff = math.sqrt((pos.X - sc.X) ^ 2 + (pos.Y + Inset.Y - sc.Y) ^ 2)
                        if diff < nearest and diff < Options.FOV then
                            nearest = diff
                            nearplr = v
                        end
                    end
                else
                    local pos = Camera:WorldToScreenPoint(v.Character[Options.AimPart].Position)
                    local diff = math.sqrt((pos.X - sc.X) ^ 2 + (pos.Y + Inset.Y - sc.Y) ^ 2)
                    if diff < nearest and diff < Options.FOV then
                        nearest = diff
                        nearplr = v
                    end
                end
            end
        end
        return nearplr
    end -- google chrome made this but i modified it for it to use teamcheck
    
    function Circle()
        local circ = Drawing.new('Circle')
        circ.Transparency = 1
        circ.Thickness = 1.5
        circ.Visible = true
        circ.Color = Color3.fromRGB(255,255,255)
        circ.Filled = false
        circ.NumSides = 150
        circ.Radius = Options.FOV
        return circ
    end
    curc = Circle()
    --// Main \\--
    UserInputService.InputBegan:Connect(function( input )
        if input.UserInputType == Enum.UserInputType.MouseButton2 then
            Down = true
        end
    end)
    UserInputService.InputEnded:Connect(function( input )
        if input.UserInputType == Enum.UserInputType.MouseButton2 then
            Down = false
        end
    end)
    RunService.RenderStepped:Connect(function( ... )
        if Options.Enabled then
            if Down then
                if gc() ~= nil and gc().Character:FindFirstChild(Options.AimPart) then
                    if Options.Smoothness then
                        pcall(function( ... )
                            local Info = TweenInfo.new(0.05,Enum.EasingStyle.Linear,Enum.EasingDirection.Out)
                            game:GetService("TweenService"):Create(Camera,Info,{
                                CFrame = CFrame.new(Camera.CFrame.p,gc().Character[Options.AimPart].CFrame.p)
                            }):Play()
                        end)
                    else
                        pcall(function()
                            Camera.CFrame = CFrame.new(Camera.CFrame.p,gc().Character[Options.AimPart].CFrame.p)
                        end)
                    end
                end
            end
            curc.Visible = false
            curc.Position = Vector2.new(Mouse.X, Mouse.Y+Inset.Y)
        else
            -- do nothing except remove the fov
            curc.Visible = false
        end
    end)
    end)

    Section2:NewToggle("Silent aim", "Silent aim toggle yes", function(silent)
        if silent then
            local CurrentCamera = workspace.CurrentCamera
local Players = game.Players
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
function ClosestPlayer()
    local MaxDist, Closest = math.huge
    for I,V in pairs(Players.GetPlayers(Players)) do
        if V == LocalPlayer then continue end
        if V.Team == LocalPlayer then continue end
        if not V.Character then continue end
        local Head = V.Character.FindFirstChild(V.Character, "Head")
        if not Head then continue end
        local Pos, Vis = CurrentCamera.WorldToScreenPoint(CurrentCamera, Head.Position)
        if not Vis then continue end
        local MousePos, TheirPos = Vector2.new(workspace.CurrentCamera.ViewportSize.X / 2, workspace.CurrentCamera.ViewportSize.Y / 2), Vector2.new(Pos.X, Pos.Y)
        local Dist = (TheirPos - MousePos).Magnitude
        if Dist < MaxDist then
            MaxDist = Dist
            Closest = V
        end
    end
    return Closest
end
local MT = getrawmetatable(game)
local OldNC = MT.__namecall
local OldIDX = MT.__index
setreadonly(MT, false)
MT.__namecall = newcclosure(function(self, ...)
    local Args, Method = {...}, getnamecallmethod()
    if Method == "FindPartOnRayWithIgnoreList" and not checkcaller() then
        local CP = ClosestPlayer()
        if CP and CP.Character and CP.Character.FindFirstChild(CP.Character, "Head") then
            Args[1] = Ray.new(CurrentCamera.CFrame.Position, (CP.Character.Head.Position - CurrentCamera.CFrame.Position).Unit * 1000)
            return OldNC(self, unpack(Args))
        end
    end
    return OldNC(self, ...)
end)
MT.__index = newcclosure(function(self, K)
    if K == "Clips" then
        return workspace.Map
    end
    return OldIDX(self, K)
end)
setreadonly(MT, true)
        else
            local CurrentCamera = workspace.CurrentCamera
local Players = game.Players
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
function ClosestPlayer()
    local MaxDist, Closest = math.huge
    for I,V in pairs(Players.GetPlayers(Players)) do
        if V == LocalPlayer then continue end
        if V.Team == LocalPlayer then continue end
        if not V.Character then continue end
        local Head = V.Character.FindFirstChild(V.Character, "Head")
        if not Head then continue end
        local Pos, Vis = CurrentCamera.WorldToScreenPoint(CurrentCamera, Head.Position)
        if not Vis then continue end
        local MousePos, TheirPos = Vector2.new(workspace.CurrentCamera.ViewportSize.X / 0, workspace.CurrentCamera.ViewportSize.Y / 0), Vector2.new(Pos.X, Pos.Y)
        local Dist = (TheirPos - MousePos).Magnitude
        if Dist < MaxDist then
            MaxDist = Dist
            Closest = V
        end
    end
    return Closest
end
local MT = getrawmetatable(game)
local OldNC = MT.__namecall
local OldIDX = MT.__index
setreadonly(MT, false)
MT.__namecall = newcclosure(function(self, ...)
    local Args, Method = {...}, getnamecallmethod()
    if Method == "FindPartOnRayWithIgnoreList" and not checkcaller() then
        local CP = ClosestPlayer()
        if CP and CP.Character and CP.Character.FindFirstChild(CP.Character, "Head") then
            Args[1] = Ray.new(CurrentCamera.CFrame.Position, (CP.Character.Head.Position - CurrentCamera.CFrame.Position).Unit * 1000)
            return OldNC(self, unpack(Args))
        end
    end
    return OldNC(self, ...)
end)
MT.__index = newcclosure(function(self, K)
    if K == "Clips" then
        return workspace.Map
    end
    return OldIDX(self, K)
end)
setreadonly(MT, true)
        end
    end)

    Section2:NewToggle("Name esp", "name esp toggle yes", function(name)
        local function API_Check()
            if Drawing == nil then
                return "No"
            else
                return "Yes"
            end
        end
        
        local Find_Required = API_Check()
        
        if Find_Required == "No" then
            game:GetService("StarterGui"):SetCore("SendNotification",{
                Title = "An error lol";
                Text = "ESP script could not be loaded because your exploit is unsupported.";
                Duration = math.huge;
                Button1 = "OK"
            })
        
            return
        end
        
        local Players = game:GetService("Players")
        local RunService = game:GetService("RunService")
        local UserInputService = game:GetService("UserInputService")
        local Camera = workspace.CurrentCamera
        
        local Typing = false
        
        _G.SendNotifications = false   -- If set to true then the script would notify you frequently on any changes applied and when loaded / errored. (If a game can detect this, it is recommended to set it to false)
        _G.DefaultSettings = false   -- If set to true then the ESP script would run with default settings regardless of any changes you made.
        
        _G.TeamCheck = false   -- If set to true then the script would create ESP only for the enemy team members.
        
        _G.ESPVisible = name   -- If set to true then the ESP will be visible and vice versa.
        _G.TextColor = Color3.fromRGB(255, 255, 255)  -- The color that the boxes would appear as.
        _G.TextSize = 14   -- The size of the text.
        _G.Center = true   -- If set to true then the script would be located at the center of the label.
        _G.Outline = false   -- If set to true then the text would have an outline.
        _G.OutlineColor = Color3.fromRGB(0, 0, 0)   -- The outline color of the text.
        _G.TextTransparency = 0.7   -- The transparency of the text.
        _G.TextFont = Drawing.Fonts.UI   -- The font of the text. (UI, System, Plex, Monospace) 
        
        _G.DisableKey = Enum.KeyCode.Y   -- The key that disables / enables the ESP.
        
        local function CreateESP()
            for _, v in next, Players:GetPlayers() do
                if v.Name ~= Players.LocalPlayer.Name then
                    local ESP = Drawing.new("Text")
        
                    RunService.RenderStepped:Connect(function()
                        if workspace:FindFirstChild(v.Name) ~= nil and workspace[v.Name]:FindFirstChild("HumanoidRootPart") ~= nil then
                            local Vector, OnScreen = Camera:WorldToViewportPoint(workspace[v.Name]:WaitForChild("Head", math.huge).Position)
        
                            ESP.Size = _G.TextSize
                            ESP.Center = _G.Center
                            ESP.Outline = _G.Outline
                            ESP.OutlineColor = _G.OutlineColor
                            ESP.Color = _G.TextColor
                            ESP.Transparency = _G.TextTransparency
                            ESP.Font = _G.TextFont
        
                            if OnScreen == true then
                                local Part1 = workspace:WaitForChild(v.Name, math.huge):WaitForChild("HumanoidRootPart", math.huge).Position
                                local Part2 = workspace:WaitForChild(Players.LocalPlayer.Name, math.huge):WaitForChild("HumanoidRootPart", math.huge).Position or 0
                                local Dist = (Part1 - Part2).Magnitude
                                ESP.Position = Vector2.new(Vector.X, Vector.Y - 25)
                                ESP.Text = ("("..tostring(math.floor(tonumber(Dist)))..") "..v.Name.." ["..workspace[v.Name].Humanoid.Health.."]")
                                if _G.TeamCheck == true then 
                                    if Players.LocalPlayer.Team ~= v.Team then
                                        ESP.Visible = _G.ESPVisible
                                    else
                                        ESP.Visible = false
                                    end
                                else
                                    ESP.Visible = _G.ESPVisible
                                end
                            else
                                ESP.Visible = false
                            end
                        else
                            ESP.Visible = false
                        end
                    end)
        
                    Players.PlayerRemoving:Connect(function()
                        ESP.Visible = false
                    end)
                end
            end
        
            Players.PlayerAdded:Connect(function(Player)
                Player.CharacterAdded:Connect(function(v)
                    if v.Name ~= Players.LocalPlayer.Name then 
                        local ESP = Drawing.new("Text")
            
                        RunService.RenderStepped:Connect(function()
                            if workspace:FindFirstChild(v.Name) ~= nil and workspace[v.Name]:FindFirstChild("HumanoidRootPart") ~= nil then
                                local Vector, OnScreen = Camera:WorldToViewportPoint(workspace[v.Name]:WaitForChild("Head", math.huge).Position)
            
                                ESP.Size = _G.TextSize
                                ESP.Center = _G.Center
                                ESP.Outline = _G.Outline
                                ESP.OutlineColor = _G.OutlineColor
                                ESP.Color = _G.TextColor
                                ESP.Transparency = _G.TextTransparency
            
                                if OnScreen == true then
                                    local Part1 = workspace:WaitForChild(v.Name, math.huge):WaitForChild("HumanoidRootPart", math.huge).Position
                                local Part2 = workspace:WaitForChild(Players.LocalPlayer.Name, math.huge):WaitForChild("HumanoidRootPart", math.huge).Position or 0
                                    local Dist = (Part1 - Part2).Magnitude
                                    ESP.Position = Vector2.new(Vector.X, Vector.Y - 25)
                                    ESP.Text = ("("..tostring(math.floor(tonumber(Dist)))..") "..v.Name.." ["..workspace[v.Name].Humanoid.Health.."]")
                                    if _G.TeamCheck == true then 
                                        if Players.LocalPlayer.Team ~= Player.Team then
                                            ESP.Visible = _G.ESPVisible
                                        else
                                            ESP.Visible = false
                                        end
                                    else
                                        ESP.Visible = _G.ESPVisible
                                    end
                                else
                                    ESP.Visible = false
                                end
                            else
                                ESP.Visible = false
                            end
                        end)
            
                        Players.PlayerRemoving:Connect(function()
                            ESP.Visible = false
                        end)
                    end
                end)
            end)
        end
        
        if _G.DefaultSettings == true then
            _G.TeamCheck = false
            _G.ESPVisible = true
            _G.TextColor = Color3.fromRGB(40, 90, 255)
            _G.TextSize = 14
            _G.Center = true
            _G.Outline = false
            _G.OutlineColor = Color3.fromRGB(0, 0, 0)
            _G.DisableKey = Enum.KeyCode.Q
            _G.TextTransparency = 0.75
        end
        
        UserInputService.TextBoxFocused:Connect(function()
            Typing = true
        end)
        
        UserInputService.TextBoxFocusReleased:Connect(function()
            Typing = false
        end)
        
        UserInputService.InputBegan:Connect(function(Input)
            if Input.KeyCode == _G.DisableKey and Typing == false then
                _G.ESPVisible = not _G.ESPVisible
                
                if _G.SendNotifications == true then
                    game:GetService("StarterGui"):SetCore("SendNotification",{
                        Title = "Exunys Developer";
                        Text = "The ESP's visibility is now set to "..tostring(_G.ESPVisible)..".";
                        Duration = 5;
                    })
                end
            end
        end)
        
        local Success, Errored = pcall(function()
            CreateESP()
        end)
        
        if Success and not Errored then
            if _G.SendNotifications == true then
                game:GetService("StarterGui"):SetCore("SendNotification",{
                    Title = "Epic gamer esp";
                    Text = "Epic gamer esp has been successful loaded";
                    Duration = 5;
                })
            end
        elseif Errored and not Success then
            if _G.SendNotifications == true then
                game:GetService("StarterGui"):SetCore("SendNotification",{
                    Title = "Ash01 Developer";
                    Text = "ESP script has errored while loading, please check the developer console! (F9)";
                    Duration = 5;
                })
            end
            TestService:Message("The ESP script has errored, please notify Ash01 with the following information :")
            warn(Errored)
            print("!! IF THE ERROR IS A FALSE POSITIVE (says that a player cannot be found) THEN DO NOT BOTHER !!")
        end
        end)

Section2:NewToggle("Tracer", "Tracer toggle yes", function(tracer)
    local function API_Check()
        if Drawing == nil then
            return "No"
        else
            return "Yes"
        end
    end
    
    local Find_Required = API_Check()
    
    if Find_Required == "No" then
        game:GetService("StarterGui"):SetCore("SendNotification",{
            Title = "An error lol";
            Text = "Tracer script could not be loaded because your exploit is unsupported.";
            Duration = math.huge;
            Button1 = "OK"
        })
    
        return
    end
    
    local RunService = game:GetService("RunService")
    local Players = game:GetService("Players")
    local Camera = game:GetService("Workspace").CurrentCamera
    local UserInputService = game:GetService("UserInputService")
    local TestService = game:GetService("TestService")
    
    local Typing = false
    
    _G.SendNotifications = false   -- If set to true then the script would notify you frequently on any changes applied and when loaded / errored. (If a game can detect this, it is recommended to set it to false)
    _G.DefaultSettings = false   -- If set to true then the tracer script would run with default settings regardless of any changes you made.
    
    _G.TeamCheck = false   -- If set to true then the script would create tracers only for the enemy team members.
    
    --[!]-- ONLY ONE OF THESE VALUES SHOULD BE SET TO TRUE TO NOT ERROR THE SCRIPT --[!]--
    
    _G.FromMouse = false   -- If set to true, the tracers will come from the position of your mouse curson on your screen.
    _G.FromCenter = false   -- If set to true, the tracers will come from the center of your screen.
    _G.FromBottom = true   -- If set to true, the tracers will come from the bottom of your screen.
    
    _G.TracersVisible = tracer   -- If set to true then the tracers will be visible and vice versa.
    _G.TracerColor = Color3.fromRGB(255, 255, 255)   -- The color that the tracers would appear as.
    _G.TracerThickness = 1   -- The thickness of the tracers.
    _G.TracerTransparency = 0.7   -- The transparency of the tracers.
    
    _G.ModeSkipKey = Enum.KeyCode.Y   -- The key that changes between modes that indicate where will the tracers come from.
    _G.DisableKey = Enum.KeyCode.Y   -- The key that disables / enables the tracers.
    
    local function CreateTracers()
        for _, v in next, Players:GetPlayers() do
            if v.Name ~= game.Players.LocalPlayer.Name then
                local TracerLine = Drawing.new("Line")
        
                RunService.RenderStepped:Connect(function()
                    if workspace:FindFirstChild(v.Name) ~= nil and workspace[v.Name]:FindFirstChild("HumanoidRootPart") ~= nil then
                        local HumanoidRootPart_Position, HumanoidRootPart_Size = workspace[v.Name].HumanoidRootPart.CFrame, workspace[v.Name].HumanoidRootPart.Size * 1
                        local Vector, OnScreen = Camera:WorldToViewportPoint(HumanoidRootPart_Position * CFrame.new(0, -HumanoidRootPart_Size.Y, 0).p)
                        
                        TracerLine.Thickness = _G.TracerThickness
                        TracerLine.Transparency = _G.TracerTransparency
                        TracerLine.Color = _G.TracerColor
    
                        if _G.FromMouse == true and _G.FromCenter == false and _G.FromBottom == false then
                            TracerLine.From = Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y)
                        elseif _G.FromMouse == false and _G.FromCenter == true and _G.FromBottom == false then
                            TracerLine.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
                        elseif _G.FromMouse == false and _G.FromCenter == false and _G.FromBottom == true then
                            TracerLine.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
                        end
    
                        if OnScreen == true  then
                            TracerLine.To = Vector2.new(Vector.X, Vector.Y)
                            if _G.TeamCheck == true then 
                                if Players.LocalPlayer.Team ~= v.Team then
                                    TracerLine.Visible = _G.TracersVisible
                                else
                                    TracerLine.Visible = false
                                end
                            else
                                TracerLine.Visible = _G.TracersVisible
                            end
                        else
                            TracerLine.Visible = false
                        end
                    else
                        TracerLine.Visible = false
                    end
                end)
    
                Players.PlayerRemoving:Connect(function()
                    TracerLine.Visible = false
                end)
            end
        end
    
        Players.PlayerAdded:Connect(function(Player)
            Player.CharacterAdded:Connect(function(v)
                if v.Name ~= game.Players.LocalPlayer.Name then
                    local TracerLine = Drawing.new("Line")
            
                    RunService.RenderStepped:Connect(function()
                        if workspace:FindFirstChild(v.Name) ~= nil and workspace[v.Name]:FindFirstChild("HumanoidRootPart") ~= nil then
                            local HumanoidRootPart_Position, HumanoidRootPart_Size = workspace[v.Name].HumanoidRootPart.CFrame, workspace[v.Name].HumanoidRootPart.Size * 1
                            local Vector, OnScreen = Camera:WorldToViewportPoint(HumanoidRootPart_Position * CFrame.new(0, -HumanoidRootPart_Size.Y, 0).p)
                            
                            TracerLine.Thickness = _G.TracerThickness
                            TracerLine.Transparency = _G.TracerTransparency
                            TracerLine.Color = _G.TracerColor
    
                            if _G.FromMouse == true and _G.FromCenter == false and _G.FromBottom == false then
                                TracerLine.From = Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y)
                            elseif _G.FromMouse == false and _G.FromCenter == true and _G.FromBottom == false then
                                TracerLine.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
                            elseif _G.FromMouse == false and _G.FromCenter == false and _G.FromBottom == true then
                                TracerLine.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
                            end
    
                            if OnScreen == true  then
                                TracerLine.To = Vector2.new(Vector.X, Vector.Y)
                                if _G.TeamCheck == true then 
                                    if Players.LocalPlayer.Team ~= Player.Team then
                                        TracerLine.Visible = _G.TracersVisible
                                    else
                                        TracerLine.Visible = false
                                    end
                                else
                                    TracerLine.Visible = _G.TracersVisible
                                end
                            else
                                TracerLine.Visible = false
                            end
                        else
                            TracerLine.Visible = false
                        end
                    end)
    
                    Players.PlayerRemoving:Connect(function()
                        TracerLine.Visible = false
                    end)
                end
            end)
        end)
    end
    
    UserInputService.TextBoxFocused:Connect(function()
        Typing = true
    end)
    
    UserInputService.TextBoxFocusReleased:Connect(function()
        Typing = false
    end)
    
    UserInputService.InputBegan:Connect(function(Input)
        if Input.KeyCode == _G.ModeSkipKey and Typing == false then
            if _G.FromMouse == true and _G.FromCenter == false and _G.FromBottom == false and _G.TracersVisible == true then
                _G.FromCenter = false
                _G.FromBottom = true
                _G.FromMouse = false
    
                if _G.SendNotifications == true then
                    game:GetService("StarterGui"):SetCore("SendNotification",{
                        Title = "Exunys Developer";
                        Text = "Tracers will be now coming from the bottom of your screen (Mode 1)";
                        Duration = 5;
                    })
                end
            elseif _G.FromMouse == false and _G.FromCenter == false and _G.FromBottom == true and _G.TracersVisible == true then
                _G.FromCenter = true
                _G.FromBottom = false
                _G.FromMouse = false
    
                if _G.SendNotifications == true then
                    game:GetService("StarterGui"):SetCore("SendNotification",{
                        Title = "Exunys Developer";
                        Text = "Tracers will be now coming from the center of your screen (Mode 2)";
                        Duration = 5;
                    })
                end
            elseif _G.FromMouse == false and _G.FromCenter == true and _G.FromBottom == false and _G.TracersVisible == true then
                _G.FromCenter = false
                _G.FromBottom = false
                _G.FromMouse = true
    
                if _G.SendNotifications == true then
                    game:GetService("StarterGui"):SetCore("SendNotification",{
                        Title = "Exunys Developer";
                        Text = "Tracers will be now coming from the position of your mouse cursor on your screen (Mode 3)";
                        Duration = 5;
                    })
                end
            end
        elseif Input.KeyCode == _G.DisableKey and Typing == false then
            _G.TracersVisible = not _G.TracersVisible
            
            if _G.SendNotifications == true then
                game:GetService("StarterGui"):SetCore("SendNotification",{
                    Title = "Exunys Developer";
                    Text = "The tracers' visibility is now set to "..tostring(_G.TracersVisible)..".";
                    Duration = 5;
                })
            end
        end
    end)
    
    if _G.DefaultSettings == true then
        _G.TeamCheck = false
        _G.FromMouse = false
        _G.FromCenter = false
        _G.FromBottom = true
        _G.TracersVisible = true
        _G.TracerColor = Color3.fromRGB(40, 90, 255)
        _G.TracerThickness = 1
        _G.TracerTransparency = 0.5
        _G.ModeSkipKey = Enum.KeyCode.E
        _G.DisableKey = Enum.KeyCode.Q
    end
    
    local Success, Errored = pcall(function()
        CreateTracers()
    end)
    
    if Success and not Errored then
        if _G.SendNotifications == true then
            game:GetService("StarterGui"):SetCore("SendNotification",{
                Title = "Maik Developer";
                Text = "Tracer script has successfully loaded.";
                Duration = 5;
            })
        end
    elseif Errored and not Success then
        if _G.SendNotifications == true then
            game:GetService("StarterGui"):SetCore("SendNotification",{
                Title = "Exunys Developer";
                Text = "Tracer script has errored while loading, please check the developer console! (F9)";
                Duration = 5;
            })
        end
        TestService:Message("The tracer script has errored, please notify Exunys with the following information :")
        warn(Errored)
        print("!! IF THE ERROR IS A FALSE POSITIVE (says that a player cannot be found) THEN DO NOT BOTHER !!")
    end
end)

Section2:NewToggle("Esp box", "esp box toggle yes", function(box)
    local function API_Check()
        if Drawing == nil then
            return "No"
        else
            return "Yes"
        end
    end
    
    local Find_Required = API_Check()
    
    if Find_Required == "No" then
        game:GetService("StarterGui"):SetCore("SendNotification",{
            Title = "An error lol";
            Text = "Boxes script could not be loaded because your exploit is unsupported.";
            Duration = math.huge;
            Button1 = "OK"
        })
    
        return
    end
    
    local Players = game:GetService("Players")
    local RunService = game:GetService("RunService")
    local UserInputService = game:GetService("UserInputService")
    local Camera = workspace.CurrentCamera
    
    local Typing = false
    
    _G.SendNotifications = false   -- If set to true then the script would notify you frequently on any changes applied and when loaded / errored. (If a game can detect this, it is recommended to set it to false)
    _G.DefaultSettings = false   -- If set to true then the boxes script would run with default settings regardless of any changes you made.
    
    _G.TeamCheck = false   -- If set to true then the script would create boxes only for the enemy team members.
    
    _G.BoxesVisible = box   -- If set to true then the boxes will be visible and vice versa.
    _G.LineColor = Color3.fromRGB(255, 255, 255)   -- The color that the boxes would appear as.
    _G.LineThickness = 1   -- The thickness of the boxes.
    _G.LineTransparency = 0.7   -- The transparency of the boxes.
    _G.SizeIncrease = 1   -- How much the box's size is increased (The size is multiplied by the value of this variable). (1 is default, anything more then 2 is not recommended) <float> / <int>
    
    _G.DisableKey = Enum.KeyCode.Y   -- The key that disables / enables the boxes.
    
    local function CreateBoxes()
        for _, v in next, Players:GetPlayers() do
            if v.Name ~= Players.LocalPlayer.Name then
                local TopLeftLine = Drawing.new("Line")
                local TopRightLine = Drawing.new("Line")
                local BottomLeftLine = Drawing.new("Line")
                local BottomRightLine = Drawing.new("Line")
    
                RunService.RenderStepped:Connect(function()
                    if workspace:FindFirstChild(v.Name) ~= nil and workspace[v.Name]:FindFirstChild("HumanoidRootPart") ~= nil then 
                        TopLeftLine.Thickness = _G.LineThickness
                        TopLeftLine.Transparency = _G.LineTransparency
                        TopLeftLine.Color = _G.LineColor
    
                        TopRightLine.Thickness = _G.LineThickness
                        TopRightLine.Transparency = _G.LineTransparency
                        TopRightLine.Color = _G.LineColor
    
                        BottomLeftLine.Thickness = _G.LineThickness
                        BottomLeftLine.Transparency = _G.LineTransparency
                        BottomLeftLine.Color = _G.LineColor
    
                        BottomRightLine.Thickness = _G.LineThickness
                        BottomRightLine.Transparency = _G.LineTransparency
                        BottomRightLine.Color = _G.LineColor
                        
                        local HumanoidRootPart_Position, HumanoidRootPart_Size = workspace[v.Name].HumanoidRootPart.CFrame, workspace[v.Name].HumanoidRootPart.Size * _G.SizeIncrease
    
                        local TopLeftPosition, TopLeftVisible = Camera:WorldToViewportPoint(HumanoidRootPart_Position * CFrame.new(HumanoidRootPart_Size.X,  HumanoidRootPart_Size.Y, 0).p)
                        local TopRightPosition, TopRightVisible = Camera:WorldToViewportPoint(HumanoidRootPart_Position * CFrame.new(-HumanoidRootPart_Size.X,  HumanoidRootPart_Size.Y, 0).p)
                        local BottomLeftPosition, BottomLeftVisible = Camera:WorldToViewportPoint(HumanoidRootPart_Position * CFrame.new(HumanoidRootPart_Size.X, -HumanoidRootPart_Size.Y, 0).p)
                        local BottomRightPosition, BottomRightVisible = Camera:WorldToViewportPoint(HumanoidRootPart_Position * CFrame.new(-HumanoidRootPart_Size.X, -HumanoidRootPart_Size.Y, 0).p)
    
                        if TopLeftVisible == true then
                            TopLeftLine.From = Vector2.new(TopLeftPosition.X, TopLeftPosition.Y)
                            TopLeftLine.To = Vector2.new(TopRightPosition.X, TopRightPosition.Y)
                            if _G.TeamCheck == true then 
                                if Players.LocalPlayer.Team ~= v.Team then
                                    TopLeftLine.Visible = _G.BoxesVisible
                                else
                                    TopLeftLine.Visible = false
                                end
                            else
                                TopLeftLine.Visible = _G.BoxesVisible
                            end
                        else
                            TopLeftLine.Visible = false
                        end
    
                        if TopRightVisible == true and _G.BoxesVisible == true then
                            TopRightLine.From = Vector2.new(TopRightPosition.X, TopRightPosition.Y)
                            TopRightLine.To = Vector2.new(BottomRightPosition.X, BottomRightPosition.Y)
                            if _G.TeamCheck == true then 
                                if Players.LocalPlayer.Team ~= v.Team then
                                    TopRightLine.Visible = _G.BoxesVisible
                                else
                                    TopRightLine.Visible = false
                                end
                            else
                                TopRightLine.Visible = _G.BoxesVisible
                            end
                        else
                            TopRightLine.Visible = false
                        end
    
                        if BottomLeftVisible == true and _G.BoxesVisible == true then
                            BottomLeftLine.From = Vector2.new(BottomLeftPosition.X, BottomLeftPosition.Y)
                            BottomLeftLine.To = Vector2.new(TopLeftPosition.X, TopLeftPosition.Y)
                            if _G.TeamCheck == true then 
                                if Players.LocalPlayer.Team ~= v.Team then
                                    BottomLeftLine.Visible = _G.BoxesVisible
                                else
                                    BottomLeftLine.Visible = false
                                end
                            else
                                BottomLeftLine.Visible = _G.BoxesVisible
                            end
                        else
                            BottomLeftLine.Visible = false
                        end
    
                        if BottomRightVisible == true and _G.BoxesVisible == true then
                            BottomRightLine.From = Vector2.new(BottomRightPosition.X, BottomRightPosition.Y)
                            BottomRightLine.To = Vector2.new(BottomLeftPosition.X, BottomLeftPosition.Y)
                            if _G.TeamCheck == true then 
                                if Players.LocalPlayer.Team ~= v.Team then
                                    BottomRightLine.Visible = _G.BoxesVisible
                                else
                                    BottomRightLine.Visible = false
                                end
                            else
                                BottomRightLine.Visible = _G.BoxesVisible
                            end
                        else
                            BottomRightLine.Visible = false
                        end
                    else
                        TopRightLine.Visible = false
                        TopLeftLine.Visible = false
                        BottomLeftLine.Visible = false
                        BottomRightLine.Visible = false
                    end
                end)
    
                Players.PlayerRemoving:Connect(function()
                    TopRightLine.Visible = false
                    TopLeftLine.Visible = false
                    BottomLeftLine.Visible = false
                    BottomRightLine.Visible = false
                end)
            end
        end
    
        Players.PlayerAdded:Connect(function(Player)
            Player.CharacterAdded:Connect(function(v)
                if v.Name ~= Players.LocalPlayer.Name then
                    local TopLeftLine = Drawing.new("Line")
                    local TopRightLine = Drawing.new("Line")
                    local BottomLeftLine = Drawing.new("Line")
                    local BottomRightLine = Drawing.new("Line")
        
                    RunService.RenderStepped:Connect(function()
                        if workspace:FindFirstChild(v.Name) ~= nil and workspace[v.Name]:FindFirstChild("HumanoidRootPart") ~= nil then 
                            TopLeftLine.Thickness = _G.LineThickness
                            TopLeftLine.Transparency = _G.LineTransparency
                            TopLeftLine.Color = _G.LineColor
        
                            TopRightLine.Thickness = _G.LineThickness
                            TopRightLine.Transparency = _G.LineTransparency
                            TopRightLine.Color = _G.LineColor
        
                            BottomLeftLine.Thickness = _G.LineThickness
                            BottomLeftLine.Transparency = _G.LineTransparency
                            BottomLeftLine.Color = _G.LineColor
        
                            BottomRightLine.Thickness = _G.LineThickness
                            BottomRightLine.Transparency = _G.LineTransparency
                            BottomRightLine.Color = _G.LineColor
                            
                            local HumanoidRootPart_Position, HumanoidRootPart_Size = workspace[v.Name].HumanoidRootPart.CFrame, workspace[v.Name].HumanoidRootPart.Size * _G.SizeIncrease
        
                            local TopLeftPosition, TopLeftVisible = Camera:WorldToViewportPoint(HumanoidRootPart_Position * CFrame.new(HumanoidRootPart_Size.X,  HumanoidRootPart_Size.Y, 0).p)
                            local TopRightPosition, TopRightVisible = Camera:WorldToViewportPoint(HumanoidRootPart_Position * CFrame.new(-HumanoidRootPart_Size.X,  HumanoidRootPart_Size.Y, 0).p)
                            local BottomLeftPosition, BottomLeftVisible = Camera:WorldToViewportPoint(HumanoidRootPart_Position * CFrame.new(HumanoidRootPart_Size.X, -HumanoidRootPart_Size.Y, 0).p)
                            local BottomRightPosition, BottomRightVisible = Camera:WorldToViewportPoint(HumanoidRootPart_Position * CFrame.new(-HumanoidRootPart_Size.X, -HumanoidRootPart_Size.Y, 0).p)
        
                            if TopLeftVisible == true then
                                TopLeftLine.From = Vector2.new(TopLeftPosition.X, TopLeftPosition.Y)
                                TopLeftLine.To = Vector2.new(TopRightPosition.X, TopRightPosition.Y)
                                if _G.TeamCheck == true then 
                                    if Players.LocalPlayer.Team ~= Player.Team then
                                        TopLeftLine.Visible = _G.BoxesVisible
                                    else
                                        TopLeftLine.Visible = false
                                    end
                                else
                                    TopLeftLine.Visible = _G.BoxesVisible
                                end
                            else
                                TopLeftLine.Visible = false
                            end
        
                            if TopRightVisible == true and _G.BoxesVisible == true then
                                TopRightLine.From = Vector2.new(TopRightPosition.X, TopRightPosition.Y)
                                TopRightLine.To = Vector2.new(BottomRightPosition.X, BottomRightPosition.Y)
                                if _G.TeamCheck == true then 
                                    if Players.LocalPlayer.Team ~= Player.Team then
                                        TopRightLine.Visible = _G.BoxesVisible
                                    else
                                        TopRightLine.Visible = false
                                    end
                                else
                                    TopRightLine.Visible = _G.BoxesVisible
                                end
                            else
                                TopRightLine.Visible = false
                            end
        
                            if BottomLeftVisible == true and _G.BoxesVisible == true then
                                BottomLeftLine.From = Vector2.new(BottomLeftPosition.X, BottomLeftPosition.Y)
                                BottomLeftLine.To = Vector2.new(TopLeftPosition.X, TopLeftPosition.Y)
                                if _G.TeamCheck == true then 
                                    if Players.LocalPlayer.Team ~= Player.Team then
                                        BottomLeftLine.Visible = _G.BoxesVisible
                                    else
                                        BottomLeftLine.Visible = false
                                    end
                                else
                                    BottomLeftLine.Visible = _G.BoxesVisible
                                end
                            else
                                BottomLeftLine.Visible = false
                            end
        
                            if BottomRightVisible == true and _G.BoxesVisible == true then
                                BottomRightLine.From = Vector2.new(BottomRightPosition.X, BottomRightPosition.Y)
                                BottomRightLine.To = Vector2.new(BottomLeftPosition.X, BottomLeftPosition.Y)
                                if _G.TeamCheck == true then 
                                    if Players.LocalPlayer.Team ~= Player.Team then
                                        BottomRightLine.Visible = _G.BoxesVisible
                                    else
                                        BottomRightLine.Visible = false
                                    end
                                else
                                    BottomRightLine.Visible = _G.BoxesVisible
                                end
                            else
                                BottomRightLine.Visible = false
                            end
                        else
                            TopRightLine.Visible = false
                            TopLeftLine.Visible = false
                            BottomLeftLine.Visible = false
                            BottomRightLine.Visible = false
                        end
                    end)
        
                    Players.PlayerRemoving:Connect(function()
                        TopRightLine.Visible = false
                        TopLeftLine.Visible = false
                        BottomLeftLine.Visible = false
                        BottomRightLine.Visible = false
                    end)
                end
            end)
        end)
    end
    
    if _G.DefaultSettings == true then
        _G.TeamCheck = false
        _G.BoxesVisible = rue
        _G.LineColor = Color3.fromRGB(40, 90, 255)
        _G.LineThickness = 1
        _G.LineTransparency = 0.5
        _G.SizeIncrease = 1.5
        _G.DisableKey = Enum.KeyCode.Q
    end
    
    UserInputService.TextBoxFocused:Connect(function()
        Typing = true
    end)
    
    UserInputService.TextBoxFocusReleased:Connect(function()
        Typing = false
    end)
    
    UserInputService.InputBegan:Connect(function(Input)
        if Input.KeyCode == _G.DisableKey and Typing == false then
            _G.BoxesVisible = not _G.BoxesVisible
            
            if _G.SendNotifications == true then
                game:GetService("StarterGui"):SetCore("SendNotification",{
                    Title = "Exunys Developer";
                    Text = "The boxes' visibility is now set to "..tostring(_G.BoxesVisible)..".";
                    Duration = 5;
                })
            end
        end
    end)
    
    local Success, Errored = pcall(function()
        CreateBoxes()
    end)
    
    if Success and not Errored then
        if _G.SendNotifications == true then
            game:GetService("StarterGui"):SetCore("SendNotification",{
                Title = "Maik";
                Text = "Boxes script has successfully loaded.";
                Duration = 5;
            })
        end
    elseif Errored and not Success then
        if _G.SendNotifications == true then
            game:GetService("StarterGui"):SetCore("SendNotification",{
                Title = "Exunys Developer";
                Text = "Boxes script has errored while loading, please check the developer console! (F9)";
                Duration = 5;
            })
        end
        TestService:Message("The boxes script has errored, please notify Exunys with the following information :")
        warn(Errored)
        print("!! IF THE ERROR IS A FALSE POSITIVE (says that a player cannot be found) THEN DO NOT BOTHER !!")
    end
end)

Section2:NewToggle("Name esp teamcheck", "name esp teamcheck toggle yes", function(name)
    local function API_Check()
        if Drawing == nil then
            return "No"
        else
            return "Yes"
        end
    end
    
    local Find_Required = API_Check()
    
    if Find_Required == "No" then
        game:GetService("StarterGui"):SetCore("SendNotification",{
            Title = "An error lol";
            Text = "ESP script could not be loaded because your exploit is unsupported.";
            Duration = math.huge;
            Button1 = "OK"
        })
    
        return
    end
    
    local Players = game:GetService("Players")
    local RunService = game:GetService("RunService")
    local UserInputService = game:GetService("UserInputService")
    local Camera = workspace.CurrentCamera
    
    local Typing = false
    
    _G.SendNotifications = false   -- If set to true then the script would notify you frequently on any changes applied and when loaded / errored. (If a game can detect this, it is recommended to set it to false)
    _G.DefaultSettings = false   -- If set to true then the ESP script would run with default settings regardless of any changes you made.
    
    _G.TeamCheck = true   -- If set to true then the script would create ESP only for the enemy team members.
    
    _G.ESPVisible = name   -- If set to true then the ESP will be visible and vice versa.
    _G.TextColor = Color3.fromRGB(255, 255, 255)  -- The color that the boxes would appear as.
    _G.TextSize = 14   -- The size of the text.
    _G.Center = true   -- If set to true then the script would be located at the center of the label.
    _G.Outline = false   -- If set to true then the text would have an outline.
    _G.OutlineColor = Color3.fromRGB(0, 0, 0)   -- The outline color of the text.
    _G.TextTransparency = 0.7   -- The transparency of the text.
    _G.TextFont = Drawing.Fonts.UI   -- The font of the text. (UI, System, Plex, Monospace) 
    
    _G.DisableKey = Enum.KeyCode.Y   -- The key that disables / enables the ESP.
    
    local function CreateESP()
        for _, v in next, Players:GetPlayers() do
            if v.Name ~= Players.LocalPlayer.Name then
                local ESP = Drawing.new("Text")
    
                RunService.RenderStepped:Connect(function()
                    if workspace:FindFirstChild(v.Name) ~= nil and workspace[v.Name]:FindFirstChild("HumanoidRootPart") ~= nil then
                        local Vector, OnScreen = Camera:WorldToViewportPoint(workspace[v.Name]:WaitForChild("Head", math.huge).Position)
    
                        ESP.Size = _G.TextSize
                        ESP.Center = _G.Center
                        ESP.Outline = _G.Outline
                        ESP.OutlineColor = _G.OutlineColor
                        ESP.Color = _G.TextColor
                        ESP.Transparency = _G.TextTransparency
                        ESP.Font = _G.TextFont
    
                        if OnScreen == true then
                            local Part1 = workspace:WaitForChild(v.Name, math.huge):WaitForChild("HumanoidRootPart", math.huge).Position
                            local Part2 = workspace:WaitForChild(Players.LocalPlayer.Name, math.huge):WaitForChild("HumanoidRootPart", math.huge).Position or 0
                            local Dist = (Part1 - Part2).Magnitude
                            ESP.Position = Vector2.new(Vector.X, Vector.Y - 25)
                            ESP.Text = ("("..tostring(math.floor(tonumber(Dist)))..") "..v.Name.." ["..workspace[v.Name].Humanoid.Health.."]")
                            if _G.TeamCheck == true then 
                                if Players.LocalPlayer.Team ~= v.Team then
                                    ESP.Visible = _G.ESPVisible
                                else
                                    ESP.Visible = false
                                end
                            else
                                ESP.Visible = _G.ESPVisible
                            end
                        else
                            ESP.Visible = false
                        end
                    else
                        ESP.Visible = false
                    end
                end)
    
                Players.PlayerRemoving:Connect(function()
                    ESP.Visible = false
                end)
            end
        end
    
        Players.PlayerAdded:Connect(function(Player)
            Player.CharacterAdded:Connect(function(v)
                if v.Name ~= Players.LocalPlayer.Name then 
                    local ESP = Drawing.new("Text")
        
                    RunService.RenderStepped:Connect(function()
                        if workspace:FindFirstChild(v.Name) ~= nil and workspace[v.Name]:FindFirstChild("HumanoidRootPart") ~= nil then
                            local Vector, OnScreen = Camera:WorldToViewportPoint(workspace[v.Name]:WaitForChild("Head", math.huge).Position)
        
                            ESP.Size = _G.TextSize
                            ESP.Center = _G.Center
                            ESP.Outline = _G.Outline
                            ESP.OutlineColor = _G.OutlineColor
                            ESP.Color = _G.TextColor
                            ESP.Transparency = _G.TextTransparency
        
                            if OnScreen == true then
                                local Part1 = workspace:WaitForChild(v.Name, math.huge):WaitForChild("HumanoidRootPart", math.huge).Position
                            local Part2 = workspace:WaitForChild(Players.LocalPlayer.Name, math.huge):WaitForChild("HumanoidRootPart", math.huge).Position or 0
                                local Dist = (Part1 - Part2).Magnitude
                                ESP.Position = Vector2.new(Vector.X, Vector.Y - 25)
                                ESP.Text = ("("..tostring(math.floor(tonumber(Dist)))..") "..v.Name.." ["..workspace[v.Name].Humanoid.Health.."]")
                                if _G.TeamCheck == true then 
                                    if Players.LocalPlayer.Team ~= Player.Team then
                                        ESP.Visible = _G.ESPVisible
                                    else
                                        ESP.Visible = false
                                    end
                                else
                                    ESP.Visible = _G.ESPVisible
                                end
                            else
                                ESP.Visible = false
                            end
                        else
                            ESP.Visible = false
                        end
                    end)
        
                    Players.PlayerRemoving:Connect(function()
                        ESP.Visible = false
                    end)
                end
            end)
        end)
    end
    
    if _G.DefaultSettings == true then
        _G.TeamCheck = false
        _G.ESPVisible = true
        _G.TextColor = Color3.fromRGB(40, 90, 255)
        _G.TextSize = 14
        _G.Center = true
        _G.Outline = false
        _G.OutlineColor = Color3.fromRGB(0, 0, 0)
        _G.DisableKey = Enum.KeyCode.Q
        _G.TextTransparency = 0.75
    end
    
    UserInputService.TextBoxFocused:Connect(function()
        Typing = true
    end)
    
    UserInputService.TextBoxFocusReleased:Connect(function()
        Typing = false
    end)
    
    UserInputService.InputBegan:Connect(function(Input)
        if Input.KeyCode == _G.DisableKey and Typing == false then
            _G.ESPVisible = not _G.ESPVisible
            
            if _G.SendNotifications == true then
                game:GetService("StarterGui"):SetCore("SendNotification",{
                    Title = "Exunys Developer";
                    Text = "The ESP's visibility is now set to "..tostring(_G.ESPVisible)..".";
                    Duration = 5;
                })
            end
        end
    end)
    
    local Success, Errored = pcall(function()
        CreateESP()
    end)
    
    if Success and not Errored then
        if _G.SendNotifications == true then
            game:GetService("StarterGui"):SetCore("SendNotification",{
                Title = "Epic gamer esp";
                Text = "Epic gamer esp has been successful loaded";
                Duration = 5;
            })
        end
    elseif Errored and not Success then
        if _G.SendNotifications == true then
            game:GetService("StarterGui"):SetCore("SendNotification",{
                Title = "Ash01 Developer";
                Text = "ESP script has errored while loading, please check the developer console! (F9)";
                Duration = 5;
            })
        end
        TestService:Message("The ESP script has errored, please notify Ash01 with the following information :")
        warn(Errored)
        print("!! IF THE ERROR IS A FALSE POSITIVE (says that a player cannot be found) THEN DO NOT BOTHER !!")
    end
    end)

    Section2:NewToggle("Tracer teamcheck", "Tracer teamcheck toggle yes", function(tracer)
        local function API_Check()
            if Drawing == nil then
                return "No"
            else
                return "Yes"
            end
        end
        
        local Find_Required = API_Check()
        
        if Find_Required == "No" then
            game:GetService("StarterGui"):SetCore("SendNotification",{
                Title = "An error lol";
                Text = "Tracer script could not be loaded because your exploit is unsupported.";
                Duration = math.huge;
                Button1 = "OK"
            })
        
            return
        end
        
        local RunService = game:GetService("RunService")
        local Players = game:GetService("Players")
        local Camera = game:GetService("Workspace").CurrentCamera
        local UserInputService = game:GetService("UserInputService")
        local TestService = game:GetService("TestService")
        
        local Typing = false
        
        _G.SendNotifications = false   -- If set to true then the script would notify you frequently on any changes applied and when loaded / errored. (If a game can detect this, it is recommended to set it to false)
        _G.DefaultSettings = false   -- If set to true then the tracer script would run with default settings regardless of any changes you made.
        
        _G.TeamCheck = true   -- If set to true then the script would create tracers only for the enemy team members.
        
        --[!]-- ONLY ONE OF THESE VALUES SHOULD BE SET TO TRUE TO NOT ERROR THE SCRIPT --[!]--
        
        _G.FromMouse = false   -- If set to true, the tracers will come from the position of your mouse curson on your screen.
        _G.FromCenter = false   -- If set to true, the tracers will come from the center of your screen.
        _G.FromBottom = true   -- If set to true, the tracers will come from the bottom of your screen.
        
        _G.TracersVisible = tracer   -- If set to true then the tracers will be visible and vice versa.
        _G.TracerColor = Color3.fromRGB(255, 255, 255)   -- The color that the tracers would appear as.
        _G.TracerThickness = 1   -- The thickness of the tracers.
        _G.TracerTransparency = 0.7   -- The transparency of the tracers.
        
        _G.ModeSkipKey = Enum.KeyCode.Y   -- The key that changes between modes that indicate where will the tracers come from.
        _G.DisableKey = Enum.KeyCode.Y   -- The key that disables / enables the tracers.
        
        local function CreateTracers()
            for _, v in next, Players:GetPlayers() do
                if v.Name ~= game.Players.LocalPlayer.Name then
                    local TracerLine = Drawing.new("Line")
            
                    RunService.RenderStepped:Connect(function()
                        if workspace:FindFirstChild(v.Name) ~= nil and workspace[v.Name]:FindFirstChild("HumanoidRootPart") ~= nil then
                            local HumanoidRootPart_Position, HumanoidRootPart_Size = workspace[v.Name].HumanoidRootPart.CFrame, workspace[v.Name].HumanoidRootPart.Size * 1
                            local Vector, OnScreen = Camera:WorldToViewportPoint(HumanoidRootPart_Position * CFrame.new(0, -HumanoidRootPart_Size.Y, 0).p)
                            
                            TracerLine.Thickness = _G.TracerThickness
                            TracerLine.Transparency = _G.TracerTransparency
                            TracerLine.Color = _G.TracerColor
        
                            if _G.FromMouse == true and _G.FromCenter == false and _G.FromBottom == false then
                                TracerLine.From = Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y)
                            elseif _G.FromMouse == false and _G.FromCenter == true and _G.FromBottom == false then
                                TracerLine.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
                            elseif _G.FromMouse == false and _G.FromCenter == false and _G.FromBottom == true then
                                TracerLine.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
                            end
        
                            if OnScreen == true  then
                                TracerLine.To = Vector2.new(Vector.X, Vector.Y)
                                if _G.TeamCheck == true then 
                                    if Players.LocalPlayer.Team ~= v.Team then
                                        TracerLine.Visible = _G.TracersVisible
                                    else
                                        TracerLine.Visible = false
                                    end
                                else
                                    TracerLine.Visible = _G.TracersVisible
                                end
                            else
                                TracerLine.Visible = false
                            end
                        else
                            TracerLine.Visible = false
                        end
                    end)
        
                    Players.PlayerRemoving:Connect(function()
                        TracerLine.Visible = false
                    end)
                end
            end
        
            Players.PlayerAdded:Connect(function(Player)
                Player.CharacterAdded:Connect(function(v)
                    if v.Name ~= game.Players.LocalPlayer.Name then
                        local TracerLine = Drawing.new("Line")
                
                        RunService.RenderStepped:Connect(function()
                            if workspace:FindFirstChild(v.Name) ~= nil and workspace[v.Name]:FindFirstChild("HumanoidRootPart") ~= nil then
                                local HumanoidRootPart_Position, HumanoidRootPart_Size = workspace[v.Name].HumanoidRootPart.CFrame, workspace[v.Name].HumanoidRootPart.Size * 1
                                local Vector, OnScreen = Camera:WorldToViewportPoint(HumanoidRootPart_Position * CFrame.new(0, -HumanoidRootPart_Size.Y, 0).p)
                                
                                TracerLine.Thickness = _G.TracerThickness
                                TracerLine.Transparency = _G.TracerTransparency
                                TracerLine.Color = _G.TracerColor
        
                                if _G.FromMouse == true and _G.FromCenter == false and _G.FromBottom == false then
                                    TracerLine.From = Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y)
                                elseif _G.FromMouse == false and _G.FromCenter == true and _G.FromBottom == false then
                                    TracerLine.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
                                elseif _G.FromMouse == false and _G.FromCenter == false and _G.FromBottom == true then
                                    TracerLine.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
                                end
        
                                if OnScreen == true  then
                                    TracerLine.To = Vector2.new(Vector.X, Vector.Y)
                                    if _G.TeamCheck == true then 
                                        if Players.LocalPlayer.Team ~= Player.Team then
                                            TracerLine.Visible = _G.TracersVisible
                                        else
                                            TracerLine.Visible = false
                                        end
                                    else
                                        TracerLine.Visible = _G.TracersVisible
                                    end
                                else
                                    TracerLine.Visible = false
                                end
                            else
                                TracerLine.Visible = false
                            end
                        end)
        
                        Players.PlayerRemoving:Connect(function()
                            TracerLine.Visible = false
                        end)
                    end
                end)
            end)
        end
        
        UserInputService.TextBoxFocused:Connect(function()
            Typing = true
        end)
        
        UserInputService.TextBoxFocusReleased:Connect(function()
            Typing = false
        end)
        
        UserInputService.InputBegan:Connect(function(Input)
            if Input.KeyCode == _G.ModeSkipKey and Typing == false then
                if _G.FromMouse == true and _G.FromCenter == false and _G.FromBottom == false and _G.TracersVisible == true then
                    _G.FromCenter = false
                    _G.FromBottom = true
                    _G.FromMouse = false
        
                    if _G.SendNotifications == true then
                        game:GetService("StarterGui"):SetCore("SendNotification",{
                            Title = "Exunys Developer";
                            Text = "Tracers will be now coming from the bottom of your screen (Mode 1)";
                            Duration = 5;
                        })
                    end
                elseif _G.FromMouse == false and _G.FromCenter == false and _G.FromBottom == true and _G.TracersVisible == true then
                    _G.FromCenter = true
                    _G.FromBottom = false
                    _G.FromMouse = false
        
                    if _G.SendNotifications == true then
                        game:GetService("StarterGui"):SetCore("SendNotification",{
                            Title = "Exunys Developer";
                            Text = "Tracers will be now coming from the center of your screen (Mode 2)";
                            Duration = 5;
                        })
                    end
                elseif _G.FromMouse == false and _G.FromCenter == true and _G.FromBottom == false and _G.TracersVisible == true then
                    _G.FromCenter = false
                    _G.FromBottom = false
                    _G.FromMouse = true
        
                    if _G.SendNotifications == true then
                        game:GetService("StarterGui"):SetCore("SendNotification",{
                            Title = "Exunys Developer";
                            Text = "Tracers will be now coming from the position of your mouse cursor on your screen (Mode 3)";
                            Duration = 5;
                        })
                    end
                end
            elseif Input.KeyCode == _G.DisableKey and Typing == false then
                _G.TracersVisible = not _G.TracersVisible
                
                if _G.SendNotifications == true then
                    game:GetService("StarterGui"):SetCore("SendNotification",{
                        Title = "Exunys Developer";
                        Text = "The tracers' visibility is now set to "..tostring(_G.TracersVisible)..".";
                        Duration = 5;
                    })
                end
            end
        end)
        
        if _G.DefaultSettings == true then
            _G.TeamCheck = false
            _G.FromMouse = false
            _G.FromCenter = false
            _G.FromBottom = true
            _G.TracersVisible = true
            _G.TracerColor = Color3.fromRGB(40, 90, 255)
            _G.TracerThickness = 1
            _G.TracerTransparency = 0.5
            _G.ModeSkipKey = Enum.KeyCode.E
            _G.DisableKey = Enum.KeyCode.Q
        end
        
        local Success, Errored = pcall(function()
            CreateTracers()
        end)
        
        if Success and not Errored then
            if _G.SendNotifications == true then
                game:GetService("StarterGui"):SetCore("SendNotification",{
                    Title = "Maik Developer";
                    Text = "Tracer script has successfully loaded.";
                    Duration = 5;
                })
            end
        elseif Errored and not Success then
            if _G.SendNotifications == true then
                game:GetService("StarterGui"):SetCore("SendNotification",{
                    Title = "Exunys Developer";
                    Text = "Tracer script has errored while loading, please check the developer console! (F9)";
                    Duration = 5;
                })
            end
            TestService:Message("The tracer script has errored, please notify Exunys with the following information :")
            warn(Errored)
            print("!! IF THE ERROR IS A FALSE POSITIVE (says that a player cannot be found) THEN DO NOT BOTHER !!")
        end
    end)

    Section2:NewToggle("Esp box teamcheck", "esp box teamcheck toggle yes", function(box)
        local function API_Check()
            if Drawing == nil then
                return "No"
            else
                return "Yes"
            end
        end
        
        local Find_Required = API_Check()
        
        if Find_Required == "No" then
            game:GetService("StarterGui"):SetCore("SendNotification",{
                Title = "An error lol";
                Text = "Boxes script could not be loaded because your exploit is unsupported.";
                Duration = math.huge;
                Button1 = "OK"
            })
        
            return
        end
        
        local Players = game:GetService("Players")
        local RunService = game:GetService("RunService")
        local UserInputService = game:GetService("UserInputService")
        local Camera = workspace.CurrentCamera
        
        local Typing = false
        
        _G.SendNotifications = false   -- If set to true then the script would notify you frequently on any changes applied and when loaded / errored. (If a game can detect this, it is recommended to set it to false)
        _G.DefaultSettings = false   -- If set to true then the boxes script would run with default settings regardless of any changes you made.
        
        _G.TeamCheck = true   -- If set to true then the script would create boxes only for the enemy team members.
        
        _G.BoxesVisible = box   -- If set to true then the boxes will be visible and vice versa.
        _G.LineColor = Color3.fromRGB(255, 255, 255)   -- The color that the boxes would appear as.
        _G.LineThickness = 1   -- The thickness of the boxes.
        _G.LineTransparency = 0.7   -- The transparency of the boxes.
        _G.SizeIncrease = 1   -- How much the box's size is increased (The size is multiplied by the value of this variable). (1 is default, anything more then 2 is not recommended) <float> / <int>
        
        _G.DisableKey = Enum.KeyCode.Y   -- The key that disables / enables the boxes.
        
        local function CreateBoxes()
            for _, v in next, Players:GetPlayers() do
                if v.Name ~= Players.LocalPlayer.Name then
                    local TopLeftLine = Drawing.new("Line")
                    local TopRightLine = Drawing.new("Line")
                    local BottomLeftLine = Drawing.new("Line")
                    local BottomRightLine = Drawing.new("Line")
        
                    RunService.RenderStepped:Connect(function()
                        if workspace:FindFirstChild(v.Name) ~= nil and workspace[v.Name]:FindFirstChild("HumanoidRootPart") ~= nil then 
                            TopLeftLine.Thickness = _G.LineThickness
                            TopLeftLine.Transparency = _G.LineTransparency
                            TopLeftLine.Color = _G.LineColor
        
                            TopRightLine.Thickness = _G.LineThickness
                            TopRightLine.Transparency = _G.LineTransparency
                            TopRightLine.Color = _G.LineColor
        
                            BottomLeftLine.Thickness = _G.LineThickness
                            BottomLeftLine.Transparency = _G.LineTransparency
                            BottomLeftLine.Color = _G.LineColor
        
                            BottomRightLine.Thickness = _G.LineThickness
                            BottomRightLine.Transparency = _G.LineTransparency
                            BottomRightLine.Color = _G.LineColor
                            
                            local HumanoidRootPart_Position, HumanoidRootPart_Size = workspace[v.Name].HumanoidRootPart.CFrame, workspace[v.Name].HumanoidRootPart.Size * _G.SizeIncrease
        
                            local TopLeftPosition, TopLeftVisible = Camera:WorldToViewportPoint(HumanoidRootPart_Position * CFrame.new(HumanoidRootPart_Size.X,  HumanoidRootPart_Size.Y, 0).p)
                            local TopRightPosition, TopRightVisible = Camera:WorldToViewportPoint(HumanoidRootPart_Position * CFrame.new(-HumanoidRootPart_Size.X,  HumanoidRootPart_Size.Y, 0).p)
                            local BottomLeftPosition, BottomLeftVisible = Camera:WorldToViewportPoint(HumanoidRootPart_Position * CFrame.new(HumanoidRootPart_Size.X, -HumanoidRootPart_Size.Y, 0).p)
                            local BottomRightPosition, BottomRightVisible = Camera:WorldToViewportPoint(HumanoidRootPart_Position * CFrame.new(-HumanoidRootPart_Size.X, -HumanoidRootPart_Size.Y, 0).p)
        
                            if TopLeftVisible == true then
                                TopLeftLine.From = Vector2.new(TopLeftPosition.X, TopLeftPosition.Y)
                                TopLeftLine.To = Vector2.new(TopRightPosition.X, TopRightPosition.Y)
                                if _G.TeamCheck == true then 
                                    if Players.LocalPlayer.Team ~= v.Team then
                                        TopLeftLine.Visible = _G.BoxesVisible
                                    else
                                        TopLeftLine.Visible = false
                                    end
                                else
                                    TopLeftLine.Visible = _G.BoxesVisible
                                end
                            else
                                TopLeftLine.Visible = false
                            end
        
                            if TopRightVisible == true and _G.BoxesVisible == true then
                                TopRightLine.From = Vector2.new(TopRightPosition.X, TopRightPosition.Y)
                                TopRightLine.To = Vector2.new(BottomRightPosition.X, BottomRightPosition.Y)
                                if _G.TeamCheck == true then 
                                    if Players.LocalPlayer.Team ~= v.Team then
                                        TopRightLine.Visible = _G.BoxesVisible
                                    else
                                        TopRightLine.Visible = false
                                    end
                                else
                                    TopRightLine.Visible = _G.BoxesVisible
                                end
                            else
                                TopRightLine.Visible = false
                            end
        
                            if BottomLeftVisible == true and _G.BoxesVisible == true then
                                BottomLeftLine.From = Vector2.new(BottomLeftPosition.X, BottomLeftPosition.Y)
                                BottomLeftLine.To = Vector2.new(TopLeftPosition.X, TopLeftPosition.Y)
                                if _G.TeamCheck == true then 
                                    if Players.LocalPlayer.Team ~= v.Team then
                                        BottomLeftLine.Visible = _G.BoxesVisible
                                    else
                                        BottomLeftLine.Visible = false
                                    end
                                else
                                    BottomLeftLine.Visible = _G.BoxesVisible
                                end
                            else
                                BottomLeftLine.Visible = false
                            end
        
                            if BottomRightVisible == true and _G.BoxesVisible == true then
                                BottomRightLine.From = Vector2.new(BottomRightPosition.X, BottomRightPosition.Y)
                                BottomRightLine.To = Vector2.new(BottomLeftPosition.X, BottomLeftPosition.Y)
                                if _G.TeamCheck == true then 
                                    if Players.LocalPlayer.Team ~= v.Team then
                                        BottomRightLine.Visible = _G.BoxesVisible
                                    else
                                        BottomRightLine.Visible = false
                                    end
                                else
                                    BottomRightLine.Visible = _G.BoxesVisible
                                end
                            else
                                BottomRightLine.Visible = false
                            end
                        else
                            TopRightLine.Visible = false
                            TopLeftLine.Visible = false
                            BottomLeftLine.Visible = false
                            BottomRightLine.Visible = false
                        end
                    end)
        
                    Players.PlayerRemoving:Connect(function()
                        TopRightLine.Visible = false
                        TopLeftLine.Visible = false
                        BottomLeftLine.Visible = false
                        BottomRightLine.Visible = false
                    end)
                end
            end
        
            Players.PlayerAdded:Connect(function(Player)
                Player.CharacterAdded:Connect(function(v)
                    if v.Name ~= Players.LocalPlayer.Name then
                        local TopLeftLine = Drawing.new("Line")
                        local TopRightLine = Drawing.new("Line")
                        local BottomLeftLine = Drawing.new("Line")
                        local BottomRightLine = Drawing.new("Line")
            
                        RunService.RenderStepped:Connect(function()
                            if workspace:FindFirstChild(v.Name) ~= nil and workspace[v.Name]:FindFirstChild("HumanoidRootPart") ~= nil then 
                                TopLeftLine.Thickness = _G.LineThickness
                                TopLeftLine.Transparency = _G.LineTransparency
                                TopLeftLine.Color = _G.LineColor
            
                                TopRightLine.Thickness = _G.LineThickness
                                TopRightLine.Transparency = _G.LineTransparency
                                TopRightLine.Color = _G.LineColor
            
                                BottomLeftLine.Thickness = _G.LineThickness
                                BottomLeftLine.Transparency = _G.LineTransparency
                                BottomLeftLine.Color = _G.LineColor
            
                                BottomRightLine.Thickness = _G.LineThickness
                                BottomRightLine.Transparency = _G.LineTransparency
                                BottomRightLine.Color = _G.LineColor
                                
                                local HumanoidRootPart_Position, HumanoidRootPart_Size = workspace[v.Name].HumanoidRootPart.CFrame, workspace[v.Name].HumanoidRootPart.Size * _G.SizeIncrease
            
                                local TopLeftPosition, TopLeftVisible = Camera:WorldToViewportPoint(HumanoidRootPart_Position * CFrame.new(HumanoidRootPart_Size.X,  HumanoidRootPart_Size.Y, 0).p)
                                local TopRightPosition, TopRightVisible = Camera:WorldToViewportPoint(HumanoidRootPart_Position * CFrame.new(-HumanoidRootPart_Size.X,  HumanoidRootPart_Size.Y, 0).p)
                                local BottomLeftPosition, BottomLeftVisible = Camera:WorldToViewportPoint(HumanoidRootPart_Position * CFrame.new(HumanoidRootPart_Size.X, -HumanoidRootPart_Size.Y, 0).p)
                                local BottomRightPosition, BottomRightVisible = Camera:WorldToViewportPoint(HumanoidRootPart_Position * CFrame.new(-HumanoidRootPart_Size.X, -HumanoidRootPart_Size.Y, 0).p)
            
                                if TopLeftVisible == true then
                                    TopLeftLine.From = Vector2.new(TopLeftPosition.X, TopLeftPosition.Y)
                                    TopLeftLine.To = Vector2.new(TopRightPosition.X, TopRightPosition.Y)
                                    if _G.TeamCheck == true then 
                                        if Players.LocalPlayer.Team ~= Player.Team then
                                            TopLeftLine.Visible = _G.BoxesVisible
                                        else
                                            TopLeftLine.Visible = false
                                        end
                                    else
                                        TopLeftLine.Visible = _G.BoxesVisible
                                    end
                                else
                                    TopLeftLine.Visible = false
                                end
            
                                if TopRightVisible == true and _G.BoxesVisible == true then
                                    TopRightLine.From = Vector2.new(TopRightPosition.X, TopRightPosition.Y)
                                    TopRightLine.To = Vector2.new(BottomRightPosition.X, BottomRightPosition.Y)
                                    if _G.TeamCheck == true then 
                                        if Players.LocalPlayer.Team ~= Player.Team then
                                            TopRightLine.Visible = _G.BoxesVisible
                                        else
                                            TopRightLine.Visible = false
                                        end
                                    else
                                        TopRightLine.Visible = _G.BoxesVisible
                                    end
                                else
                                    TopRightLine.Visible = false
                                end
            
                                if BottomLeftVisible == true and _G.BoxesVisible == true then
                                    BottomLeftLine.From = Vector2.new(BottomLeftPosition.X, BottomLeftPosition.Y)
                                    BottomLeftLine.To = Vector2.new(TopLeftPosition.X, TopLeftPosition.Y)
                                    if _G.TeamCheck == true then 
                                        if Players.LocalPlayer.Team ~= Player.Team then
                                            BottomLeftLine.Visible = _G.BoxesVisible
                                        else
                                            BottomLeftLine.Visible = false
                                        end
                                    else
                                        BottomLeftLine.Visible = _G.BoxesVisible
                                    end
                                else
                                    BottomLeftLine.Visible = false
                                end
            
                                if BottomRightVisible == true and _G.BoxesVisible == true then
                                    BottomRightLine.From = Vector2.new(BottomRightPosition.X, BottomRightPosition.Y)
                                    BottomRightLine.To = Vector2.new(BottomLeftPosition.X, BottomLeftPosition.Y)
                                    if _G.TeamCheck == true then 
                                        if Players.LocalPlayer.Team ~= Player.Team then
                                            BottomRightLine.Visible = _G.BoxesVisible
                                        else
                                            BottomRightLine.Visible = false
                                        end
                                    else
                                        BottomRightLine.Visible = _G.BoxesVisible
                                    end
                                else
                                    BottomRightLine.Visible = false
                                end
                            else
                                TopRightLine.Visible = false
                                TopLeftLine.Visible = false
                                BottomLeftLine.Visible = false
                                BottomRightLine.Visible = false
                            end
                        end)
            
                        Players.PlayerRemoving:Connect(function()
                            TopRightLine.Visible = false
                            TopLeftLine.Visible = false
                            BottomLeftLine.Visible = false
                            BottomRightLine.Visible = false
                        end)
                    end
                end)
            end)
        end
        
        if _G.DefaultSettings == true then
            _G.TeamCheck = false
            _G.BoxesVisible = rue
            _G.LineColor = Color3.fromRGB(40, 90, 255)
            _G.LineThickness = 1
            _G.LineTransparency = 0.5
            _G.SizeIncrease = 1.5
            _G.DisableKey = Enum.KeyCode.Q
        end
        
        UserInputService.TextBoxFocused:Connect(function()
            Typing = true
        end)
        
        UserInputService.TextBoxFocusReleased:Connect(function()
            Typing = false
        end)
        
        UserInputService.InputBegan:Connect(function(Input)
            if Input.KeyCode == _G.DisableKey and Typing == false then
                _G.BoxesVisible = not _G.BoxesVisible
                
                if _G.SendNotifications == true then
                    game:GetService("StarterGui"):SetCore("SendNotification",{
                        Title = "Exunys Developer";
                        Text = "The boxes' visibility is now set to "..tostring(_G.BoxesVisible)..".";
                        Duration = 5;
                    })
                end
            end
        end)
        
        local Success, Errored = pcall(function()
            CreateBoxes()
        end)
        
        if Success and not Errored then
            if _G.SendNotifications == true then
                game:GetService("StarterGui"):SetCore("SendNotification",{
                    Title = "Maik";
                    Text = "Boxes script has successfully loaded.";
                    Duration = 5;
                })
            end
        elseif Errored and not Success then
            if _G.SendNotifications == true then
                game:GetService("StarterGui"):SetCore("SendNotification",{
                    Title = "Exunys Developer";
                    Text = "Boxes script has errored while loading, please check the developer console! (F9)";
                    Duration = 5;
                })
            end
            TestService:Message("The boxes script has errored, please notify Exunys with the following information :")
            warn(Errored)
            print("!! IF THE ERROR IS A FALSE POSITIVE (says that a player cannot be found) THEN DO NOT BOTHER !!")
        end
    end)

Section3:NewButton("Btools", "Gives you btools", function()
    for i=2,4 do
        local btool = Instance.new("HopperBin")
        btool.BinType=i
        btool.Parent=game:service'Players'.LocalPlayer.Backpack
    end
    
    mouse = game:service'Players'.LocalPlayer:GetMouse()
    tool = Instance.new("Tool")
    tool.RequiresHandle = false
    tool.Name = "Unlock tool"
    tool.Activated:connect(function()
        if mouse.Target:IsA("BasePart") then
            mouse.Target.Locked=false
            print("Unlocked "..mouse.Target:GetFullName())
        end
    end)
    tool.Parent = game:service'Players'.LocalPlayer.Backpack
end)

Section3:NewButton("Old roblox ui", "Executes old roblox ui", function()
    loadstring(game:HttpGet("https://pastebin.com/raw/kC3dAMvt"))()
end)

Section3:NewButton("Fly v3", "Executes fly v3", function()
    local main = Instance.new("ScreenGui")
    local Frame = Instance.new("Frame")
    local up = Instance.new("TextButton")
    local down = Instance.new("TextButton")
    local onof = Instance.new("TextButton")
    local TextLabel = Instance.new("TextLabel")
    local plus = Instance.new("TextButton")
    local speed = Instance.new("TextLabel")
    local mine = Instance.new("TextButton")
    local closebutton = Instance.new("TextButton")
    local mini = Instance.new("TextButton")
    local mini2 = Instance.new("TextButton")
    
    main.Name = "main"
    main.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
    main.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    main.ResetOnSpawn = false
    
    Frame.Parent = main
    Frame.BackgroundColor3 = Color3.fromRGB(163, 255, 137)
    Frame.BorderColor3 = Color3.fromRGB(103, 221, 213)
    Frame.Position = UDim2.new(0.100320168, 0, 0.379746825, 0)
    Frame.Size = UDim2.new(0, 190, 0, 57)
    
    up.Name = "up"
    up.Parent = Frame
    up.BackgroundColor3 = Color3.fromRGB(79, 255, 152)
    up.Size = UDim2.new(0, 44, 0, 28)
    up.Font = Enum.Font.SourceSans
    up.Text = "UP"
    up.TextColor3 = Color3.fromRGB(0, 0, 0)
    up.TextSize = 14.000
    
    down.Name = "down"
    down.Parent = Frame
    down.BackgroundColor3 = Color3.fromRGB(215, 255, 121)
    down.Position = UDim2.new(0, 0, 0.491228074, 0)
    down.Size = UDim2.new(0, 44, 0, 28)
    down.Font = Enum.Font.SourceSans
    down.Text = "DOWN"
    down.TextColor3 = Color3.fromRGB(0, 0, 0)
    down.TextSize = 14.000
    
    onof.Name = "onof"
    onof.Parent = Frame
    onof.BackgroundColor3 = Color3.fromRGB(255, 249, 74)
    onof.Position = UDim2.new(0.702823281, 0, 0.491228074, 0)
    onof.Size = UDim2.new(0, 56, 0, 28)
    onof.Font = Enum.Font.SourceSans
    onof.Text = "fly"
    onof.TextColor3 = Color3.fromRGB(0, 0, 0)
    onof.TextSize = 14.000
    
    TextLabel.Parent = Frame
    TextLabel.BackgroundColor3 = Color3.fromRGB(242, 60, 255)
    TextLabel.Position = UDim2.new(0.469327301, 0, 0, 0)
    TextLabel.Size = UDim2.new(0, 100, 0, 28)
    TextLabel.Font = Enum.Font.SourceSans
    TextLabel.Text = "Fly GUI V3"
    TextLabel.TextColor3 = Color3.fromRGB(0, 0, 0)
    TextLabel.TextScaled = true
    TextLabel.TextSize = 14.000
    TextLabel.TextWrapped = true
    
    plus.Name = "plus"
    plus.Parent = Frame
    plus.BackgroundColor3 = Color3.fromRGB(133, 145, 255)
    plus.Position = UDim2.new(0.231578946, 0, 0, 0)
    plus.Size = UDim2.new(0, 45, 0, 28)
    plus.Font = Enum.Font.SourceSans
    plus.Text = "+"
    plus.TextColor3 = Color3.fromRGB(0, 0, 0)
    plus.TextScaled = true
    plus.TextSize = 14.000
    plus.TextWrapped = true
    
    speed.Name = "speed"
    speed.Parent = Frame
    speed.BackgroundColor3 = Color3.fromRGB(255, 85, 0)
    speed.Position = UDim2.new(0.468421042, 0, 0.491228074, 0)
    speed.Size = UDim2.new(0, 44, 0, 28)
    speed.Font = Enum.Font.SourceSans
    speed.Text = "1"
    speed.TextColor3 = Color3.fromRGB(0, 0, 0)
    speed.TextScaled = true
    speed.TextSize = 14.000
    speed.TextWrapped = true
    
    mine.Name = "mine"
    mine.Parent = Frame
    mine.BackgroundColor3 = Color3.fromRGB(123, 255, 247)
    mine.Position = UDim2.new(0.231578946, 0, 0.491228074, 0)
    mine.Size = UDim2.new(0, 45, 0, 29)
    mine.Font = Enum.Font.SourceSans
    mine.Text = "-"
    mine.TextColor3 = Color3.fromRGB(0, 0, 0)
    mine.TextScaled = true
    mine.TextSize = 14.000
    mine.TextWrapped = true
    
    closebutton.Name = "Close"
    closebutton.Parent = main.Frame
    closebutton.BackgroundColor3 = Color3.fromRGB(225, 25, 0)
    closebutton.Font = "SourceSans"
    closebutton.Size = UDim2.new(0, 45, 0, 28)
    closebutton.Text = "X"
    closebutton.TextSize = 30
    closebutton.Position =  UDim2.new(0, 0, -1, 27)
    
    mini.Name = "minimize"
    mini.Parent = main.Frame
    mini.BackgroundColor3 = Color3.fromRGB(192, 150, 230)
    mini.Font = "SourceSans"
    mini.Size = UDim2.new(0, 45, 0, 28)
    mini.Text = "-"
    mini.TextSize = 40
    mini.Position = UDim2.new(0, 44, -1, 27)
    
    mini2.Name = "minimize2"
    mini2.Parent = main.Frame
    mini2.BackgroundColor3 = Color3.fromRGB(192, 150, 230)
    mini2.Font = "SourceSans"
    mini2.Size = UDim2.new(0, 45, 0, 28)
    mini2.Text = "+"
    mini2.TextSize = 40
    mini2.Position = UDim2.new(0, 44, -1, 57)
    mini2.Visible = false
    
    speeds = 1
    
    local speaker = game:GetService("Players").LocalPlayer
    
    local chr = game.Players.LocalPlayer.Character
    local hum = chr and chr:FindFirstChildWhichIsA("Humanoid")
    
    nowe = false
    
    game:GetService("StarterGui"):SetCore("SendNotification", { 
        Title = "Fly GUI V3";
        Text = "By me_ozone and Quandale The Dinglish XII#3550";
        Icon = "rbxthumb://type=Asset&id=5107182114&w=150&h=150"})
    Duration = 5;
    
    Frame.Active = true -- main = gui
    Frame.Draggable = true
    
    onof.MouseButton1Down:connect(function()
    
        if nowe == true then
            nowe = false
    
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Climbing,true)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown,true)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Flying,true)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall,true)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.GettingUp,true)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping,true)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Landed,true)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Physics,true)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding,true)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll,true)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Running,true)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics,true)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated,true)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.StrafingNoPhysics,true)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Swimming,true)
            speaker.Character.Humanoid:ChangeState(Enum.HumanoidStateType.RunningNoPhysics)
        else 
            nowe = true
    
    
    
            for i = 1, speeds do
                spawn(function()
    
                    local hb = game:GetService("RunService").Heartbeat	
    
    
                    tpwalking = true
                    local chr = game.Players.LocalPlayer.Character
                    local hum = chr and chr:FindFirstChildWhichIsA("Humanoid")
                    while tpwalking and hb:Wait() and chr and hum and hum.Parent do
                        if hum.MoveDirection.Magnitude > 0 then
                            chr:TranslateBy(hum.MoveDirection)
                        end
                    end
    
                end)
            end
            game.Players.LocalPlayer.Character.Animate.Disabled = true
            local Char = game.Players.LocalPlayer.Character
            local Hum = Char:FindFirstChildOfClass("Humanoid") or Char:FindFirstChildOfClass("AnimationController")
    
            for i,v in next, Hum:GetPlayingAnimationTracks() do
                v:AdjustSpeed(0)
            end
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Climbing,false)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown,false)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Flying,false)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall,false)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.GettingUp,false)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping,false)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Landed,false)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Physics,false)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding,false)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll,false)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Running,false)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics,false)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated,false)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.StrafingNoPhysics,false)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Swimming,false)
            speaker.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Swimming)
        end
    
    
    
    
        if game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid").RigType == Enum.HumanoidRigType.R6 then
    
    
    
            local plr = game.Players.LocalPlayer
            local torso = plr.Character.Torso
            local flying = true
            local deb = true
            local ctrl = {f = 0, b = 0, l = 0, r = 0}
            local lastctrl = {f = 0, b = 0, l = 0, r = 0}
            local maxspeed = 50
            local speed = 0
    
    
            local bg = Instance.new("BodyGyro", torso)
            bg.P = 9e4
            bg.maxTorque = Vector3.new(9e9, 9e9, 9e9)
            bg.cframe = torso.CFrame
            local bv = Instance.new("BodyVelocity", torso)
            bv.velocity = Vector3.new(0,0.1,0)
            bv.maxForce = Vector3.new(9e9, 9e9, 9e9)
            if nowe == true then
                plr.Character.Humanoid.PlatformStand = true
            end
            while nowe == true or game:GetService("Players").LocalPlayer.Character.Humanoid.Health == 0 do
                game:GetService("RunService").RenderStepped:Wait()
    
                if ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0 then
                    speed = speed+.5+(speed/maxspeed)
                    if speed > maxspeed then
                        speed = maxspeed
                    end
                elseif not (ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0) and speed ~= 0 then
                    speed = speed-1
                    if speed < 0 then
                        speed = 0
                    end
                end
                if (ctrl.l + ctrl.r) ~= 0 or (ctrl.f + ctrl.b) ~= 0 then
                    bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (ctrl.f+ctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(ctrl.l+ctrl.r,(ctrl.f+ctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed
                    lastctrl = {f = ctrl.f, b = ctrl.b, l = ctrl.l, r = ctrl.r}
                elseif (ctrl.l + ctrl.r) == 0 and (ctrl.f + ctrl.b) == 0 and speed ~= 0 then
                    bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (lastctrl.f+lastctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(lastctrl.l+lastctrl.r,(lastctrl.f+lastctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed
                else
                    bv.velocity = Vector3.new(0,0,0)
                end
                --	game.Players.LocalPlayer.Character.Animate.Disabled = true
                bg.cframe = game.Workspace.CurrentCamera.CoordinateFrame * CFrame.Angles(-math.rad((ctrl.f+ctrl.b)*50*speed/maxspeed),0,0)
            end
            ctrl = {f = 0, b = 0, l = 0, r = 0}
            lastctrl = {f = 0, b = 0, l = 0, r = 0}
            speed = 0
            bg:Destroy()
            bv:Destroy()
            plr.Character.Humanoid.PlatformStand = false
            game.Players.LocalPlayer.Character.Animate.Disabled = false
            tpwalking = false
    
    
    
    
        else
            local plr = game.Players.LocalPlayer
            local UpperTorso = plr.Character.UpperTorso
            local flying = true
            local deb = true
            local ctrl = {f = 0, b = 0, l = 0, r = 0}
            local lastctrl = {f = 0, b = 0, l = 0, r = 0}
            local maxspeed = 50
            local speed = 0
    
    
            local bg = Instance.new("BodyGyro", UpperTorso)
            bg.P = 9e4
            bg.maxTorque = Vector3.new(9e9, 9e9, 9e9)
            bg.cframe = UpperTorso.CFrame
            local bv = Instance.new("BodyVelocity", UpperTorso)
            bv.velocity = Vector3.new(0,0.1,0)
            bv.maxForce = Vector3.new(9e9, 9e9, 9e9)
            if nowe == true then
                plr.Character.Humanoid.PlatformStand = true
            end
            while nowe == true or game:GetService("Players").LocalPlayer.Character.Humanoid.Health == 0 do
                wait()
    
                if ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0 then
                    speed = speed+.5+(speed/maxspeed)
                    if speed > maxspeed then
                        speed = maxspeed
                    end
                elseif not (ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0) and speed ~= 0 then
                    speed = speed-1
                    if speed < 0 then
                        speed = 0
                    end
                end
                if (ctrl.l + ctrl.r) ~= 0 or (ctrl.f + ctrl.b) ~= 0 then
                    bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (ctrl.f+ctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(ctrl.l+ctrl.r,(ctrl.f+ctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed
                    lastctrl = {f = ctrl.f, b = ctrl.b, l = ctrl.l, r = ctrl.r}
                elseif (ctrl.l + ctrl.r) == 0 and (ctrl.f + ctrl.b) == 0 and speed ~= 0 then
                    bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (lastctrl.f+lastctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(lastctrl.l+lastctrl.r,(lastctrl.f+lastctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed
                else
                    bv.velocity = Vector3.new(0,0,0)
                end
    
                bg.cframe = game.Workspace.CurrentCamera.CoordinateFrame * CFrame.Angles(-math.rad((ctrl.f+ctrl.b)*50*speed/maxspeed),0,0)
            end
            ctrl = {f = 0, b = 0, l = 0, r = 0}
            lastctrl = {f = 0, b = 0, l = 0, r = 0}
            speed = 0
            bg:Destroy()
            bv:Destroy()
            plr.Character.Humanoid.PlatformStand = false
            game.Players.LocalPlayer.Character.Animate.Disabled = false
            tpwalking = false
    
    
    
        end
    
    
    
    
    
    end)
    
    local tis
    
    up.MouseButton1Down:connect(function()
        tis = up.MouseEnter:connect(function()
            while tis do
                wait()
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0,1,0)
            end
        end)
    end)
    
    up.MouseLeave:connect(function()
        if tis then
            tis:Disconnect()
            tis = nil
        end
    end)
    
    local dis
    
    down.MouseButton1Down:connect(function()
        dis = down.MouseEnter:connect(function()
            while dis do
                wait()
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0,-1,0)
            end
        end)
    end)
    
    down.MouseLeave:connect(function()
        if dis then
            dis:Disconnect()
            dis = nil
        end
    end)
    
    
    game:GetService("Players").LocalPlayer.CharacterAdded:Connect(function(char)
        wait(0.7)
        game.Players.LocalPlayer.Character.Humanoid.PlatformStand = false
        game.Players.LocalPlayer.Character.Animate.Disabled = false
    
    end)
    
    
    plus.MouseButton1Down:connect(function()
        speeds = speeds + 1
        speed.Text = speeds
        if nowe == true then
    
    
            tpwalking = false
            for i = 1, speeds do
                spawn(function()
    
                    local hb = game:GetService("RunService").Heartbeat	
    
    
                    tpwalking = true
                    local chr = game.Players.LocalPlayer.Character
                    local hum = chr and chr:FindFirstChildWhichIsA("Humanoid")
                    while tpwalking and hb:Wait() and chr and hum and hum.Parent do
                        if hum.MoveDirection.Magnitude > 0 then
                            chr:TranslateBy(hum.MoveDirection)
                        end
                    end
    
                end)
            end
        end
    end)
    mine.MouseButton1Down:connect(function()
        if speeds == 1 then
            speed.Text = 'cannot be less than 1'
            wait(1)
            speed.Text = speeds
        else
            speeds = speeds - 1
            speed.Text = speeds
            if nowe == true then
                tpwalking = false
                for i = 1, speeds do
                    spawn(function()
    
                        local hb = game:GetService("RunService").Heartbeat	
    
    
                        tpwalking = true
                        local chr = game.Players.LocalPlayer.Character
                        local hum = chr and chr:FindFirstChildWhichIsA("Humanoid")
                        while tpwalking and hb:Wait() and chr and hum and hum.Parent do
                            if hum.MoveDirection.Magnitude > 0 then
                                chr:TranslateBy(hum.MoveDirection)
                            end
                        end
    
                    end)
                end
            end
        end
    end)
    
    closebutton.MouseButton1Click:Connect(function()
        main:Destroy()
    end)
    
    mini.MouseButton1Click:Connect(function()
        up.Visible = false
        down.Visible = false
        onof.Visible = false
        plus.Visible = false
        speed.Visible = false
        mine.Visible = false
        mini.Visible = false
        mini2.Visible = true
        main.Frame.BackgroundTransparency = 1
        closebutton.Position =  UDim2.new(0, 0, -1, 57)
    end)
    
    mini2.MouseButton1Click:Connect(function()
        up.Visible = true
        down.Visible = true
        onof.Visible = true
        plus.Visible = true
        speed.Visible = true
        mine.Visible = true
        mini.Visible = true
        mini2.Visible = false
        main.Frame.BackgroundTransparency = 0 
        closebutton.Position =  UDim2.new(0, 0, -1, 27)
    end)
end)

Section3:NewButton("Fps counter", "Executes Fps counter", function()
    repeat wait() until game:IsLoaded() wait(2)
    local ScreenGui = Instance.new("ScreenGui")
    local Fps = Instance.new("TextLabel")
     
    --Properties:
     
    ScreenGui.Parent = game.CoreGui
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
     
    Fps.Name = "Fps"
    Fps.Parent = ScreenGui
    Fps.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Fps.BackgroundTransparency = 1.000
    Fps.Position = UDim2.new(0.786138654, 0, 0, 0)
    Fps.Size = UDim2.new(0, 125, 0, 25)
    Fps.Font = Enum.Font.SourceSans
    Fps.TextColor3 = Color3.fromRGB(1,1,1)
    Fps.TextScaled = true
    Fps.TextSize = 14.000
    Fps.TextWrapped = true
     
    -- Scripts:
     
    local script = Instance.new('LocalScript', Fps)
    local RunService = game:GetService("RunService")
    RunService.RenderStepped:Connect(function(frame) -- This will fire every time a frame is rendered
    script.Parent.Text = ("FPS: "..math.round(1/frame)) 
    end)
end)

Section3:NewButton("Infinite Yield", "Executes Infinite Yield", function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()
end)

Section3:NewButton("Hitbox expander", "Executes Hitbox expander", function()
    _G.HeadSize = 20
    _G.Disabled = true
    
    game:GetService('RunService').RenderStepped:connect(function()
    if _G.Disabled then
    for i,v in next, game:GetService('Players'):GetPlayers() do
    if v.Name ~= game:GetService('Players').LocalPlayer.Name then
    pcall(function()
    v.Character.HumanoidRootPart.Size = Vector3.new(_G.HeadSize,_G.HeadSize,_G.HeadSize)
    v.Character.HumanoidRootPart.Transparency = 0.7
    v.Character.HumanoidRootPart.BrickColor = BrickColor.new("Really blue")
    v.Character.HumanoidRootPart.Material = "Neon"
    v.Character.HumanoidRootPart.CanCollide = false
    end)
    end
    end
    end
    end)
end)

Section3:NewButton("Ray tracing", "Executes RTX script", function()
    local a = game.Lighting
    a.Ambient = Color3.fromRGB(33, 33, 33)
    a.Brightness = 5.69
    a.ColorShift_Bottom = Color3.fromRGB(0, 0, 0)
    a.ColorShift_Top = Color3.fromRGB(255, 247, 237)
    a.EnvironmentDiffuseScale = 0.105
    a.EnvironmentSpecularScale = 0.522
    a.GlobalShadows = true
    a.OutdoorAmbient = Color3.fromRGB(51, 54, 67)
    a.ShadowSoftness = 0.18
    a.GeographicLatitude = -15.525
    a.ExposureCompensation = 0.75
    b.Enabled = true
    b.Intensity = 0.99
    b.Size = 9999 
    b.Threshold = 0
    local c = Instance.new("ColorCorrectionEffect", a)
    c.Brightness = 0.015
    c.Contrast = 0.25
    c.Enabled = true
    c.Saturation = 0.2
    c.TintColor = Color3.fromRGB(217, 145, 57)
    if getgenv().mode == "Summer" then
       c.TintColor = Color3.fromRGB(255, 220, 148)
    elseif getgenv().mode == "Autumn" then
       c.TintColor = Color3.fromRGB(217, 145, 57)
    else
       warn("No mode selected!")
       print("Please select a mode")
       b:Destroy()
       c:Destroy()
    end
    local d = Instance.new("DepthOfFieldEffect", a)
    d.Enabled = true
    d.FarIntensity = 0.077
    d.FocusDistance = 21.54
    d.InFocusRadius = 20.77
    d.NearIntensity = 0.277
    local e = Instance.new("ColorCorrectionEffect", a)
    e.Brightness = 0
    e.Contrast = -0.07
    e.Saturation = 0
    e.Enabled = true
    e.TintColor = Color3.fromRGB(255, 247, 239)
    local e2 = Instance.new("ColorCorrectionEffect", a)
    e2.Brightness = 0.2
    e2.Contrast = 0.45
    e2.Saturation = -0.1
    e2.Enabled = true
    e2.TintColor = Color3.fromRGB(255, 255, 255)
    local s = Instance.new("SunRaysEffect", a)
    s.Enabled = true
    s.Intensity = 0.01
    s.Spread = 0.146
end)    

Section3:NewButton("Full bright", "Removes shadows", function()
    local Light = game:GetService("Lighting")

    function dofullbright()
    Light.Ambient = Color3.new(1, 1, 1)
    Light.ColorShift_Bottom = Color3.new(1, 1, 1)
    Light.ColorShift_Top = Color3.new(1, 1, 1)
    end
    
    dofullbright()
    
    Light.LightingChanged:Connect(dofullbright)
end)

Section3:NewButton("Anti lag", "Removes Textures", function()
    local decalsyeeted = true -- Leaving this on makes games look shitty but the fps goes up by at least 20.
    local g = game
    local w = g.Workspace
    local l = g.Lighting
    local t = w.Terrain
    t.WaterWaveSize = 0
    t.WaterWaveSpeed = 0
    t.WaterReflectance = 0
    t.WaterTransparency = 0
    l.GlobalShadows = false
    l.FogEnd = 9e9
    l.Brightness = 0
    settings().Rendering.QualityLevel = "Level01"
    for i, v in pairs(g:GetDescendants()) do
        if v:IsA("Part") or v:IsA("Union") or v:IsA("CornerWedgePart") or v:IsA("TrussPart") then
            v.Material = "Plastic"
            v.Reflectance = 0
        elseif v:IsA("Decal") or v:IsA("Texture") and decalsyeeted then
            v.Transparency = 1
        elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then
            v.Lifetime = NumberRange.new(0)
        elseif v:IsA("Explosion") then
            v.BlastPressure = 1
            v.BlastRadius = 1
        elseif v:IsA("Fire") or v:IsA("SpotLight") or v:IsA("Smoke") then
            v.Enabled = false
        elseif v:IsA("MeshPart") then
            v.Material = "Plastic"
            v.Reflectance = 0
            v.TextureID = 10385902758728957
        end
    end
    for i, e in pairs(l:GetChildren()) do
        if e:IsA("BlurEffect") or e:IsA("SunRaysEffect") or e:IsA("ColorCorrectionEffect") or e:IsA("BloomEffect") or e:IsA("DepthOfFieldEffect") then
            e.Enabled = false
        end
    end
end)

Section4:NewButton("Bedwars 1 (Vape v4)", "Executes Vape V4", function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/7GrandDadPGN/VapeV4ForRoblox/main/NewMainScript.lua", true))()
end)

Section4:NewButton("Bedwars 2 (Jn hh gaming v2)", "Executes Jn hh gaming V2", function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/JNHHGaming/JN-HH-Gaming-2.0/main/JN%20HH%20Gaming%202.0"))()
end)

Section4:NewButton("Pet sim x (Blacktrap)", "Executes Blacktrap", function()
    loadstring(game:HttpGet("https://pastebin.com/raw/BdvUGb2q"))()
end)

Section4:NewButton("Adopt me(Diamond hub)", "Executes an adopt me script idk ", function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/BloxiYT/Diamond/main/AdoptMe"))()
end)

Section4:NewButton("Jailbreak", "Executes an jailbreak script idk ", function()
    loadstring(game:GetObjects("rbxassetid://3762448307")[1].Source)()
end)

Section4:NewButton("Combat warriors", "Executes an combat warriors script idk", function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/IsaaaKK/cwhb/main/cw.txt"))()
end)

Section4:NewButton("Bloxfruits", "Executes an bloxfruits script idk", function()
    loadstring(game:HttpGet("https://pastebin.com/raw/UCsB5xC3", true))()
end)

Section4:NewButton("Murder mystery 2 (Admin panel)", "Executes an Murder mstery 2 script idk", function()
    loadstring(game:HttpGet(('https://raw.githubusercontent.com/MarsQQ/ScriptHubScripts/master/MM2%20Admin%20Panel'),true))()
end)

Section4:NewButton("Meepcity", "Executes an meepcity script idk", function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/synolope/mpcity/main/mainscript.lua",true))()
end)

Section4:NewButton("Arsenal (Pwner hub Best script)", "Executes the best script", function()
    loadstring(game:HttpGet(("https://raw.githubusercontent.com/Maikderninja/Maikderninja/main/PWNERHUB.lua"), true))()
end)

Section4:NewButton("Dahood (Pwner hub best script)", "Executes the best script", function()
    loadstring(game:HttpGet(("https://raw.githubusercontent.com/Maikderninja/Maikderninja/main/PWNERHUB.lua"), true))()
end)

Section4:NewButton("Race clicker", "Executes an Race clicker script idk", function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/ToraIsMe2/ToraIsMe2/main/%40race2", true))()
end)

Section4:NewButton("Legends of speed", "Executes an Legends of speed script script idk", function()
    local library = loadstring(game:HttpGet("https://pastebin.com/raw/WME4s0kY", true))()

local example = library:CreateWindow({
  text = "Auto Stuff"
})

local island = library:CreateWindow({
  text = "Island TP"
})

local speed = library:CreateWindow({
  text = "Recommended Speed"
})

local eggs = library:CreateWindow({
  text = "Open Eggs"
})

local credits = library:CreateWindow({text='Credits'})
credits:AddLabel("Credits:ToxicParents#7542\nVersion 1.2\nwally: UI")

example:AddToggle("Auto Farm Orbs",function(state)
	_G.Farm = (state and true or false)
	wait()
	while _G.Farm == true do
		wait()
		game.ReplicatedStorage.rEvents.orbEvent:FireServer("collectOrb","Red Orb","City")
		game.ReplicatedStorage.rEvents.orbEvent:FireServer("collectOrb","Red Orb","City")
		game.ReplicatedStorage.rEvents.orbEvent:FireServer("collectOrb","Red Orb","City")
		game.ReplicatedStorage.rEvents.orbEvent:FireServer("collectOrb","Red Orb","City")
		game.ReplicatedStorage.rEvents.orbEvent:FireServer("collectOrb","Red Orb","City")
		game.ReplicatedStorage.rEvents.orbEvent:FireServer("collectOrb","Red Orb","City")
		game.ReplicatedStorage.rEvents.orbEvent:FireServer("collectOrb","Red Orb","City")
		game.ReplicatedStorage.rEvents.orbEvent:FireServer("collectOrb","Red Orb","City")
		game.ReplicatedStorage.rEvents.orbEvent:FireServer("collectOrb","Red Orb","City")
		game.ReplicatedStorage.rEvents.orbEvent:FireServer("collectOrb","Red Orb","City")
		game.ReplicatedStorage.rEvents.orbEvent:FireServer("collectOrb","Red Orb","City")
		game.ReplicatedStorage.rEvents.orbEvent:FireServer("collectOrb","Red Orb","City")
		game.ReplicatedStorage.rEvents.orbEvent:FireServer("collectOrb","Red Orb","City")
		game.ReplicatedStorage.rEvents.orbEvent:FireServer("collectOrb","Red Orb","City")
		game.ReplicatedStorage.rEvents.orbEvent:FireServer("collectOrb","Red Orb","City")
		game.ReplicatedStorage.rEvents.orbEvent:FireServer("collectOrb","Red Orb","City")
		game.ReplicatedStorage.rEvents.orbEvent:FireServer("collectOrb","Red Orb","City")
		game.ReplicatedStorage.rEvents.orbEvent:FireServer("collectOrb","Red Orb","City")
		end
		end)

example:AddToggle("Auto Farm Gems",function(state)
	_G.Gems = (state and true or false)
	wait()
	while _G.Gems == true do
		wait()
		game.ReplicatedStorage.rEvents.orbEvent:FireServer("collectOrb","Gem","City")
		game.ReplicatedStorage.rEvents.orbEvent:FireServer("collectOrb","Gem","City")
		game.ReplicatedStorage.rEvents.orbEvent:FireServer("collectOrb","Gem","City")
		game.ReplicatedStorage.rEvents.orbEvent:FireServer("collectOrb","Gem","City")
		game.ReplicatedStorage.rEvents.orbEvent:FireServer("collectOrb","Gem","City")
		game.ReplicatedStorage.rEvents.orbEvent:FireServer("collectOrb","Gem","City")
		game.ReplicatedStorage.rEvents.orbEvent:FireServer("collectOrb","Gem","City")
		game.ReplicatedStorage.rEvents.orbEvent:FireServer("collectOrb","Gem","City")
		game.ReplicatedStorage.rEvents.orbEvent:FireServer("collectOrb","Gem","City")
		game.ReplicatedStorage.rEvents.orbEvent:FireServer("collectOrb","Gem","City")
		game.ReplicatedStorage.rEvents.orbEvent:FireServer("collectOrb","Gem","City")
		game.ReplicatedStorage.rEvents.orbEvent:FireServer("collectOrb","Gem","City")
		game.ReplicatedStorage.rEvents.orbEvent:FireServer("collectOrb","Gem","City")
		game.ReplicatedStorage.rEvents.orbEvent:FireServer("collectOrb","Gem","City")
		game.ReplicatedStorage.rEvents.orbEvent:FireServer("collectOrb","Gem","City")
		game.ReplicatedStorage.rEvents.orbEvent:FireServer("collectOrb","Gem","City")
		game.ReplicatedStorage.rEvents.orbEvent:FireServer("collectOrb","Gem","City")
		game.ReplicatedStorage.rEvents.orbEvent:FireServer("collectOrb","Gem","City")
		game.ReplicatedStorage.rEvents.orbEvent:FireServer("collectOrb","Gem","City")
		game.ReplicatedStorage.rEvents.orbEvent:FireServer("collectOrb","Gem","City")
		game.ReplicatedStorage.rEvents.orbEvent:FireServer("collectOrb","Gem","City")
		game.ReplicatedStorage.rEvents.orbEvent:FireServer("collectOrb","Gem","City")
		game.ReplicatedStorage.rEvents.orbEvent:FireServer("collectOrb","Gem","City")
		game.ReplicatedStorage.rEvents.orbEvent:FireServer("collectOrb","Gem","City")
		game.ReplicatedStorage.rEvents.orbEvent:FireServer("collectOrb","Gem","City")
		game.ReplicatedStorage.rEvents.orbEvent:FireServer("collectOrb","Gem","City")
		game.ReplicatedStorage.rEvents.orbEvent:FireServer("collectOrb","Gem","City")
		game.ReplicatedStorage.rEvents.orbEvent:FireServer("collectOrb","Gem","City")
		end
		end)

		example:AddToggle("Auto Hoops",function(state)
	_G.Hoops = (state and true or false)
	wait()
	while _G.Hoops == true do
		wait()
    local children = workspace.Hoops:GetChildren()
    for i, child in ipairs(children) do
        if child.Name == "Hoop" then
            child.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
        end
        end
        end
		end)


example:AddToggle("Auto Rebirth",function(state)
	_G.Rebirth = (state and true or false)
	wait()
	while _G.Rebirth == true do
		wait()
		game.ReplicatedStorage.rEvents.rebirthEvent:FireServer("rebirthRequest")
		end
		end)

		island:AddButton("Spawn", function()
game.Players.LocalPlayer.Character:MoveTo(Vector3.new(-559.2, -7.45058e-08, 417.4))
end)

island:AddButton("Snow City", function()
game.Players.LocalPlayer.Character:MoveTo(Vector3.new(-858.358, 0.5, 2170.35))
end)

island:AddButton("Magma City", function()
game.Players.LocalPlayer.Character:MoveTo(Vector3.new(1707.25, 0.550008, 4331.05))
end)

island:AddButton("Legends Highway", function()
game.Players.LocalPlayer.Character:MoveTo(Vector3.new(3594.68, 214.804, 7274.56))
end)

eggs:AddToggle("Best Egg",function(state)
	_G.BestEgg = (state and true or false)
	wait()
	while _G.BestEgg == true do
		wait()
		game.ReplicatedStorage.rEvents.openCrystalRemote:InvokeServer("openCrystal", "Electro Legends Crystal")
		end
		end)

		speed:AddButton("Speed 300", function()
		game.ReplicatedStorage.rEvents.changeSpeedJumpRemote:InvokeServer("changeSpeed", 300)
		end)

				speed:AddButton("Jump 200", function()
		game.ReplicatedStorage.rEvents.changeSpeedJumpRemote:InvokeServer("changeJump", 200)
		end)

		example:AddToggle("Auto Evolve (wip)",function(state)
	_G.Evolve = (state and true or false)
	wait()
	while _G.Evolve == true do
		wait()
		game.Replicatedstorage.rEvents.petEvolveEvent:FireServer("evolvePet", "all")
		end
		end)

example:AddDestroy("Destroy GUI",function()
	library.gui:Destroy()
	end)
end)


--texbutton--
Section1:NewTextBox("Api executer", "Execute script", function(txt)
 local Success, Error = pcall(function()
		loadstring(tostring(txt))()
	end)
	
	if Success then
		print("executado", txt)
	else
		assert(false, Error)
	end
end)

Section5:NewLabel("I found these scripts in the novaline script folder")
Section5:NewLabel("Many scripts won't work on arceus x")

Section5:NewButton("VG hub (150 games supported)", "Execute vg hub", function()
    loadstring(game:HttpGet('https://raw.githubusercontent.com/1201for/V.G-Hub/main/V.Ghub'))()
end)

Section5:NewButton("Aimbot 3.0", "Aimbot or smth like that but its 3.0", function()
-- Issues:
-- I'm still working on Tracers, I know they can cause huge frame rate drops. (I think I got it running as smooth as it's going to get.)
-- Phantom Forces: Weird positioning bug with tracers? Tracer positions a bit behind localplayer. (Maybe make the update faster? > RenderPriority.First ?

-- Settings can be found on line: 51
-- Don't change anything if you don't understand.

local Plrs = game:GetService("Players")
local Run = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")
local StartGui = game:GetService("StarterGui")
local Teams = game:GetService("Teams")
local UserInput = game:GetService("UserInputService")
local Light = game:GetService("Lighting")
local HTTP = game:GetService("HttpService")
local RepStor = game:GetService("ReplicatedStorage")
 
function GetCamera() -- Just in case some game renames the player's camera.
	return workspace:FindFirstChildOfClass("Camera")
end
 
local ChamsFolder = Instance.new("Folder", CoreGui)
ChamsFolder.Name = "Chams"
local PlayerChams = Instance.new("Folder", ChamsFolder)
PlayerChams.Name = "PlayerChams"
local ItemChams = Instance.new("Folder", ChamsFolder)
ItemChams.Name = "ItemChams"

local ESPFolder = Instance.new("Folder", CoreGui)
ESPFolder.Name = "ESP Stuff"
local PlayerESP = Instance.new("Folder", ESPFolder)
PlayerESP.Name = "PlayerESP"
local ItemESP = Instance.new("Folder", ESPFolder)
ItemESP.Name = "ItemESP"

local MyPlr = Plrs.LocalPlayer
local MyChar = MyPlr.Character
local MyMouse = MyPlr:GetMouse()
local MyCam = GetCamera()
if MyCam == nil then
	error("WHAT KIND OF BLACK MAGIC IS THIS, CAMERA NOT FOUND.")
	return
end

local Tracers = Instance.new("Folder", MyCam)
Tracers.Name = "Tracers"
local TracerData = { }
local TracerMT = setmetatable(TracerData, {
	__newindex = function(tab, index, val)
		rawset(tab, index, val)
	end
})

function RemoveSpacesFromString(Str)
	local newstr = ""
	for i = 1, #Str do
		if Str:sub(i, i) ~= " " then
			newstr = newstr .. Str:sub(i, i)
		end
	end

	return newstr
end

function CloneTable(T)
    local temp = { }
    for i,v in next, T do
        if type(v) == "table" then
            temp[i] = CloneTable(v)
        else
            temp[i] = v 
        end
    end
    return temp
end

local Bullshit = {
	ESPEnabled = false, -- Self explanatory. LEAVE OFF BY DEFAULT.
	CHAMSEnabled = false, -- Self explanatory. LEAVE OFF BY DEFAULT.
	TracersEnabled = false, -- Self explanatory. LEAVE OFF BY DEFAULT.
	DebugInfo = false, -- Self explanatory. LEAVE OFF BY DEFAULT.
	OutlinesEnabled = false,
	FullbrightEnabled = false,
	CrosshairEnabled = false,
	AimbotEnabled = false,
	Aimbot = false,
	TracersLength = 500, -- MAX DISTANCE IS 2048 DO NOT GO ABOVE OR YOU'LL ENCOUNTER PROBLEMS.
	ESPLength = 10000,
	CHAMSLength = 500,
	PlaceTracersUnderCharacter = false, -- Change to true if you want tracers to be placed under your character instead of at the bottom of your camera.
	FreeForAll = false, -- use for games that don't have teams (Apocalypse Rising)
	AutoFire = false,
	MobChams = false,
	MobESP = false,
	AimbotKey = "Enum.UserInputType.MouseButton2", -- Doesn't do anything yet.
	Colors = {
		Enemy = Color3.new(1, 0, 0),
		Ally = Color3.new(0, 1, 0),
		Friend = Color3.new(1, 1, 0),
		Neutral = Color3.new(1, 1, 1),
		Crosshair = Color3.new(1, 0, 0),
		ColorOverride = nil, -- Every player will have the chosen color regardless of enemy or ally.
	},

	-- VVVV DON'T EDIT BELOW VVVV --
	ClosestEnemy = nil,
	CharAddedEvent = { },
	OutlinedParts = { },
	WorkspaceChildAddedEvent = nil,
	LightingEvent = nil,
	AmbientBackup = Light.Ambient,
	ColorShiftBotBackup = Light.ColorShift_Bottom,
	ColorShiftTopBackup = Light.ColorShift_Top,
	FPSAverage = { },
	Blacklist = { },
	FriendList = { },
	CameraModeBackup = MyPlr.CameraMode,
	GameSpecificCrap = { 
	},
	Mob_ESP_CHAMS_Ran_Once = false,
}

function SaveBullshitSettings()
	local temp = { }
	local succ, out = pcall(function()
		temp.TracersLength = Bullshit.TracersLength
		temp.ESPLength = Bullshit.ESPLength
		temp.CHAMSLength = Bullshit.CHAMSLength
		temp.PlaceTracersUnderCharacter = Bullshit.PlaceTracersUnderCharacter
		temp.FreeForAll = Bullshit.FreeForAll
		temp.AutoFire = Bullshit.AutoFire
		temp.AimbotKey = tostring(Bullshit.AimbotKey)
		temp.MobChams = Bullshit.MobChams
		temp.MobESP = Bullshit.MobESP
		temp.Colors = { }
		for i, v in next, Bullshit.Colors do
			temp.Colors[i] = tostring(v)
		end
		writefile("ProjectBullshit.txt", HTTP:JSONEncode(temp))
	end)
	if not succ then
		error(out)
	end
end

fuck = pcall(function()
	local temp = HTTP:JSONDecode(readfile("ProjectBullshit.txt"))
	if temp.MobChams ~= nil and temp.MobESP ~= nil then
		for i, v in next, temp do
			if i ~= "Colors" then
				Bullshit[i] = v
			end
		end
		for i, v in next, temp.Colors do
			local r, g, b = string.match(RemoveSpacesFromString(v), "(%d+),(%d+),(%d+)")
			r = tonumber(r)
			g = tonumber(g)
			b = tonumber(b)

			temp.Colors[i] = Color3.new(r, g, b)
		end
		Bullshit.Colors = temp.Colors
	else
		spawn(function()
			SaveBullshitSettings()
			local hint = Instance.new("Hint", CoreGui)
			hint.Text = "Major update requried your settings to be wiped! Sorry!"
			wait(5)
			hint:Destroy()
		end)
	end

	Bullshit.AutoFire = false
end)

-- Load blacklist file if it exists
fuck2 = pcall(function()
	Bullshit.Blacklist = HTTP:JSONDecode(readfile("Blacklist.txt"))
end)

fuck3 = pcall(function()
	Bullshit.FriendList = HTTP:JSONDecode(readfile("Whitelist.txt"))
end)

local DebugMenu = { }
DebugMenu["SC"] = Instance.new("ScreenGui", CoreGui)
DebugMenu["SC"].Name = "Debug"
DebugMenu["Main"] = Instance.new("Frame", DebugMenu["SC"])
DebugMenu["Main"].Name = "Debug Menu"
DebugMenu["Main"].Position = UDim2.new(0, 20, 1, -220)
DebugMenu["Main"].Size = UDim2.new(1, 0, 0, 200)
DebugMenu["Main"].BackgroundTransparency = 1
DebugMenu["Main"].Visible = false
if game.PlaceId == 606849621 then
	DebugMenu["Main"].Position = UDim2.new(0, 230, 1, -220)
end
DebugMenu["Main"].Draggable = true
DebugMenu["Main"].Active = true
DebugMenu["Position"] = Instance.new("TextLabel", DebugMenu["Main"])
DebugMenu["Position"].BackgroundTransparency = 1
DebugMenu["Position"].Position = UDim2.new(0, 0, 0, 0)
DebugMenu["Position"].Size = UDim2.new(1, 0, 0, 15)
DebugMenu["Position"].Font = "Arcade"
DebugMenu["Position"].Text = ""
DebugMenu["Position"].TextColor3 = Color3.new(1, 1, 1)
DebugMenu["Position"].TextSize = 15
DebugMenu["Position"].TextStrokeColor3 = Color3.new(0, 0, 0)
DebugMenu["Position"].TextStrokeTransparency = 0.3
DebugMenu["Position"].TextXAlignment = "Left"
DebugMenu["FPS"] = Instance.new("TextLabel", DebugMenu["Main"])
DebugMenu["FPS"].BackgroundTransparency = 1
DebugMenu["FPS"].Position = UDim2.new(0, 0, 0, 15)
DebugMenu["FPS"].Size = UDim2.new(1, 0, 0, 15)
DebugMenu["FPS"].Font = "Arcade"
DebugMenu["FPS"].Text = ""
DebugMenu["FPS"].TextColor3 = Color3.new(1, 1, 1)
DebugMenu["FPS"].TextSize = 15
DebugMenu["FPS"].TextStrokeColor3 = Color3.new(0, 0, 0)
DebugMenu["FPS"].TextStrokeTransparency = 0.3
DebugMenu["FPS"].TextXAlignment = "Left"
DebugMenu["PlayerSelected"] = Instance.new("TextLabel", DebugMenu["Main"])
DebugMenu["PlayerSelected"].BackgroundTransparency = 1
DebugMenu["PlayerSelected"].Position = UDim2.new(0, 0, 0, 35)
DebugMenu["PlayerSelected"].Size = UDim2.new(1, 0, 0, 15)
DebugMenu["PlayerSelected"].Font = "Arcade"
DebugMenu["PlayerSelected"].Text = ""
DebugMenu["PlayerSelected"].TextColor3 = Color3.new(1, 1, 1)
DebugMenu["PlayerSelected"].TextSize = 15
DebugMenu["PlayerSelected"].TextStrokeColor3 = Color3.new(0, 0, 0)
DebugMenu["PlayerSelected"].TextStrokeTransparency = 0.3
DebugMenu["PlayerSelected"].TextXAlignment = "Left"
DebugMenu["PlayerTeam"] = Instance.new("TextLabel", DebugMenu["Main"])
DebugMenu["PlayerTeam"].BackgroundTransparency = 1
DebugMenu["PlayerTeam"].Position = UDim2.new(0, 0, 0, 50)
DebugMenu["PlayerTeam"].Size = UDim2.new(1, 0, 0, 15)
DebugMenu["PlayerTeam"].Font = "Arcade"
DebugMenu["PlayerTeam"].Text = ""
DebugMenu["PlayerTeam"].TextColor3 = Color3.new(1, 1, 1)
DebugMenu["PlayerTeam"].TextSize = 15
DebugMenu["PlayerTeam"].TextStrokeColor3 = Color3.new(0, 0, 0)
DebugMenu["PlayerTeam"].TextStrokeTransparency = 0.3
DebugMenu["PlayerTeam"].TextXAlignment = "Left"
DebugMenu["PlayerHealth"] = Instance.new("TextLabel", DebugMenu["Main"])
DebugMenu["PlayerHealth"].BackgroundTransparency = 1
DebugMenu["PlayerHealth"].Position = UDim2.new(0, 0, 0, 65)
DebugMenu["PlayerHealth"].Size = UDim2.new(1, 0, 0, 15)
DebugMenu["PlayerHealth"].Font = "Arcade"
DebugMenu["PlayerHealth"].Text = ""
DebugMenu["PlayerHealth"].TextColor3 = Color3.new(1, 1, 1)
DebugMenu["PlayerHealth"].TextSize = 15
DebugMenu["PlayerHealth"].TextStrokeColor3 = Color3.new(0, 0, 0)
DebugMenu["PlayerHealth"].TextStrokeTransparency = 0.3
DebugMenu["PlayerHealth"].TextXAlignment = "Left"
DebugMenu["PlayerPosition"] = Instance.new("TextLabel", DebugMenu["Main"])
DebugMenu["PlayerPosition"].BackgroundTransparency = 1
DebugMenu["PlayerPosition"].Position = UDim2.new(0, 0, 0, 80)
DebugMenu["PlayerPosition"].Size = UDim2.new(1, 0, 0, 15)
DebugMenu["PlayerPosition"].Font = "Arcade"
DebugMenu["PlayerPosition"].Text = ""
DebugMenu["PlayerPosition"].TextColor3 = Color3.new(1, 1, 1)
DebugMenu["PlayerPosition"].TextSize = 15
DebugMenu["PlayerPosition"].TextStrokeColor3 = Color3.new(0, 0, 0)
DebugMenu["PlayerPosition"].TextStrokeTransparency = 0.3
DebugMenu["PlayerPosition"].TextXAlignment = "Left"
DebugMenu["BehindWall"] = Instance.new("TextLabel", DebugMenu["Main"])
DebugMenu["BehindWall"].BackgroundTransparency = 1
DebugMenu["BehindWall"].Position = UDim2.new(0, 0, 0, 95)
DebugMenu["BehindWall"].Size = UDim2.new(1, 0, 0, 15)
DebugMenu["BehindWall"].Font = "Arcade"
DebugMenu["BehindWall"].Text = ""
DebugMenu["BehindWall"].TextColor3 = Color3.new(1, 1, 1)
DebugMenu["BehindWall"].TextSize = 15
DebugMenu["BehindWall"].TextStrokeColor3 = Color3.new(0, 0, 0)
DebugMenu["BehindWall"].TextStrokeTransparency = 0.3
DebugMenu["BehindWall"].TextXAlignment = "Left"

local LastTick = tick()
local FPSTick = tick()

if #Teams:GetChildren() <= 0 then
	Bullshit.FreeForAll = true
end

if Bullshit.TracersLength > 2048 then
	Bullshit.TracersLength = 2048
end

if Bullshit.CHAMSLength > 2048 then
	Bullshit.CHAMSLength = 2048
end

local wildrevolvertick = tick()
local wildrevolverteamdata = nil
function GetTeamColor(Plr)
	if Plr == nil then return nil end
	if not Plr:IsA("Player") then
		return nil
	end
	local PickedColor = Bullshit.Colors.Enemy
	
	if Plr ~= nil then
		if game.PlaceId == 606849621 then
			if Bullshit.Colors.ColorOverride == nil then
				if not Bullshit.FreeForAll then
					if MyPlr.Team ~= nil and Plr.Team ~= nil then
						if Bullshit.FriendList[Plr.Name] == nil then
							if MyPlr.Team.Name == "Prisoner" then
								if Plr.Team == MyPlr.Team or Plr.Team.Name == "Criminal" then
									PickedColor = Bullshit.Colors.Ally
								else
									PickedColor = Bullshit.Colors.Enemy
								end
							elseif MyPlr.Team.Name == "Criminal" then
								if Plr.Team == MyPlr.Team or Plr.Team.Name == "Prisoner" then
									PickedColor = Bullshit.Colors.Ally
								else
									PickedColor = Bullshit.Colors.Enemy
								end
							elseif MyPlr.Team.Name == "Police" then
								if Plr.Team == MyPlr.Team then
									PickedColor = Bullshit.Colors.Ally
								else
									if Plr.Team.Name == "Criminal" then
										PickedColor = Bullshit.Colors.Enemy
									elseif Plr.Team.Name == "Prisoner" then
										PickedColor = Bullshit.Colors.Neutral
									end
								end
							end
						else
							PickedColor = Bullshit.Colors.Friend
						end
					end
				else
					if Bullshit.FriendList[Plr.Name] ~= nil then
						PickedColor = Bullshit.Colors.Friend
					else
						PickedColor = Bullshit.Colors.Enemy
					end
				end
			else
				PickedColor = Bullshit.Colors.ColorOverride
			end
		elseif game.PlaceId == 155615604 then
			if Bullshit.Colors.ColorOverride == nil then
				if MyPlr.Team ~= nil and Plr.Team ~= nil then
					if Bullshit.FriendList[Plr.Name] == nil then
						if MyPlr.Team.Name == "Inmates" then
							if Plr.Team.Name == "Inmates" then
								PickedColor = Bullshit.Colors.Ally
							elseif Plr.Team.Name == "Guards" or Plr.Team.Name == "Criminals" then
								PickedColor = Bullshit.Colors.Enemy
							else
								PickedColor = Bullshit.Colors.Neutral
							end
						elseif MyPlr.Team.Name == "Guards" then
							if Plr.Team.Name == "Inmates" then
								PickedColor = Bullshit.Colors.Neutral
							elseif Plr.Team.Name == "Criminals" then
								PickedColor = Bullshit.Colors.Enemy
							elseif Plr.Team.Name == "Guards" then
								PickColor = Bullshit.Colors.Ally
							end
						elseif MyPlr.Team.Name == "Criminals" then
							if Plr.Team.Name == "Inmates" then
								PickedColor = Bullshit.Colors.Ally
							elseif Plr.Team.Name == "Guards" then
								PickedColor = Bullshit.Colors.Enemy
							else
								PickedColor = Bullshit.Colors.Neutral
							end
						end
					else
						PickedColor = Bullshit.Colors.Friend
					end
				end
			else
				PickedColor = Bullshit.Colors.ColorOverride
			end
		elseif game.PlaceId == 746820961 then
			if Bullshit.Colors.ColorOverride == nil then
				if MyPlr:FindFirstChild("TeamC") and Plr:FindFirstChild("TeamC") then
					if Plr.TeamC.Value == MyPlr.TeamC.Value then
						PickedColor = Bullshit.Colors.Ally
					else
						PickedColor = Bullshit.Colors.Enemy
					end
				end
			else
				PickedColor = Bullshit.Colors.ColorOverride
			end
		elseif game.PlaceId == 1382113806 then
			if Bullshit.Colors.ColorOverride == nil then
				if MyPlr:FindFirstChild("role") and Plr:FindFirstChild("role") then
					if MyPlr.role.Value == "assassin" then
						if Plr.role.Value == "target" then
							PickedColor = Bullshit.Colors.Enemy
						elseif Plr.role.Value == "guard" then
							PickedColor = Color3.new(1, 135 / 255, 0)
						else
							PickedColor = Bullshit.Colors.Neutral
						end
					elseif MyPlr.role.Value == "target" then
						if Plr.role.Value == "guard" then
							PickedColor = Bullshit.Colors.Ally
						elseif Plr.role.Value == "assassin" then
							PickedColor = Bullshit.Colors.Enemy
						else
							PickedColor = Bullshit.Colors.Neutral
						end
					elseif MyPlr.role.Value == "guard" then
						if Plr.role.Value == "target" then
							PickedColor = Bullshit.Colors.Friend
						elseif Plr.role.Value == "guard" then
							PickedColor = Bullshit.Colors.Ally
						elseif Plr.role.Value == "assassin" then
							PickedColor = Bullshit.Colors.Enemy
						else
							PickedColor = Bullshit.Colors.Neutral
						end
					else
						if MyPlr.role.Value == "none" then
							PickedColor = Bullshit.Colors.Neutral
						end
					end
				end
			else
				PickedColor = Bullshit.Colors.ColorOverride
			end
		elseif game.PlaceId == 1072809192 then
			if MyPlr:FindFirstChild("Backpack") and Plr:FindFirstChild("Backpack") then
				if MyPlr.Backpack:FindFirstChild("Knife") or MyChar:FindFirstChild("Knife") then
					if Plr.Backpack:FindFirstChild("Revolver") or Plr.Character:FindFirstChild("Revolver") then
						PickedColor = Bullshit.Colors.Enemy
					else
						PickedColor = Color3.new(1, 135 / 255, 0)
					end
				elseif MyPlr.Backpack:FindFirstChild("Revolver") or MyChar:FindFirstChild("Revolver") then
					if Plr.Backpack:FindFirstChild("Knife") or Plr.Character:FindFirstChild("Knife") then
						PickedColor = Bullshit.Colors.Enemy
					elseif Plr.Backpack:FindFirstChild("Revolver") or Plr.Character:FindFirstChild("Revolver") then
						PickedColor = Bullshit.Colors.Enemy
					else
						PickedColor = Bullshit.Colors.Ally
					end
				else
					if Plr.Backpack:FindFirstChild("Knife") or Plr.Character:FindFirstChild("Knife") then
						PickedColor = Bullshit.Colors.Enemy
					elseif Plr.Backpack:FindFirstChild("Revolver") or Plr.Character:FindFirstChild("Revolver") then
						PickedColor = Bullshit.Colors.Ally
					else
						PickedColor = Bullshit.Colors.Neutral
					end
				end
			end
		elseif game.PlaceId == 142823291 or game.PlaceId == 1122507250 then
			if MyPlr:FindFirstChild("Backpack") and Plr:FindFirstChild("Backpack") then
				if MyPlr.Backpack:FindFirstChild("Knife") or MyChar:FindFirstChild("Knife") then
					if (Plr.Backpack:FindFirstChild("Gun") or Plr.Backpack:FindFirstChild("Revolver")) or (Plr.Character:FindFirstChild("Gun") or Plr.Character:FindFirstChild("Revolver")) then
						PickedColor = Bullshit.Colors.Enemy
					else
						PickedColor = Color3.new(1, 135 / 255, 0)
					end
				elseif (MyPlr.Backpack:FindFirstChild("Gun") or MyPlr.Backpack:FindFirstChild("Revolver")) or (MyChar:FindFirstChild("Gun") or MyChar:FindFirstChild("Revolver")) then
					if Plr.Backpack:FindFirstChild("Knife") or Plr.Character:FindFirstChild("Knife") then
						PickedColor = Bullshit.Colors.Enemy
					else
						PickedColor = Bullshit.Colors.Ally
					end
				else
					if Plr.Backpack:FindFirstChild("Knife") or Plr.Character:FindFirstChild("Knife") then
						PickedColor = Bullshit.Colors.Enemy
					elseif (Plr.Backpack:FindFirstChild("Gun") or Plr.Backpack:FindFirstChild("Revolver")) or (Plr.Character:FindFirstChild("Gun") or Plr.Character:FindFirstChild("Revolver")) then
						PickedColor = Bullshit.Colors.Ally
					else
						PickedColor = Bullshit.Colors.Neutral
					end
				end
			end
		elseif game.PlaceId == 379614936 then
			if Bullshit.Colors.ColorOverride == nil then
				if not Bullshit.FriendList[Plr.Name] then
					local targ = MyPlr:FindFirstChild("PlayerGui"):FindFirstChild("ScreenGui"):FindFirstChild("UI"):FindFirstChild("Target"):FindFirstChild("Img"):FindFirstChild("PlayerText")
					if targ then
						if Plr.Name:lower() == targ.Text:lower() then
							PickedColor = Bullshit.Colors.Enemy
						else
							PickedColor = Bullshit.Colors.Neutral
						end
					else
						PickedColor = Bullshit.Colors.Neutral
					end
				else
					PickedColor = Bullshit.Colors.Friend
				end
			else
				PickedColor = Bullshit.Colors.ColorOverride
			end
		elseif game.PlaceId == 983224898 then
			if (tick() - wildrevolvertick) > 10 or wildrevolverteamdata == nil then
				wildrevolverteamdata = RepStor.Functions.RequestGameData:InvokeServer()
				wildrevolvertick = tick()
				return Bullshit.Colors.Neutral
			end
			local succ = pcall(function()
				if wildrevolverteamdata[Plr.Name] ~= nil then
					if Bullshit.Colors.ColorOverride == nil then
						if not Bullshit.FriendList[Plr.Name] then
							if wildrevolverteamdata[Plr.Name]["TeamName"] == wildrevolverteamdata[MyPlr.Name]["TeamName"] then
								PickedColor = Bullshit.Colors.Ally
							else
								PickedColor = Bullshit.Colors.Enemy
							end
						else
							PickedColor = Bullshit.Colors.Friend
						end
					else
						PickedColor = Bullshit.Colors.ColorOverride
					end
				else
					PickedColor = Bullshit.Colors.Neutral
				end
			end)
			if not succ then
				wildrevolverteamdata = RepStor.Functions.RequestGameData:InvokeServer()
				wildrevolvertick = tick()
				return Bullshit.Colors.Neutral
			end
		else
			if Bullshit.Colors.ColorOverride == nil then
				if not Bullshit.FreeForAll then
					if MyPlr.Team ~= Plr.Team and not Bullshit.FriendList[Plr.Name] then
						PickedColor = Bullshit.Colors.Enemy
					elseif MyPlr.Team == Plr.Team and not Bullshit.FriendList[Plr.Name] then
						PickedColor = Bullshit.Colors.Ally
					else
						PickedColor = Bullshit.Colors.Friend
					end
				else
					if Bullshit.FriendList[Plr.Name] ~= nil then
						PickedColor = Bullshit.Colors.Friend
					else
						PickedColor = Bullshit.Colors.Enemy
					end
				end
			else
				PickedColor = Bullshit.Colors.ColorOverride
			end
		end
	end
	
	return PickedColor
end

function FindCham(Obj)
	for i, v in next, ItemChams:GetChildren() do
		if v.className == "ObjectValue" then
			if v.Value == Obj then
				return v.Parent
			end
		end
	end

	return nil
end

function FindESP(Obj)
	for i, v in next, ItemESP:GetChildren() do
		if v.className == "ObjectValue" then
			if v.Value == Obj then
				return v.Parent
			end
		end
	end

	return nil
end

function GetFirstPart(Obj)
	for i, v in next, Obj:GetDescendants() do
		if v:IsA("BasePart") then
			return v
		end
	end

	return nil
end

function GetSizeOfObject(Obj)
	if Obj:IsA("BasePart") then
		return Obj.Size
	elseif Obj:IsA("Model") then
		return Obj:GetExtentsSize()
	end
end

function GetClosestPlayerNotBehindWall()
	local Players = { }
	local CurrentClosePlayer = nil
	local SelectedPlr = nil

	for _, v in next, Plrs:GetPlayers() do
		if v ~= MyPlr and not Bullshit.Blacklist[v.Name] then
			local IsAlly = GetTeamColor(v)
			if IsAlly ~= Bullshit.Colors.Ally and IsAlly ~= Bullshit.Colors.Friend and IsAlly ~= Bullshit.Colors.Neutral then
				local GetChar = v.Character
				if MyChar and GetChar then
					local MyHead, MyTor = MyChar:FindFirstChild("Head"), MyChar:FindFirstChild("HumanoidRootPart")
					local GetHead, GetTor, GetHum = GetChar:FindFirstChild("Head"), GetChar:FindFirstChild("HumanoidRootPart"), GetChar:FindFirstChild("Humanoid")

					if MyHead and MyTor and GetHead and GetTor and GetHum then
						if game.PlaceId == 455366377 then
							if not GetChar:FindFirstChild("KO") and GetHum.Health > 1 then
								local Ray = Ray.new(MyCam.CFrame.p, (GetHead.Position - MyCam.CFrame.p).unit * 2048)
								local part = workspace:FindPartOnRayWithIgnoreList(Ray, {MyChar})
								if part ~= nil then
									if part:IsDescendantOf(GetChar) then
										local Dist = (MyTor.Position - GetTor.Position).magnitude
										Players[v] = Dist
									end
								end
							end
						elseif game.PlaceId == 746820961 then
							if GetHum.Health > 1 then
								local Ray = Ray.new(MyCam.CFrame.p, (GetHead.Position - MyCam.CFrame.p).unit * 2048)
								local part = workspace:FindPartOnRayWithIgnoreList(Ray, {MyChar, MyCam})
								if part ~= nil then
									if part:IsDescendantOf(GetChar) then
										local Dist = (MyTor.Position - GetTor.Position).magnitude
										Players[v] = Dist
									end
								end
							end
						else
							if GetHum.Health > 1 then
								local Ray = Ray.new(MyCam.CFrame.p, (GetHead.Position - MyCam.CFrame.p).unit * 2048)
								local part = workspace:FindPartOnRayWithIgnoreList(Ray, {MyChar})
								if part ~= nil then
									if part:IsDescendantOf(GetChar) then
										local Dist = (MyTor.Position - GetTor.Position).magnitude
										Players[v] = Dist
									end
								end
							end
						end
					end
				end
			end
		end
	end

	for i, v in next, Players do
		if CurrentClosePlayer ~= nil then
			if v <= CurrentClosePlayer then
				CurrentClosePlayer = v
				SelectedPlr = i
			end
		else
			CurrentClosePlayer = v
			SelectedPlr = i
		end
	end
	
	return SelectedPlr
end

function GetClosestPlayer()
	local Players = { }
	local CurrentClosePlayer = nil
	local SelectedPlr = nil
	
	for _, v in next, Plrs:GetPlayers() do
		if v ~= MyPlr then
			local IsAlly = GetTeamColor(v)
			if IsAlly ~= Bullshit.Colors.Ally and IsAlly ~= Bullshit.Colors.Friend and IsAlly ~= Bullshit.Colors.Neutral then
				local GetChar = v.Character
				if MyChar and GetChar then
					local MyTor = MyChar:FindFirstChild("HumanoidRootPart")
					local GetTor = GetChar:FindFirstChild("HumanoidRootPart")
					local GetHum = GetChar:FindFirstChild("Humanoid")
					if MyTor and GetTor and GetHum then
						if game.PlaceId == 455366377 then
							if not GetChar:FindFirstChild("KO") and GetHum.Health > 1 then
								local Dist = (MyTor.Position - GetTor.Position).magnitude
								Players[v] = Dist
							end
						else
							if GetHum.Health > 1 then
								local Dist = (MyTor.Position - GetTor.Position).magnitude
								Players[v] = Dist
							end
						end
					end
				end
			end
		end
	end
	
	for i, v in next, Players do
		if CurrentClosePlayer ~= nil then
			if v <= CurrentClosePlayer then
				CurrentClosePlayer = v
				SelectedPlr = i
			end
		else
			CurrentClosePlayer = v
			SelectedPlr = i
		end
	end
	
	return SelectedPlr
end

function FindPlayer(Txt)
	local ps = { }
	for _, v in next, Plrs:GetPlayers() do
		if string.lower(string.sub(v.Name, 1, string.len(Txt))) == string.lower(Txt) then
			table.insert(ps, v)
		end
	end

	if #ps == 1 then
		if ps[1] ~= MyPlr then
			return ps[1]
		else
			return nil
		end
	else
		return nil
	end
end

function UpdateESP(Plr)
	if Plr ~= nil then
		local Find = PlayerESP:FindFirstChild("ESP Crap_" .. Plr.Name)
		if Find then
			local PickColor = GetTeamColor(Plr)
			Find.Frame.Names.TextColor3 = PickColor
			Find.Frame.Dist.TextColor3 = PickColor
			Find.Frame.Health.TextColor3 = PickColor
			--Find.Frame.Pos.TextColor3 = PickColor
			local GetChar = Plr.Character
			if MyChar and GetChar then
				local Find2 = MyChar:FindFirstChild("HumanoidRootPart")
				local Find3 = GetChar:FindFirstChild("HumanoidRootPart")
				local Find4 = GetChar:FindFirstChildOfClass("Humanoid")
				if Find2 and Find3 then
					local pos = Find3.Position
					local Dist = (Find2.Position - pos).magnitude
					if Dist > Bullshit.ESPLength or Bullshit.Blacklist[Plr.Name] then
						Find.Frame.Names.Visible = false
						Find.Frame.Dist.Visible = false
						Find.Frame.Health.Visible = false
						return
					else
						Find.Frame.Names.Visible = true
						Find.Frame.Dist.Visible = true
						Find.Frame.Health.Visible = true
					end
					Find.Frame.Dist.Text = "Distance: " .. string.format("%.0f", Dist)
					--Find.Frame.Pos.Text = "(X: " .. string.format("%.0f", pos.X) .. ", Y: " .. string.format("%.0f", pos.Y) .. ", Z: " .. string.format("%.0f", pos.Z) .. ")"
					if Find4 then
						Find.Frame.Health.Text = "Health: " .. string.format("%.0f", Find4.Health)
					else
						Find.Frame.Health.Text = ""
					end
				end
			end
		end
	end
end

function RemoveESP(Obj)
	if Obj ~= nil then
		local IsPlr = Obj:IsA("Player")
		local UseFolder = ItemESP
		if IsPlr then UseFolder = PlayerESP end

		local FindESP = ((IsPlr) and UseFolder:FindFirstChild("ESP Crap_" .. Obj.Name)) or FindESP(Obj)
		if FindESP then
			FindESP:Destroy()
		end
	end
end

function CreateESP(Obj)
	if Obj ~= nil then
		local IsPlr = Obj:IsA("Player")
		local UseFolder = ItemESP
		local GetChar = ((IsPlr) and Obj.Character) or Obj
		local Head = GetChar:FindFirstChild("Head")
		local t = tick()
		if IsPlr then UseFolder = PlayerESP end
		if Head == nil then
			repeat
				Head = GetChar:FindFirstChild("Head")
				wait()
			until Head ~= nil or (tick() - t) >= 10
		end
		if Head == nil then return end
		
		local bb = Instance.new("BillboardGui")
		bb.Adornee = Head
		bb.ExtentsOffset = Vector3.new(0, 1, 0)
		bb.AlwaysOnTop = true
		bb.Size = UDim2.new(0, 5, 0, 5)
		bb.StudsOffset = Vector3.new(0, 3, 0)
		bb.Name = "ESP Crap_" .. Obj.Name
		bb.Parent = UseFolder
		
		local frame = Instance.new("Frame", bb)
		frame.ZIndex = 10
		frame.BackgroundTransparency = 1
		frame.Size = UDim2.new(1, 0, 1, 0)
		
		local TxtName = Instance.new("TextLabel", frame)
		TxtName.Name = "Names"
		TxtName.ZIndex = 10
		TxtName.Text = Obj.Name
		TxtName.BackgroundTransparency = 1
		TxtName.Position = UDim2.new(0, 0, 0, -45)
		TxtName.Size = UDim2.new(1, 0, 10, 0)
		TxtName.Font = "SourceSansBold"
		TxtName.TextSize = 13
		TxtName.TextStrokeTransparency = 0.5

		local TxtDist = nil
		local TxtHealth = nil
		if IsPlr then
			TxtDist = Instance.new("TextLabel", frame)
			TxtDist.Name = "Dist"
			TxtDist.ZIndex = 10
			TxtDist.Text = ""
			TxtDist.BackgroundTransparency = 1
			TxtDist.Position = UDim2.new(0, 0, 0, -35)
			TxtDist.Size = UDim2.new(1, 0, 10, 0)
			TxtDist.Font = "SourceSansBold"
			TxtDist.TextSize = 13
			TxtDist.TextStrokeTransparency = 0.5

			TxtHealth = Instance.new("TextLabel", frame)
			TxtHealth.Name = "Health"
			TxtHealth.ZIndex = 10
			TxtHealth.Text = ""
			TxtHealth.BackgroundTransparency = 1
			TxtHealth.Position = UDim2.new(0, 0, 0, -25)
			TxtHealth.Size = UDim2.new(1, 0, 10, 0)
			TxtHealth.Font = "SourceSansBold"
			TxtHealth.TextSize = 13
			TxtHealth.TextStrokeTransparency = 0.5
		else
			local ObjVal = Instance.new("ObjectValue", bb)
			ObjVal.Value = Obj
		end
		
		local PickColor = GetTeamColor(Obj) or Bullshit.Colors.Neutral
		TxtName.TextColor3 = PickColor

		if IsPlr then
			TxtDist.TextColor3 = PickColor
			TxtHealth.TextColor3 = PickColor
		end
	end
end

function UpdateTracer(Plr)
	if Bullshit.TracersEnabled then
		if MyChar then
			local MyTor = MyChar:FindFirstChild("HumanoidRootPart")
			local GetTor = TracerData[Plr.Name]
			if MyTor and GetTor ~= nil and GetTor.Parent ~= nil then
				local Dist = (MyTor.Position - GetTor.Position).magnitude
				if (Dist < Bullshit.TracersLength and not Bullshit.Blacklist[Plr.Name]) and not (MyChar:FindFirstChild("InVehicle") or GetTor.Parent:FindFirstChild("InVehicle")) then
					if not Bullshit.PlaceTracersUnderCharacter then
						local R = MyCam:ScreenPointToRay(MyCam.ViewportSize.X / 2, MyCam.ViewportSize.Y, 0)
						Dist = (R.Origin - (GetTor.Position - Vector3.new(0, 3, 0))).magnitude
						Tracers[Plr.Name].Transparency = 1
						Tracers[Plr.Name].Size = Vector3.new(0.05, 0.05, Dist)
						Tracers[Plr.Name].CFrame = CFrame.new(R.Origin, (GetTor.Position - Vector3.new(0, 4.5, 0))) * CFrame.new(0, 0, -Dist / 2)
						Tracers[Plr.Name].BrickColor = BrickColor.new(GetTeamColor(Plr))
						Tracers[Plr.Name].BoxHandleAdornment.Transparency = 0
						Tracers[Plr.Name].BoxHandleAdornment.Size = Vector3.new(0.001, 0.001, Dist)
						Tracers[Plr.Name].BoxHandleAdornment.Color3 = GetTeamColor(Plr)
					else
						Dist = (MyTor.Position - (GetTor.Position - Vector3.new(0, 3, 0))).magnitude
						Tracers[Plr.Name].Transparency = 1
						Tracers[Plr.Name].Size = Vector3.new(0.3, 0.3, Dist)
						Tracers[Plr.Name].CFrame = CFrame.new(MyTor.Position - Vector3.new(0, 3, 0), (GetTor.Position - Vector3.new(0, 4.5, 0))) * CFrame.new(0, 0, -Dist / 2)
						Tracers[Plr.Name].BrickColor = BrickColor.new(GetTeamColor(Plr))
						Tracers[Plr.Name].BoxHandleAdornment.Transparency = 0
						Tracers[Plr.Name].BoxHandleAdornment.Size = Vector3.new(0.05, 0.05, Dist)
						Tracers[Plr.Name].BoxHandleAdornment.Color3 = GetTeamColor(Plr)
					end
				else
					Tracers[Plr.Name].Transparency = 1
					Tracers[Plr.Name].BoxHandleAdornment.Transparency = 1
				end
			end
		end
	end
end

function RemoveTracers(Plr)
	local Find = Tracers:FindFirstChild(Plr.Name)
	if Find then
		Find:Destroy()
	end
end

function CreateTracers(Plr)
	local Find = Tracers:FindFirstChild(Plr.Name)
	if not Find then
		local P = Instance.new("Part")
		P.Name = Plr.Name
		P.Material = "Neon"
		P.Transparency = 1
		P.Anchored = true
		P.Locked = true
		P.CanCollide = false
		local B = Instance.new("BoxHandleAdornment", P)
		B.Adornee = P
		B.Size = GetSizeOfObject(P)
		B.AlwaysOnTop = true
		B.ZIndex = 5
		B.Transparency = 0
		B.Color3 = GetTeamColor(Plr) or Bullshit.Colors.Neutral
		P.Parent = Tracers

		coroutine.resume(coroutine.create(function()
			while Tracers:FindFirstChild(Plr.Name) do
				UpdateTracer(Plr)
				Run.RenderStepped:wait()
			end
		end))
	end
end

function UpdateChams(Obj)
	if Obj == nil then return end

	if Obj:IsA("Player") then
		local Find = PlayerChams:FindFirstChild(Obj.Name)
		local GetChar = Obj.Character

		local Trans = 0
		if GetChar and MyChar then
			local GetHead = GetChar:FindFirstChild("Head")
			local GetTor = GetChar:FindFirstChild("HumanoidRootPart")
			local MyHead = MyChar:FindFirstChild("Head")
			local MyTor = MyChar:FindFirstChild("HumanoidRootPart")
			if GetHead and GetTor and MyHead and MyTor then
				if (MyTor.Position - GetTor.Position).magnitude > Bullshit.CHAMSLength or Bullshit.Blacklist[Obj.Name] then
					Trans = 1
				else
					--local MyCharStuff = MyChar:GetDescendants()
					local Ray = Ray.new(MyCam.CFrame.p, (GetTor.Position - MyCam.CFrame.p).unit * 2048)
					local part = workspace:FindPartOnRayWithIgnoreList(Ray, {MyChar})
					if part ~= nil then
						if part:IsDescendantOf(GetChar) then
							Trans = 0.9
						else
							Trans = 0
						end
					end
				end
			end
		end

		if Find then
			for i, v in next, Find:GetChildren() do
				if v.className ~= "ObjectValue" then
					v.Color3 = GetTeamColor(Obj) or Bullshit.Colors.Neutral
					v.Transparency = Trans
				end
			end
		end
	end
end

function RemoveChams(Obj)
	if Obj ~= nil then
		local IsPlr = Obj:IsA("Player")
		local UseFolder = ItemChams
		if IsPlr then UseFolder = PlayerChams end

		local FindC = UseFolder:FindFirstChild(tostring(Obj)) or FindCham(Obj)
		if FindC then
			FindC:Destroy()
		end
	end
end

function CreateChams(Obj)
	if Obj ~= nil then
		local IsPlr = Obj:IsA("Player")
		local UseFolder = ItemChams
		local Crap = nil
		local GetTor = nil
		local t = tick()
		if IsPlr then
			Obj = Obj.Character
			UseFolder = PlayerChams
		end
		if Obj == nil then return end
		GetTor = Obj:FindFirstChild("HumanoidRootPart") or Obj:WaitForChild("HumanoidRootPart")
		if IsPlr then Crap = Obj:GetChildren() else Crap = Obj:GetDescendants() end

		local FindC = ((IsPlr) and UseFolder:FindFirstChild(Obj.Name)) or FindCham(Obj)
		if not FindC then
			FindC = Instance.new("Folder", UseFolder)
			FindC.Name = Obj.Name
			local ObjVal = Instance.new("ObjectValue", FindC)
			ObjVal.Value = Obj
		end

		for _, P in next, Crap do
			if P:IsA("PVInstance") and P.Name ~= "HumanoidRootPart" then
				local Box = Instance.new("BoxHandleAdornment")
				Box.Size = GetSizeOfObject(P)
				Box.Name = "Cham"
				Box.Adornee = P
				Box.AlwaysOnTop = true
				Box.ZIndex = 5
				Box.Transparency = 0
				Box.Color3 = ((IsPlr) and GetTeamColor(Plrs:GetPlayerFromCharacter(Obj))) or Bullshit.Colors.Neutral
				Box.Parent = FindC
			end
		end
	end
end

function CreateMobESPChams()
	local mobspawn = { }

	for i, v in next, workspace:GetDescendants() do
		local hum = v:FindFirstChildOfClass("Humanoid")
		if hum and not Plrs:GetPlayerFromCharacter(hum.Parent) and FindCham(v) == nil and FindESP(v) == nil then
			mobspawn[tostring(v.Parent)] = v.Parent
			if Bullshit.CHAMSEnabled and Bullshit.MobChams then
				CreateChams(v)
			end
			if Bullshit.ESPEnabled and Bullshit.MobESP then
				CreateESP(v)
			end
		end
	end

	if Bullshit.Mob_ESP_CHAMS_Ran_Once == false then
		for i, v in next, mobspawn do
			v.ChildAdded:connect(function(Obj)
				if Bullshit.MobChams then
					local t = tick()
					local GetHum = Obj:FindFirstChildOfClass("Humanoid")
					if GetHum == nil then
						repeat
							GetHum = Obj:FindFirstChildOfClass("Humanoid")
							wait()
						until GetHum ~= nil or (tick() - t) >= 10
					end
					if GetHum == nil then return end

					CreateChams(Obj)
				end

				if Bullshit.MobESP then
					local t = tick()
					local GetHum = Obj:FindFirstChildOfClass("Humanoid")
					if GetHum == nil then
						repeat
							GetHum = Obj:FindFirstChildOfClass("Humanoid")
							wait()
						until GetHum ~= nil or (tick() - t) >= 10
					end
					if GetHum == nil then return end

					CreateESP(Obj)
				end
			end)
		end

		Bullshit.Mob_ESP_CHAMS_Ran_Once = true
	end
end

function CreateChildAddedEventFor(Obj)
	Obj.ChildAdded:connect(function(Obj2)
		if Bullshit.OutlinesEnabled then
			if Obj2:IsA("BasePart") and not Plrs:GetPlayerFromCharacter(Obj2.Parent) and not Obj2.Parent:IsA("Hat") and not Obj2.Parent:IsA("Accessory") and Obj2.Parent.Name ~= "Tracers" then
				local Data = { }
				Data[2] = Obj2.Transparency
				Obj2.Transparency = 1
				local outline = Instance.new("SelectionBox")
				outline.Name = "Outline"
				outline.Color3 = Color3.new(0, 0, 0)
				outline.SurfaceColor3 = Color3.new(0, 1, 0)
				--outline.SurfaceTransparency = 0.9
				outline.LineThickness = 0.01
				outline.Transparency = 0.5
				outline.Transparency = 0.5
				outline.Adornee = Obj2
				outline.Parent = Obj2
				Data[1] = outline
				rawset(Bullshit.OutlinedParts, Obj2, Data)
			end

			for i, v in next, Obj2:GetDescendants() do
				if v:IsA("BasePart") and not Plrs:GetPlayerFromCharacter(v.Parent) and not v.Parent:IsA("Hat") and not v.Parent:IsA("Accessory") and v.Parent.Name ~= "Tracers" then
					local Data = { }
					Data[2] = v.Transparency
					v.Transparency = 1
					local outline = Instance.new("SelectionBox")
					outline.Name = "Outline"
					outline.Color3 = Color3.new(0, 0, 0)
					outline.SurfaceColor3 = Color3.new(0, 1, 0)
					--outline.SurfaceTransparency = 0.9
					outline.LineThickness = 0.01
					outline.Transparency = 0.5
					outline.Adornee = v
					outline.Parent = v
					Data[1] = outline
					rawset(Bullshit.OutlinedParts, v, Data)
				end
				CreateChildAddedEventFor(v)
			end
		end
		CreateChildAddedEventFor(Obj2)
	end)
end

function LightingHax()
	if Bullshit.OutlinesEnabled then
		Light.TimeOfDay = "00:00:00"
	end

	if Bullshit.FullbrightEnabled then
		Light.Ambient = Color3.new(1, 1, 1)
		Light.ColorShift_Bottom = Color3.new(1, 1, 1)
		Light.ColorShift_Top = Color3.new(1, 1, 1)
	end
end

Plrs.PlayerAdded:connect(function(Plr)
	if Bullshit.CharAddedEvent[Plr.Name] == nil then
		Bullshit.CharAddedEvent[Plr.Name] = Plr.CharacterAdded:connect(function(Char)
			if Bullshit.ESPEnabled then
				RemoveESP(Plr)
				CreateESP(Plr)
			end
			if Bullshit.CHAMSEnabled then
				RemoveChams(Plr)
				CreateChams(Plr)
			end
			if Bullshit.TracersEnabled then
				CreateTracers(Plr)
			end
			repeat wait() until Char:FindFirstChild("HumanoidRootPart")
			TracerMT[Plr.Name] = Char.HumanoidRootPart
		end)
	end
end)

Plrs.PlayerRemoving:connect(function(Plr)
	if Bullshit.CharAddedEvent[Plr.Name] ~= nil then
		Bullshit.CharAddedEvent[Plr.Name]:Disconnect()
		Bullshit.CharAddedEvent[Plr.Name] = nil
	end
	RemoveESP(Plr)
	RemoveChams(Plr)
	RemoveTracers(Plr)
	TracerMT[Plr.Name] = nil
end)

function InitMain()
	-- Objects
	
	local Bullshit20 = Instance.new("ScreenGui")
	local MainFrame = Instance.new("Frame")
	local Title = Instance.new("TextLabel")
	local design = Instance.new("Frame")
	local buttons = Instance.new("Frame")
	local ESPToggle = Instance.new("TextButton")
	local ChamsToggle = Instance.new("TextButton")
	local TracersToggle = Instance.new("TextButton")
	local OutlineToggle = Instance.new("TextButton")
	local DebugToggle = Instance.new("TextButton")
	local FullbrightToggle = Instance.new("TextButton")
	local BlacklistToggle = Instance.new("TextButton")
	local WhitelistToggle = Instance.new("TextButton")
	local Crosshair = Instance.new("TextButton")
	local AimbotToggle = Instance.new("TextButton")
	local Settings = Instance.new("TextButton")
	local Information = Instance.new("TextButton")
	local Information_2 = Instance.new("Frame")
	local Title_2 = Instance.new("TextLabel")
	local design_2 = Instance.new("Frame")
	local buttons_2 = Instance.new("ScrollingFrame")
	local TextLabel = Instance.new("TextLabel")
	local Settings_2 = Instance.new("Frame")
	local Title_3 = Instance.new("TextLabel")
	local design_3 = Instance.new("Frame")
	local buttons_3 = Instance.new("ScrollingFrame")
	local AllyColor = Instance.new("TextBox")
	local CHAMSLength = Instance.new("TextBox")
	local CrosshairColor = Instance.new("TextBox")
	local ESPLength = Instance.new("TextBox")
	local EnemyColor = Instance.new("TextBox")
	local FreeForAll = Instance.new("TextButton")
	local FriendColor = Instance.new("TextBox")
	local NeutralColor = Instance.new("TextBox")
	local TracersLength = Instance.new("TextBox")
	local TracersUnderChars = Instance.new("TextButton")
	local AutoFireToggle = Instance.new("TextButton")
	local AimbotKey = Instance.new("TextButton")
	local MobESPButton = Instance.new("TextButton")
	local MobChamsButton = Instance.new("TextButton")
	local TextLabel_2 = Instance.new("TextLabel")
	local TextLabel_3 = Instance.new("TextLabel")
	local TextLabel_4 = Instance.new("TextLabel")
	local TextLabel_5 = Instance.new("TextLabel")
	local TextLabel_6 = Instance.new("TextLabel")
	local TextLabel_7 = Instance.new("TextLabel")
	local TextLabel_8 = Instance.new("TextLabel")
	local TextLabel_9 = Instance.new("TextLabel")
	local TextLabel_10 = Instance.new("TextLabel")
	local TextLabel_11 = Instance.new("TextLabel")
	local TextLabel_12 = Instance.new("TextLabel")
	local TextLabel_13 = Instance.new("TextLabel")
	local TextLabel_14 = Instance.new("TextLabel")
	local TextLabel_15 = Instance.new("TextLabel")
	local SaveSettings = Instance.new("TextButton")
	local Blacklist = Instance.new("Frame")
	local nigga = Instance.new("TextLabel")
	local niggerfaggot = Instance.new("Frame")
	local players = Instance.new("ScrollingFrame")
	local buttonsex = Instance.new("Frame")
	local Playername = Instance.new("TextBox")
	local AddToBlacklist = Instance.new("TextButton")
	local RemoveToBlacklist = Instance.new("TextButton")
	local SaveBlacklist = Instance.new("TextButton")
	local Whitelist = Instance.new("Frame")
	local nigga2 = Instance.new("TextLabel")
	local niggerfaggot2 = Instance.new("Frame")
	local players2 = Instance.new("ScrollingFrame")
	local buttonsex2 = Instance.new("Frame")
	local Playername2 = Instance.new("TextBox")
	local AddToWhitelist = Instance.new("TextButton")
	local RemoveToWhitelist = Instance.new("TextButton")
	local SaveWhitelist = Instance.new("TextButton")
	
	-- Properties
	
	Bullshit20.Name = "Bullshit 3.0"
	Bullshit20.Parent = CoreGui
	Bullshit20.ResetOnSpawn = false
	
	MainFrame.Name = "MainFrame"
	MainFrame.Parent = Bullshit20
	MainFrame.Active = true
	MainFrame.BackgroundColor3 = Color3.new(0.176471, 0.176471, 0.176471)
	MainFrame.BorderSizePixel = 0
	MainFrame.Draggable = true
	MainFrame.Position = UDim2.new(0.200000003, -175, 0.5, -100)
	MainFrame.Size = UDim2.new(0, 350, 0, 315)
	
	Title.Name = "Title"
	Title.Parent = MainFrame
	Title.BackgroundColor3 = Color3.new(1, 1, 1)
	Title.BackgroundTransparency = 1
	Title.Size = UDim2.new(1, 0, 0, 50)
	Title.Font = Enum.Font.SourceSansBold
	Title.Text = "Project: Bullshit\nMade by: Racist Dolphin#5199\nVersion 3.5.5 (RE-WORK IN THE WORKS)"
	Title.TextColor3 = Color3.new(1, 1, 1)
	Title.TextSize = 18
	Title.TextTransparency = 0.5
	
	design.Name = "design"
	design.Parent = MainFrame
	design.BackgroundColor3 = Color3.new(1, 1, 1)
	design.BackgroundTransparency = 0.5
	design.BorderSizePixel = 0
	design.Position = UDim2.new(0.0500000007, 0, 0, 50)
	design.Size = UDim2.new(0.899999976, 0, 0, 2)
	
	buttons.Name = "buttons"
	buttons.Parent = MainFrame
	buttons.BackgroundColor3 = Color3.new(1, 1, 1)
	buttons.BackgroundTransparency = 1
	buttons.Position = UDim2.new(0, 20, 0, 70)
	buttons.Size = UDim2.new(1, -40, 1, -80)

	Blacklist.Name = "Blacklist"
	Blacklist.Parent = MainFrame
	Blacklist.Active = true
	Blacklist.BackgroundColor3 = Color3.new(0.176471, 0.176471, 0.176471)
	Blacklist.BorderSizePixel = 0
	Blacklist.Position = UDim2.new(1, 3, 0.5, -138)
	Blacklist.Size = UDim2.new(0, 350, 0, 375)
	Blacklist.Visible = false
	
	nigga.Name = "nigga"
	nigga.Parent = Blacklist
	nigga.BackgroundColor3 = Color3.new(1, 1, 1)
	nigga.BackgroundTransparency = 1
	nigga.Size = UDim2.new(1, 0, 0, 50)
	nigga.Font = Enum.Font.SourceSansBold
	nigga.Text = "Blacklist Menu"
	nigga.TextColor3 = Color3.new(1, 1, 1)
	nigga.TextSize = 18
	nigga.TextTransparency = 0.5
	
	niggerfaggot.Name = "niggerfaggot"
	niggerfaggot.Parent = Blacklist
	niggerfaggot.BackgroundColor3 = Color3.new(1, 1, 1)
	niggerfaggot.BackgroundTransparency = 0.5
	niggerfaggot.BorderSizePixel = 0
	niggerfaggot.Position = UDim2.new(0.0500000007, 0, 0, 50)
	niggerfaggot.Size = UDim2.new(0.899999976, 0, 0, 2)
	
	players.Name = "players"
	players.Parent = Blacklist
	players.BackgroundColor3 = Color3.new(1, 1, 1)
	players.BackgroundTransparency = 1
	players.BorderSizePixel = 0
	players.Position = UDim2.new(0, 20, 0, 60)
	players.Size = UDim2.new(1, -40, 1, -175)
	players.CanvasSize = UDim2.new(0, 0, 5, 0)
	players.ScrollBarThickness = 8
	
	buttonsex.Name = "buttonsex"
	buttonsex.Parent = Blacklist
	buttonsex.BackgroundColor3 = Color3.new(1, 1, 1)
	buttonsex.BackgroundTransparency = 1
	buttonsex.Position = UDim2.new(0, 20, 0, 250)
	buttonsex.Size = UDim2.new(1, -40, 0, 100)
	
	Playername.Name = "Playername"
	Playername.Parent = buttonsex
	Playername.BackgroundColor3 = Color3.new(0.972549, 0.972549, 0.972549)
	Playername.BackgroundTransparency = 0.5
	Playername.BorderSizePixel = 0
	Playername.Size = UDim2.new(1, 0, 0, 20)
	Playername.Font = Enum.Font.SourceSansBold
	Playername.Text = "Enter Player Name"
	Playername.TextSize = 14
	Playername.TextWrapped = true
	
	AddToBlacklist.Name = "AddToBlacklist"
	AddToBlacklist.Parent = buttonsex
	AddToBlacklist.BackgroundColor3 = Color3.new(0.972549, 0.972549, 0.972549)
	AddToBlacklist.BackgroundTransparency = 0.5
	AddToBlacklist.BorderSizePixel = 0
	AddToBlacklist.Position = UDim2.new(0, 0, 0, 30)
	AddToBlacklist.Size = UDim2.new(1, 0, 0, 20)
	AddToBlacklist.Font = Enum.Font.SourceSansBold
	AddToBlacklist.Text = "Add to Blacklist"
	AddToBlacklist.TextSize = 14
	AddToBlacklist.TextWrapped = true
	
	RemoveToBlacklist.Name = "RemoveToBlacklist"
	RemoveToBlacklist.Parent = buttonsex
	RemoveToBlacklist.BackgroundColor3 = Color3.new(0.972549, 0.972549, 0.972549)
	RemoveToBlacklist.BackgroundTransparency = 0.5
	RemoveToBlacklist.BorderSizePixel = 0
	RemoveToBlacklist.Position = UDim2.new(0, 0, 0, 60)
	RemoveToBlacklist.Size = UDim2.new(1, 0, 0, 20)
	RemoveToBlacklist.Font = Enum.Font.SourceSansBold
	RemoveToBlacklist.Text = "Remove from Blacklist"
	RemoveToBlacklist.TextSize = 14
	RemoveToBlacklist.TextWrapped = true

	SaveBlacklist.Name = "SaveBlacklist"
	SaveBlacklist.Parent = buttonsex
	SaveBlacklist.BackgroundColor3 = Color3.new(0.972549, 0.972549, 0.972549)
	SaveBlacklist.BackgroundTransparency = 0.5
	SaveBlacklist.BorderSizePixel = 0
	SaveBlacklist.Position = UDim2.new(0, 0, 0, 90)
	SaveBlacklist.Size = UDim2.new(1, 0, 0, 20)
	SaveBlacklist.Font = Enum.Font.SourceSansBold
	SaveBlacklist.Text = "Save Blacklist"
	SaveBlacklist.TextSize = 14
	SaveBlacklist.TextWrapped = true

	Whitelist.Name = "Whitelist"
	Whitelist.Parent = MainFrame
	Whitelist.Active = true
	Whitelist.BackgroundColor3 = Color3.new(0.176471, 0.176471, 0.176471)
	Whitelist.BorderSizePixel = 0
	Whitelist.Position = UDim2.new(1, 3, 0.5, -138)
	Whitelist.Size = UDim2.new(0, 350, 0, 375)
	Whitelist.Visible = false
	
	nigga2.Name = "nigga2"
	nigga2.Parent = Whitelist
	nigga2.BackgroundColor3 = Color3.new(1, 1, 1)
	nigga2.BackgroundTransparency = 1
	nigga2.Size = UDim2.new(1, 0, 0, 50)
	nigga2.Font = Enum.Font.SourceSansBold
	nigga2.Text = "Friends List Menu"
	nigga2.TextColor3 = Color3.new(1, 1, 1)
	nigga2.TextSize = 18
	nigga2.TextTransparency = 0.5
	
	niggerfaggot2.Name = "niggerfaggot2"
	niggerfaggot2.Parent = Whitelist
	niggerfaggot2.BackgroundColor3 = Color3.new(1, 1, 1)
	niggerfaggot2.BackgroundTransparency = 0.5
	niggerfaggot2.BorderSizePixel = 0
	niggerfaggot2.Position = UDim2.new(0.0500000007, 0, 0, 50)
	niggerfaggot2.Size = UDim2.new(0.899999976, 0, 0, 2)
	
	players2.Name = "players2"
	players2.Parent = Whitelist
	players2.BackgroundColor3 = Color3.new(1, 1, 1)
	players2.BackgroundTransparency = 1
	players2.BorderSizePixel = 0
	players2.Position = UDim2.new(0, 20, 0, 60)
	players2.Size = UDim2.new(1, -40, 1, -175)
	players2.CanvasSize = UDim2.new(0, 0, 5, 0)
	players2.ScrollBarThickness = 8
	
	buttonsex2.Name = "buttonsex2"
	buttonsex2.Parent = Whitelist
	buttonsex2.BackgroundColor3 = Color3.new(1, 1, 1)
	buttonsex2.BackgroundTransparency = 1
	buttonsex2.Position = UDim2.new(0, 20, 0, 250)
	buttonsex2.Size = UDim2.new(1, -40, 0, 100)
	
	Playername2.Name = "Playername2"
	Playername2.Parent = buttonsex2
	Playername2.BackgroundColor3 = Color3.new(0.972549, 0.972549, 0.972549)
	Playername2.BackgroundTransparency = 0.5
	Playername2.BorderSizePixel = 0
	Playername2.Size = UDim2.new(1, 0, 0, 20)
	Playername2.Font = Enum.Font.SourceSansBold
	Playername2.Text = "Enter Player Name"
	Playername2.TextSize = 14
	Playername2.TextWrapped = true
	
	AddToWhitelist.Name = "AddToWhitelist"
	AddToWhitelist.Parent = buttonsex2
	AddToWhitelist.BackgroundColor3 = Color3.new(0.972549, 0.972549, 0.972549)
	AddToWhitelist.BackgroundTransparency = 0.5
	AddToWhitelist.BorderSizePixel = 0
	AddToWhitelist.Position = UDim2.new(0, 0, 0, 30)
	AddToWhitelist.Size = UDim2.new(1, 0, 0, 20)
	AddToWhitelist.Font = Enum.Font.SourceSansBold
	AddToWhitelist.Text = "Add to Friends List"
	AddToWhitelist.TextSize = 14
	AddToWhitelist.TextWrapped = true
	
	RemoveToWhitelist.Name = "RemoveToWhitelist"
	RemoveToWhitelist.Parent = buttonsex2
	RemoveToWhitelist.BackgroundColor3 = Color3.new(0.972549, 0.972549, 0.972549)
	RemoveToWhitelist.BackgroundTransparency = 0.5
	RemoveToWhitelist.BorderSizePixel = 0
	RemoveToWhitelist.Position = UDim2.new(0, 0, 0, 60)
	RemoveToWhitelist.Size = UDim2.new(1, 0, 0, 20)
	RemoveToWhitelist.Font = Enum.Font.SourceSansBold
	RemoveToWhitelist.Text = "Remove from Friends List"
	RemoveToWhitelist.TextSize = 14
	RemoveToWhitelist.TextWrapped = true

	SaveWhitelist.Name = "SaveWhitelist"
	SaveWhitelist.Parent = buttonsex2
	SaveWhitelist.BackgroundColor3 = Color3.new(0.972549, 0.972549, 0.972549)
	SaveWhitelist.BackgroundTransparency = 0.5
	SaveWhitelist.BorderSizePixel = 0
	SaveWhitelist.Position = UDim2.new(0, 0, 0, 90)
	SaveWhitelist.Size = UDim2.new(1, 0, 0, 20)
	SaveWhitelist.Font = Enum.Font.SourceSansBold
	SaveWhitelist.Text = "Save Friends List"
	SaveWhitelist.TextSize = 14
	SaveWhitelist.TextWrapped = true

	BlacklistToggle.Name = "BlacklistToggle"
	BlacklistToggle.Parent = buttons
	BlacklistToggle.BackgroundColor3 = Color3.new(1, 1, 1)
	BlacklistToggle.BackgroundTransparency = 0.5
	BlacklistToggle.BorderSizePixel = 0
	BlacklistToggle.Position = UDim2.new(0, 0, 0, 200)
	BlacklistToggle.Size = UDim2.new(0, 150, 0, 30)
	BlacklistToggle.Font = Enum.Font.SourceSansBold
	BlacklistToggle.Text = "Blacklist"
	BlacklistToggle.TextColor3 = Color3.new(0.176471, 0.176471, 0.176471)
	BlacklistToggle.TextSize = 14
	BlacklistToggle.TextWrapped = true

	WhitelistToggle.Name = "WhitelistToggle"
	WhitelistToggle.Parent = buttons
	WhitelistToggle.BackgroundColor3 = Color3.new(1, 1, 1)
	WhitelistToggle.BackgroundTransparency = 0.5
	WhitelistToggle.BorderSizePixel = 0
	WhitelistToggle.Position = UDim2.new(1, -150, 0, 200)
	WhitelistToggle.Size = UDim2.new(0, 150, 0, 30)
	WhitelistToggle.Font = Enum.Font.SourceSansBold
	WhitelistToggle.Text = "Friends List"
	WhitelistToggle.TextColor3 = Color3.new(0.176471, 0.176471, 0.176471)
	WhitelistToggle.TextSize = 14
	WhitelistToggle.TextWrapped = true
	
	ESPToggle.Name = "ESPToggle"
	ESPToggle.Parent = buttons
	ESPToggle.BackgroundColor3 = Color3.new(1, 1, 1)
	ESPToggle.BackgroundTransparency = 0.5
	ESPToggle.BorderSizePixel = 0
	ESPToggle.Size = UDim2.new(0, 150, 0, 30)
	ESPToggle.Font = Enum.Font.SourceSansBold
	ESPToggle.Text = "ESP"
	ESPToggle.TextColor3 = Color3.new(0.176471, 0.176471, 0.176471)
	ESPToggle.TextSize = 14
	ESPToggle.TextWrapped = true
	
	ChamsToggle.Name = "ChamsToggle"
	ChamsToggle.Parent = buttons
	ChamsToggle.BackgroundColor3 = Color3.new(1, 1, 1)
	ChamsToggle.BackgroundTransparency = 0.5
	ChamsToggle.BorderSizePixel = 0
	ChamsToggle.Position = UDim2.new(1, -150, 0, 0)
	ChamsToggle.Size = UDim2.new(0, 150, 0, 30)
	ChamsToggle.Font = Enum.Font.SourceSansBold
	ChamsToggle.Text = "Chams"
	ChamsToggle.TextColor3 = Color3.new(0.176471, 0.176471, 0.176471)
	ChamsToggle.TextSize = 14
	ChamsToggle.TextWrapped = true
	
	TracersToggle.Name = "TracersToggle"
	TracersToggle.Parent = buttons
	TracersToggle.BackgroundColor3 = Color3.new(1, 1, 1)
	TracersToggle.BackgroundTransparency = 0.5
	TracersToggle.BorderSizePixel = 0
	TracersToggle.Position = UDim2.new(0, 0, 0, 40)
	TracersToggle.Size = UDim2.new(0, 150, 0, 30)
	TracersToggle.Font = Enum.Font.SourceSansBold
	TracersToggle.Text = "Tracers"
	TracersToggle.TextColor3 = Color3.new(0.176471, 0.176471, 0.176471)
	TracersToggle.TextSize = 14
	TracersToggle.TextWrapped = true
	
	OutlineToggle.Name = "OutlineToggle"
	OutlineToggle.Parent = buttons
	OutlineToggle.BackgroundColor3 = Color3.new(1, 1, 1)
	OutlineToggle.BackgroundTransparency = 0.5
	OutlineToggle.BorderSizePixel = 0
	OutlineToggle.Position = UDim2.new(1, -150, 0, 40)
	OutlineToggle.Size = UDim2.new(0, 150, 0, 30)
	OutlineToggle.Font = Enum.Font.SourceSansBold
	OutlineToggle.Text = "Outlines"
	OutlineToggle.TextColor3 = Color3.new(0.176471, 0.176471, 0.176471)
	OutlineToggle.TextSize = 14
	OutlineToggle.TextWrapped = true
	
	DebugToggle.Name = "DebugToggle"
	DebugToggle.Parent = buttons
	DebugToggle.BackgroundColor3 = Color3.new(1, 1, 1)
	DebugToggle.BackgroundTransparency = 0.5
	DebugToggle.BorderSizePixel = 0
	DebugToggle.Position = UDim2.new(1, -150, 0, 80)
	DebugToggle.Size = UDim2.new(0, 150, 0, 30)
	DebugToggle.Font = Enum.Font.SourceSansBold
	DebugToggle.Text = "Debug Info"
	DebugToggle.TextColor3 = Color3.new(0.176471, 0.176471, 0.176471)
	DebugToggle.TextSize = 14
	DebugToggle.TextWrapped = true
	
	FullbrightToggle.Name = "FullbrightToggle"
	FullbrightToggle.Parent = buttons
	FullbrightToggle.BackgroundColor3 = Color3.new(1, 1, 1)
	FullbrightToggle.BackgroundTransparency = 0.5
	FullbrightToggle.BorderSizePixel = 0
	FullbrightToggle.Position = UDim2.new(0, 0, 0, 80)
	FullbrightToggle.Size = UDim2.new(0, 150, 0, 30)
	FullbrightToggle.Font = Enum.Font.SourceSansBold
	FullbrightToggle.Text = "Fullbright"
	FullbrightToggle.TextColor3 = Color3.new(0.176471, 0.176471, 0.176471)
	FullbrightToggle.TextSize = 14
	FullbrightToggle.TextWrapped = true
	
	Crosshair.Name = "Crosshair"
	Crosshair.Parent = buttons
	Crosshair.BackgroundColor3 = Color3.new(1, 1, 1)
	Crosshair.BackgroundTransparency = 0.5
	Crosshair.BorderSizePixel = 0
	Crosshair.Position = UDim2.new(0, 0, 0, 120)
	Crosshair.Size = UDim2.new(0, 150, 0, 30)
	Crosshair.Font = Enum.Font.SourceSansBold
	Crosshair.Text = "Crosshair"
	Crosshair.TextColor3 = Color3.new(0.176471, 0.176471, 0.176471)
	Crosshair.TextSize = 14
	Crosshair.TextWrapped = true
	
	AimbotToggle.Name = "AimbotToggle"
	AimbotToggle.Parent = buttons
	AimbotToggle.BackgroundColor3 = Color3.new(1, 1, 1)
	AimbotToggle.BackgroundTransparency = 0.5
	AimbotToggle.BorderSizePixel = 0
	AimbotToggle.Position = UDim2.new(1, -150, 0, 120)
	AimbotToggle.Size = UDim2.new(0, 150, 0, 30)
	AimbotToggle.Font = Enum.Font.SourceSansBold
	AimbotToggle.Text = "Aimlock"
	AimbotToggle.TextColor3 = Color3.new(0.176471, 0.176471, 0.176471)
	AimbotToggle.TextSize = 14
	AimbotToggle.TextWrapped = true
	
	Settings.Name = "Settings"
	Settings.Parent = buttons
	Settings.BackgroundColor3 = Color3.new(1, 1, 1)
	Settings.BackgroundTransparency = 0.5
	Settings.BorderSizePixel = 0
	Settings.Position = UDim2.new(1, -150, 0, 160)
	Settings.Size = UDim2.new(0, 150, 0, 30)
	Settings.Font = Enum.Font.SourceSansBold
	Settings.Text = "Settings"
	Settings.TextColor3 = Color3.new(0.176471, 0.176471, 0.176471)
	Settings.TextSize = 14
	Settings.TextWrapped = true
	
	Information.Name = "Information"
	Information.Parent = buttons
	Information.BackgroundColor3 = Color3.new(1, 1, 1)
	Information.BackgroundTransparency = 0.5
	Information.BorderSizePixel = 0
	Information.Position = UDim2.new(0, 0, 0, 160)
	Information.Size = UDim2.new(0, 150, 0, 30)
	Information.Font = Enum.Font.SourceSansBold
	Information.Text = "Information"
	Information.TextColor3 = Color3.new(0.176471, 0.176471, 0.176471)
	Information.TextSize = 14
	Information.TextWrapped = true
	
	Information_2.Name = "Information"
	Information_2.Parent = MainFrame
	Information_2.Active = true
	Information_2.BackgroundColor3 = Color3.new(0.176471, 0.176471, 0.176471)
	Information_2.BorderSizePixel = 0
	Information_2.Position = UDim2.new(1, 3, 0.5, -138)
	Information_2.Size = UDim2.new(0, 350, 0, 365)
	Information_2.Visible = false
	
	Title_2.Name = "Title"
	Title_2.Parent = Information_2
	Title_2.BackgroundColor3 = Color3.new(1, 1, 1)
	Title_2.BackgroundTransparency = 1
	Title_2.Size = UDim2.new(1, 0, 0, 50)
	Title_2.Font = Enum.Font.SourceSansBold
	Title_2.Text = "Information"
	Title_2.TextColor3 = Color3.new(1, 1, 1)
	Title_2.TextSize = 18
	Title_2.TextTransparency = 0.5
	
	design_2.Name = "design"
	design_2.Parent = Information_2
	design_2.BackgroundColor3 = Color3.new(1, 1, 1)
	design_2.BackgroundTransparency = 0.5
	design_2.BorderSizePixel = 0
	design_2.Position = UDim2.new(0.0500000007, 0, 0, 50)
	design_2.Size = UDim2.new(0.899999976, 0, 0, 2)
	
	buttons_2.Name = "buttons"
	buttons_2.Parent = Information_2
	buttons_2.BackgroundColor3 = Color3.new(1, 1, 1)
	buttons_2.BackgroundTransparency = 1
	buttons_2.BorderSizePixel = 0
	buttons_2.Position = UDim2.new(0, 20, 0, 60)
	buttons_2.Size = UDim2.new(1, -40, 1, -70)
	buttons_2.CanvasSize = UDim2.new(5, 0, 5, 0)
	buttons_2.ScrollBarThickness = 5
	
	TextLabel.Parent = buttons_2
	TextLabel.BackgroundColor3 = Color3.new(1, 1, 1)
	TextLabel.BackgroundTransparency = 1
	TextLabel.Size = UDim2.new(1, -20, 1, 0)
	TextLabel.Font = Enum.Font.SourceSansBold
	TextLabel.Text = [[
Scripting by: Racist Dolphin#5199
GUI by: SOMEONE WHO WANTS HIS NAME HIDDEN.

To hide/show the GUI press the "P" key on your keyboard.

NOTICE: Since my string manipulation skills aren't the greatest, changing esp/cham colors might be quite buggy.
NOTICE #2: The blacklist feature will return! I just didn't have enough time to make the gui.
NOTICE #3: Save Settings might still be bugged. Message me if it's fucked up still.

This works on every game, though the Aimbot does NOT! (Doesn't work on: Jailbreak, and Phantom Forces)

FAQ:
1) How do I use the aimbot?
A: Activate it, and hold right-click in-game. The aimbot will lock on to the closest enemy NOT behind a wall. (If said player is behind a wall, it will find the next closest player not behind a wall.)

2) ESP/Chams don't work on the game I play?
A: Some games require me to make patches (ex: Murder Mystery, Murder Mystery X) to request a patch or a game message me on discord.

3) How did I detect when a player is behind a wall?
A: Raycasting the camera to another player.

4) My bullets still miss when using aimbot?!
A: Blame bullet spread, try and control how often you fire. (Murder Mystery 2 = trash) (Why the fuck does a single shot pistol have bullet spread? lol wtf?)

Change Log:
3/10/2018:
+ Fixed more bugs with chams

3/10/2018:
+ Fixed how chams broke when a player respawned.

3/10/2018:
+ Fixed ESP not updating correctly.
+ Fixed Chams not updating correctly. (MAYBE? IDK WHAT IS BREAKING THIS)

3/9/2018:
+ Mob ESP/Chams! (BETA!)

3/8/2018:
+ Fixed the error you get when not entering a valid number for esp/chams/tracer lengths.
+ Fixed lag issues with aimlock.
+ Fixed lag issues with chams.

3/8/2018:
+ Patch for Murder 15
- Temporarily removed auto fire since mouse1click is broken on Synapse :(

3/7/2018:
+ Updated save settings.
+ Can now customize aimlock key.

3/7/2018:
+ Patch for Wild Revolver.
+ Fix for autofire. (Hopefully)

3/6/2018:
- Removed :IsFriendsWith check. (Use Friends List GUI instead)

3/4/2018:
+ Added Friend List Menu
+ Patch for Assassin!

3/4/2018:
+ Fixed crosshair toggle.
+ Aimlock patch for Island Royal.
+ Finally fixed save settings.

3/4/2018:
+ Aimlock fixed for Unit 1968: Vietnam
+ Autofire setting for aimlock
+ Fixed how you sometimes had to double click buttons to activate a option

3/4/2018:
+ Fixed FreeForAll setting bug.
+ Using aimlock on Phantom Forces / Jailbreak will now tell you it will not work.
* Renamed Aimbot back to Aimlock

3/3/2018:
+ Blacklist feature re-added.
+ Aimbot will no longer focus people in the blacklist.
+ Compatible on exploits that have readfile and writefile.

3/3/2018:
+ GUI Overhaul
+ Aimbot now only targets people NOT behind walls
+ Chams now dim when x player is visible on your screen.
+ Chams no longer have the humanoid root part. (Your welcome)
+ Patch for Silent Assassin
+ My discord was deleted, so I'm using pastebin now. (Auto updates :)
]]
	TextLabel.TextColor3 = Color3.new(1, 1, 1)
	TextLabel.TextSize = 16
	TextLabel.TextTransparency = 0.5
	TextLabel.TextXAlignment = Enum.TextXAlignment.Left
	TextLabel.TextYAlignment = Enum.TextYAlignment.Top
	
	Settings_2.Name = "Settings"
	Settings_2.Parent = MainFrame
	Settings_2.Active = true
	Settings_2.BackgroundColor3 = Color3.new(0.176471, 0.176471, 0.176471)
	Settings_2.BorderSizePixel = 0
	Settings_2.Position = UDim2.new(1, 3, 0.5, -138)
	Settings_2.Size = UDim2.new(0, 350, 0, 365)
	Settings_2.Visible = false
	
	Title_3.Name = "Title"
	Title_3.Parent = Settings_2
	Title_3.BackgroundColor3 = Color3.new(1, 1, 1)
	Title_3.BackgroundTransparency = 1
	Title_3.Size = UDim2.new(1, 0, 0, 50)
	Title_3.Font = Enum.Font.SourceSansBold
	Title_3.Text = "Settings Menu"
	Title_3.TextColor3 = Color3.new(1, 1, 1)
	Title_3.TextSize = 18
	Title_3.TextTransparency = 0.5
	
	design_3.Name = "design"
	design_3.Parent = Settings_2
	design_3.BackgroundColor3 = Color3.new(1, 1, 1)
	design_3.BackgroundTransparency = 0.5
	design_3.BorderSizePixel = 0
	design_3.Position = UDim2.new(0.0500000007, 0, 0, 50)
	design_3.Size = UDim2.new(0.899999976, 0, 0, 2)
	
	buttons_3.Name = "buttons"
	buttons_3.Parent = Settings_2
	buttons_3.BackgroundColor3 = Color3.new(1, 1, 1)
	buttons_3.BackgroundTransparency = 1
	buttons_3.BorderSizePixel = 0
	buttons_3.Position = UDim2.new(0, 20, 0, 60)
	buttons_3.Size = UDim2.new(1, -40, 1, -70)
	buttons_3.ScrollBarThickness = 8
	
	AllyColor.Name = "AllyColor"
	AllyColor.Parent = buttons_3
	AllyColor.BackgroundColor3 = Color3.new(0.972549, 0.972549, 0.972549)
	AllyColor.BackgroundTransparency = 0.5
	AllyColor.BorderSizePixel = 0
	AllyColor.Position = UDim2.new(1, -150, 0, 180)
	AllyColor.Size = UDim2.new(0, 135, 0, 20)
	AllyColor.Font = Enum.Font.SourceSansBold
	AllyColor.Text = tostring(Bullshit.Colors.Ally)
	AllyColor.TextSize = 14
	AllyColor.TextWrapped = true
	
	CHAMSLength.Name = "CHAMSLength"
	CHAMSLength.Parent = buttons_3
	CHAMSLength.BackgroundColor3 = Color3.new(0.972549, 0.972549, 0.972549)
	CHAMSLength.BackgroundTransparency = 0.5
	CHAMSLength.BorderSizePixel = 0
	CHAMSLength.Position = UDim2.new(1, -150, 0, 60)
	CHAMSLength.Size = UDim2.new(0, 135, 0, 20)
	CHAMSLength.Font = Enum.Font.SourceSansBold
	CHAMSLength.Text = tostring(Bullshit.CHAMSLength)
	CHAMSLength.TextSize = 14
	CHAMSLength.TextWrapped = true
	
	CrosshairColor.Name = "CrosshairColor"
	CrosshairColor.Parent = buttons_3
	CrosshairColor.BackgroundColor3 = Color3.new(0.972549, 0.972549, 0.972549)
	CrosshairColor.BackgroundTransparency = 0.5
	CrosshairColor.BorderSizePixel = 0
	CrosshairColor.Position = UDim2.new(1, -150, 0, 270)
	CrosshairColor.Size = UDim2.new(0, 135, 0, 20)
	CrosshairColor.Font = Enum.Font.SourceSansBold
	CrosshairColor.Text = tostring(Bullshit.Colors.Crosshair)
	CrosshairColor.TextSize = 14
	CrosshairColor.TextWrapped = true
	
	ESPLength.Name = "ESPLength"
	ESPLength.Parent = buttons_3
	ESPLength.BackgroundColor3 = Color3.new(0.972549, 0.972549, 0.972549)
	ESPLength.BackgroundTransparency = 0.5
	ESPLength.BorderSizePixel = 0
	ESPLength.Position = UDim2.new(1, -150, 0, 30)
	ESPLength.Size = UDim2.new(0, 135, 0, 20)
	ESPLength.Font = Enum.Font.SourceSansBold
	ESPLength.Text = tostring(Bullshit.ESPLength)
	ESPLength.TextSize = 14
	ESPLength.TextWrapped = true
	
	EnemyColor.Name = "EnemyColor"
	EnemyColor.Parent = buttons_3
	EnemyColor.BackgroundColor3 = Color3.new(0.972549, 0.972549, 0.972549)
	EnemyColor.BackgroundTransparency = 0.5
	EnemyColor.BorderSizePixel = 0
	EnemyColor.Position = UDim2.new(1, -150, 0, 150)
	EnemyColor.Size = UDim2.new(0, 135, 0, 20)
	EnemyColor.Font = Enum.Font.SourceSansBold
	EnemyColor.Text = tostring(Bullshit.Colors.Enemy)
	EnemyColor.TextSize = 14
	EnemyColor.TextWrapped = true
	
	FreeForAll.Name = "FreeForAll"
	FreeForAll.Parent = buttons_3
	FreeForAll.BackgroundColor3 = Color3.new(0.972549, 0.972549, 0.972549)
	FreeForAll.BackgroundTransparency = 0.5
	FreeForAll.BorderSizePixel = 0
	FreeForAll.Position = UDim2.new(1, -150, 0, 120)
	FreeForAll.Size = UDim2.new(0, 135, 0, 20)
	FreeForAll.Font = Enum.Font.SourceSansBold
	FreeForAll.Text = tostring(Bullshit.FreeForAll)
	FreeForAll.TextSize = 14
	FreeForAll.TextWrapped = true
	
	FriendColor.Name = "FriendColor"
	FriendColor.Parent = buttons_3
	FriendColor.BackgroundColor3 = Color3.new(0.972549, 0.972549, 0.972549)
	FriendColor.BackgroundTransparency = 0.5
	FriendColor.BorderSizePixel = 0
	FriendColor.Position = UDim2.new(1, -150, 0, 210)
	FriendColor.Size = UDim2.new(0, 135, 0, 20)
	FriendColor.Font = Enum.Font.SourceSansBold
	FriendColor.Text = tostring(Bullshit.Colors.Friend)
	FriendColor.TextSize = 14
	FriendColor.TextWrapped = true
	
	NeutralColor.Name = "NeutralColor"
	NeutralColor.Parent = buttons_3
	NeutralColor.BackgroundColor3 = Color3.new(0.972549, 0.972549, 0.972549)
	NeutralColor.BackgroundTransparency = 0.5
	NeutralColor.BorderSizePixel = 0
	NeutralColor.Position = UDim2.new(1, -150, 0, 240)
	NeutralColor.Size = UDim2.new(0, 135, 0, 20)
	NeutralColor.Font = Enum.Font.SourceSansBold
	NeutralColor.Text = tostring(Bullshit.Colors.Neutral)
	NeutralColor.TextSize = 14
	NeutralColor.TextWrapped = true
	
	TracersLength.Name = "TracersLength"
	TracersLength.Parent = buttons_3
	TracersLength.BackgroundColor3 = Color3.new(0.972549, 0.972549, 0.972549)
	TracersLength.BackgroundTransparency = 0.5
	TracersLength.BorderSizePixel = 0
	TracersLength.Position = UDim2.new(1, -150, 0, 0)
	TracersLength.Size = UDim2.new(0, 135, 0, 20)
	TracersLength.Font = Enum.Font.SourceSansBold
	TracersLength.Text = tostring(Bullshit.TracersLength)
	TracersLength.TextSize = 14
	TracersLength.TextWrapped = true
	
	TracersUnderChars.Name = "TracersUnderChars"
	TracersUnderChars.Parent = buttons_3
	TracersUnderChars.BackgroundColor3 = Color3.new(0.972549, 0.972549, 0.972549)
	TracersUnderChars.BackgroundTransparency = 0.5
	TracersUnderChars.BorderSizePixel = 0
	TracersUnderChars.Position = UDim2.new(1, -150, 0, 90)
	TracersUnderChars.Size = UDim2.new(0, 135, 0, 20)
	TracersUnderChars.Font = Enum.Font.SourceSansBold
	TracersUnderChars.Text = tostring(Bullshit.PlaceTracersUnderCharacter)
	TracersUnderChars.TextSize = 14
	TracersUnderChars.TextWrapped = true

	AutoFireToggle.Name = "AutoFireToggle"
	AutoFireToggle.Parent = buttons_3
	AutoFireToggle.BackgroundColor3 = Color3.new(0.972549, 0.972549, 0.972549)
	AutoFireToggle.BackgroundTransparency = 0.5
	AutoFireToggle.BorderSizePixel = 0
	AutoFireToggle.Position = UDim2.new(1, -150, 0, 300)
	AutoFireToggle.Size = UDim2.new(0, 135, 0, 20)
	AutoFireToggle.Font = Enum.Font.SourceSansBold
	AutoFireToggle.Text = tostring(Bullshit.AutoFire)
	AutoFireToggle.TextSize = 14
	AutoFireToggle.TextWrapped = true

	AimbotKey.Name = "AimbotKey"
	AimbotKey.Parent = buttons_3
	AimbotKey.BackgroundColor3 = Color3.new(0.972549, 0.972549, 0.972549)
	AimbotKey.BackgroundTransparency = 0.5
	AimbotKey.BorderSizePixel = 0
	AimbotKey.Position = UDim2.new(1, -150, 0, 330)
	AimbotKey.Size = UDim2.new(0, 135, 0, 20)
	AimbotKey.Font = Enum.Font.SourceSansBold
	AimbotKey.Text = tostring(Bullshit.AimbotKey)
	AimbotKey.TextSize = 14
	AimbotKey.TextWrapped = true

	MobESPButton.Name = "MobESPButton"
	MobESPButton.Parent = buttons_3
	MobESPButton.BackgroundColor3 = Color3.new(0.972549, 0.972549, 0.972549)
	MobESPButton.BackgroundTransparency = 0.5
	MobESPButton.BorderSizePixel = 0
	MobESPButton.Position = UDim2.new(1, -150, 0, 360)
	MobESPButton.Size = UDim2.new(0, 135, 0, 20)
	MobESPButton.Font = Enum.Font.SourceSansBold
	MobESPButton.Text = tostring(Bullshit.MobESP)
	MobESPButton.TextSize = 14
	MobESPButton.TextWrapped = true

	MobChamsButton.Name = "MobChamsButton"
	MobChamsButton.Parent = buttons_3
	MobChamsButton.BackgroundColor3 = Color3.new(0.972549, 0.972549, 0.972549)
	MobChamsButton.BackgroundTransparency = 0.5
	MobChamsButton.BorderSizePixel = 0
	MobChamsButton.Position = UDim2.new(1, -150, 0, 390)
	MobChamsButton.Size = UDim2.new(0, 135, 0, 20)
	MobChamsButton.Font = Enum.Font.SourceSansBold
	MobChamsButton.Text = tostring(Bullshit.MobChams)
	MobChamsButton.TextSize = 14
	MobChamsButton.TextWrapped = true
	
	TextLabel_2.Parent = buttons_3
	TextLabel_2.BackgroundColor3 = Color3.new(1, 1, 1)
	TextLabel_2.BackgroundTransparency = 1
	TextLabel_2.Size = UDim2.new(0.5, 0, 0, 20)
	TextLabel_2.Font = Enum.Font.SourceSansBold
	TextLabel_2.Text = "Tracers Length"
	TextLabel_2.TextColor3 = Color3.new(1, 1, 1)
	TextLabel_2.TextSize = 16
	TextLabel_2.TextTransparency = 0.5
	
	TextLabel_3.Parent = buttons_3
	TextLabel_3.BackgroundColor3 = Color3.new(1, 1, 1)
	TextLabel_3.BackgroundTransparency = 1
	TextLabel_3.Position = UDim2.new(0, 0, 0, 30)
	TextLabel_3.Size = UDim2.new(0.5, 0, 0, 20)
	TextLabel_3.Font = Enum.Font.SourceSansBold
	TextLabel_3.Text = "ESP Length"
	TextLabel_3.TextColor3 = Color3.new(1, 1, 1)
	TextLabel_3.TextSize = 16
	TextLabel_3.TextTransparency = 0.5
	
	TextLabel_4.Parent = buttons_3
	TextLabel_4.BackgroundColor3 = Color3.new(1, 1, 1)
	TextLabel_4.BackgroundTransparency = 1
	TextLabel_4.Position = UDim2.new(0, 0, 0, 60)
	TextLabel_4.Size = UDim2.new(0.5, 0, 0, 20)
	TextLabel_4.Font = Enum.Font.SourceSansBold
	TextLabel_4.Text = "Chams Length"
	TextLabel_4.TextColor3 = Color3.new(1, 1, 1)
	TextLabel_4.TextSize = 16
	TextLabel_4.TextTransparency = 0.5
	
	TextLabel_5.Parent = buttons_3
	TextLabel_5.BackgroundColor3 = Color3.new(1, 1, 1)
	TextLabel_5.BackgroundTransparency = 1
	TextLabel_5.Position = UDim2.new(0, 0, 0, 90)
	TextLabel_5.Size = UDim2.new(0.5, 0, 0, 20)
	TextLabel_5.Font = Enum.Font.SourceSansBold
	TextLabel_5.Text = "Tracers Under Chars"
	TextLabel_5.TextColor3 = Color3.new(1, 1, 1)
	TextLabel_5.TextSize = 16
	TextLabel_5.TextTransparency = 0.5
	
	TextLabel_6.Parent = buttons_3
	TextLabel_6.BackgroundColor3 = Color3.new(1, 1, 1)
	TextLabel_6.BackgroundTransparency = 1
	TextLabel_6.Position = UDim2.new(0, 0, 0, 270)
	TextLabel_6.Size = UDim2.new(0.5, 0, 0, 20)
	TextLabel_6.Font = Enum.Font.SourceSansBold
	TextLabel_6.Text = "Crosshair Color"
	TextLabel_6.TextColor3 = Color3.new(1, 1, 1)
	TextLabel_6.TextSize = 16
	TextLabel_6.TextTransparency = 0.5
	
	TextLabel_7.Parent = buttons_3
	TextLabel_7.BackgroundColor3 = Color3.new(1, 1, 1)
	TextLabel_7.BackgroundTransparency = 1
	TextLabel_7.Position = UDim2.new(0, 0, 0, 120)
	TextLabel_7.Size = UDim2.new(0.5, 0, 0, 20)
	TextLabel_7.Font = Enum.Font.SourceSansBold
	TextLabel_7.Text = "Free For All"
	TextLabel_7.TextColor3 = Color3.new(1, 1, 1)
	TextLabel_7.TextSize = 16
	TextLabel_7.TextTransparency = 0.5
	
	TextLabel_8.Parent = buttons_3
	TextLabel_8.BackgroundColor3 = Color3.new(1, 1, 1)
	TextLabel_8.BackgroundTransparency = 1
	TextLabel_8.Position = UDim2.new(0, 0, 0, 240)
	TextLabel_8.Size = UDim2.new(0.5, 0, 0, 20)
	TextLabel_8.Font = Enum.Font.SourceSansBold
	TextLabel_8.Text = "Neutral Color"
	TextLabel_8.TextColor3 = Color3.new(1, 1, 1)
	TextLabel_8.TextSize = 16
	TextLabel_8.TextTransparency = 0.5
	
	TextLabel_9.Parent = buttons_3
	TextLabel_9.BackgroundColor3 = Color3.new(1, 1, 1)
	TextLabel_9.BackgroundTransparency = 1
	TextLabel_9.Position = UDim2.new(0, 0, 0, 150)
	TextLabel_9.Size = UDim2.new(0.5, 0, 0, 20)
	TextLabel_9.Font = Enum.Font.SourceSansBold
	TextLabel_9.Text = "Enemy Color"
	TextLabel_9.TextColor3 = Color3.new(1, 1, 1)
	TextLabel_9.TextSize = 16
	TextLabel_9.TextTransparency = 0.5
	
	TextLabel_10.Parent = buttons_3
	TextLabel_10.BackgroundColor3 = Color3.new(1, 1, 1)
	TextLabel_10.BackgroundTransparency = 1
	TextLabel_10.Position = UDim2.new(0, 0, 0, 180)
	TextLabel_10.Size = UDim2.new(0.5, 0, 0, 20)
	TextLabel_10.Font = Enum.Font.SourceSansBold
	TextLabel_10.Text = "Ally Color"
	TextLabel_10.TextColor3 = Color3.new(1, 1, 1)
	TextLabel_10.TextSize = 16
	TextLabel_10.TextTransparency = 0.5
	
	TextLabel_11.Parent = buttons_3
	TextLabel_11.BackgroundColor3 = Color3.new(1, 1, 1)
	TextLabel_11.BackgroundTransparency = 1
	TextLabel_11.Position = UDim2.new(0, 0, 0, 210)
	TextLabel_11.Size = UDim2.new(0.5, 0, 0, 20)
	TextLabel_11.Font = Enum.Font.SourceSansBold
	TextLabel_11.Text = "Friend Color"
	TextLabel_11.TextColor3 = Color3.new(1, 1, 1)
	TextLabel_11.TextSize = 16
	TextLabel_11.TextTransparency = 0.5

	TextLabel_12.Parent = buttons_3
	TextLabel_12.BackgroundColor3 = Color3.new(1, 1, 1)
	TextLabel_12.BackgroundTransparency = 1
	TextLabel_12.Position = UDim2.new(0, 0, 0, 300)
	TextLabel_12.Size = UDim2.new(0.5, 0, 0, 20)
	TextLabel_12.Font = Enum.Font.SourceSansBold
	TextLabel_12.Text = "Aimlock Auto Fire"
	TextLabel_12.TextColor3 = Color3.new(1, 1, 1)
	TextLabel_12.TextSize = 16
	TextLabel_12.TextTransparency = 0.5

	TextLabel_13.Parent = buttons_3
	TextLabel_13.BackgroundColor3 = Color3.new(1, 1, 1)
	TextLabel_13.BackgroundTransparency = 1
	TextLabel_13.Position = UDim2.new(0, 0, 0, 330)
	TextLabel_13.Size = UDim2.new(0.5, 0, 0, 20)
	TextLabel_13.Font = Enum.Font.SourceSansBold
	TextLabel_13.Text = "Aimbot Key"
	TextLabel_13.TextColor3 = Color3.new(1, 1, 1)
	TextLabel_13.TextSize = 16
	TextLabel_13.TextTransparency = 0.5

	TextLabel_14.Parent = buttons_3
	TextLabel_14.BackgroundColor3 = Color3.new(1, 1, 1)
	TextLabel_14.BackgroundTransparency = 1
	TextLabel_14.Position = UDim2.new(0, 0, 0, 360)
	TextLabel_14.Size = UDim2.new(0.5, 0, 0, 20)
	TextLabel_14.Font = Enum.Font.SourceSansBold
	TextLabel_14.Text = "Mob ESP"
	TextLabel_14.TextColor3 = Color3.new(1, 1, 1)
	TextLabel_14.TextSize = 16
	TextLabel_14.TextTransparency = 0.5

	TextLabel_15.Parent = buttons_3
	TextLabel_15.BackgroundColor3 = Color3.new(1, 1, 1)
	TextLabel_15.BackgroundTransparency = 1
	TextLabel_15.Position = UDim2.new(0, 0, 0, 390)
	TextLabel_15.Size = UDim2.new(0.5, 0, 0, 20)
	TextLabel_15.Font = Enum.Font.SourceSansBold
	TextLabel_15.Text = "Mob CHAMS"
	TextLabel_15.TextColor3 = Color3.new(1, 1, 1)
	TextLabel_15.TextSize = 16
	TextLabel_15.TextTransparency = 0.5
	
	SaveSettings.Name = "SaveSettings"
	SaveSettings.Parent = buttons_3
	SaveSettings.BackgroundColor3 = Color3.new(0.972549, 0.972549, 0.972549)
	SaveSettings.BackgroundTransparency = 0.5
	SaveSettings.BorderSizePixel = 0
	SaveSettings.Position = UDim2.new(0, 0, 0, 420)
	SaveSettings.Size = UDim2.new(1, -15, 0, 20)
	SaveSettings.Font = Enum.Font.SourceSansBold
	SaveSettings.Text = "Save Settings"
	SaveSettings.TextSize = 14
	SaveSettings.TextWrapped = true

	function CreatePlayerLabel(Str, frame)
		local n = #frame:GetChildren()
		local playername = Instance.new("TextLabel")
		playername.Name = Str
		playername.Parent = frame
		playername.BackgroundColor3 = Color3.new(1, 1, 1)
		playername.BackgroundTransparency = 1
		playername.BorderSizePixel = 0
		playername.Position = UDim2.new(0, 5, 0, (n * 15))
		playername.Size = UDim2.new(1, -25, 0, 15)
		playername.Font = Enum.Font.SourceSans
		playername.Text = Str
		playername.TextColor3 = Color3.new(1, 1, 1)
		playername.TextSize = 16
		playername.TextXAlignment = Enum.TextXAlignment.Left
	end

	function RefreshPlayerLabels(frame, t)
		frame:ClearAllChildren()
		for i, v in next, t do
			CreatePlayerLabel(i, frame)
		end
	end

	RefreshPlayerLabels(players, Bullshit.Blacklist)
	RefreshPlayerLabels(players2, Bullshit.FriendList)
	
	ESPToggle.MouseButton1Click:connect(function()
		Bullshit.ESPEnabled = not Bullshit.ESPEnabled
		if Bullshit.ESPEnabled then
			ESPToggle.BackgroundColor3 = Color3.new(0/255,171/255,11/255)
			for _, v in next, Plrs:GetPlayers() do
				if v ~= MyPlr then
					if Bullshit.CharAddedEvent[v.Name] == nil then
						Bullshit.CharAddedEvent[v.Name] = v.CharacterAdded:connect(function(Char)
							if Bullshit.ESPEnabled then
								RemoveESP(v)
								CreateESP(v)
							end
							if Bullshit.CHAMSEnabled then
								RemoveChams(v)
								CreateChams(v)
							end
							if Bullshit.TracersEnabled then
								RemoveTracers(v)
								CreateTracers(v)
							end
							repeat wait() until Char:FindFirstChild("HumanoidRootPart")
							TracerMT[v.Name] = Char.HumanoidRootPart
						end)
					end
					RemoveESP(v)
					CreateESP(v)
				end
			end
			CreateMobESPChams()
		else
			ESPToggle.BackgroundColor3 = Color3.new(1, 1, 1)
			PlayerESP:ClearAllChildren()
			ItemESP:ClearAllChildren()
		end
	end)
	
	ChamsToggle.MouseButton1Click:connect(function()
		Bullshit.CHAMSEnabled = not Bullshit.CHAMSEnabled
		if Bullshit.CHAMSEnabled then
			ChamsToggle.BackgroundColor3 = Color3.new(0/255,171/255,11/255)
			for _, v in next, Plrs:GetPlayers() do
				if v ~= MyPlr then
					if Bullshit.CharAddedEvent[v.Name] == nil then
						Bullshit.CharAddedEvent[v.Name] = v.CharacterAdded:connect(function(Char)
							if Bullshit.ESPEnabled then
								RemoveESP(v)
								CreateESP(v)
							end
							if Bullshit.CHAMSEnabled then
								RemoveChams(v)
								CreateChams(v)
							end
							if Bullshit.TracersEnabled then
								RemoveTracers(v)
								CreateTracers(v)
							end
							repeat wait() until Char:FindFirstChild("HumanoidRootPart")
							TracerMT[v.Name] = Char.HumanoidRootPart
						end)
					end
					RemoveChams(v)
					CreateChams(v)
				end
			end
			CreateMobESPChams()
		else
			ChamsToggle.BackgroundColor3 = Color3.new(1, 1, 1)
			PlayerChams:ClearAllChildren()
			ItemChams:ClearAllChildren()
		end
	end)
	
	TracersToggle.MouseButton1Click:connect(function()
		Bullshit.TracersEnabled = not Bullshit.TracersEnabled
		if Bullshit.TracersEnabled then
			TracersToggle.BackgroundColor3 = Color3.new(0/255,171/255,11/255)
			for _, v in next, Plrs:GetPlayers() do
				if v ~= MyPlr then
					if Bullshit.CharAddedEvent[v.Name] == nil then
						Bullshit.CharAddedEvent[v.Name] = v.CharacterAdded:connect(function(Char)
							if Bullshit.ESPEnabled then
								RemoveESP(v)
								CreateESP(v)
							end
							if Bullshit.CHAMSEnabled then
								RemoveChams(v)
								CreateChams(v)
							end
							if Bullshit.TracersEnabled then
								RemoveTracers(v)
								CreateTracers(v)
							end
						end)
					end
					if v.Character ~= nil then
						local Tor = v.Character:FindFirstChild("HumanoidRootPart")
						if Tor then
							TracerMT[v.Name] = Tor
						end
					end
					RemoveTracers(v)
					CreateTracers(v)
				end
			end
		else
			TracersToggle.BackgroundColor3 = Color3.new(1, 1, 1)
			for _, v in next, Plrs:GetPlayers() do
				RemoveTracers(v)
			end
		end
	end)

	DebugToggle.MouseButton1Click:connect(function()
		Bullshit.DebugInfo = not Bullshit.DebugInfo
		DebugMenu["Main"].Visible = Bullshit.DebugInfo
		if Bullshit.DebugInfo then
			DebugToggle.BackgroundColor3 = Color3.new(0/255,171/255,11/255)
		else
			DebugToggle.BackgroundColor3 = Color3.new(1, 1, 1)
		end
	end)

	OutlineToggle.MouseButton1Click:connect(function()
		Bullshit.OutlinesEnabled = not Bullshit.OutlinesEnabled
		if Bullshit.OutlinesEnabled then
			OutlineToggle.BackgroundColor3 = Color3.new(0/255,171/255,11/255)
			for _, v in next, workspace:GetDescendants() do
				if v:IsA("BasePart") and not Plrs:GetPlayerFromCharacter(v.Parent) and not v.Parent:IsA("Hat") and not v.Parent:IsA("Accessory") and v.Parent.Name ~= "Tracers" then
					local Data = { }
					Data[2] = v.Transparency
					v.Transparency = 1
					local outline = Instance.new("SelectionBox")
					outline.Name = "Outline"
					outline.Color3 = Color3.new(0, 0, 0)
					outline.SurfaceColor3 = Color3.new(0, 1, 0)
					--outline.SurfaceTransparency = 0.9
					outline.LineThickness = 0.01
					outline.Transparency = 0.3
					outline.Adornee = v
					outline.Parent = v
					Data[1] = outline
					rawset(Bullshit.OutlinedParts, v, Data)
				end
				CreateChildAddedEventFor(v)
			end
			CreateChildAddedEventFor(workspace)
			if Bullshit.LightingEvent == nil then
				Bullshit.LightingEvent = game:GetService("Lighting").Changed:connect(LightingHax)
			end
		else
			OutlineToggle.BackgroundColor3 = Color3.new(1, 1, 1)
			for i, v in next, Bullshit.OutlinedParts do
				i.Transparency = v[2]
				v[1]:Destroy()
			end
		end
	end)

	FullbrightToggle.MouseButton1Click:connect(function()
		Bullshit.FullbrightEnabled = not Bullshit.FullbrightEnabled
		if Bullshit.FullbrightEnabled then
			FullbrightToggle.BackgroundColor3 = Color3.new(0/255,171/255,11/255)
			if Bullshit.LightingEvent == nil then
				Bullshit.LightingEvent = Light.Changed:connect(LightingHax)
			end
		else
			FullbrightToggle.BackgroundColor3 = Color3.new(1, 1, 1)
			Light.Ambient = Bullshit.AmbientBackup
			Light.ColorShift_Bottom = Bullshit.ColorShiftBotBackup
			Light.ColorShift_Top = Bullshit.ColorShiftTopBackup
		end
	end)

	Crosshair.MouseButton1Click:connect(function()
		Bullshit.CrosshairEnabled = not Bullshit.CrosshairEnabled
		if Bullshit.CrosshairEnabled then
			local g = Instance.new("ScreenGui", CoreGui)
			g.Name = "Corsshair"
			local line1 = Instance.new("TextLabel", g)
			line1.Text = ""
			line1.Size = UDim2.new(0, 35, 0, 1)
			line1.BackgroundColor3 = Bullshit.Colors.Crosshair
			line1.BorderSizePixel = 0
			line1.ZIndex = 10
			local line2 = Instance.new("TextLabel", g)
			line2.Text = ""
			line2.Size = UDim2.new(0, 1, 0, 35)
			line2.BackgroundColor3 = Bullshit.Colors.Crosshair
			line2.BorderSizePixel = 0
			line2.ZIndex = 10

            local viewport = MyCam.ViewportSize
            local centerx = viewport.X / 2
            local centery = viewport.Y / 2

            line1.Position = UDim2.new(0, centerx - (35 / 2), 0, centery - 35)
            line2.Position = UDim2.new(0, centerx, 0, centery - (35 / 2) - 35)

			Crosshair.BackgroundColor3 = Color3.new(0/255,171/255,11/255)
		else
			local find = CoreGui:FindFirstChild("Corsshair")
			if find then
				find:Destroy()
			end

			Crosshairs.BackgroundColor3 = Color3.new(1, 1, 1)
		end
	end)

	AimbotToggle.MouseButton1Click:connect(function()
		if not (game.PlaceId == 292439477 or game.PlaceId == 606849621) then
			Bullshit.AimbotEnabled = not Bullshit.AimbotEnabled
			if Bullshit.AimbotEnabled then
				AimbotToggle.BackgroundColor3 = Color3.new(0/255,171/255,11/255)
			else
				AimbotToggle.BackgroundColor3 = Color3.new(1, 1, 1)
			end
		else
			local hint = Instance.new("Hint", CoreGui)
			hint.Text = "This game prevents camera manipulation!"
			wait(5)
			hint:Destroy()
		end
	end)

	TracersUnderChars.MouseButton1Click:connect(function()
		Bullshit.PlaceTracersUnderCharacter = not Bullshit.PlaceTracersUnderCharacter
		if Bullshit.PlaceTracersUnderCharacter then
			TracersUnderChars.Text = "true"
		else
			TracersUnderChars.Text = "false"
		end
	end)

	FreeForAll.MouseButton1Click:connect(function()
		Bullshit.FreeForAll = not Bullshit.FreeForAll
		if Bullshit.FreeForAll then
			FreeForAll.Text = "true"
		else
			FreeForAll.Text = "false"
		end
	end)

	ESPLength.FocusLost:connect(function()
		local txt = ESPLength.Text
		local num = tonumber(txt) or 10000
		if num ~= nil then
			if num < 100 then
				num = 100
				ESPLength.Text = num
			elseif num > 10000 then
				num = 10000
				ESPLength.Text = num
			end
		end

		Bullshit.ESPLength = num
		ESPLength.Text = num
	end)

	CHAMSLength.FocusLost:connect(function()
		local txt = CHAMSLength.Text
		local num = tonumber(txt) or 500
		if num ~= nil then
			if num < 100 then
				num = 100
				CHAMSLength.Text = num
			elseif num > 2048 then
				num = 2048
				CHAMSLength.Text = num
			end
		end

		Bullshit.CHAMSLength = num
		CHAMSLength.Text = num
	end)

	TracersLength.FocusLost:connect(function()
		local txt = TracersLength.Text
		local num = tonumber(txt) or 500
		if num ~= nil then
			if num < 100 then
				num = 100
				TracersLength.Text = num
			elseif num > 2048 then
				num = 2048
				TracersLength.Text = num
			end
		end

		Bullshit.TracersLength = num
		TracersLength.Text = num
	end)

	EnemyColor.FocusLost:connect(function()
		local R, G, B = string.match(RemoveSpacesFromString(EnemyColor.Text), "(%d+),(%d+),(%d+)")
		R = tonumber(R)
		G = tonumber(G)
		B = tonumber(B)
		if R > 1 then
			R = R / 255
		end
		if G > 1 then
			G = G / 255
		end
		if B > 1 then
			B = B / 255
		end

		if R ~= nil and G ~= nil and B ~= nil then
			if not (R > 1 and G > 1 and B > 1) and not (R < 0 and G < 0 and B < 0) then
				Bullshit.Colors.Enemy = Color3.new(R, G, B)
				EnemyColor.Text = tostring(Bullshit.Colors.Enemy)
			else
				EnemyColor.Text = tostring(Bullshit.Colors.Enemy)
			end
		else
			EnemyColor.Text = tostring(Bullshit.Colors.Enemy)
		end
	end)

	AllyColor.FocusLost:connect(function()
		local R, G, B = string.match(RemoveSpacesFromString(AllyColor.Text), "(%d+),(%d+),(%d+)")
		R = tonumber(R)
		G = tonumber(G)
		B = tonumber(B)
		if R > 1 then
			R = R / 255
		end
		if G > 1 then
			G = G / 255
		end
		if B > 1 then
			B = B / 255
		end

		if R ~= nil and G ~= nil and B ~= nil then
			if not (R > 1 and G > 1 and B > 1) and not (R < 0 and G < 0 and B < 0) then
				Bullshit.Colors.Ally = Color3.new(R, G, B)
				AllyColor.Text = tostring(Bullshit.Colors.Ally)
			else
				AllyColor.Text = tostring(Bullshit.Colors.Ally)
			end
		else
			AllyColor.Text = tostring(Bullshit.Colors.Ally)
		end
	end)

	FriendColor.FocusLost:connect(function()
		local R, G, B = string.match(RemoveSpacesFromString(FriendColor.Text), "(%d+),(%d+),(%d+)")
		R = tonumber(R)
		G = tonumber(G)
		B = tonumber(B)
		if R > 1 then
			R = R / 255
		end
		if G > 1 then
			G = G / 255
		end
		if B > 1 then
			B = B / 255
		end

		if R ~= nil and G ~= nil and B ~= nil then
			if not (R > 1 and G > 1 and B > 1) and not (R < 0 and G < 0 and B < 0) then
				Bullshit.Colors.Ally = Color3.new(R, G, B)
				FriendColor.Text = tostring(Bullshit.Colors.Friend)
			else
				FriendColor.Text = tostring(Bullshit.Colors.Friend)
			end
		else
			FriendColor.Text = tostring(Bullshit.Colors.Friend)
		end
	end)

	NeutralColor.FocusLost:connect(function()
		local R, G, B = string.match(RemoveSpacesFromString(NeutralColor.Text), "(%d+),(%d+),(%d+)")
		R = tonumber(R)
		G = tonumber(G)
		B = tonumber(B)
		if R > 1 then
			R = R / 255
		end
		if G > 1 then
			G = G / 255
		end
		if B > 1 then
			B = B / 255
		end

		if R ~= nil and G ~= nil and B ~= nil then
			if not (R > 1 and G > 1 and B > 1) and not (R < 0 and G < 0 and B < 0) then
				Bullshit.Colors.Ally = Color3.new(R, G, B)
				NeutralColor.Text = tostring(Bullshit.Colors.Neutral)
			else
				NeutralColor.Text = tostring(Bullshit.Colors.Neutral)
			end
		else
			NeutralColor.Text = tostring(Bullshit.Colors.Neutral)
		end
	end)

	CrosshairColor.FocusLost:connect(function()
		local R, G, B = string.match(RemoveSpacesFromString(CrosshairColor.Text), "(%d+),(%d+),(%d+)")
		R = tonumber(R)
		G = tonumber(G)
		B = tonumber(B)
		if R > 1 then
			R = R / 255
		end
		if G > 1 then
			G = G / 255
		end
		if B > 1 then
			B = B / 255
		end

		if R ~= nil and G ~= nil and B ~= nil then
			if not (R > 1 and G > 1 and B > 1) and not (R < 0 and G < 0 and B < 0) then
				Bullshit.Colors.Ally = Color3.new(R, G, B)
				EnemyColor.Text = tostring(Bullshit.Colors.Crosshair)
			else
				EnemyColor.Text = tostring(Bullshit.Colors.Crosshair)
			end
		else
			EnemyColor.Text = tostring(Bullshit.Colors.Crosshair)
		end
	end)

	AutoFireToggle.MouseButton1Click:connect(function()
		local hint = Instance.new("Hint", CoreGui)
		hint.Text = "Currently broken. :("
		wait(3)
		hint:Destroy()
		--Bullshit.AutoFire = not Bullshit.AutoFire
		--AutoFireToggle.Text = tostring(Bullshit.AutoFire)
	end)

	AimbotKey.MouseButton1Click:connect(function()
		AimbotKey.Text = "Press any Key now."
		local input = UserInput.InputBegan:wait()
		if input.UserInputType == Enum.UserInputType.Keyboard then
			Bullshit.AimbotKey = tostring(input.KeyCode)
			AimbotKey.Text = string.sub(tostring(input.KeyCode), 14)
		else
			Bullshit.AimbotKey = tostring(input.UserInputType)
			AimbotKey.Text = string.sub(tostring(input.UserInputType), 20)
		end
	end)

	MobESPButton.MouseButton1Click:connect(function()
		Bullshit.MobESP = not Bullshit.MobESP
		MobESPButton.Text = tostring(Bullshit.MobESP)
		if Bullshit.MobESP then
			local hint = Instance.new("Hint", CoreGui)
			hint.Text = "Turn ESP/Chams off and on again to see mob ESP."
			wait(5)
			hint.Text = "This is still in beta, expect problems! Message Racist Dolphin#5199 on discord if you encounter a bug!"
			wait(10)
			hint:Destroy()
		end
	end)

	MobChamsButton.MouseButton1Click:connect(function()
		Bullshit.MobChams = not Bullshit.MobChams
		MobChamsButton.Text = tostring(Bullshit.MobChams)
		if Bullshit.MobChams then
			local hint = Instance.new("Hint", CoreGui)
			hint.Text = "Turn ESP/Chams off and on again to see mob chams."
			wait(5)
			hint.Text = "This is still in beta, expect problems! Message Racist Dolphin#5199 on discord if you encounter a bug!"
			wait(10)
			hint:Destroy()
		end
	end)

	Playername.FocusLost:connect(function()
		local FindPlr = FindPlayer(Playername.Text)
		if FindPlr then
			Playername.Text = FindPlr.Name
		elseif not Bullshit.Blacklist[Playername.Text] then
			Playername.Text = "Player not Found!"
			wait(1)
			Playername.Text = "Enter Player Name"
		end
	end)

	AddToBlacklist.MouseButton1Click:connect(function()
		local FindPlr = FindPlayer(Playername.Text)
		if FindPlr then
			if not Bullshit.Blacklist[FindPlr.Name] then
				Bullshit.Blacklist[FindPlr.Name] = true
				UpdateChams(FindPlr)
				CreatePlayerLabel(FindPlr.Name, players)
			end
		end
	end)

	RemoveToBlacklist.MouseButton1Click:connect(function()
		local FindPlr = FindPlayer(Playername.Text)
		if FindPlr then
			if Bullshit.Blacklist[FindPlr.Name] then
				Bullshit.Blacklist[FindPlr.Name] = nil
				UpdateChams(FindPlr)
				RefreshPlayerLabels(players, Bullshit.Blacklist)
			end
		else
			if Bullshit.Blacklist[Playername.Text] then
				Bullshit.Blacklist[Playername.Text] = nil
				RefreshPlayerLabels(players, Bullshit.Blacklist)
			end
		end
	end)

	Playername2.FocusLost:connect(function()
		local FindPlr = FindPlayer(Playername2.Text)
		if FindPlr then
			Playername2.Text = FindPlr.Name
		elseif not Bullshit.FriendList[Playername2.Text] then
			Playername2.Text = "Player not Found!"
			wait(1)
			Playername2.Text = "Enter Player Name"
		end
	end)

	AddToWhitelist.MouseButton1Click:connect(function()
		local FindPlr = FindPlayer(Playername2.Text)
		if FindPlr then
			if not Bullshit.FriendList[FindPlr.Name] then
				Bullshit.FriendList[FindPlr.Name] = true
				UpdateChams(FindPlr)
				CreatePlayerLabel(FindPlr.Name, players2)
			end
		end
	end)

	RemoveToWhitelist.MouseButton1Click:connect(function()
		local FindPlr = FindPlayer(Playername2.Text)
		if FindPlr then
			if Bullshit.FriendList[FindPlr.Name] then
				Bullshit.FriendList[FindPlr.Name] = nil
				UpdateChams(FindPlr)
				RefreshPlayerLabels(players2, Bullshit.FriendList)
			end
		else
			if Bullshit.FriendList[Playername2.Text] then
				Bullshit.FriendList[Playername2.Text] = nil
				RefreshPlayerLabels(players2, Bullshit.FriendList)
			end
		end
	end)

	SaveWhitelist.MouseButton1Click:connect(function()
		pcall(function()
			writefile("Whitelist.txt", HTTP:JSONEncode(Bullshit.FriendList))
		end)
		SaveWhitelist.Text = "Saved!"
		wait(1)
		SaveWhitelist.Text = "Save Friends List"
	end)

	SaveBlacklist.MouseButton1Click:connect(function()
		pcall(function()
			writefile("Blacklist.txt", HTTP:JSONEncode(Bullshit.Blacklist))
		end)
		SaveBlacklist.Text = "Saved!"
		wait(1)
		SaveBlacklist.Text = "Save Blacklist"
	end)

	Settings.MouseButton1Click:connect(function()
		Settings_2.Visible = not Settings_2.Visible
		Information_2.Visible = false
		Blacklist.Visible = false
		Whitelist.Visible = false
		if Settings_2.Visible then
			Settings.BackgroundColor3 = Color3.new(0/255,171/255,11/255)
			Information.BackgroundColor3 = Color3.new(1, 1, 1)
			BlacklistToggle.BackgroundColor3 = Color3.new(1, 1, 1)
			WhitelistToggle.BackgroundColor3 = Color3.new(1, 1, 1)
		else
			Settings.BackgroundColor3 = Color3.new(1, 1, 1)
		end
	end)

	Information.MouseButton1Click:connect(function()
		Information_2.Visible = not Information_2.Visible
		Settings_2.Visible = false
		Blacklist.Visible = false
		Whitelist.Visible = false
		if Information_2.Visible then
			Information.BackgroundColor3 = Color3.new(0/255,171/255,11/255)
			Settings.BackgroundColor3 = Color3.new(1, 1, 1)
			BlacklistToggle.BackgroundColor3 = Color3.new(1, 1, 1)
			WhitelistToggle.BackgroundColor3 = Color3.new(1, 1, 1)
		else
			Information.BackgroundColor3 = Color3.new(1, 1, 1)
		end
	end)

	BlacklistToggle.MouseButton1Click:connect(function()
		Blacklist.Visible = not Blacklist.Visible
		Settings_2.Visible = false
		Information_2.Visible = false
		Whitelist.Visible = false
		if Blacklist.Visible then
			BlacklistToggle.BackgroundColor3 = Color3.new(0/255,171/255,11/255)
			Settings.BackgroundColor3 = Color3.new(1, 1, 1)
			Information.BackgroundColor3 = Color3.new(1, 1, 1)
			WhitelistToggle.BackgroundColor3 = Color3.new(1, 1, 1)
		else
			BlacklistToggle.BackgroundColor3 = Color3.new(1, 1, 1)
		end
	end)

	WhitelistToggle.MouseButton1Click:connect(function()
		Whitelist.Visible = not Whitelist.Visible
		Settings_2.Visible = false
		Information_2.Visible = false
		Blacklist.Visible = false
		if Whitelist.Visible then
			WhitelistToggle.BackgroundColor3 = Color3.new(0/255,171/255,11/255)
			Settings.BackgroundColor3 = Color3.new(1, 1, 1)
			Information.BackgroundColor3 = Color3.new(1, 1, 1)
			BlacklistToggle.BackgroundColor3 = Color3.new(1, 1, 1)
		else
			WhitelistToggle.BackgroundColor3 = Color3.new(1, 1, 1)
		end
	end)

	SaveSettings.MouseButton1Click:connect(function()
		SaveBullshitSettings()
		SaveSettings.Text = "Saved!"
		wait(1)
		SaveSettings.Text = "Save Settings"
	end)

	UserInput.InputBegan:connect(function(input, ingui)
		if not ingui then
			if input.UserInputType == Enum.UserInputType.Keyboard then
				if input.KeyCode == Enum.KeyCode.P then
					MainFrame.Visible = not MainFrame.Visible
				end
			end

			if tostring(input.KeyCode) == Bullshit.AimbotKey or tostring(input.UserInputType) == Bullshit.AimbotKey then
				Bullshit.Aimbot = true
			end
		end
	end)

	UserInput.InputEnded:connect(function(input)
		if tostring(input.KeyCode) == Bullshit.AimbotKey or tostring(input.UserInputType) == Bullshit.AimbotKey then
			Bullshit.Aimbot = false
		end
	end)
end

InitMain()

Run:BindToRenderStep("UpdateESP", Enum.RenderPriority.Character.Value, function()
	for _, v in next, Plrs:GetPlayers() do
		if v ~= MyPlr then
			UpdateESP(v)
		end
	end
end)

Run:BindToRenderStep("UpdateInfo", 1000, function()
	Bullshit.ClosestEnemy = GetClosestPlayer()
	MyChar = MyPlr.Character
	if Bullshit.DebugInfo then
		local MyHead, MyTor, MyHum = MyChar:FindFirstChild("Head"), MyChar:FindFirstChild("HumanoidRootPart"), MyChar:FindFirstChild("Humanoid")

		local GetChar, GetHead, GetTor, GetHum = nil, nil, nil, nil
		if Bullshit.ClosestEnemy ~= nil then
			GetChar = Bullshit.ClosestEnemy.Character
			GetHead = GetChar:FindFirstChild("Head")
			GetTor = GetChar:FindFirstChild("HumanoidRootPart")
			GetHum = GetChar:FindFirstChild("Humanoid")

			DebugMenu["PlayerSelected"].Text = "Closest Enemy: " .. tostring(Bullshit.ClosestEnemy)

			if Bullshit.ClosestEnemy.Team ~= nil then
				DebugMenu["PlayerTeam"].Text = "Team: " .. tostring(Bullshit.ClosestEnemy.Team)
			else
				DebugMenu["PlayerTeam"].Text = "Team: nil"
			end

			if GetHum then
				DebugMenu["PlayerHealth"].Text = "Health: " .. string.format("%.0f", GetHum.Health)
			end
			if MyTor and GetTor then
				local Pos = GetTor.Position
				local Dist = (MyTor.Position - Pos).magnitude
				DebugMenu["PlayerPosition"].Text = "Position: (X: " .. string.format("%.3f", Pos.X) .. " Y: " .. string.format("%.3f", Pos.Y) .. " Z: " .. string.format("%.3f", Pos.Z) .. ") Distance: " .. string.format("%.0f", Dist) .. " Studs"

				local MyCharStuff = MyChar:GetDescendants()
				local GetCharStuff = GetChar:GetDescendants()
				for _, v in next, GetCharStuff do
					if v ~= GetTor then
						table.insert(MyCharStuff, v)
					end
				end
				local Ray = Ray.new(MyTor.Position, (Pos - MyTor.Position).unit * 300)
				local part = workspace:FindPartOnRayWithIgnoreList(Ray, MyCharStuff)
				if part == GetTor then
					DebugMenu["BehindWall"].Text = "Behind Wall: false"
				else
					DebugMenu["BehindWall"].Text = "Behind Wall: true"
				end

				DebugMenu["Main"].Size = UDim2.new(0, DebugMenu["PlayerPosition"].TextBounds.X, 0, 200)
			end
		end

		-- My Position
		if MyTor then
			local Pos = MyTor.Position
			DebugMenu["Position"].Text = "My Position: (X: " .. string.format("%.3f", Pos.x) .. " Y: " .. string.format("%.3f", Pos.Y) .. " Z: " .. string.format("%.3f", Pos.Z) .. ")"
		end

		-- FPS
		local fps = math.floor(.5 + (1 / (tick() - LastTick)))
		local sum = 0
		local ave = 0
		table.insert(Bullshit.FPSAverage, fps)
		for i = 1, #Bullshit.FPSAverage do
			sum = sum + Bullshit.FPSAverage[i]
		end
		DebugMenu["FPS"].Text = "FPS: " .. tostring(fps) .. " Average: " .. string.format("%.0f", (sum / #Bullshit.FPSAverage))
		if (tick() - LastTick) >= 15 then
			Bullshit.FPSAverage = { }
			LastTick = tick()
		end
		LastTick = tick()
	end
end)

Run:BindToRenderStep("Aimbot", Enum.RenderPriority.First.Value, function()
	ClosestEnemy = GetClosestPlayerNotBehindWall()
	if Bullshit.AimbotEnabled and Bullshit.Aimbot then
		if ClosestEnemy ~= nil then
			local GetChar = ClosestEnemy.Character
			if MyChar and GetChar then
				local MyCharStuff = MyChar:GetDescendants()
				local MyHead = MyChar:FindFirstChild("Head")
				local MyTor = MyChar:FindFirstChild("HumanoidRootPart")
				local MyHum = MyChar:FindFirstChild("Humanoid")
				local GetHead = GetChar:FindFirstChild("Head")
				local GetTor = GetChar:FindFirstChild("HumanoidRootPart")
				local GetHum = GetChar:FindFirstChild("Humanoid")
				if MyHead and MyTor and MyHum and GetHead and GetTor and GetHum then
					if MyHum.Health > 1 and (GetHum.Health > 1 and not GetChar:FindFirstChild("KO")) then
						MyPlr.CameraMode = Enum.CameraMode.LockFirstPerson
						MyCam.CFrame = CFrame.new(MyHead.CFrame.p, GetHead.CFrame.p)
						if Bullshit.AutoFire then
							mouse1click() -- >:(
						end
					end
				end
			end
		end
	else
		MyPlr.CameraMode = Bullshit.CameraModeBackup
	end
end)

local succ, out = coroutine.resume(coroutine.create(function()
	while true do
		for _, v in next, Plrs:GetPlayers() do
			UpdateChams(v)
			Run.RenderStepped:wait()
		end
	end
end))

if not succ then
	error(out)
end
end)

Section5:NewButton("Arsenal kill all", "Kill all in arsenal lol", function()
    game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(k)
        if k == "e" then
        local Gun = game.ReplicatedStorage.Weapons:FindFirstChild(game.Players.LocalPlayer.NRPBS.EquippedTool.Value);
        local Crit = math.random() > .6 and true or false;
        for i,v in pairs(game.Players:GetPlayers()) do
        if v and v.Character and v.Character:FindFirstChild("Head") then
        local Distance = (game.Players.LocalPlayer.Character.Head.Position - v.Character.Head.Position).magnitude
        for i  = 1,10 do
        game.ReplicatedStorage.Events.HitPart:FireServer(v.Character.Head,
        v.Character.Head.Position + Vector3.new(math.random(), math.random(), math.random()),
        Gun.Name,
        Crit and 2 or 1,
        Distance,
        Backstab,
        Crit,
        false,
        1,
        false,
        Gun.FireRate.Value,
        Gun.ReloadTime.Value,
        Gun.Ammo.Value,
        Gun.StoredAmmo.Value,
        Gun.Bullets.Value,
        Gun.EquipTime.Value,
        Gun.RecoilControl.Value,
        Gun.Auto.Value,
        Gun['Speed%'].Value,
        game.ReplicatedStorage.wkspc.DistributedTime.Value);
        end
        end
        end
        end
        end)
end)

Section5:NewButton("Bacon hub", "Idk", function()
    loadstring(game:HttpGet('http://skiascripts.xyz/baconhub.lua', true))();
end)

Section5:NewButton("Bloxburg", "Bloxburg script", function()
    local library = loadstring(game:HttpGet('https://zypher.wtf/Libraries/DH-UI-Lib.lua'))()
    main = library:CreateMain()
    local m = main:CreateWindow('AutoFarm',false, -25)
    
    Client = {
        Hair = false,
        Burger = false
    }
    StationFunctions = {}
    BurgerFunctions = {}
    m:Toggle('Hair shit',function(state)
        for i,v in pairs(getgc(true)) do
            if type(v) == "function" and getfenv(v).script == game:GetService("Players").LocalPlayer.PlayerGui.MainGUI.Scripts.JobManager.StylezHairdresser then
                local con = getconstants(v)
                if table.find(con,"CanUseWorkstation") and table.find(con,"Done") and table.find(con,'Style') then
                    table.insert(StationFunctions,v)
                end
            end
        end
        Client.Hair = state
    end)
    m:Toggle('Burger shit',function(state)
        for i,v in pairs(getgc(true)) do
            if type(v) == "function" and getfenv(v).script == game:GetService("Players").LocalPlayer.PlayerGui.MainGUI.Scripts.JobManager.BloxyBurgersCashier then
                local con = getconstants(v)
                if table.find(con,"CanUseWorkstation") and table.find(con,"Done") then
                    table.insert(BurgerFunctions,v)
                end
            end
        end
        Client.Burger = state
    end)
    
    
    
    for i,v in pairs(getgc(true)) do
        if type(v) == "function" and getfenv(v).script == game:GetService("Players").LocalPlayer.PlayerGui.MainGUI.Scripts.JobManager.StylezHairdresser then
            local con = getconstants(v)
            if table.find(con,"CanUseWorkstation") and table.find(con,"Done") and table.find(con,'Style') then
                table.insert(StationFunctions,v)
            end
        end
    end
    wait()
    for i,v in pairs(getgc(true)) do
        if type(v) == "function" and getfenv(v).script == game:GetService("Players").LocalPlayer.PlayerGui.MainGUI.Scripts.JobManager.BloxyBurgersCashier then
            local con = getconstants(v)
            if table.find(con,"CanUseWorkstation") and table.find(con,"Done") then
                table.insert(BurgerFunctions,v)
            end
        end
    end
    wait()
    --Hair shit
    local l__HairAssets__3 = game.ReplicatedStorage:WaitForChild("GameObjects"):WaitForChild("HairAssets");
    Styles = {}
    for i,v in pairs(l__HairAssets__3.Styles:GetChildren()) do
        table.insert(Styles,v)
    end
    Colors = {}
    for i,v in pairs(l__HairAssets__3.Colors:GetChildren()) do
        table.insert(Colors,v)
    end
    function fireButton1(button)
        for i,signal in next, getconnections(button.MouseButton1Click) do
            signal:Fire()
        end
        for i,signal in next, getconnections(button.MouseButton1Down) do
            signal:Fire()
        end
        for i,signal in next, getconnections(button.Activated) do
            signal:Fire()
        end
    end
    
    function DoHair()
    for i,v in pairs(StationFunctions) do
                if debug.getupvalues(v)[2]:FindFirstChild('InUse').Value == game.Players.LocalPlayer then
                    CurrentStationFunction = v
                    if debug.getupvalues(CurrentStationFunction)[2]:FindFirstChild('Occupied').Value ~= nil then
                        wait()
                        for i,v in pairs(Colors) do
                            if tostring(v) == debug.getupvalues(CurrentStationFunction)[2]:FindFirstChild('Occupied').Value.Order.Color.Value then
                                value = debug.getupvalues(CurrentStationFunction)[4][2]
                                goingto = i
                                SolvedNum = goingto - value
                                if string.match(tostring(SolvedNum),'-') then
                                    SplitValue = string.split(tostring(SolvedNum),'')
                                    for i = 0,SplitValue[2] + 1 do
                                        CurrentStationFunction('Color_Back')
                                        wait()
                                    end
                                else
                                for i = 0,SolvedNum - 1 do
                                    CurrentStationFunction('Color_Next')
                                    wait()
                                    end
                                end
                                wait(0.3)
                            end
                        end
                        for i,v in pairs(Styles) do
                            if tostring(v) == debug.getupvalues(CurrentStationFunction)[2]:FindFirstChild('Occupied').Value.Order.Style.Value then
                                    wait()
                                        value = debug.getupvalues(CurrentStationFunction)[4][1]
                                        goingto = i
                                        SolvedNum = goingto-value
                                        if string.match(tostring(SolvedNum),'-') then
                                            SplitValue = string.split(tostring(SolvedNum),'')
                                            for i = 0,SplitValue[2] + 1 do
                                                CurrentStationFunction('Style_Back')
                                                wait()
                                            end
                                        else
                                        for i = 0,SolvedNum + -1 do
                                            uwu = i
                                            CurrentStationFunction('Style_Next')
                                            wait()
                                        end
                                    end
                                end
                            end
                            wait()
                            wait(1)
                            CurrentStationFunction('Done')
                        break
                    end
                end
            end
    end
    
    --Burger Shit
    
    function DoBurger()
    for i,v in pairs(BurgerFunctions) do
                if debug.getupvalues(v)[2].Occupied.Value ~= nil then
                    func = v
                    OrderBurger = debug.getupvalues(v)[2].Occupied.Value.Order
                        if OrderBurger:FindFirstChild('Burger') then
                            func(OrderBurger.Burger.Value)
                        end
                        if OrderBurger:FindFirstChild('Cola') and OrderBurger.Cola.Value == true then
                            func('Cola')
                        end
                        if OrderBurger:FindFirstChild('Fries') and OrderBurger.Fries.Value == true then
                            func('Fries')
                        end
                        wait()
                    wait(1)
                    v('Done')
                end
            end
    end
    
    
    spawn(function()
        while true do
            wait()
            if Client.Hair == true then
                DoHair()
                wait(math.random(3,4))
            end
            if Client.Burger == true then
                DoBurger()
                wait(math.random(3,4))
            end
        end
    end)
end)   

Section5:NewButton("Prison life", "Prison life game or smth like that", function()
    local PrisonGui = Instance.new("ScreenGui")
    local Main = Instance.new("Frame")
    local Title = Instance.new("TextLabel")
    local TitleBar = Instance.new("TextLabel")
    local ObGuns = Instance.new("TextButton")
    local Close = Instance.new("TextButton")
    local KillAll = Instance.new("TextButton")
    local TaseBypass = Instance.new("TextButton")
    local RemoveDoors = Instance.new("TextButton")
    local Btools = Instance.new("TextButton")
    local BeNeutral = Instance.new("TextButton")
    local ModGun = Instance.new("TextButton")
    local ForceCgui = Instance.new("Frame")
    local ComSeperateBar = Instance.new("TextLabel")
    local InsertUser = Instance.new("TextBox")
    local UserHolder = Instance.new("TextLabel")
    local CrimTitle = Instance.new("TextLabel")
    local CrimTitleBar = Instance.new("TextLabel")
    local TextButton = Instance.new("TextButton")
    local CrimHideButton = Instance.new("TextButton")
    local TPshow = Instance.new("TextButton")
    local LocalCommands = Instance.new("Frame")
    local LocalCMD_Title = Instance.new("TextLabel")
    local NexusTPbut = Instance.new("TextButton")
    local CrimBaseTPbut = Instance.new("TextButton")
    local GuardAreaTPbut = Instance.new("TextButton")
    local FLY = Instance.new("TextButton")
    local NWalk = Instance.new("TextButton")
    local Njump = Instance.new("TextButton")
    local tfJump = Instance.new("TextButton")
    local Respawn = Instance.new("TextButton")
    local tfWalk = Instance.new("TextButton")
    local LocalCMD_BarTitle = Instance.new("TextLabel")
    local TheLocal = Instance.new("TextButton")
    local CrimG = Instance.new("TextButton")
    local tpgui = Instance.new("Frame")
    local TPtileBar = Instance.new("TextLabel")
    local TPYEET = Instance.new("TextButton")
    local UserHolderTP = Instance.new("TextLabel")
    local InsertUserTP = Instance.new("TextBox")
    local TpTitle = Instance.new("TextLabel")
    local RightSepBarTp = Instance.new("TextLabel")
    local TpHideButton = Instance.new("TextButton")
    local AmokahsLogo = Instance.new("ImageLabel")
    local SuperPunch = Instance.new("TextButton")
    local KillAura = Instance.new("TextButton")
    local BeCriminal = Instance.new("TextButton")
    local BeGuard = Instance.new("TextButton")
    local BeInmate = Instance.new("TextButton")
    local ArrestAll = Instance.new("TextButton")
    local InvGuns = Instance.new("TextButton")
    local CrimPunch = Instance.new("TextButton")
    local Trans = Instance.new("TextButton")
    local Open = Instance.new("Frame")
    local OpenGUI = Instance.new("TextButton")
    local Credit = Instance.new("TextLabel")
    local Dino = Instance.new("TextLabel")
    local KA = Instance.new("Frame")
    local NameOfKa = Instance.new("TextLabel")
    local TrueOrFalse = Instance.new("TextLabel")
    local TeamGUIOC = Instance.new("Frame")
    local TeamOPorCL = Instance.new("TextButton")
    local TeamMain = Instance.new("Frame")
    local TextLabel = Instance.new("TextLabel")
    local TextLabel_2 = Instance.new("TextLabel")
    local SOG = Instance.new("TextButton")
    local SOC = Instance.new("TextButton")
    local SOI = Instance.new("TextButton")
    local Disable = Instance.new("TextButton")
    local Apart = Instance.new("Part")
    
    Apart.Name = "PlrsPos"
    Apart.Parent = workspace
    Apart.Anchored = true
    Apart.Archivable = true
    Apart.CFrame = CFrame.new(9e99, 9e99, 9e99)
    
    -- Properties
    
    PrisonGui.Name = "PrisonGui"
    PrisonGui.Parent = game:GetService("Players").LocalPlayer.PlayerGui
    
    Main.Name = "Main"
    Main.Parent = PrisonGui
    Main.BackgroundColor3 = Color3.new(0.219608, 0.219608, 0.219608)
    Main.BorderSizePixel = 0
    Main.Position = UDim2.new(0.345, 0,2.204, 0)
    Main.Size = UDim2.new(0, 338, 0, 301)
    Main.Visible = false
    
    Title.Name = "Title"
    Title.Parent = Main
    Title.BackgroundColor3 = Color3.new(1, 1, 1)
    Title.BackgroundTransparency = 1
    Title.BorderSizePixel = 0
    Title.Position = UDim2.new(0.136094674, 0, 0.00996677764, 0)
    Title.Size = UDim2.new(0, 162, 0, 31)
    Title.Font = Enum.Font.SourceSansLight
    Title.FontSize = Enum.FontSize.Size14
    Title.Text = "Prison Life v2.0.2 GUI"
    Title.TextColor3 = Color3.new(0.807843, 0.807843, 0.807843)
    Title.TextScaled = true
    Title.TextStrokeTransparency = 0
    Title.TextWrapped = true
    
    TitleBar.Name = "TitleBar"
    TitleBar.Parent = Main
    TitleBar.BackgroundColor3 = Color3.new(0, 0, 0)
    TitleBar.BackgroundTransparency = 0.5
    TitleBar.BorderSizePixel = 0
    TitleBar.Position = UDim2.new(0, 0, 0.116104871, 0)
    TitleBar.Size = UDim2.new(0, 338, 0, 6)
    TitleBar.Font = Enum.Font.SourceSans
    TitleBar.FontSize = Enum.FontSize.Size14
    TitleBar.Text = ""
    TitleBar.TextColor3 = Color3.new(0, 0, 0)
    
    ObGuns.Name = "ObGuns"
    ObGuns.Parent = Main
    ObGuns.BackgroundColor3 = Color3.new(1, 1, 1)
    ObGuns.BackgroundTransparency = 0.5
    ObGuns.BorderSizePixel = 0
    ObGuns.Position = UDim2.new(0.0147928996, 0, 0.16104874, 0)
    ObGuns.Size = UDim2.new(0, 159, 0, 22)
    ObGuns.Font = Enum.Font.SourceSans
    ObGuns.FontSize = Enum.FontSize.Size14
    ObGuns.Text = "OBTAIN GUNS"
    ObGuns.TextColor3 = Color3.new(1, 1, 1)
    ObGuns.TextScaled = true
    ObGuns.TextStrokeTransparency = 0
    ObGuns.TextWrapped = true
    
    Close.Name = "Close"
    Close.Parent = Main
    Close.BackgroundColor3 = Color3.new(1, 0.34902, 0.34902)
    Close.BackgroundTransparency = 0.30000001192093
    Close.BorderSizePixel = 0
    Close.Position = UDim2.new(0.908284009, 0, 0.0224719122, 0)
    Close.Size = UDim2.new(0, 24, 0, 24)
    Close.Font = Enum.Font.SourceSans
    Close.FontSize = Enum.FontSize.Size14
    Close.Text = ""
    Close.TextColor3 = Color3.new(0, 0, 0)
    
    KillAll.Name = "KillAll"
    KillAll.Parent = Main
    KillAll.BackgroundColor3 = Color3.new(1, 1, 1)
    KillAll.BackgroundTransparency = 0.5
    KillAll.BorderSizePixel = 0
    KillAll.Position = UDim2.new(0.0177514795, 0, 0.265917659, 0)
    KillAll.Size = UDim2.new(0, 159, 0, 22)
    KillAll.Font = Enum.Font.SourceSans
    KillAll.FontSize = Enum.FontSize.Size14
    KillAll.Text = "KILL ALL"
    KillAll.TextColor3 = Color3.new(1, 1, 1)
    KillAll.TextScaled = true
    KillAll.TextStrokeTransparency = 0
    KillAll.TextWrapped = true
    
    TaseBypass.Name = "TaseBypass"
    TaseBypass.Parent = Main
    TaseBypass.BackgroundColor3 = Color3.new(1, 1, 1)
    TaseBypass.BackgroundTransparency = 0.5
    TaseBypass.BorderSizePixel = 0
    TaseBypass.Position = UDim2.new(0.0177514795, 0, 0.370786548, 0)
    TaseBypass.Size = UDim2.new(0, 159, 0, 22)
    TaseBypass.Font = Enum.Font.SourceSans
    TaseBypass.FontSize = Enum.FontSize.Size14
    TaseBypass.Text = "TASER BYPASS"
    TaseBypass.TextColor3 = Color3.new(1, 1, 1)
    TaseBypass.TextScaled = true
    TaseBypass.TextStrokeTransparency = 0
    TaseBypass.TextWrapped = true
    
    RemoveDoors.Name = "RemoveDoors"
    RemoveDoors.Parent = Main
    RemoveDoors.BackgroundColor3 = Color3.new(1, 1, 1)
    RemoveDoors.BackgroundTransparency = 0.5
    RemoveDoors.BorderSizePixel = 0
    RemoveDoors.Position = UDim2.new(0.0177514795, 0, 0.483146131, 0)
    RemoveDoors.Size = UDim2.new(0, 158, 0, 22)
    RemoveDoors.Font = Enum.Font.SourceSans
    RemoveDoors.FontSize = Enum.FontSize.Size14
    RemoveDoors.Text = "REMOVE ALL DOORS"
    RemoveDoors.TextColor3 = Color3.new(1, 1, 1)
    RemoveDoors.TextScaled = true
    RemoveDoors.TextStrokeTransparency = 0
    RemoveDoors.TextWrapped = true
    
    Btools.Name = "Btools"
    Btools.Parent = Main
    Btools.BackgroundColor3 = Color3.new(1, 1, 1)
    Btools.BackgroundTransparency = 0.5
    Btools.BorderSizePixel = 0
    Btools.Position = UDim2.new(0.0177514795, 0, 0.58801502, 0)
    Btools.Size = UDim2.new(0, 159, 0, 22)
    Btools.Font = Enum.Font.SourceSans
    Btools.FontSize = Enum.FontSize.Size14
    Btools.Text = "BTOOLS"
    Btools.TextColor3 = Color3.new(1, 1, 1)
    Btools.TextScaled = true
    Btools.TextStrokeTransparency = 0
    Btools.TextWrapped = true
    
    BeNeutral.Name = "BeNeutral"
    BeNeutral.Parent = Main
    BeNeutral.BackgroundColor3 = Color3.new(1, 1, 1)
    BeNeutral.BackgroundTransparency = 0.5
    BeNeutral.BorderSizePixel = 0
    BeNeutral.Position = UDim2.new(0.756781578, 0, 0.696629226, 0)
    BeNeutral.Size = UDim2.new(0, 74, 0, 22)
    BeNeutral.Font = Enum.Font.SourceSans
    BeNeutral.FontSize = Enum.FontSize.Size14
    BeNeutral.Text = "NEUTRAL"
    BeNeutral.TextColor3 = Color3.new(1, 1, 1)
    BeNeutral.TextScaled = true
    BeNeutral.TextStrokeTransparency = 0
    BeNeutral.TextWrapped = true
    
    ModGun.Name = "ModGun"
    ModGun.Parent = Main
    ModGun.BackgroundColor3 = Color3.new(1, 1, 1)
    ModGun.BackgroundTransparency = 0.5
    ModGun.BorderSizePixel = 0
    ModGun.Position = UDim2.new(0.0177514795, 0, 0.801498115, 0)
    ModGun.Size = UDim2.new(0, 325, 0, 22)
    ModGun.Font = Enum.Font.SourceSans
    ModGun.FontSize = Enum.FontSize.Size14
    ModGun.Text = "MOD YOUR GUN (Hold the item first)"
    ModGun.TextColor3 = Color3.new(1, 1, 1)
    ModGun.TextScaled = true
    ModGun.TextStrokeTransparency = 0
    ModGun.TextWrapped = true
    
    ForceCgui.Name = "ForceCgui"
    ForceCgui.Parent = Main
    ForceCgui.BackgroundColor3 = Color3.new(0.219608, 0.219608, 0.219608)
    ForceCgui.BorderSizePixel = 0
    ForceCgui.Position = UDim2.new(1, 0, 0.215946838, 0)
    ForceCgui.Size = UDim2.new(0, 155, 0, 198)
    
    ComSeperateBar.Name = "ComSeperateBar"
    ComSeperateBar.Parent = ForceCgui
    ComSeperateBar.BackgroundColor3 = Color3.new(1, 1, 1)
    ComSeperateBar.BackgroundTransparency = 0.5
    ComSeperateBar.BorderSizePixel = 0
    ComSeperateBar.Position = UDim2.new(0, 0, 0.0757575706, 0)
    ComSeperateBar.Size = UDim2.new(0, 1, 0, 167)
    ComSeperateBar.Font = Enum.Font.SourceSans
    ComSeperateBar.FontSize = Enum.FontSize.Size14
    ComSeperateBar.Text = ""
    ComSeperateBar.TextColor3 = Color3.new(0, 0, 0)
    
    InsertUser.Name = "InsertUser"
    InsertUser.Parent = ForceCgui
    InsertUser.BackgroundColor3 = Color3.new(1, 1, 1)
    InsertUser.BackgroundTransparency = 1
    InsertUser.BorderSizePixel = 0
    InsertUser.Position = UDim2.new(0.0064516128, 0, 0.186868697, 0)
    InsertUser.Size = UDim2.new(0, 154, 0, 50)
    InsertUser.Font = Enum.Font.SourceSansLight
    InsertUser.FontSize = Enum.FontSize.Size14
    InsertUser.Text = "USERNAME"
    InsertUser.TextColor3 = Color3.new(1, 1, 1)
    InsertUser.TextScaled = true
    InsertUser.TextWrapped = true
    
    UserHolder.Name = "UserHolder"
    UserHolder.Parent = ForceCgui
    UserHolder.BackgroundColor3 = Color3.new(0.0156863, 0.0156863, 0.0156863)
    UserHolder.BorderSizePixel = 0
    UserHolder.Position = UDim2.new(0.0516129024, 0, 0.451651365, 0)
    UserHolder.Size = UDim2.new(0, 139, 0, 3)
    UserHolder.Font = Enum.Font.SourceSans
    UserHolder.FontSize = Enum.FontSize.Size14
    UserHolder.Text = ""
    UserHolder.TextColor3 = Color3.new(0, 0, 0)
    
    CrimTitle.Name = "CrimTitle"
    CrimTitle.Parent = ForceCgui
    CrimTitle.BackgroundColor3 = Color3.new(1, 1, 1)
    CrimTitle.BackgroundTransparency = 1
    CrimTitle.BorderSizePixel = 0
    CrimTitle.Position = UDim2.new(0.0064516128, 0, 0, 0)
    CrimTitle.Size = UDim2.new(0, 154, 0, 31)
    CrimTitle.Font = Enum.Font.SourceSansLight
    CrimTitle.FontSize = Enum.FontSize.Size14
    CrimTitle.Text = "CRIMINAL GUI"
    CrimTitle.TextColor3 = Color3.new(1, 1, 1)
    CrimTitle.TextScaled = true
    CrimTitle.TextStrokeTransparency = 0
    CrimTitle.TextWrapped = true
    
    CrimTitleBar.Name = "CrimTitleBar"
    CrimTitleBar.Parent = ForceCgui
    CrimTitleBar.BackgroundColor3 = Color3.new(0, 0, 0)
    CrimTitleBar.BackgroundTransparency = 0.5
    CrimTitleBar.BorderSizePixel = 0
    CrimTitleBar.Position = UDim2.new(0.0064516128, 0, 0.14952904, 0)
    CrimTitleBar.Size = UDim2.new(0, 154, 0, 1)
    CrimTitleBar.Font = Enum.Font.SourceSans
    CrimTitleBar.FontSize = Enum.FontSize.Size14
    CrimTitleBar.Text = ""
    CrimTitleBar.TextColor3 = Color3.new(0, 0, 0)
    
    TextButton.Parent = ForceCgui
    TextButton.BackgroundColor3 = Color3.new(1, 1, 1)
    TextButton.BackgroundTransparency = 0.5
    TextButton.BorderSizePixel = 0
    TextButton.Position = UDim2.new(0.0516129024, 0, 0.560606062, 0)
    TextButton.Size = UDim2.new(0, 139, 0, 50)
    TextButton.Font = Enum.Font.SourceSansLight
    TextButton.FontSize = Enum.FontSize.Size14
    TextButton.Text = "TURN INTO CRIMINAL (First, click KillAura)"
    TextButton.TextColor3 = Color3.new(1, 1, 1)
    TextButton.TextScaled = true
    TextButton.TextStrokeTransparency = 0
    TextButton.TextWrapped = true
    
    CrimHideButton.Name = "CrimHideButton"
    CrimHideButton.Parent = ForceCgui
    CrimHideButton.BackgroundColor3 = Color3.new(1, 0.34902, 0.34902)
    CrimHideButton.BackgroundTransparency = 0.30000001192093
    CrimHideButton.BorderSizePixel = 0
    CrimHideButton.Position = UDim2.new(0.0322580636, 0, 0.89015615, 0)
    CrimHideButton.Size = UDim2.new(0, 146, 0, 18)
    CrimHideButton.Font = Enum.Font.SourceSansLight
    CrimHideButton.FontSize = Enum.FontSize.Size14
    CrimHideButton.Text = "HIDE"
    CrimHideButton.TextColor3 = Color3.new(1, 1, 1)
    CrimHideButton.TextScaled = true
    CrimHideButton.TextStrokeTransparency = 0
    CrimHideButton.TextWrapped = true
    
    TPshow.Name = "TPshow"
    TPshow.Parent = Main
    TPshow.BackgroundColor3 = Color3.new(1, 1, 1)
    TPshow.BackgroundTransparency = 0.5
    TPshow.BorderSizePixel = 0
    TPshow.Position = UDim2.new(0.0166848004, 0, 0.900033236, 0)
    TPshow.Size = UDim2.new(0, 104, 0, 22)
    TPshow.Font = Enum.Font.SourceSans
    TPshow.FontSize = Enum.FontSize.Size14
    TPshow.Text = "TELEPORT TO PLAYER"
    TPshow.TextColor3 = Color3.new(1, 1, 1)
    TPshow.TextScaled = true
    TPshow.TextStrokeTransparency = 0
    TPshow.TextWrapped = true
    
    LocalCommands.Name = "LocalCommands"
    LocalCommands.Parent = Main
    LocalCommands.BackgroundColor3 = Color3.new(0.219608, 0.219608, 0.219608)
    LocalCommands.BorderSizePixel = 0
    LocalCommands.Position = UDim2.new(0, 0, 1, 0)
    LocalCommands.Size = UDim2.new(0, 338, 0, 100)
    
    LocalCMD_Title.Name = "LocalCMD_Title"
    LocalCMD_Title.Parent = LocalCommands
    LocalCMD_Title.BackgroundColor3 = Color3.new(0, 0, 0)
    LocalCMD_Title.BackgroundTransparency = 0.30000001192093
    LocalCMD_Title.BorderSizePixel = 0
    LocalCMD_Title.Size = UDim2.new(0, 338, 0, 22)
    LocalCMD_Title.Font = Enum.Font.SourceSans
    LocalCMD_Title.FontSize = Enum.FontSize.Size14
    LocalCMD_Title.Text = "COMMANDS FOR YOURSELF"
    LocalCMD_Title.TextColor3 = Color3.new(1, 1, 1)
    LocalCMD_Title.TextStrokeTransparency = 0
    
    NexusTPbut.Name = "NexusTPbut"
    NexusTPbut.Parent = LocalCommands
    NexusTPbut.BackgroundColor3 = Color3.new(1, 1, 1)
    NexusTPbut.BackgroundTransparency = 0.40000000596046
    NexusTPbut.BorderSizePixel = 0
    NexusTPbut.Position = UDim2.new(0.0177514795, 0, 0.319999993, 0)
    NexusTPbut.Size = UDim2.new(0, 98, 0, 16)
    NexusTPbut.Font = Enum.Font.SourceSans
    NexusTPbut.FontSize = Enum.FontSize.Size14
    NexusTPbut.Text = "TP TO NEXUS"
    NexusTPbut.TextColor3 = Color3.new(1, 1, 1)
    NexusTPbut.TextScaled = true
    NexusTPbut.TextStrokeTransparency = 0
    NexusTPbut.TextWrapped = true
    
    CrimBaseTPbut.Name = "CrimBaseTPbut"
    CrimBaseTPbut.Parent = LocalCommands
    CrimBaseTPbut.BackgroundColor3 = Color3.new(1, 1, 1)
    CrimBaseTPbut.BackgroundTransparency = 0.40000000596046
    CrimBaseTPbut.BorderSizePixel = 0
    CrimBaseTPbut.Position = UDim2.new(0.0177514795, 0, 0.550980508, 0)
    CrimBaseTPbut.Size = UDim2.new(0, 98, 0, 16)
    CrimBaseTPbut.Font = Enum.Font.SourceSans
    CrimBaseTPbut.FontSize = Enum.FontSize.Size14
    CrimBaseTPbut.Text = "TP TO CRIMINAL BASE"
    CrimBaseTPbut.TextColor3 = Color3.new(1, 1, 1)
    CrimBaseTPbut.TextScaled = true
    CrimBaseTPbut.TextStrokeTransparency = 0
    CrimBaseTPbut.TextWrapped = true
    
    GuardAreaTPbut.Name = "GuardAreaTPbut"
    GuardAreaTPbut.Parent = LocalCommands
    GuardAreaTPbut.BackgroundColor3 = Color3.new(1, 1, 1)
    GuardAreaTPbut.BackgroundTransparency = 0.40000000596046
    GuardAreaTPbut.BorderSizePixel = 0
    GuardAreaTPbut.Position = UDim2.new(0.0177514795, 0, 0.781960726, 0)
    GuardAreaTPbut.Size = UDim2.new(0, 98, 0, 16)
    GuardAreaTPbut.Font = Enum.Font.SourceSans
    GuardAreaTPbut.FontSize = Enum.FontSize.Size14
    GuardAreaTPbut.Text = "TP TO GUARD AREA"
    GuardAreaTPbut.TextColor3 = Color3.new(1, 1, 1)
    GuardAreaTPbut.TextScaled = true
    GuardAreaTPbut.TextStrokeTransparency = 0
    GuardAreaTPbut.TextWrapped = true
    
    FLY.Name = "FLY"
    FLY.Parent = LocalCommands
    FLY.BackgroundColor3 = Color3.new(1, 1, 1)
    FLY.BackgroundTransparency = 0.40000000596046
    FLY.BorderSizePixel = 0
    FLY.Position = UDim2.new(0.354683876, 0, 0.330000013, 0)
    FLY.Size = UDim2.new(0, 98, 0, 16)
    FLY.Font = Enum.Font.SourceSans
    FLY.FontSize = Enum.FontSize.Size14
    FLY.Text = "FLY 'E'"
    FLY.TextColor3 = Color3.new(1, 1, 1)
    FLY.TextScaled = true
    FLY.TextStrokeTransparency = 0
    FLY.TextWrapped = true
    
    NWalk.Name = "NWalk"
    NWalk.Parent = LocalCommands
    NWalk.BackgroundColor3 = Color3.new(1, 1, 1)
    NWalk.BackgroundTransparency = 0.40000000596046
    NWalk.BorderSizePixel = 0
    NWalk.Position = UDim2.new(0.354683876, 0, 0.560980558, 0)
    NWalk.Size = UDim2.new(0, 98, 0, 16)
    NWalk.Font = Enum.Font.SourceSans
    NWalk.FontSize = Enum.FontSize.Size14
    NWalk.Text = "NORMAL WALKSPEED"
    NWalk.TextColor3 = Color3.new(1, 1, 1)
    NWalk.TextScaled = true
    NWalk.TextStrokeTransparency = 0
    NWalk.TextWrapped = true
    
    Njump.Name = "Njump"
    Njump.Parent = LocalCommands
    Njump.BackgroundColor3 = Color3.new(1, 1, 1)
    Njump.BackgroundTransparency = 0.40000000596046
    Njump.BorderSizePixel = 0
    Njump.Position = UDim2.new(0.354683876, 0, 0.791960776, 0)
    Njump.Size = UDim2.new(0, 98, 0, 16)
    Njump.Font = Enum.Font.SourceSans
    Njump.FontSize = Enum.FontSize.Size14
    Njump.Text = "NORMAL JUMP HEIGHT"
    Njump.TextColor3 = Color3.new(1, 1, 1)
    Njump.TextScaled = true
    Njump.TextStrokeTransparency = 0
    Njump.TextWrapped = true
    
    tfJump.Name = "tfJump"
    tfJump.Parent = LocalCommands
    tfJump.BackgroundColor3 = Color3.new(1, 1, 1)
    tfJump.BackgroundTransparency = 0.40000000596046
    tfJump.BorderSizePixel = 0
    tfJump.Position = UDim2.new(0.691616237, 0, 0.781960726, 0)
    tfJump.Size = UDim2.new(0, 98, 0, 16)
    tfJump.Font = Enum.Font.SourceSans
    tfJump.FontSize = Enum.FontSize.Size14
    tfJump.Text = "+25 JUMP HEIGHT"
    tfJump.TextColor3 = Color3.new(1, 1, 1)
    tfJump.TextScaled = true
    tfJump.TextStrokeTransparency = 0
    tfJump.TextWrapped = true
    
    Respawn.Name = "Respawn"
    Respawn.Parent = LocalCommands
    Respawn.BackgroundColor3 = Color3.new(1, 1, 1)
    Respawn.BackgroundTransparency = 0.40000000596046
    Respawn.BorderSizePixel = 0
    Respawn.Position = UDim2.new(0.691616237, 0, 0.319999993, 0)
    Respawn.Size = UDim2.new(0, 98, 0, 16)
    Respawn.Font = Enum.Font.SourceSans
    Respawn.FontSize = Enum.FontSize.Size14
    Respawn.Text = "RESPAWN"
    Respawn.TextColor3 = Color3.new(1, 1, 1)
    Respawn.TextScaled = true
    Respawn.TextStrokeTransparency = 0
    Respawn.TextWrapped = true
    
    tfWalk.Name = "tfWalk"
    tfWalk.Parent = LocalCommands
    tfWalk.BackgroundColor3 = Color3.new(1, 1, 1)
    tfWalk.BackgroundTransparency = 0.40000000596046
    tfWalk.BorderSizePixel = 0
    tfWalk.Position = UDim2.new(0.691616237, 0, 0.550980508, 0)
    tfWalk.Size = UDim2.new(0, 98, 0, 16)
    tfWalk.Font = Enum.Font.SourceSans
    tfWalk.FontSize = Enum.FontSize.Size14
    tfWalk.Text = "+25 WALKSPEED"
    tfWalk.TextColor3 = Color3.new(1, 1, 1)
    tfWalk.TextScaled = true
    tfWalk.TextStrokeTransparency = 0
    tfWalk.TextWrapped = true
    
    LocalCMD_BarTitle.Name = "LocalCMD_BarTitle"
    LocalCMD_BarTitle.Parent = LocalCommands
    LocalCMD_BarTitle.BackgroundColor3 = Color3.new(1, 1, 1)
    LocalCMD_BarTitle.BackgroundTransparency = 0.30000001192093
    LocalCMD_BarTitle.BorderSizePixel = 0
    LocalCMD_BarTitle.Position = UDim2.new(0.0798816606, 0, 0.219999999, 0)
    LocalCMD_BarTitle.Size = UDim2.new(0, 283, 0, 4)
    LocalCMD_BarTitle.Font = Enum.Font.SourceSans
    LocalCMD_BarTitle.FontSize = Enum.FontSize.Size14
    LocalCMD_BarTitle.Text = ""
    LocalCMD_BarTitle.TextColor3 = Color3.new(1, 1, 1)
    LocalCMD_BarTitle.TextStrokeTransparency = 0
    
    TheLocal.Name = "TheLocal"
    TheLocal.Parent = Main
    TheLocal.BackgroundColor3 = Color3.new(1, 1, 1)
    TheLocal.BackgroundTransparency = 0.5
    TheLocal.BorderSizePixel = 0
    TheLocal.Position = UDim2.new(0.344114006, 0, 0.900033236, 0)
    TheLocal.Size = UDim2.new(0, 104, 0, 22)
    TheLocal.Font = Enum.Font.SourceSans
    TheLocal.FontSize = Enum.FontSize.Size14
    TheLocal.Text = "MORE LOCAL COMMANDS"
    TheLocal.TextColor3 = Color3.new(1, 1, 1)
    TheLocal.TextScaled = true
    TheLocal.TextStrokeTransparency = 0
    TheLocal.TextWrapped = true
    
    CrimG.Name = "CrimG"
    CrimG.Parent = Main
    CrimG.BackgroundColor3 = Color3.new(1, 1, 1)
    CrimG.BackgroundTransparency = 0.5
    CrimG.BorderSizePixel = 0
    CrimG.Position = UDim2.new(0.671616912, 0, 0.900033236, 0)
    CrimG.Size = UDim2.new(0, 104, 0, 22)
    CrimG.Font = Enum.Font.SourceSans
    CrimG.FontSize = Enum.FontSize.Size14
    CrimG.Text = "FORCE CRIMINAL PLAYER"
    CrimG.TextColor3 = Color3.new(1, 1, 1)
    CrimG.TextScaled = true
    CrimG.TextStrokeTransparency = 0
    CrimG.TextWrapped = true
    
    tpgui.Name = "tpgui"
    tpgui.Parent = Main
    tpgui.BackgroundColor3 = Color3.new(0.219608, 0.219608, 0.219608)
    tpgui.BorderSizePixel = 0
    tpgui.Position = UDim2.new(-0.458579868, 0, 0.215946838, 0)
    tpgui.Size = UDim2.new(0, 155, 0, 198)
    
    TPtileBar.Name = "TPtileBar"
    TPtileBar.Parent = tpgui
    TPtileBar.BackgroundColor3 = Color3.new(0, 0, 0)
    TPtileBar.BackgroundTransparency = 0.5
    TPtileBar.BorderSizePixel = 0
    TPtileBar.Position = UDim2.new(0.0064516128, 0, 0.14952904, 0)
    TPtileBar.Size = UDim2.new(0, 154, 0, 1)
    TPtileBar.Font = Enum.Font.SourceSans
    TPtileBar.FontSize = Enum.FontSize.Size14
    TPtileBar.Text = ""
    TPtileBar.TextColor3 = Color3.new(0, 0, 0)
    
    TPYEET.Name = "TPYEET"
    TPYEET.Parent = tpgui
    TPYEET.BackgroundColor3 = Color3.new(1, 1, 1)
    TPYEET.BackgroundTransparency = 0.5
    TPYEET.BorderSizePixel = 0
    TPYEET.Position = UDim2.new(0.0580645166, 0, 0.560606062, 0)
    TPYEET.Size = UDim2.new(0, 140, 0, 50)
    TPYEET.Font = Enum.Font.SourceSansLight
    TPYEET.FontSize = Enum.FontSize.Size14
    TPYEET.Text = "TELEPORT"
    TPYEET.TextColor3 = Color3.new(1, 1, 1)
    TPYEET.TextScaled = true
    TPYEET.TextStrokeTransparency = 0
    TPYEET.TextWrapped = true
    
    UserHolderTP.Name = "UserHolderTP"
    UserHolderTP.Parent = tpgui
    UserHolderTP.BackgroundColor3 = Color3.new(0.0156863, 0.0156863, 0.0156863)
    UserHolderTP.BorderSizePixel = 0
    UserHolderTP.Position = UDim2.new(0.0516129024, 0, 0.451651365, 0)
    UserHolderTP.Size = UDim2.new(0, 139, 0, 3)
    UserHolderTP.Font = Enum.Font.SourceSans
    UserHolderTP.FontSize = Enum.FontSize.Size14
    UserHolderTP.Text = ""
    UserHolderTP.TextColor3 = Color3.new(0, 0, 0)
    
    InsertUserTP.Name = "InsertUserTP"
    InsertUserTP.Parent = tpgui
    InsertUserTP.BackgroundColor3 = Color3.new(1, 1, 1)
    InsertUserTP.BackgroundTransparency = 1
    InsertUserTP.BorderSizePixel = 0
    InsertUserTP.Position = UDim2.new(0.0064516128, 0, 0.186868697, 0)
    InsertUserTP.Size = UDim2.new(0, 154, 0, 50)
    InsertUserTP.Font = Enum.Font.SourceSansLight
    InsertUserTP.FontSize = Enum.FontSize.Size14
    InsertUserTP.Text = "USERNAME"
    InsertUserTP.TextColor3 = Color3.new(1, 1, 1)
    InsertUserTP.TextScaled = true
    InsertUserTP.TextWrapped = true
    
    TpTitle.Name = "TpTitle"
    TpTitle.Parent = tpgui
    TpTitle.BackgroundColor3 = Color3.new(1, 1, 1)
    TpTitle.BackgroundTransparency = 1
    TpTitle.BorderSizePixel = 0
    TpTitle.Position = UDim2.new(0.0064516128, 0, 0, 0)
    TpTitle.Size = UDim2.new(0, 154, 0, 31)
    TpTitle.Font = Enum.Font.SourceSansLight
    TpTitle.FontSize = Enum.FontSize.Size14
    TpTitle.Text = "TELEPORT GUI"
    TpTitle.TextColor3 = Color3.new(1, 1, 1)
    TpTitle.TextScaled = true
    TpTitle.TextStrokeTransparency = 0
    TpTitle.TextWrapped = true
    
    RightSepBarTp.Name = "RightSepBarTp"
    RightSepBarTp.Parent = tpgui
    RightSepBarTp.BackgroundColor3 = Color3.new(1, 1, 1)
    RightSepBarTp.BackgroundTransparency = 0.5
    RightSepBarTp.BorderSizePixel = 0
    RightSepBarTp.Position = UDim2.new(0.993548393, 0, 0.0757575706, 0)
    RightSepBarTp.Size = UDim2.new(0, 1, 0, 167)
    RightSepBarTp.Font = Enum.Font.SourceSans
    RightSepBarTp.FontSize = Enum.FontSize.Size14
    RightSepBarTp.Text = ""
    RightSepBarTp.TextColor3 = Color3.new(0, 0, 0)
    
    TpHideButton.Name = "TpHideButton"
    TpHideButton.Parent = tpgui
    TpHideButton.BackgroundColor3 = Color3.new(1, 0.34902, 0.34902)
    TpHideButton.BackgroundTransparency = 0.30000001192093
    TpHideButton.BorderSizePixel = 0
    TpHideButton.Position = UDim2.new(0.0322580636, 0, 0.89015615, 0)
    TpHideButton.Size = UDim2.new(0, 146, 0, 18)
    TpHideButton.Font = Enum.Font.SourceSansLight
    TpHideButton.FontSize = Enum.FontSize.Size14
    TpHideButton.Text = "HIDE"
    TpHideButton.TextColor3 = Color3.new(1, 1, 1)
    TpHideButton.TextScaled = true
    TpHideButton.TextStrokeTransparency = 0
    TpHideButton.TextWrapped = true
    
    AmokahsLogo.Name = "AmokahsLogo"
    AmokahsLogo.Parent = Main
    AmokahsLogo.BackgroundColor3 = Color3.new(1, 1, 1)
    AmokahsLogo.BackgroundTransparency = 1
    AmokahsLogo.BorderSizePixel = 0
    AmokahsLogo.Position = UDim2.new(0.0177514795, 0, 0, 0)
    AmokahsLogo.Size = UDim2.new(0, 34, 0, 35)
    AmokahsLogo.Image = "rbxassetid://2715559615"
    
    SuperPunch.Name = "SuperPunch"
    SuperPunch.Parent = Main
    SuperPunch.BackgroundColor3 = Color3.new(1, 1, 1)
    SuperPunch.BackgroundTransparency = 0.5
    SuperPunch.BorderSizePixel = 0
    SuperPunch.Position = UDim2.new(0.511219442, 0, 0.58801502, 0)
    SuperPunch.Size = UDim2.new(0, 158, 0, 22)
    SuperPunch.Font = Enum.Font.SourceSans
    SuperPunch.FontSize = Enum.FontSize.Size14
    SuperPunch.Text = "SUPER PUNCH"
    SuperPunch.TextColor3 = Color3.new(1, 1, 1)
    SuperPunch.TextScaled = true
    SuperPunch.TextStrokeTransparency = 0
    SuperPunch.TextWrapped = true
    
    KillAura.Name = "KillAura"
    KillAura.Parent = Main
    KillAura.BackgroundColor3 = Color3.new(1, 1, 1)
    KillAura.BackgroundTransparency = 0.5
    KillAura.BorderColor3 = Color3.new(1, 0, 0)
    KillAura.BorderSizePixel = 0
    KillAura.Position = UDim2.new(0.511219442, 0, 0.262595385, 0)
    KillAura.Size = UDim2.new(0, 157, 0, 22)
    KillAura.Font = Enum.Font.SourceSans
    KillAura.FontSize = Enum.FontSize.Size14
    KillAura.Text = "TOGGABLE KILL AURA 'P'"
    KillAura.TextColor3 = Color3.new(1, 1, 1)
    KillAura.TextScaled = true
    KillAura.TextStrokeTransparency = 0
    KillAura.TextWrapped = true
    
    BeCriminal.Name = "BeCriminal"
    BeCriminal.Parent = Main
    BeCriminal.BackgroundColor3 = Color3.new(1, 1, 1)
    BeCriminal.BackgroundTransparency = 0.5
    BeCriminal.BorderSizePixel = 0
    BeCriminal.Position = UDim2.new(0.514421463, 0, 0.696629226, 0)
    BeCriminal.Size = UDim2.new(0, 74, 0, 22)
    BeCriminal.Font = Enum.Font.SourceSans
    BeCriminal.FontSize = Enum.FontSize.Size14
    BeCriminal.Text = "CRIMINAL"
    BeCriminal.TextColor3 = Color3.new(1, 1, 1)
    BeCriminal.TextScaled = true
    BeCriminal.TextStrokeTransparency = 0
    BeCriminal.TextWrapped = true
    
    BeGuard.Name = "BeGuard"
    BeGuard.Parent = Main
    BeGuard.BackgroundColor3 = Color3.new(1, 1, 1)
    BeGuard.BackgroundTransparency = 0.5
    BeGuard.BorderSizePixel = 0
    BeGuard.Position = UDim2.new(0.0177514795, 0, 0.696629226, 0)
    BeGuard.Size = UDim2.new(0, 77, 0, 22)
    BeGuard.Font = Enum.Font.SourceSans
    BeGuard.FontSize = Enum.FontSize.Size14
    BeGuard.Text = "GUARD"
    BeGuard.TextColor3 = Color3.new(1, 1, 1)
    BeGuard.TextScaled = true
    BeGuard.TextStrokeTransparency = 0
    BeGuard.TextWrapped = true
    
    BeInmate.Name = "BeInmate"
    BeInmate.Parent = Main
    BeInmate.BackgroundColor3 = Color3.new(1, 1, 1)
    BeInmate.BackgroundTransparency = 0.5
    BeInmate.BorderSizePixel = 0
    BeInmate.Position = UDim2.new(0.268615901, 0, 0.696629226, 0)
    BeInmate.Size = UDim2.new(0, 74, 0, 22)
    BeInmate.Font = Enum.Font.SourceSans
    BeInmate.FontSize = Enum.FontSize.Size14
    BeInmate.Text = "INMATE"
    BeInmate.TextColor3 = Color3.new(1, 1, 1)
    BeInmate.TextScaled = true
    BeInmate.TextStrokeTransparency = 0
    BeInmate.TextWrapped = true
    
    ArrestAll.Name = "ArrestAll"
    ArrestAll.Parent = Main
    ArrestAll.BackgroundColor3 = Color3.new(1, 1, 1)
    ArrestAll.BackgroundTransparency = 0.5
    ArrestAll.BorderSizePixel = 0
    ArrestAll.Position = UDim2.new(0.511834323, 0, 0.370786548, 0)
    ArrestAll.Size = UDim2.new(0, 159, 0, 22)
    ArrestAll.Font = Enum.Font.SourceSans
    ArrestAll.FontSize = Enum.FontSize.Size14
    ArrestAll.Text = "ARREST ALL"
    ArrestAll.TextColor3 = Color3.new(1, 1, 1)
    ArrestAll.TextScaled = true
    ArrestAll.TextStrokeTransparency = 0
    ArrestAll.TextWrapped = true
    
    InvGuns.Name = "InvGuns"
    InvGuns.Parent = Main
    InvGuns.BackgroundColor3 = Color3.new(1, 1, 1)
    InvGuns.BackgroundTransparency = 0.5
    InvGuns.BorderSizePixel = 0
    InvGuns.Position = UDim2.new(0.508875728, 0, 0.16104874, 0)
    InvGuns.Size = UDim2.new(0, 159, 0, 22)
    InvGuns.Font = Enum.Font.SourceSans
    InvGuns.FontSize = Enum.FontSize.Size14
    InvGuns.Text = "TURN GUNS INVIS (Unequip first)"
    InvGuns.TextColor3 = Color3.new(1, 1, 1)
    InvGuns.TextScaled = true
    InvGuns.TextStrokeTransparency = 0
    InvGuns.TextWrapped = true
    
    CrimPunch.Name = "CrimPunch"
    CrimPunch.Parent = Main
    CrimPunch.BackgroundColor3 = Color3.new(1, 1, 1)
    CrimPunch.BackgroundTransparency = 0.5
    CrimPunch.BorderSizePixel = 0
    CrimPunch.Position = UDim2.new(0.508260846, 0, 0.481702745, 0)
    CrimPunch.Size = UDim2.new(0, 158, 0, 22)
    CrimPunch.Font = Enum.Font.SourceSans
    CrimPunch.FontSize = Enum.FontSize.Size14
    CrimPunch.Text = "REMOVE TOOLS"
    CrimPunch.TextColor3 = Color3.new(1, 1, 1)
    CrimPunch.TextScaled = true
    CrimPunch.TextStrokeTransparency = 0
    CrimPunch.TextWrapped = true
    
    Trans.Name = "Trans"
    Trans.Parent = Main
    Trans.BackgroundColor3 = Color3.new(1, 0.458824, 0.439216)
    Trans.BackgroundTransparency = 0.5
    Trans.BorderSizePixel = 0
    Trans.Position = UDim2.new(0.64462477, 0, 0.0199335553, 0)
    Trans.Size = UDim2.new(0, 80, 0, 25)
    Trans.Font = Enum.Font.SourceSans
    Trans.FontSize = Enum.FontSize.Size14
    Trans.Text = "TRANSPARENT"
    Trans.TextColor3 = Color3.new(1, 1, 1)
    Trans.TextScaled = true
    Trans.TextStrokeTransparency = 0
    Trans.TextWrapped = true
    
    Open.Name = "Open"
    Open.Parent = PrisonGui
    Open.BackgroundColor3 = Color3.new(1, 1, 1)
    Open.BackgroundTransparency = 1
    Open.BorderSizePixel = 0
    Open.Position = UDim2.new(0, 0, 0.915841579, 0)
    Open.Size = UDim2.new(0, 154, 0, 34)
    
    OpenGUI.Name = "OpenGUI"
    OpenGUI.Parent = Open
    OpenGUI.BackgroundColor3 = Color3.new(0.219608, 0.219608, 0.219608)
    OpenGUI.BackgroundTransparency = 0.5
    OpenGUI.BorderSizePixel = 0
    OpenGUI.Size = UDim2.new(0, 154, 0, 34)
    OpenGUI.Font = Enum.Font.SourceSansLight
    OpenGUI.FontSize = Enum.FontSize.Size14
    OpenGUI.Text = "OPEN"
    OpenGUI.TextColor3 = Color3.new(1, 1, 1)
    OpenGUI.TextScaled = true
    OpenGUI.TextStrokeTransparency = 0
    OpenGUI.TextWrapped = true
    
    Dino.Name = "Dino"
    Dino.Parent = PrisonGui
    Dino.BackgroundColor3 = Color3.new(0.137255, 0.137255, 0.137255)
    Dino.BackgroundTransparency = 0.80000001192093
    Dino.BorderColor3 = Color3.new(1, 0, 0)
    Dino.BorderSizePixel = 5
    Dino.Position = UDim2.new(0, 0, 0.343575954, 0)
    Dino.Size = UDim2.new(0, 1025, 0, 101)
    Dino.Visible = false
    Dino.Font = Enum.Font.SourceSans
    Dino.FontSize = Enum.FontSize.Size14
    Dino.Text = "This GUI is not the best with FREE exploits. It's mainly for paid exploits, such as Visenya, Synapse, etc. If you are using a free lua executor with this, then don't be surprised if something does not work correctly, please note, if anyone has uploaded this with their own link, that is not 'https://pastebin.com/JS5SYqaU' then you won't get the newest release of my crappy GUI, but anyway, good luck and have fun with this I guess."
    Dino.TextColor3 = Color3.new(1, 1, 1)
    Dino.TextScaled = true
    Dino.TextStrokeTransparency = 0.80000001192093
    Dino.TextTransparency = 0.80000001192093
    Dino.TextWrapped = true
    
    KA.Name = "KA"
    KA.Parent = PrisonGui
    KA.BackgroundColor3 = Color3.new(1, 1, 1)
    KA.BackgroundTransparency = 1
    KA.BorderSizePixel = 0
    KA.Position = UDim2.new(0, 0, 0.640399575, 0)
    KA.Size = UDim2.new(0, 162, 0, 62)
    
    NameOfKa.Name = "NameOfKa"
    NameOfKa.Parent = KA
    NameOfKa.BackgroundColor3 = Color3.new(1, 1, 1)
    NameOfKa.BackgroundTransparency = 1
    NameOfKa.BorderSizePixel = 0
    NameOfKa.Position = UDim2.new(0, 0, 0.419354856, 0)
    NameOfKa.Size = UDim2.new(0, 157, 0, 30)
    NameOfKa.Font = Enum.Font.SourceSans
    NameOfKa.FontSize = Enum.FontSize.Size14
    NameOfKa.Text = "KILL AURA "
    NameOfKa.TextColor3 = Color3.new(0.72549, 0.329412, 0.337255)
    NameOfKa.TextScaled = true
    NameOfKa.TextStrokeColor3 = Color3.new(0.333333, 0, 0)
    NameOfKa.TextStrokeTransparency = 0.5
    NameOfKa.TextWrapped = true
    NameOfKa.TextXAlignment = Enum.TextXAlignment.Left
    
    TrueOrFalse.Name = "TrueOrFalse"
    TrueOrFalse.Parent = KA
    TrueOrFalse.BackgroundColor3 = Color3.new(1, 1, 1)
    TrueOrFalse.BackgroundTransparency = 1
    TrueOrFalse.BorderSizePixel = 0
    TrueOrFalse.Position = UDim2.new(0, 0, 0.913856268, 0)
    TrueOrFalse.Size = UDim2.new(0, 148, 0, 33)
    TrueOrFalse.Font = Enum.Font.SourceSans
    TrueOrFalse.FontSize = Enum.FontSize.Size14
    TrueOrFalse.Text = "nil"
    TrueOrFalse.TextColor3 = Color3.new(1, 0.278431, 0.278431)
    TrueOrFalse.TextScaled = true
    TrueOrFalse.TextStrokeTransparency = 0.5
    TrueOrFalse.TextWrapped = true
    TrueOrFalse.TextXAlignment = Enum.TextXAlignment.Left
    
    TeamGUIOC.Name = "TeamGUIOC"
    TeamGUIOC.Parent = PrisonGui
    TeamGUIOC.BackgroundColor3 = Color3.new(1, 1, 1)
    TeamGUIOC.BackgroundTransparency = 1
    TeamGUIOC.BorderSizePixel = 0
    TeamGUIOC.Position = UDim2.new(0.00132625992, 0, 0.759765625, 0)
    TeamGUIOC.Size = UDim2.new(0, 156, 0, 33)
    
    TeamOPorCL.Name = "TeamOPorCL"
    TeamOPorCL.Parent = TeamGUIOC
    TeamOPorCL.BackgroundColor3 = Color3.new(0.219608, 0.219608, 0.219608)
    TeamOPorCL.BackgroundTransparency = 0.5
    TeamOPorCL.BorderColor3 = Color3.new(0.568627, 0.176471, 0.568627)
    TeamOPorCL.BorderSizePixel = 0
    TeamOPorCL.Position = UDim2.new(-5.00802327972, 5, 5.12121212, 5)
    TeamOPorCL.Size = UDim2.new(0, 156, 0, 32)
    TeamOPorCL.Font = Enum.Font.SourceSansLight
    TeamOPorCL.FontSize = Enum.FontSize.Size14
    TeamOPorCL.Text = "Open/Close STAY ON TEAM GUI"
    TeamOPorCL.TextColor3 = Color3.new(1, 1, 1)
    TeamOPorCL.TextScaled = true
    TeamOPorCL.TextStrokeTransparency = 0
    TeamOPorCL.TextWrapped = true
    
    TeamMain.Name = "TeamMain"
    TeamMain.Parent = PrisonGui
    TeamMain.BackgroundColor3 = Color3.new(0.219608, 0.219608, 0.219608)
    TeamMain.BorderSizePixel = 0
    TeamMain.Position = UDim2.new(0, 0, 0.291015625, 0)
    TeamMain.Size = UDim2.new(0, 214, 0, 152)
    TeamMain.Visible = false
    
    TextLabel.Parent = TeamMain
    TextLabel.BackgroundColor3 = Color3.new(0, 0, 0)
    TextLabel.BackgroundTransparency = 0.5
    TextLabel.BorderSizePixel = 0
    TextLabel.Position = UDim2.new(0.104430377, 0, 0.203947365, 0)
    TextLabel.Size = UDim2.new(0, 169, 0, 3)
    TextLabel.Font = Enum.Font.SourceSans
    TextLabel.FontSize = Enum.FontSize.Size14
    TextLabel.Text = ""
    TextLabel.TextColor3 = Color3.new(0, 0, 0)
    
    TextLabel_2.Parent = TeamMain
    TextLabel_2.BackgroundColor3 = Color3.new(0, 0, 0)
    TextLabel_2.BackgroundTransparency = 1
    TextLabel_2.BorderSizePixel = 0
    TextLabel_2.Size = UDim2.new(0, 214, 0, 31)
    TextLabel_2.Font = Enum.Font.SourceSansLight
    TextLabel_2.FontSize = Enum.FontSize.Size14
    TextLabel_2.Text = "Stay On Team GUI"
    TextLabel_2.TextColor3 = Color3.new(1, 1, 1)
    TextLabel_2.TextScaled = true
    TextLabel_2.TextStrokeTransparency = 0
    TextLabel_2.TextWrapped = true
    
    SOG.Name = "SOG"
    SOG.Parent = TeamMain
    SOG.BackgroundColor3 = Color3.new(0.52549, 0.756863, 1)
    SOG.BackgroundTransparency = 0.5
    SOG.BorderSizePixel = 0
    SOG.Position = UDim2.new(0, 0, 0.223684207, 0)
    SOG.Size = UDim2.new(0, 214, 0, 25)
    SOG.Font = Enum.Font.SourceSansLight
    SOG.FontSize = Enum.FontSize.Size14
    SOG.Text = "Stay on guards team!"
    SOG.TextColor3 = Color3.new(1, 1, 1)
    SOG.TextScaled = true
    SOG.TextStrokeTransparency = 0
    SOG.TextWrapped = true
    
    SOC.Name = "SOC"
    SOC.Parent = TeamMain
    SOC.BackgroundColor3 = Color3.new(1, 0.235294, 0.235294)
    SOC.BackgroundTransparency = 0.5
    SOC.BorderSizePixel = 0
    SOC.Position = UDim2.new(0, 0, 0.394416004, 0)
    SOC.Size = UDim2.new(0, 214, 0, 25)
    SOC.Font = Enum.Font.SourceSansLight
    SOC.FontSize = Enum.FontSize.Size14
    SOC.Text = "Stay on criminals team!"
    SOC.TextColor3 = Color3.new(1, 1, 1)
    SOC.TextScaled = true
    SOC.TextStrokeTransparency = 0
    SOC.TextWrapped = true
    
    SOI.Name = "SOI"
    SOI.Parent = TeamMain
    SOI.BackgroundColor3 = Color3.new(1, 0.831373, 0.494118)
    SOI.BackgroundTransparency = 0.5
    SOI.BorderSizePixel = 0
    SOI.Position = UDim2.new(0, 0, 0.559050083, 0)
    SOI.Size = UDim2.new(0, 214, 0, 25)
    SOI.Font = Enum.Font.SourceSansLight
    SOI.FontSize = Enum.FontSize.Size14
    SOI.Text = "Stay on inmates team!"
    SOI.TextColor3 = Color3.new(1, 1, 1)
    SOI.TextScaled = true
    SOI.TextStrokeTransparency = 0
    SOI.TextWrapped = true
    
    Disable.Name = "Disable"
    Disable.Parent = TeamMain
    Disable.BackgroundColor3 = Color3.new(0.615686, 0.407843, 0.411765)
    Disable.BackgroundTransparency = 0.5
    Disable.BorderSizePixel = 0
    Disable.Position = UDim2.new(0, 0, 0.801872253, 0)
    Disable.Size = UDim2.new(0, 214, 0, 29)
    Disable.Font = Enum.Font.SourceSansSemibold
    Disable.FontSize = Enum.FontSize.Size14
    Disable.Text = "Disable"
    Disable.TextColor3 = Color3.new(1, 1, 1)
    Disable.TextScaled = true
    Disable.TextStrokeTransparency = 0
    Disable.TextWrapped = true
    
    
    Main.Position = UDim2.new(0.345, 0,2.204, 0)
    TeamOPorCL.Visible = false
    TeamMain.Visible = false
    TeamGUIOC.Visible = false
    LocalCommands.Visible = false
    ForceCgui.Visible = false
    tpgui.Visible = false
    KA.Visible = true
    TrueOrFalse.Text = "nil"
    TrueOrFalse.TextColor3 = Color3.new(255, 0, 191)
    
    wait(0.5)
    Dino.Visible = true
    Dino.TextTransparency = 0.8
    Dino.TextStrokeTransparency = 0.8
    wait(0.1)
    Dino.TextTransparency = 0.7
    Dino.TextStrokeTransparency = 0.7
    wait(0.1)
    Dino.TextTransparency = 0.6
    Dino.TextStrokeTransparency = 0.6
    wait(0.1)
    Dino.TextTransparency = 0.5
    Dino.TextStrokeTransparency = 0.5
    wait(0.1)
    Dino.TextTransparency = 0.4
    Dino.TextStrokeTransparency = 0.4
    wait(0.1)
    Dino.TextTransparency = 0.3
    Dino.TextStrokeTransparency = 0.3
    wait(0.1)
    Dino.TextTransparency = 0.2
    Dino.TextStrokeTransparency = 0.2
    wait(0.1)
    Dino.TextTransparency = 0.1
    Dino.TextStrokeTransparency = 0.1
    
    wait(5)
    
    Dino.TextTransparency = 0.1
    Dino.TextStrokeTransparency = 0.1
    wait(0.1)
    Dino.TextTransparency = 0.2
    Dino.TextStrokeTransparency = 0.2
    wait(0.1)
    Dino.TextTransparency = 0.3
    Dino.TextStrokeTransparency = 0.3
    wait(0.1)
    Dino.TextTransparency = 0.4
    Dino.TextStrokeTransparency = 0.4
    wait(0.1)
    Dino.TextTransparency = 0.5
    Dino.TextStrokeTransparency = 0.5
    wait(0.1)
    Dino.TextTransparency = 0.6
    Dino.TextStrokeTransparency = 0.6
    wait(0.1)
    Dino.TextTransparency = 0.7
    Dino.TextStrokeTransparency = 0.7
    wait(0.1)
    Dino.TextTransparency = 0.8
    Dino.TextStrokeTransparency = 0.8
    wait(0.1)
    Dino.Visible = false
    
    OpenGUI.MouseButton1Down:connect(function()
        Main.Visible = true
        
        Main:TweenPosition(UDim2.new(0.345, 0,0.204, 0), 'Out', 'Bounce', 3)
    end)
    
    Close.MouseButton1Down:connect(function()
        Main:TweenPosition(UDim2.new(0.345, 0,2.204, 0), 'Out', 'Bounce', 1)
        wait(1)
        Main.Visible = false
    end)
    
    CrimG.MouseButton1Down:connect(function()
        ForceCgui.Visible = true
    end)
    
    CrimHideButton.MouseButton1Down:connect(function()
        ForceCgui.Visible = false
    end)
    
    TheLocal.MouseButton1Down:connect(function()
        if LocalCommands.Visible == false then
            LocalCommands.Visible = true
        elseif LocalCommands.Visible == true then
            LocalCommands.Visible = false
        end
    end)
    
    NWalk.MouseButton1Down:connect(function()
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 16
    end)
    
    NexusTPbut.MouseButton1Down:connect(function()
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(879,99,2377)
    end)
    
    CrimBaseTPbut.MouseButton1Down:connect(function()
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-943, 96, 2055)
    end)
    
    tfWalk.MouseButton1Down:connect(function()
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 41
    end)
    
    tfJump.MouseButton1Down:connect(function()
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = 75
    end)
    
    Njump.MouseButton1Down:connect(function()
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = 50
    end)
    
    GuardAreaTPbut.MouseButton1Down:connect(function()
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(802,99,2270)
    end)
    
    Respawn.MouseButton1Down:connect(function()
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(0, -496, 0)
    end)
    
    ObGuns.MouseButton1Down:connect(function()
        for i,v in pairs(Workspace.Prison_ITEMS.giver:GetChildren()) do
    
    OwO = Workspace.Remote.ItemHandler:InvokeServer(v.ITEMPICKUP)
    end
    end)
    
    TaseBypass.MouseButton1Down:connect(function()
        game.Players.LocalPlayer.Character.ClientInputHandler.Disabled = true
        game.Players.LocalPlayer.CharacterAdded:connect(function()
        game.Workspace:WaitForChild(game.Players.LocalPlayer.Name)
        game.Players.LocalPlayer.Character.ClientInputHandler.Disabled = true
        end)
    end)
    
    RemoveDoors.MouseButton1Down:connect(function()
                    Workspace.Prison_Cellblock.doors:Destroy()
                
                for i,v in pairs(workspace:GetChildren())do
                        if v.Name == "Doors" then
                    v:Destroy()
                end
        end
    end)
    
    Btools.MouseButton1Down:connect(function()
        local tool1 = Instance.new("HopperBin",game.Players.LocalPlayer.Backpack)
        local tool2 = Instance.new("HopperBin",game.Players.LocalPlayer.Backpack)
        local tool3 = Instance.new("HopperBin",game.Players.LocalPlayer.Backpack)
        local tool4 = Instance.new("HopperBin",game.Players.LocalPlayer.Backpack)
        local tool5 = Instance.new("HopperBin",game.Players.LocalPlayer.Backpack)
        tool1.BinType = "Clone"
        tool2.BinType = "GameTool"
        tool3.BinType = "Hammer"
        tool4.BinType = "Script"
        tool5.BinType = "Grab"
    end)
    
    ModGun.MouseButton1Down:connect(function()
    local m = require(game:GetService('Players').LocalPlayer.Character:FindFirstChildOfClass("Tool").GunStates)
                    m.Damage = 100
                    m.MaxAmmo = math.huge
                    m.CurrentAmmo = math.huge
                    m.AutoFire = true
                    m.FireRate = 0
    end)
    
    KillAll.MouseButton1Down:connect(function()
        
    workspace.Remote.TeamEvent:FireServer("Medium stone grey")
    
    game.Workspace.Remote.ItemHandler:InvokeServer(workspace.Prison_ITEMS.giver["Remington 870"].ITEMPICKUP)    
    
    wait(0.5)
    function kill(a)
    local A_1 =
    {
    [1] =
    {
    ["RayObject"] = Ray.new(Vector3.new(845.555908, 101.429337, 2269.43945), Vector3.new(-391.152252, 8.65560055, -83.2166901)),
    ["Distance"] = 3.2524313926697,
    ["Cframe"] = CFrame.new(840.310791, 101.334137, 2267.87988, 0.0636406094, 0.151434347, -0.986416459, 0, 0.988420188, 0.151741937, 0.997972965, -0.00965694897, 0.0629036576),
    ["Hit"] = a.Character.Head
    },
       [2] =
    {
    ["RayObject"] = Ray.new(Vector3.new(845.555908, 101.429337, 2269.43945), Vector3.new(-392.481476, -8.44939327, -76.7261353)),
    ["Distance"] = 3.2699294090271,
    ["Cframe"] = CFrame.new(840.290466, 101.184189, 2267.93506, 0.0964837447, 0.0589403138, -0.993587971, 4.65661287e-10, 0.998245299, 0.0592165813, 0.995334625, -0.00571343815, 0.0963144377),
    ["Hit"] = a.Character.Head
    },
    [3] =
    {
    ["RayObject"] = Ray.new(Vector3.new(845.555908, 101.429337, 2269.43945), Vector3.new(-389.21701, -2.50536323, -92.2163162)),
    ["Distance"] = 3.1665518283844,
    ["Cframe"] = CFrame.new(840.338867, 101.236496, 2267.80371, 0.0166504811, 0.0941716284, -0.995416701, 1.16415322e-10, 0.995554805, 0.0941846818, 0.999861419, -0.00156822044, 0.0165764652),
    ["Hit"] = a.Character.Head
    },
    [4] =
    {
    ["RayObject"] = Ray.new(Vector3.new(845.555908, 101.429337, 2269.43945), Vector3.new(-393.353973, 3.13988972, -72.5452042)),
    ["Distance"] = 3.3218522071838,
    ["Cframe"] = CFrame.new(840.277222, 101.285957, 2267.9707, 0.117109694, 0.118740402, -0.985994935, -1.86264515e-09, 0.992826641, 0.119563118, 0.993119001, -0.0140019981, 0.116269611),
    ["Hit"] = a.Character.Head
    },
    [5] =
    {
    ["RayObject"] = Ray.new(Vector3.new(845.555908, 101.429337, 2269.43945), Vector3.new(-390.73172, 3.2097764, -85.5477524)),
    ["Distance"] = 3.222757101059,
    ["Cframe"] = CFrame.new(840.317993, 101.286423, 2267.86035, 0.0517584644, 0.123365127, -0.991010666, 0, 0.992340803, 0.123530701, 0.99865967, -0.00639375951, 0.0513620302),
    ["Hit"] = a.Character.Head
    }
    }
    local A_2 = game.Players.LocalPlayer.Backpack["Remington 870"]
    local Event = game:GetService("ReplicatedStorage").ShootEvent
    Event:FireServer(A_1, A_2)
    Event:FireServer(A_1, A_2)
    end
    
    for i,v in pairs(game.Players:GetChildren())do
    if v.Name ~= game.Players.LocalPlayer.Name then
    kill(v)
    end
    end
    wait(1)
    workspace.Remote.TeamEvent:FireServer("Bright orange")
    
    end)
    
    TPshow.MouseButton1Down:connect(function()
        tpgui.Visible = true
    end)
    
    TpHideButton.MouseButton1Down:connect(function()
        tpgui.Visible = false
    end)
    
    TPYEET.MouseButton1Down:connect(function()
        Target = InsertUserTP.Text
        
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players[Target].Character.HumanoidRootPart.CFrame
    end)
    
    FLY.MouseButton1Down:connect(function()
        repeat wait()
       until game.Players.LocalPlayer and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:findFirstChild("Torso") and game.Players.LocalPlayer.Character:findFirstChild("Humanoid")
    local mouse = game.Players.LocalPlayer:GetMouse()
    repeat wait() until mouse
    local plr = game.Players.LocalPlayer
    local torso = plr.Character.Torso
    local flying = true
    local deb = true
    local ctrl = {f = 0, b = 0, l = 0, r = 0}
    local lastctrl = {f = 0, b = 0, l = 0, r = 0}
    local maxspeed = 50
    local speed = 0
    
    function Fly()
    local bg = Instance.new("BodyGyro", torso)
    bg.P = 9e4
    bg.maxTorque = Vector3.new(9e9, 9e9, 9e9)
    bg.cframe = torso.CFrame
    local bv = Instance.new("BodyVelocity", torso)
    bv.velocity = Vector3.new(0,0.1,0)
    bv.maxForce = Vector3.new(9e9, 9e9, 9e9)
    repeat wait()
    plr.Character.Humanoid.PlatformStand = true
    if ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0 then
    speed = speed+.5+(speed/maxspeed)
    if speed > maxspeed then
    speed = maxspeed
    end
    elseif not (ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0) and speed ~= 0 then
    speed = speed-1
    if speed < 0 then
    speed = 0
    end
    end
    if (ctrl.l + ctrl.r) ~= 0 or (ctrl.f + ctrl.b) ~= 0 then
    bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (ctrl.f+ctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(ctrl.l+ctrl.r,(ctrl.f+ctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed
    lastctrl = {f = ctrl.f, b = ctrl.b, l = ctrl.l, r = ctrl.r}
    elseif (ctrl.l + ctrl.r) == 0 and (ctrl.f + ctrl.b) == 0 and speed ~= 0 then
    bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (lastctrl.f+lastctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(lastctrl.l+lastctrl.r,(lastctrl.f+lastctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed
    else
    bv.velocity = Vector3.new(0,0.1,0)
    end
    bg.cframe = game.Workspace.CurrentCamera.CoordinateFrame * CFrame.Angles(-math.rad((ctrl.f+ctrl.b)*50*speed/maxspeed),0,0)
    until not flying
    ctrl = {f = 0, b = 0, l = 0, r = 0}
    lastctrl = {f = 0, b = 0, l = 0, r = 0}
    speed = 0
    bg:Destroy()
    bv:Destroy()
    plr.Character.Humanoid.PlatformStand = false
    end
    mouse.KeyDown:connect(function(key)
    if key:lower() == "e" then
    if flying then flying = false
    else
    flying = true
    Fly()
    end
    elseif key:lower() == "w" then
    ctrl.f = 1
    elseif key:lower() == "s" then
    ctrl.b = -1
    elseif key:lower() == "a" then
    ctrl.l = -1
    elseif key:lower() == "d" then
    ctrl.r = 1
    end
    end)
    mouse.KeyUp:connect(function(key)
    if key:lower() == "w" then
    ctrl.f = 0
    elseif key:lower() == "s" then
    ctrl.b = 0
    elseif key:lower() == "a" then
    ctrl.l = 0
    elseif key:lower() == "d" then
    ctrl.r = 0
    end
    end)
    Fly()
    end)
    
    SuperPunch.MouseButton1Down:connect(function()
        mainRemotes = game.ReplicatedStorage
    meleeRemote = mainRemotes['meleeEvent']
    mouse = game.Players.LocalPlayer:GetMouse()
    punching = false
    cooldown = false
    
    function punch()
    cooldown = true
    local part = Instance.new("Part", game.Players.LocalPlayer.Character)
    part.Transparency = 1
    part.Size = Vector3.new(5, 2, 3)
    part.CanCollide = false
    local w1 = Instance.new("Weld", part)
    w1.Part0 = game.Players.LocalPlayer.Character.Torso
    w1.Part1 = part
    w1.C1 = CFrame.new(0,0,2)
    part.Touched:connect(function(hit)
    if game.Players:FindFirstChild(hit.Parent.Name) then
    local plr = game.Players:FindFirstChild(hit.Parent.Name)
    if plr.Name ~= game.Players.LocalPlayer.Name then
    part:Destroy()
    
    for i = 1,100 do
    meleeRemote:FireServer(plr)
    end
    end
    end
    end)
    
    wait(1)
    cooldown = false
    part:Destroy()
    end
    
    
    mouse.KeyDown:connect(function(key)
    if cooldown == false then
    if key:lower() == "f" then
    
    punch()
    
    end
    end
    end)
    end)
    
    BeInmate.MouseButton1Down:connect(function()
        Workspace.Remote.TeamEvent:FireServer("Bright orange")
    end)
    
    BeGuard.MouseButton1Down:connect(function()
        Workspace.Remote.TeamEvent:FireServer("Bright blue")
    end)
    
    BeCriminal.MouseButton1Down:connect(function()
        LCS = game.Workspace["Criminals Spawn"].SpawnLocation
    
    LCS.CanCollide = false
    LCS.Size = Vector3.new(51.05, 24.12, 54.76)
    LCS.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
    LCS.Transparency = 1
    wait(0.5)
    LCS.CFrame = CFrame.new(-920.510803, 92.2271957, 2138.27002, 0, 0, -1, 0, 1, 0, 1, 0, 0)
    LCS.Size = Vector3.new(6, 0.2, 6)
    LCS.Transparency = 0
    end)
    
    InvGuns.MouseButton1Down:connect(function()
        for i,v in pairs(game.Players.LocalPlayer.Backpack:GetDescendants())do
        if v.ClassName == "Model" then
            v:Destroy()
        end
    end
    
    game.Players.LocalPlayer.Backpack.M9.Part:Destroy()
    
    game.Players.LocalPlayer.Backpack.M9.Part:Destroy()
    end)
    
    CrimPunch.MouseButton1Down:connect(function()
        for i,v in pairs(game.Players.LocalPlayer.Backpack:GetChildren())do
            if v.ClassName == "Tool" then
                v:Destroy()
            end
        end
    end)
    
    BeNeutral.MouseButton1Down:connect(function()
        Workspace.Remote.TeamEvent:FireServer("Medium stone grey")
    end)
    
    TeamOPorCL.MouseButton1Down:connect(function()
        if TeamMain.Visible == true then
            
            TeamMain:TweenPosition(UDim2.new(-0.00802327972, 0, 1.12121212, 0), 'Out', 'Bounce', 2)
            wait(2)
            TeamMain.Visible = false
        elseif
            TeamMain.Visible == false then
                TeamMain:TweenPosition(UDim.new(-0.00802327972, 0, 5.12121212, 0), 'Out', 'Bounce', 2)
            TeamMain.Visible = true
        end
    end)
    
    local yee = false
    
    SOC.MouseButton1Down:connect(function()
    yee = true
    wait(0.2)
    if yee == true then
        LCS = game.Workspace["Criminals Spawn"].SpawnLocation
    
    LCS.CanCollide = false
    LCS.Size = Vector3.new(51.05, 24.12, 54.76)
    LCS.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
    LCS.Transparency = 1
    wait(0.5)
    while yee do
        wait(0.003)
        LCS.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
    end
            LCS.CFrame = CFrame.new(-920.510803, 92.2271957, 2138.27002, 0, 0, -1, 0, 1, 0, 1, 0, 0)
    LCS.Size = Vector3.new(6, 0.2, 6)
    LCS.Transparency = 1
    wait(2)
    LCS.CFrame = CFrame.new(-920.510803, 92.2271957, 2138.27002, 0, 0, -1, 0, 1, 0, 1, 0, 0)
    LCS.Size = Vector3.new(6, 0.2, 6)
    LCS.Transparency = 1    
    end
    end)
    
    local GuTe = false
    
    SOG.MouseButton1Down:connect(function()
        if GuTe == false then
            GuTe = true
            if GuTe == true then
                while GuTe do
                    wait(0.2)
                    Workspace.Remote.TeamEvent:FireServer("Bright blue")
                end
            end
        end
    end)
    
    local InTe = false
    
    SOI.MouseButton1Down:connect(function()
        if InTe == false then
            InTe = true
            if InTe == true then
                wait(0.2)
                workspace.Remote.TeamEvent:FireServer("Bright orange")
            end
        end
    end)
    
    Disable.MouseButton1Down:connect(function()
        InTe = false
        
        GuTe = false
        
            yee = false
            wait(0.2)
            if yee == false then
            LCS.CFrame = CFrame.new(-920.510803, 92.2271957, 2138.27002, 0, 0, -1, 0, 1, 0, 1, 0, 0)
    LCS.Size = Vector3.new(6, 0.2, 6)
    LCS.Transparency = 1
    wait(2)
    LCS.CFrame = CFrame.new(-920.510803, 92.2271957, 2138.27002, 0, 0, -1, 0, 1, 0, 1, 0, 0)
    LCS.Size = Vector3.new(6, 0.2, 6)
    LCS.Transparency = 1    
    end
    end)
    
    Trans.MouseButton1Down:connect(function()
        PLMain = Main
        PLCgui = ForceCgui
        PLLc = LocalCommands
        PLtp = tpgui
        TMain = TeamMain
        
        TLble = TitleBar
        LCTitleBar = LocalCMD_BarTitle
        LCTitle = LocalCMD_Title
        
        if LCTitle.BackgroundTransparency == 0 then
            LCTitle.BackgroundTransparency = 0.5
        elseif
            LCTitle.BackgroundTransparency == 0.5 then
            LCTitle.BackgroundTransparency = 0
        end
        
        if LCTitleBar.BackgroundTransparency == 0 then
            LCTitleBar.BackgroundTransparency = 0.5
        elseif
            LCTitleBar.BackgroundTransparency == 0.5 then
            LCTitleBar.BackgroundTransparency = 0
        end
        
        if TLble.BackgroundTransparency == 0.8 then
            TLble.BackgroundTransparency = 0.5
        elseif
            TLble.BackgroundTransparency == 0.5 then
            TLble.BackgroundTransparency = 0.8
        end
        
        if PLMain.BackgroundTransparency == 0 then
            PLMain.BackgroundTransparency = 0.5
        elseif
            PLMain.BackgroundTransparency == 0.5 then
            PLMain.BackgroundTransparency = 0
        end
        
        if PLCgui.BackgroundTransparency == 0 then
            PLCgui.BackgroundTransparency = 0.5
        elseif
            PLCgui.BackgroundTransparency == 0.5 then
            PLCgui.BackgroundTransparency = 0
        end
        
        if PLLc.BackgroundTransparency == 0 then
            PLLc.BackgroundTransparency = 0.5
        elseif
            PLLc.BackgroundTransparency == 0.5 then
            PLLc.BackgroundTransparency = 0
        end
        
        if PLtp.BackgroundTransparency == 0 then
            PLtp.BackgroundTransparency = 0.5
        elseif
            PLtp.BackgroundTransparency == 0.5 then
            PLtp.BackgroundTransparency = 0
        end
    
        if TMain.BackgroundTransparency == 0 then
            TMain.BackgroundTransparency = 0.5
        elseif
            TMain.BackgroundTransparency == 0.5 then
            TMain.BackgroundTransparency = 0
        end
    end)
    
    ArrestAll.MouseButton1Down:connect(function()
        wait(0.1)
        Player = game.Players.LocalPlayer
        Pcf = Player.Character.HumanoidRootPart.CFrame
        for i,v in pairs(game.Teams.Criminals:GetPlayers()) do
        if v.Name ~= Player.Name then
        local i = 10
        repeat
        wait()
        i = i-1
        game.Workspace.Remote.arrest:InvokeServer(v.Character.HumanoidRootPart)
        Player.Character.HumanoidRootPart.CFrame = v.Character.HumanoidRootPart.CFrame * CFrame.new(0, 0, 1)
        until i == 0
    end
    end
    end)
    
    KillAura.MouseButton1Down:connect(function()
        TrueOrFalse.Text = "FALSE"
        TrueOrFalse.TextColor3 = Color3.new(0.768628, 0.156863, 0.109804)
    
        mainRemotes = game.ReplicatedStorage
    meleeRemote = mainRemotes['meleeEvent']
    
    _G.killAura = false
    
    contextactionservice = game.ContextActionService
    
    function toggleKillAura(actionName, inputState, inputObject)
    if inputState == Enum.UserInputState.Begin then
    if _G.killAura == true then
    _G.killAura = false
        TrueOrFalse.Text = "FALSE"
        TrueOrFalse.TextColor3 = Color3.new(0.768628, 0.156863, 0.109804)
    else
    _G.killAura = true
        TrueOrFalse.Text = "TRUE"
        TrueOrFalse.TextColor3 = Color3.new(0.6, 0.992157, 0.541176)
    end
    end
    end
    
    
    
    contextactionservice:BindAction('ToggleKillAura', toggleKillAura, false, Enum.KeyCode.P)
    
    while wait() do
    if _G.killAura == true then
    for _, plr in pairs (game:GetService('Players'):GetChildren()) do
    if plr.Name ~= game.Players.LocalPlayer.Name then
    meleeRemote:FireServer(plr)
    
    end
    end
    end
    end
    end)
    
    local istptoplr = false
    local metoplr = false
    
    TextButton.MouseButton1Down:connect(function()
        Target = InsertUser.Text
        
        _G.killAura = true
        wait(0.2)
        
        Apart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
        Apart.Transparency = 1
        Apart.Anchored = true
        Apart.CanCollide = false
        wait(0.3)
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players[Target].Character.HumanoidRootPart.CFrame
        
        istptoplr = true
        wait(0.004)
        
        if game.Players.LocalPlayer.Team.TeamColor == "Bright orange" then
            wait(6)
            workspace.Remote.TeamEvent:FireServer("Bright orange")
        elseif
            game.Players.LocalPlayer.Team.TeamColor == "Bright blue" then
                workspace.Remote.TeamEvent:FireServer("Bright blue")
        end
        
             if istptoplr == true then
                while istptoplr do
                wait()
                
                game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").CFrame = game.Players[Target].Character.HumanoidRootPart.CFrame
                
                LCS = game.Workspace["Criminals Spawn"].SpawnLocation
    
                LCS.CanCollide = false
                LCS.Size = Vector3.new(51.05, 24.12, 54.76)
                LCS.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
                LCS.Transparency = 1
            
            wait(2)
            
                  istptoplr = false
            _G.killAura = false
            
            wait(0.04)
            
                    if istptoplr == false then
                       LCS.CFrame = CFrame.new(-920.510803, 92.2271957, 2138.27002, 0, 0, -1, 0, 1, 0, 1, 0, 0)
                       LCS.Size = Vector3.new(6, 0.2, 6)
                       LCS.Transparency = 0
                       game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Apart.CFrame
                       wait()
                       istptoplr = false
                end
            end
        end
    end)
    
    TeamOPorCL:Destroy()
    
    
    function dragify(Main)
    dragToggle = nil
    dragSpeed = .20 -- You can edit this.
    dragInput = nil
    dragStart = nil
    dragPos = nil
    
    function updateInput(input)
    Delta = input.Position - dragStart
    Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + Delta.X, startPos.Y.Scale, startPos.Y.Offset + Delta.Y)
    game:GetService("TweenService"):Create(Main, TweenInfo.new(.25), {Position = Position}):Play()
    end
    
    Main.InputBegan:Connect(function(input)
    if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then
    dragToggle = true
    dragStart = input.Position
    startPos = Main.Position
    input.Changed:Connect(function()
    if (input.UserInputState == Enum.UserInputState.End) then
    dragToggle = false
    end
    end)
    end
    end)
    
    Main.InputChanged:Connect(function(input)
    if (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
    dragInput = input
    end
    end)
    
    game:GetService("UserInputService").InputChanged:Connect(function(input)
    if (input == dragInput and dragToggle) then
    updateInput(input)
    end
    end)
    end
    
    dragify(Main)
end)

Section5:NewButton("Owl hub", "30+ games supported", function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/SiLeNSwOrD/OwlHub/master/OwlHub.txt"))()
end)

Section5:NewButton("Walk on walls", "Spider man lol", function()
    repeat wait()
        a = pcall(function()
            game:WaitForChild("Players").LocalPlayer:WaitForChild("PlayerScripts").ChildAdded:Connect(function(c)
                if c.Name == "PlayerScriptsLoader"then
                    c.Disabled = true
                end
            end)
            end)
            if a == true then break end
        until true == false
        game:WaitForChild("Players").LocalPlayer:WaitForChild("PlayerScripts").ChildAdded:Connect(function(c)
            if c.Name == "PlayerScriptsLoader"then
                c.Disabled = true
            end
        end)
        
        
        function _CameraUI()
            local Players = game:GetService("Players")
            local TweenService = game:GetService("TweenService")
            
            local LocalPlayer = Players.LocalPlayer
            if not LocalPlayer then
                Players:GetPropertyChangedSignal("LocalPlayer"):Wait()
                LocalPlayer = Players.LocalPlayer
            end
            
            local function waitForChildOfClass(parent, class)
                local child = parent:FindFirstChildOfClass(class)
                while not child or child.ClassName ~= class do
                    child = parent.ChildAdded:Wait()
                end
                return child
            end
            
            local PlayerGui = waitForChildOfClass(LocalPlayer, "PlayerGui")
            
            local TOAST_OPEN_SIZE = UDim2.new(0, 326, 0, 58)
            local TOAST_CLOSED_SIZE = UDim2.new(0, 80, 0, 58)
            local TOAST_BACKGROUND_COLOR = Color3.fromRGB(32, 32, 32)
            local TOAST_BACKGROUND_TRANS = 0.4
            local TOAST_FOREGROUND_COLOR = Color3.fromRGB(200, 200, 200)
            local TOAST_FOREGROUND_TRANS = 0
            
            -- Convenient syntax for creating a tree of instanes
            local function create(className)
                return function(props)
                    local inst = Instance.new(className)
                    local parent = props.Parent
                    props.Parent = nil
                    for name, val in pairs(props) do
                        if type(name) == "string" then
                            inst[name] = val
                        else
                            val.Parent = inst
                        end
                    end
                    -- Only set parent after all other properties are initialized
                    inst.Parent = parent
                    return inst
                end
            end
            
            local initialized = false
            
            local uiRoot
            local toast
            local toastIcon
            local toastUpperText
            local toastLowerText
            
            local function initializeUI()
                assert(not initialized)
            
                uiRoot = create("ScreenGui"){
                    Name = "RbxCameraUI",
                    AutoLocalize = false,
                    Enabled = true,
                    DisplayOrder = -1, -- Appears behind default developer UI
                    IgnoreGuiInset = false,
                    ResetOnSpawn = false,
                    ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
            
                    create("ImageLabel"){
                        Name = "Toast",
                        Visible = false,
                        AnchorPoint = Vector2.new(0.5, 0),
                        BackgroundTransparency = 1,
                        BorderSizePixel = 0,
                        Position = UDim2.new(0.5, 0, 0, 8),
                        Size = TOAST_CLOSED_SIZE,
                        Image = "rbxasset://textures/ui/Camera/CameraToast9Slice.png",
                        ImageColor3 = TOAST_BACKGROUND_COLOR,
                        ImageRectSize = Vector2.new(6, 6),
                        ImageTransparency = 1,
                        ScaleType = Enum.ScaleType.Slice,
                        SliceCenter = Rect.new(3, 3, 3, 3),
                        ClipsDescendants = true,
            
                        create("Frame"){
                            Name = "IconBuffer",
                            BackgroundTransparency = 1,
                            BorderSizePixel = 0,
                            Position = UDim2.new(0, 0, 0, 0),
                            Size = UDim2.new(0, 80, 1, 0),
            
                            create("ImageLabel"){
                                Name = "Icon",
                                AnchorPoint = Vector2.new(0.5, 0.5),
                                BackgroundTransparency = 1,
                                Position = UDim2.new(0.5, 0, 0.5, 0),
                                Size = UDim2.new(0, 48, 0, 48),
                                ZIndex = 2,
                                Image = "rbxasset://textures/ui/Camera/CameraToastIcon.png",
                                ImageColor3 = TOAST_FOREGROUND_COLOR,
                                ImageTransparency = 1,
                            }
                        },
            
                        create("Frame"){
                            Name = "TextBuffer",
                            BackgroundTransparency = 1,
                            BorderSizePixel = 0,
                            Position = UDim2.new(0, 80, 0, 0),
                            Size = UDim2.new(1, -80, 1, 0),
                            ClipsDescendants = true,
            
                            create("TextLabel"){
                                Name = "Upper",
                                AnchorPoint = Vector2.new(0, 1),
                                BackgroundTransparency = 1,
                                Position = UDim2.new(0, 0, 0.5, 0),
                                Size = UDim2.new(1, 0, 0, 19),
                                Font = Enum.Font.GothamSemibold,
                                Text = "Camera control enabled",
                                TextColor3 = TOAST_FOREGROUND_COLOR,
                                TextTransparency = 1,
                                TextSize = 19,
                                TextXAlignment = Enum.TextXAlignment.Left,
                                TextYAlignment = Enum.TextYAlignment.Center,
                            },
            
                            create("TextLabel"){
                                Name = "Lower",
                                AnchorPoint = Vector2.new(0, 0),
                                BackgroundTransparency = 1,
                                Position = UDim2.new(0, 0, 0.5, 3),
                                Size = UDim2.new(1, 0, 0, 15),
                                Font = Enum.Font.Gotham,
                                Text = "Right mouse button to toggle",
                                TextColor3 = TOAST_FOREGROUND_COLOR,
                                TextTransparency = 1,
                                TextSize = 15,
                                TextXAlignment = Enum.TextXAlignment.Left,
                                TextYAlignment = Enum.TextYAlignment.Center,
                            },
                        },
                    },
            
                    Parent = PlayerGui,
                }
            
                toast = uiRoot.Toast
                toastIcon = toast.IconBuffer.Icon
                toastUpperText = toast.TextBuffer.Upper
                toastLowerText = toast.TextBuffer.Lower
            
                initialized = true
            end
            
            local CameraUI = {}
            
            do
                -- Instantaneously disable the toast or enable for opening later on. Used when switching camera modes.
                function CameraUI.setCameraModeToastEnabled(enabled)
                    if not enabled and not initialized then
                        return
                    end
            
                    if not initialized then
                        initializeUI()
                    end
            
                    toast.Visible = enabled
                    if not enabled then
                        CameraUI.setCameraModeToastOpen(false)
                    end
                end
            
                local tweenInfo = TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
            
                -- Tween the toast in or out. Toast must be enabled with setCameraModeToastEnabled.
                function CameraUI.setCameraModeToastOpen(open)
                    assert(initialized)
            
                    TweenService:Create(toast, tweenInfo, {
                        Size = open and TOAST_OPEN_SIZE or TOAST_CLOSED_SIZE,
                        ImageTransparency = open and TOAST_BACKGROUND_TRANS or 1,
                    }):Play()
            
                    TweenService:Create(toastIcon, tweenInfo, {
                        ImageTransparency = open and TOAST_FOREGROUND_TRANS or 1,
                    }):Play()
            
                    TweenService:Create(toastUpperText, tweenInfo, {
                        TextTransparency = open and TOAST_FOREGROUND_TRANS or 1,
                    }):Play()
            
                    TweenService:Create(toastLowerText, tweenInfo, {
                        TextTransparency = open and TOAST_FOREGROUND_TRANS or 1,
                    }):Play()
                end
            end
            
            return CameraUI
        end
        
        function _CameraToggleStateController()
            local Players = game:GetService("Players")
            local UserInputService = game:GetService("UserInputService")
            local GameSettings = UserSettings():GetService("UserGameSettings")
            
            local LocalPlayer = Players.LocalPlayer
            if not LocalPlayer then
                Players:GetPropertyChangedSignal("LocalPlayer"):Wait()
                LocalPlayer = Players.LocalPlayer
            end
            
            local Mouse = LocalPlayer:GetMouse()
            
            local Input = _CameraInput()
            local CameraUI = _CameraUI()
            
            local lastTogglePan = false
            local lastTogglePanChange = tick()
            
            local CROSS_MOUSE_ICON = "rbxasset://textures/Cursors/CrossMouseIcon.png"
            
            local lockStateDirty = false
            local wasTogglePanOnTheLastTimeYouWentIntoFirstPerson = false
            local lastFirstPerson = false
            
            CameraUI.setCameraModeToastEnabled(false)
            
            return function(isFirstPerson)
                local togglePan = Input.getTogglePan()
                local toastTimeout = 3
            
                if isFirstPerson and togglePan ~= lastTogglePan then
                    lockStateDirty = true
                end
            
                if lastTogglePan ~= togglePan or tick() - lastTogglePanChange > toastTimeout then
                    local doShow = togglePan and tick() - lastTogglePanChange < toastTimeout
            
                    CameraUI.setCameraModeToastOpen(doShow)
            
                    if togglePan then
                        lockStateDirty = false
                    end
                    lastTogglePanChange = tick()
                    lastTogglePan = togglePan
                end
            
                if isFirstPerson ~= lastFirstPerson then
                    if isFirstPerson then
                        wasTogglePanOnTheLastTimeYouWentIntoFirstPerson = Input.getTogglePan()
                        Input.setTogglePan(true)
                    elseif not lockStateDirty then
                        Input.setTogglePan(wasTogglePanOnTheLastTimeYouWentIntoFirstPerson)
                    end
                end
            
                if isFirstPerson then
                    if Input.getTogglePan() then
                        Mouse.Icon = CROSS_MOUSE_ICON
                        UserInputService.MouseBehavior = Enum.MouseBehavior.LockCenter
                        --GameSettings.RotationType = Enum.RotationType.CameraRelative
                    else
                        Mouse.Icon = ""
                        UserInputService.MouseBehavior = Enum.MouseBehavior.Default
                        --GameSettings.RotationType = Enum.RotationType.CameraRelative
                    end
            
                elseif Input.getTogglePan() then
                    Mouse.Icon = CROSS_MOUSE_ICON
                    UserInputService.MouseBehavior = Enum.MouseBehavior.LockCenter
                    GameSettings.RotationType = Enum.RotationType.MovementRelative
            
                elseif Input.getHoldPan() then
                    Mouse.Icon = ""
                    UserInputService.MouseBehavior = Enum.MouseBehavior.LockCurrentPosition
                    GameSettings.RotationType = Enum.RotationType.MovementRelative
            
                else
                    Mouse.Icon = ""
                    UserInputService.MouseBehavior = Enum.MouseBehavior.Default
                    GameSettings.RotationType = Enum.RotationType.MovementRelative
                end
            
                lastFirstPerson = isFirstPerson
            end
        end
        
        function _CameraInput()
            local UserInputService = game:GetService("UserInputService")
            
            local MB_TAP_LENGTH = 0.3 -- length of time for a short mouse button tap to be registered
            
            local rmbDown, rmbUp
            do
                local rmbDownBindable = Instance.new("BindableEvent")
                local rmbUpBindable = Instance.new("BindableEvent")
            
                rmbDown = rmbDownBindable.Event
                rmbUp = rmbUpBindable.Event
            
                UserInputService.InputBegan:Connect(function(input, gpe)
                    if not gpe and input.UserInputType == Enum.UserInputType.MouseButton2 then
                        rmbDownBindable:Fire()
                    end
                end)
            
                UserInputService.InputEnded:Connect(function(input, gpe)
                    if input.UserInputType == Enum.UserInputType.MouseButton2 then
                        rmbUpBindable:Fire()
                    end
                end)
            end
            
            local holdPan = false
            local togglePan = false
            local lastRmbDown = 0 -- tick() timestamp of the last right mouse button down event
            
            local CameraInput = {}
            
            function CameraInput.getHoldPan()
                return holdPan
            end
            
            function CameraInput.getTogglePan()
                return togglePan
            end
            
            function CameraInput.getPanning()
                return togglePan or holdPan
            end
            
            function CameraInput.setTogglePan(value)
                togglePan = value
            end
            
            local cameraToggleInputEnabled = false
            local rmbDownConnection
            local rmbUpConnection
            
            function CameraInput.enableCameraToggleInput()
                if cameraToggleInputEnabled then
                    return
                end
                cameraToggleInputEnabled = true
            
                holdPan = false
                togglePan = false
            
                if rmbDownConnection then
                    rmbDownConnection:Disconnect()
                end
            
                if rmbUpConnection then
                    rmbUpConnection:Disconnect()
                end
            
                rmbDownConnection = rmbDown:Connect(function()
                    holdPan = true
                    lastRmbDown = tick()
                end)
            
                rmbUpConnection = rmbUp:Connect(function()
                    holdPan = false
                    if tick() - lastRmbDown < MB_TAP_LENGTH and (togglePan or UserInputService:GetMouseDelta().Magnitude < 2) then
                        togglePan = not togglePan
                    end
                end)
            end
            
            function CameraInput.disableCameraToggleInput()
                if not cameraToggleInputEnabled then
                    return
                end
                cameraToggleInputEnabled = false
            
                if rmbDownConnection then
                    rmbDownConnection:Disconnect()
                    rmbDownConnection = nil
                end
                if rmbUpConnection then
                    rmbUpConnection:Disconnect()
                    rmbUpConnection = nil
                end
            end
            
            return CameraInput
        end
        
        function _BaseCamera()
            --[[
                BaseCamera - Abstract base class for camera control modules
                2018 Camera Update - AllYourBlox
            --]]
            
            --[[ Local Constants ]]--
            local UNIT_Z = Vector3.new(0,0,1)
            local X1_Y0_Z1 = Vector3.new(1,0,1)	--Note: not a unit vector, used for projecting onto XZ plane
            
            local THUMBSTICK_DEADZONE = 0.2
            local DEFAULT_DISTANCE = 12.5	-- Studs
            local PORTRAIT_DEFAULT_DISTANCE = 25		-- Studs
            local FIRST_PERSON_DISTANCE_THRESHOLD = 1.0 -- Below this value, snap into first person
            
            local CAMERA_ACTION_PRIORITY = Enum.ContextActionPriority.Default.Value
            
            -- Note: DotProduct check in CoordinateFrame::lookAt() prevents using values within about
            -- 8.11 degrees of the +/- Y axis, that's why these limits are currently 80 degrees
            local MIN_Y = math.rad(-80)
            local MAX_Y = math.rad(80)
            
            local TOUCH_ADJUST_AREA_UP = math.rad(30)
            local TOUCH_ADJUST_AREA_DOWN = math.rad(-15)
            
            local TOUCH_SENSITIVTY_ADJUST_MAX_Y = 2.1
            local TOUCH_SENSITIVTY_ADJUST_MIN_Y = 0.5
            
            local VR_ANGLE = math.rad(15)
            local VR_LOW_INTENSITY_ROTATION = Vector2.new(math.rad(15), 0)
            local VR_HIGH_INTENSITY_ROTATION = Vector2.new(math.rad(45), 0)
            local VR_LOW_INTENSITY_REPEAT = 0.1
            local VR_HIGH_INTENSITY_REPEAT = 0.4
            
            local ZERO_VECTOR2 = Vector2.new(0,0)
            local ZERO_VECTOR3 = Vector3.new(0,0,0)
            
            local TOUCH_SENSITIVTY = Vector2.new(0.00945 * math.pi, 0.003375 * math.pi)
            local MOUSE_SENSITIVITY = Vector2.new( 0.002 * math.pi, 0.0015 * math.pi )
            
            local SEAT_OFFSET = Vector3.new(0,5,0)
            local VR_SEAT_OFFSET = Vector3.new(0,4,0)
            local HEAD_OFFSET = Vector3.new(0,1.5,0)
            local R15_HEAD_OFFSET = Vector3.new(0, 1.5, 0)
            local R15_HEAD_OFFSET_NO_SCALING = Vector3.new(0, 2, 0)
            local HUMANOID_ROOT_PART_SIZE = Vector3.new(2, 2, 1)
            
            local GAMEPAD_ZOOM_STEP_1 = 0
            local GAMEPAD_ZOOM_STEP_2 = 10
            local GAMEPAD_ZOOM_STEP_3 = 20
            
            local PAN_SENSITIVITY = 20
            local ZOOM_SENSITIVITY_CURVATURE = 0.5
            
            local abs = math.abs
            local sign = math.sign
            
            local FFlagUserCameraToggle do
                local success, result = pcall(function()
                    return UserSettings():IsUserFeatureEnabled("UserCameraToggle")
                end)
                FFlagUserCameraToggle = success and result
            end
            
            local FFlagUserDontAdjustSensitvityForPortrait do
                local success, result = pcall(function()
                    return UserSettings():IsUserFeatureEnabled("UserDontAdjustSensitvityForPortrait")
                end)
                FFlagUserDontAdjustSensitvityForPortrait = success and result
            end
            
            local FFlagUserFixZoomInZoomOutDiscrepancy do
                local success, result = pcall(function()
                    return UserSettings():IsUserFeatureEnabled("UserFixZoomInZoomOutDiscrepancy")
                end)
                FFlagUserFixZoomInZoomOutDiscrepancy = success and result
            end
            
            local Util = _CameraUtils()
            local ZoomController = _ZoomController()
            local CameraToggleStateController = _CameraToggleStateController()
            local CameraInput = _CameraInput()
            local CameraUI = _CameraUI()
            
            --[[ Roblox Services ]]--
            local Players = game:GetService("Players")
            local UserInputService = game:GetService("UserInputService")
            local StarterGui = game:GetService("StarterGui")
            local GuiService = game:GetService("GuiService")
            local ContextActionService = game:GetService("ContextActionService")
            local VRService = game:GetService("VRService")
            local UserGameSettings = UserSettings():GetService("UserGameSettings")
            
            local player = Players.LocalPlayer 
            
            --[[ The Module ]]--
            local BaseCamera = {}
            BaseCamera.__index = BaseCamera
            
            function BaseCamera.new()
                local self = setmetatable({}, BaseCamera)
            
                -- So that derived classes have access to this
                self.FIRST_PERSON_DISTANCE_THRESHOLD = FIRST_PERSON_DISTANCE_THRESHOLD
            
                self.cameraType = nil
                self.cameraMovementMode = nil
            
                self.lastCameraTransform = nil
                self.rotateInput = ZERO_VECTOR2
                self.userPanningCamera = false
                self.lastUserPanCamera = tick()
            
                self.humanoidRootPart = nil
                self.humanoidCache = {}
            
                -- Subject and position on last update call
                self.lastSubject = nil
                self.lastSubjectPosition = Vector3.new(0,5,0)
            
                -- These subject distance members refer to the nominal camera-to-subject follow distance that the camera
                -- is trying to maintain, not the actual measured value.
                -- The default is updated when screen orientation or the min/max distances change,
                -- to be sure the default is always in range and appropriate for the orientation.
                self.defaultSubjectDistance = math.clamp(DEFAULT_DISTANCE, player.CameraMinZoomDistance, player.CameraMaxZoomDistance)
                self.currentSubjectDistance = math.clamp(DEFAULT_DISTANCE, player.CameraMinZoomDistance, player.CameraMaxZoomDistance)
            
                self.inFirstPerson = false
                self.inMouseLockedMode = false
                self.portraitMode = false
                self.isSmallTouchScreen = false
            
                -- Used by modules which want to reset the camera angle on respawn.
                self.resetCameraAngle = true
            
                self.enabled = false
            
                -- Input Event Connections
                self.inputBeganConn = nil
                self.inputChangedConn = nil
                self.inputEndedConn = nil
            
                self.startPos = nil
                self.lastPos = nil
                self.panBeginLook = nil
            
                self.panEnabled = true
                self.keyPanEnabled = true
                self.distanceChangeEnabled = true
            
                self.PlayerGui = nil
            
                self.cameraChangedConn = nil
                self.viewportSizeChangedConn = nil
            
                self.boundContextActions = {}
            
                -- VR Support
                self.shouldUseVRRotation = false
                self.VRRotationIntensityAvailable = false
                self.lastVRRotationIntensityCheckTime = 0
                self.lastVRRotationTime = 0
                self.vrRotateKeyCooldown = {}
                self.cameraTranslationConstraints = Vector3.new(1, 1, 1)
                self.humanoidJumpOrigin = nil
                self.trackingHumanoid = nil
                self.cameraFrozen = false
                self.subjectStateChangedConn = nil
            
                -- Gamepad support
                self.activeGamepad = nil
                self.gamepadPanningCamera = false
                self.lastThumbstickRotate = nil
                self.numOfSeconds = 0.7
                self.currentSpeed = 0
                self.maxSpeed = 6
                self.vrMaxSpeed = 4
                self.lastThumbstickPos = Vector2.new(0,0)
                self.ySensitivity = 0.65
                self.lastVelocity = nil
                self.gamepadConnectedConn = nil
                self.gamepadDisconnectedConn = nil
                self.currentZoomSpeed = 1.0
                self.L3ButtonDown = false
                self.dpadLeftDown = false
                self.dpadRightDown = false
            
                -- Touch input support
                self.isDynamicThumbstickEnabled = false
                self.fingerTouches = {}
                self.dynamicTouchInput = nil
                self.numUnsunkTouches = 0
                self.inputStartPositions = {}
                self.inputStartTimes = {}
                self.startingDiff = nil
                self.pinchBeginZoom = nil
                self.userPanningTheCamera = false
                self.touchActivateConn = nil
            
                -- Mouse locked formerly known as shift lock mode
                self.mouseLockOffset = ZERO_VECTOR3
            
                -- [[ NOTICE ]] --
                -- Initialization things used to always execute at game load time, but now these camera modules are instantiated
                -- when needed, so the code here may run well after the start of the game
            
                if player.Character then
                    self:OnCharacterAdded(player.Character)
                end
            
                player.CharacterAdded:Connect(function(char)
                    self:OnCharacterAdded(char)
                end)
            
                if self.cameraChangedConn then self.cameraChangedConn:Disconnect() end
                self.cameraChangedConn = workspace:GetPropertyChangedSignal("CurrentCamera"):Connect(function()
                    self:OnCurrentCameraChanged()
                end)
                self:OnCurrentCameraChanged()
            
                if self.playerCameraModeChangeConn then self.playerCameraModeChangeConn:Disconnect() end
                self.playerCameraModeChangeConn = player:GetPropertyChangedSignal("CameraMode"):Connect(function()
                    self:OnPlayerCameraPropertyChange()
                end)
            
                if self.minDistanceChangeConn then self.minDistanceChangeConn:Disconnect() end
                self.minDistanceChangeConn = player:GetPropertyChangedSignal("CameraMinZoomDistance"):Connect(function()
                    self:OnPlayerCameraPropertyChange()
                end)
            
                if self.maxDistanceChangeConn then self.maxDistanceChangeConn:Disconnect() end
                self.maxDistanceChangeConn = player:GetPropertyChangedSignal("CameraMaxZoomDistance"):Connect(function()
                    self:OnPlayerCameraPropertyChange()
                end)
            
                if self.playerDevTouchMoveModeChangeConn then self.playerDevTouchMoveModeChangeConn:Disconnect() end
                self.playerDevTouchMoveModeChangeConn = player:GetPropertyChangedSignal("DevTouchMovementMode"):Connect(function()
                    self:OnDevTouchMovementModeChanged()
                end)
                self:OnDevTouchMovementModeChanged() -- Init
            
                if self.gameSettingsTouchMoveMoveChangeConn then self.gameSettingsTouchMoveMoveChangeConn:Disconnect() end
                self.gameSettingsTouchMoveMoveChangeConn = UserGameSettings:GetPropertyChangedSignal("TouchMovementMode"):Connect(function()
                    self:OnGameSettingsTouchMovementModeChanged()
                end)
                self:OnGameSettingsTouchMovementModeChanged() -- Init
            
                UserGameSettings:SetCameraYInvertVisible()
                UserGameSettings:SetGamepadCameraSensitivityVisible()
            
                self.hasGameLoaded = game:IsLoaded()
                if not self.hasGameLoaded then
                    self.gameLoadedConn = game.Loaded:Connect(function()
                        self.hasGameLoaded = true
                        self.gameLoadedConn:Disconnect()
                        self.gameLoadedConn = nil
                    end)
                end
            
                self:OnPlayerCameraPropertyChange()
            
                return self
            end
            
            function BaseCamera:GetModuleName()
                return "BaseCamera"
            end
            
            function BaseCamera:OnCharacterAdded(char)
                self.resetCameraAngle = self.resetCameraAngle or self:GetEnabled()
                self.humanoidRootPart = nil
                if UserInputService.TouchEnabled then
                    self.PlayerGui = player:WaitForChild("PlayerGui")
                    for _, child in ipairs(char:GetChildren()) do
                        if child:IsA("Tool") then
                            self.isAToolEquipped = true
                        end
                    end
                    char.ChildAdded:Connect(function(child)
                        if child:IsA("Tool") then
                            self.isAToolEquipped = true
                        end
                    end)
                    char.ChildRemoved:Connect(function(child)
                        if child:IsA("Tool") then
                            self.isAToolEquipped = false
                        end
                    end)
                end
            end
            
            function BaseCamera:GetHumanoidRootPart()
                if not self.humanoidRootPart then
                    if player.Character then
                        local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
                        if humanoid then
                            self.humanoidRootPart = humanoid.RootPart
                        end
                    end
                end
                return self.humanoidRootPart
            end
            
            function BaseCamera:GetBodyPartToFollow(humanoid, isDead)
                -- If the humanoid is dead, prefer the head part if one still exists as a sibling of the humanoid
                if humanoid:GetState() == Enum.HumanoidStateType.Dead then
                    local character = humanoid.Parent
                    if character and character:IsA("Model") then
                        return character:FindFirstChild("Head") or humanoid.RootPart
                    end
                end
            
                return humanoid.RootPart
            end
            
            function BaseCamera:GetSubjectPosition()
                local result = self.lastSubjectPosition
                local camera = game.Workspace.CurrentCamera
                local cameraSubject = camera and camera.CameraSubject
            
                if cameraSubject then
                    if cameraSubject:IsA("Humanoid") then
                        local humanoid = cameraSubject
                        local humanoidIsDead = humanoid:GetState() == Enum.HumanoidStateType.Dead
            
                        if VRService.VREnabled and humanoidIsDead and humanoid == self.lastSubject then
                            result = self.lastSubjectPosition
                        else
                            local bodyPartToFollow = humanoid.RootPart
            
                            -- If the humanoid is dead, prefer their head part as a follow target, if it exists
                            if humanoidIsDead then
                                if humanoid.Parent and humanoid.Parent:IsA("Model") then
                                    bodyPartToFollow = humanoid.Parent:FindFirstChild("Head") or bodyPartToFollow
                                end
                            end
            
                            if bodyPartToFollow and bodyPartToFollow:IsA("BasePart") then
                                local heightOffset
                                if humanoid.RigType == Enum.HumanoidRigType.R15 then
                                    if humanoid.AutomaticScalingEnabled then
                                        heightOffset = R15_HEAD_OFFSET
                                        if bodyPartToFollow == humanoid.RootPart then
                                            local rootPartSizeOffset = (humanoid.RootPart.Size.Y/2) - (HUMANOID_ROOT_PART_SIZE.Y/2)
                                            heightOffset = heightOffset + Vector3.new(0, rootPartSizeOffset, 0)
                                        end
                                    else
                                        heightOffset = R15_HEAD_OFFSET_NO_SCALING
                                    end
                                else
                                    heightOffset = HEAD_OFFSET
                                end
            
                                if humanoidIsDead then
                                    heightOffset = ZERO_VECTOR3
                                end
            
                                result = bodyPartToFollow.CFrame.p + bodyPartToFollow.CFrame:vectorToWorldSpace(heightOffset + humanoid.CameraOffset)
                            end
                        end
            
                    elseif cameraSubject:IsA("VehicleSeat") then
                        local offset = SEAT_OFFSET
                        if VRService.VREnabled then
                            offset = VR_SEAT_OFFSET
                        end
                        result = cameraSubject.CFrame.p + cameraSubject.CFrame:vectorToWorldSpace(offset)
                    elseif cameraSubject:IsA("SkateboardPlatform") then
                        result = cameraSubject.CFrame.p + SEAT_OFFSET
                    elseif cameraSubject:IsA("BasePart") then
                        result = cameraSubject.CFrame.p
                    elseif cameraSubject:IsA("Model") then
                        if cameraSubject.PrimaryPart then
                            result = cameraSubject:GetPrimaryPartCFrame().p
                        else
                            result = cameraSubject:GetModelCFrame().p
                        end
                    end
                else
                    -- cameraSubject is nil
                    -- Note: Previous RootCamera did not have this else case and let self.lastSubject and self.lastSubjectPosition
                    -- both get set to nil in the case of cameraSubject being nil. This function now exits here to preserve the
                    -- last set valid values for these, as nil values are not handled cases
                    return
                end
            
                self.lastSubject = cameraSubject
                self.lastSubjectPosition = result
            
                return result
            end
            
            function BaseCamera:UpdateDefaultSubjectDistance()
                if self.portraitMode then
                    self.defaultSubjectDistance = math.clamp(PORTRAIT_DEFAULT_DISTANCE, player.CameraMinZoomDistance, player.CameraMaxZoomDistance)
                else
                    self.defaultSubjectDistance = math.clamp(DEFAULT_DISTANCE, player.CameraMinZoomDistance, player.CameraMaxZoomDistance)
                end
            end
            
            function BaseCamera:OnViewportSizeChanged()
                local camera = game.Workspace.CurrentCamera
                local size = camera.ViewportSize
                self.portraitMode = size.X < size.Y
                self.isSmallTouchScreen = UserInputService.TouchEnabled and (size.Y < 500 or size.X < 700)
            
                self:UpdateDefaultSubjectDistance()
            end
            
            -- Listener for changes to workspace.CurrentCamera
            function BaseCamera:OnCurrentCameraChanged()
                if UserInputService.TouchEnabled then
                    if self.viewportSizeChangedConn then
                        self.viewportSizeChangedConn:Disconnect()
                        self.viewportSizeChangedConn = nil
                    end
            
                    local newCamera = game.Workspace.CurrentCamera
            
                    if newCamera then
                        self:OnViewportSizeChanged()
                        self.viewportSizeChangedConn = newCamera:GetPropertyChangedSignal("ViewportSize"):Connect(function()
                            self:OnViewportSizeChanged()
                        end)
                    end
                end
            
                -- VR support additions
                if self.cameraSubjectChangedConn then
                    self.cameraSubjectChangedConn:Disconnect()
                    self.cameraSubjectChangedConn = nil
                end
            
                local camera = game.Workspace.CurrentCamera
                if camera then
                    self.cameraSubjectChangedConn = camera:GetPropertyChangedSignal("CameraSubject"):Connect(function()
                        self:OnNewCameraSubject()
                    end)
                    self:OnNewCameraSubject()
                end
            end
            
            function BaseCamera:OnDynamicThumbstickEnabled()
                if UserInputService.TouchEnabled then
                    self.isDynamicThumbstickEnabled = true
                end
            end
            
            function BaseCamera:OnDynamicThumbstickDisabled()
                self.isDynamicThumbstickEnabled = false
            end
            
            function BaseCamera:OnGameSettingsTouchMovementModeChanged()
                if player.DevTouchMovementMode == Enum.DevTouchMovementMode.UserChoice then
                    if (UserGameSettings.TouchMovementMode == Enum.TouchMovementMode.DynamicThumbstick
                        or UserGameSettings.TouchMovementMode == Enum.TouchMovementMode.Default) then
                        self:OnDynamicThumbstickEnabled()
                    else
                        self:OnDynamicThumbstickDisabled()
                    end
                end
            end
            
            function BaseCamera:OnDevTouchMovementModeChanged()
                if player.DevTouchMovementMode.Name == "DynamicThumbstick" then
                    self:OnDynamicThumbstickEnabled()
                else
                    self:OnGameSettingsTouchMovementModeChanged()
                end
            end
            
            function BaseCamera:OnPlayerCameraPropertyChange()
                -- This call forces re-evaluation of player.CameraMode and clamping to min/max distance which may have changed
                self:SetCameraToSubjectDistance(self.currentSubjectDistance)
            end
            
            function BaseCamera:GetCameraHeight()
                if VRService.VREnabled and not self.inFirstPerson then
                    return math.sin(VR_ANGLE) * self.currentSubjectDistance
                end
                return 0
            end
            
            function BaseCamera:InputTranslationToCameraAngleChange(translationVector, sensitivity)
                if not FFlagUserDontAdjustSensitvityForPortrait then
                    local camera = game.Workspace.CurrentCamera
                    if camera and camera.ViewportSize.X > 0 and camera.ViewportSize.Y > 0 and (camera.ViewportSize.Y > camera.ViewportSize.X) then
                        -- Screen has portrait orientation, swap X and Y sensitivity
                        return translationVector * Vector2.new( sensitivity.Y, sensitivity.X)
                    end
                end
                return translationVector * sensitivity
            end
            
            function BaseCamera:Enable(enable)
                if self.enabled ~= enable then
                    self.enabled = enable
                    if self.enabled then
                        self:ConnectInputEvents()
                        self:BindContextActions()
            
                        if player.CameraMode == Enum.CameraMode.LockFirstPerson then
                            self.currentSubjectDistance = 0.5
                            if not self.inFirstPerson then
                                self:EnterFirstPerson()
                            end
                        end
                    else
                        self:DisconnectInputEvents()
                        self:UnbindContextActions()
                        -- Clean up additional event listeners and reset a bunch of properties
                        self:Cleanup()
                    end
                end
            end
            
            function BaseCamera:GetEnabled()
                return self.enabled
            end
            
            function BaseCamera:OnInputBegan(input, processed)
                if input.UserInputType == Enum.UserInputType.Touch then
                    self:OnTouchBegan(input, processed)
                elseif input.UserInputType == Enum.UserInputType.MouseButton2 then
                    self:OnMouse2Down(input, processed)
                elseif input.UserInputType == Enum.UserInputType.MouseButton3 then
                    self:OnMouse3Down(input, processed)
                end
            end
            
            function BaseCamera:OnInputChanged(input, processed)
                if input.UserInputType == Enum.UserInputType.Touch then
                    self:OnTouchChanged(input, processed)
                elseif input.UserInputType == Enum.UserInputType.MouseMovement then
                    self:OnMouseMoved(input, processed)
                end
            end
            
            function BaseCamera:OnInputEnded(input, processed)
                if input.UserInputType == Enum.UserInputType.Touch then
                    self:OnTouchEnded(input, processed)
                elseif input.UserInputType == Enum.UserInputType.MouseButton2 then
                    self:OnMouse2Up(input, processed)
                elseif input.UserInputType == Enum.UserInputType.MouseButton3 then
                    self:OnMouse3Up(input, processed)
                end
            end
            
            function BaseCamera:OnPointerAction(wheel, pan, pinch, processed)
                if processed then
                    return
                end
            
                if pan.Magnitude > 0 then
                    local inversionVector = Vector2.new(1, UserGameSettings:GetCameraYInvertValue())
                    local rotateDelta = self:InputTranslationToCameraAngleChange(PAN_SENSITIVITY*pan, MOUSE_SENSITIVITY)*inversionVector
                    self.rotateInput = self.rotateInput + rotateDelta
                end
            
                local zoom = self.currentSubjectDistance
                local zoomDelta = -(wheel + pinch)
            
                if abs(zoomDelta) > 0 then
                    local newZoom
                    if self.inFirstPerson and zoomDelta > 0 then
                        newZoom = FIRST_PERSON_DISTANCE_THRESHOLD
                    else
                        if FFlagUserFixZoomInZoomOutDiscrepancy then
                            if (zoomDelta > 0) then
                                newZoom = zoom + zoomDelta*(1 + zoom*ZOOM_SENSITIVITY_CURVATURE)
                            else
                                newZoom = (zoom + zoomDelta) / (1 - zoomDelta*ZOOM_SENSITIVITY_CURVATURE)
                            end
                        else
                            newZoom = zoom + zoomDelta*(1 + zoom*ZOOM_SENSITIVITY_CURVATURE)
                        end
                    end
            
                    self:SetCameraToSubjectDistance(newZoom)
                end
            end
            
            function BaseCamera:ConnectInputEvents()
                self.pointerActionConn = UserInputService.PointerAction:Connect(function(wheel, pan, pinch, processed)
                    self:OnPointerAction(wheel, pan, pinch, processed)
                end)
            
                self.inputBeganConn = UserInputService.InputBegan:Connect(function(input, processed)
                    self:OnInputBegan(input, processed)
                end)
            
                self.inputChangedConn = UserInputService.InputChanged:Connect(function(input, processed)
                    self:OnInputChanged(input, processed)
                end)
            
                self.inputEndedConn = UserInputService.InputEnded:Connect(function(input, processed)
                    self:OnInputEnded(input, processed)
                end)
            
                self.menuOpenedConn = GuiService.MenuOpened:connect(function()
                    self:ResetInputStates()
                end)
            
                self.gamepadConnectedConn = UserInputService.GamepadDisconnected:connect(function(gamepadEnum)
                    if self.activeGamepad ~= gamepadEnum then return end
                    self.activeGamepad = nil
                    self:AssignActivateGamepad()
                end)
            
                self.gamepadDisconnectedConn = UserInputService.GamepadConnected:connect(function(gamepadEnum)
                    if self.activeGamepad == nil then
                        self:AssignActivateGamepad()
                    end
                end)
            
                self:AssignActivateGamepad()
                if not FFlagUserCameraToggle then
                    self:UpdateMouseBehavior()
                end
            end
            
            function BaseCamera:BindContextActions()
                self:BindGamepadInputActions()
                self:BindKeyboardInputActions()
            end
            
            function BaseCamera:AssignActivateGamepad()
                local connectedGamepads = UserInputService:GetConnectedGamepads()
                if #connectedGamepads > 0 then
                    for i = 1, #connectedGamepads do
                        if self.activeGamepad == nil then
                            self.activeGamepad = connectedGamepads[i]
                        elseif connectedGamepads[i].Value < self.activeGamepad.Value then
                            self.activeGamepad = connectedGamepads[i]
                        end
                    end
                end
            
                if self.activeGamepad == nil then -- nothing is connected, at least set up for gamepad1
                    self.activeGamepad = Enum.UserInputType.Gamepad1
                end
            end
            
            function BaseCamera:DisconnectInputEvents()
                if self.inputBeganConn then
                    self.inputBeganConn:Disconnect()
                    self.inputBeganConn = nil
                end
                if self.inputChangedConn then
                    self.inputChangedConn:Disconnect()
                    self.inputChangedConn = nil
                end
                if self.inputEndedConn then
                    self.inputEndedConn:Disconnect()
                    self.inputEndedConn = nil
                end
            end
            
            function BaseCamera:UnbindContextActions()
                for i = 1, #self.boundContextActions do
                    ContextActionService:UnbindAction(self.boundContextActions[i])
                end
                self.boundContextActions = {}
            end
            
            function BaseCamera:Cleanup()
                if self.pointerActionConn then
                    self.pointerActionConn:Disconnect()
                    self.pointerActionConn = nil
                end
                if self.menuOpenedConn then
                    self.menuOpenedConn:Disconnect()
                    self.menuOpenedConn = nil
                end
                if self.mouseLockToggleConn then
                    self.mouseLockToggleConn:Disconnect()
                    self.mouseLockToggleConn = nil
                end
                if self.gamepadConnectedConn then
                    self.gamepadConnectedConn:Disconnect()
                    self.gamepadConnectedConn = nil
                end
                if self.gamepadDisconnectedConn then
                    self.gamepadDisconnectedConn:Disconnect()
                    self.gamepadDisconnectedConn = nil
                end
                if self.subjectStateChangedConn then
                    self.subjectStateChangedConn:Disconnect()
                    self.subjectStateChangedConn = nil
                end
                if self.viewportSizeChangedConn then
                    self.viewportSizeChangedConn:Disconnect()
                    self.viewportSizeChangedConn = nil
                end
                if self.touchActivateConn then
                    self.touchActivateConn:Disconnect()
                    self.touchActivateConn = nil
                end
            
                self.turningLeft = false
                self.turningRight = false
                self.lastCameraTransform = nil
                self.lastSubjectCFrame = nil
                self.userPanningTheCamera = false
                self.rotateInput = Vector2.new()
                self.gamepadPanningCamera = Vector2.new(0,0)
            
                -- Reset input states
                self.startPos = nil
                self.lastPos = nil
                self.panBeginLook = nil
                self.isRightMouseDown = false
                self.isMiddleMouseDown = false
            
                self.fingerTouches = {}
                self.dynamicTouchInput = nil
                self.numUnsunkTouches = 0
            
                self.startingDiff = nil
                self.pinchBeginZoom = nil
            
                -- Unlock mouse for example if right mouse button was being held down
                if UserInputService.MouseBehavior ~= Enum.MouseBehavior.LockCenter then
                    UserInputService.MouseBehavior = Enum.MouseBehavior.Default
                end
            end
            
            -- This is called when settings menu is opened
            function BaseCamera:ResetInputStates()
                self.isRightMouseDown = false
                self.isMiddleMouseDown = false
                self:OnMousePanButtonReleased() -- this function doesn't seem to actually need parameters
            
                if UserInputService.TouchEnabled then
                    --[[menu opening was causing serious touch issues
                    this should disable all active touch events if
                    they're active when menu opens.]]
                    for inputObject in pairs(self.fingerTouches) do
                        self.fingerTouches[inputObject] = nil
                    end
                    self.dynamicTouchInput = nil
                    self.panBeginLook = nil
                    self.startPos = nil
                    self.lastPos = nil
                    self.userPanningTheCamera = false
                    self.startingDiff = nil
                    self.pinchBeginZoom = nil
                    self.numUnsunkTouches = 0
                end
            end
            
            function BaseCamera:GetGamepadPan(name, state, input)
                if input.UserInputType == self.activeGamepad and input.KeyCode == Enum.KeyCode.Thumbstick2 then
            --		if self.L3ButtonDown then
            --			-- L3 Thumbstick is depressed, right stick controls dolly in/out
            --			if (input.Position.Y > THUMBSTICK_DEADZONE) then
            --				self.currentZoomSpeed = 0.96
            --			elseif (input.Position.Y < -THUMBSTICK_DEADZONE) then
            --				self.currentZoomSpeed = 1.04
            --			else
            --				self.currentZoomSpeed = 1.00
            --			end
            --		else
                        if state == Enum.UserInputState.Cancel then
                            self.gamepadPanningCamera = ZERO_VECTOR2
                            return
                        end
            
                        local inputVector = Vector2.new(input.Position.X, -input.Position.Y)
                        if inputVector.magnitude > THUMBSTICK_DEADZONE then
                            self.gamepadPanningCamera = Vector2.new(input.Position.X, -input.Position.Y)
                        else
                            self.gamepadPanningCamera = ZERO_VECTOR2
                        end
                    --end
                    return Enum.ContextActionResult.Sink
                end
                return Enum.ContextActionResult.Pass
            end
            
            function BaseCamera:DoKeyboardPanTurn(name, state, input)
                if not self.hasGameLoaded and VRService.VREnabled then
                    return Enum.ContextActionResult.Pass
                end
            
                if state == Enum.UserInputState.Cancel then
                    self.turningLeft = false
                    self.turningRight = false
                    return Enum.ContextActionResult.Sink
                end
            
                if self.panBeginLook == nil and self.keyPanEnabled then
                    if input.KeyCode == Enum.KeyCode.Left then
                        self.turningLeft = state == Enum.UserInputState.Begin
                    elseif input.KeyCode == Enum.KeyCode.Right then
                        self.turningRight = state == Enum.UserInputState.Begin
                    end
                    return Enum.ContextActionResult.Sink
                end
                return Enum.ContextActionResult.Pass
            end
            
            function BaseCamera:DoPanRotateCamera(rotateAngle)
                local angle = Util.RotateVectorByAngleAndRound(self:GetCameraLookVector() * Vector3.new(1,0,1), rotateAngle, math.pi*0.25)
                if angle ~= 0 then
                    self.rotateInput = self.rotateInput + Vector2.new(angle, 0)
                    self.lastUserPanCamera = tick()
                    self.lastCameraTransform = nil
                end
            end
            
            function BaseCamera:DoGamepadZoom(name, state, input)
                if input.UserInputType == self.activeGamepad then
                    if input.KeyCode == Enum.KeyCode.ButtonR3 then
                        if state == Enum.UserInputState.Begin then
                            if self.distanceChangeEnabled then
                                local dist = self:GetCameraToSubjectDistance()
            
                                if dist > (GAMEPAD_ZOOM_STEP_2 + GAMEPAD_ZOOM_STEP_3)/2 then
                                    self:SetCameraToSubjectDistance(GAMEPAD_ZOOM_STEP_2)
                                elseif dist > (GAMEPAD_ZOOM_STEP_1 + GAMEPAD_ZOOM_STEP_2)/2 then
                                    self:SetCameraToSubjectDistance(GAMEPAD_ZOOM_STEP_1)
                                else
                                    self:SetCameraToSubjectDistance(GAMEPAD_ZOOM_STEP_3)
                                end
                            end
                        end
                    elseif input.KeyCode == Enum.KeyCode.DPadLeft then
                        self.dpadLeftDown = (state == Enum.UserInputState.Begin)
                    elseif input.KeyCode == Enum.KeyCode.DPadRight then
                        self.dpadRightDown = (state == Enum.UserInputState.Begin)
                    end
            
                    if self.dpadLeftDown then
                        self.currentZoomSpeed = 1.04
                    elseif self.dpadRightDown then
                        self.currentZoomSpeed = 0.96
                    else
                        self.currentZoomSpeed = 1.00
                    end
                    return Enum.ContextActionResult.Sink
                end
                return Enum.ContextActionResult.Pass
            --	elseif input.UserInputType == self.activeGamepad and input.KeyCode == Enum.KeyCode.ButtonL3 then
            --		if (state == Enum.UserInputState.Begin) then
            --			self.L3ButtonDown = true
            --		elseif (state == Enum.UserInputState.End) then
            --			self.L3ButtonDown = false
            --			self.currentZoomSpeed = 1.00
            --		end
            --	end
            end
            
            function BaseCamera:DoKeyboardZoom(name, state, input)
                if not self.hasGameLoaded and VRService.VREnabled then
                    return Enum.ContextActionResult.Pass
                end
            
                if state ~= Enum.UserInputState.Begin then
                    return Enum.ContextActionResult.Pass
                end
            
                if self.distanceChangeEnabled and player.CameraMode ~= Enum.CameraMode.LockFirstPerson then
                    if input.KeyCode == Enum.KeyCode.I then
                        self:SetCameraToSubjectDistance( self.currentSubjectDistance - 5 )
                    elseif input.KeyCode == Enum.KeyCode.O then
                        self:SetCameraToSubjectDistance( self.currentSubjectDistance + 5 )
                    end
                    return Enum.ContextActionResult.Sink
                end
                return Enum.ContextActionResult.Pass
            end
            
            function BaseCamera:BindAction(actionName, actionFunc, createTouchButton, ...)
                table.insert(self.boundContextActions, actionName)
                ContextActionService:BindActionAtPriority(actionName, actionFunc, createTouchButton,
                    CAMERA_ACTION_PRIORITY, ...)
            end
            
            function BaseCamera:BindGamepadInputActions()
                self:BindAction("BaseCameraGamepadPan", function(name, state, input) return self:GetGamepadPan(name, state, input) end,
                    false, Enum.KeyCode.Thumbstick2)
                self:BindAction("BaseCameraGamepadZoom", function(name, state, input) return self:DoGamepadZoom(name, state, input) end,
                    false, Enum.KeyCode.DPadLeft, Enum.KeyCode.DPadRight, Enum.KeyCode.ButtonR3)
            end
            
            function BaseCamera:BindKeyboardInputActions()
                self:BindAction("BaseCameraKeyboardPanArrowKeys", function(name, state, input) return self:DoKeyboardPanTurn(name, state, input) end,
                    false, Enum.KeyCode.Left, Enum.KeyCode.Right)
                self:BindAction("BaseCameraKeyboardZoom", function(name, state, input) return self:DoKeyboardZoom(name, state, input) end,
                    false, Enum.KeyCode.I, Enum.KeyCode.O)
            end
            
            local function isInDynamicThumbstickArea(input)
                local playerGui = player:FindFirstChildOfClass("PlayerGui")
                local touchGui = playerGui and playerGui:FindFirstChild("TouchGui")
                local touchFrame = touchGui and touchGui:FindFirstChild("TouchControlFrame")
                local thumbstickFrame = touchFrame and touchFrame:FindFirstChild("DynamicThumbstickFrame")
            
                if not thumbstickFrame then
                    return false
                end
            
                local frameCornerTopLeft = thumbstickFrame.AbsolutePosition
                local frameCornerBottomRight = frameCornerTopLeft + thumbstickFrame.AbsoluteSize
                if input.Position.X >= frameCornerTopLeft.X and input.Position.Y >= frameCornerTopLeft.Y then
                    if input.Position.X <= frameCornerBottomRight.X and input.Position.Y <= frameCornerBottomRight.Y then
                        return true
                    end
                end
            
                return false
            end
            
            ---Adjusts the camera Y touch Sensitivity when moving away from the center and in the TOUCH_SENSITIVTY_ADJUST_AREA
            function BaseCamera:AdjustTouchSensitivity(delta, sensitivity)
                local cameraCFrame = game.Workspace.CurrentCamera and game.Workspace.CurrentCamera.CFrame
                if not cameraCFrame then
                    return sensitivity
                end
                local currPitchAngle = cameraCFrame:ToEulerAnglesYXZ()
            
                local multiplierY = TOUCH_SENSITIVTY_ADJUST_MAX_Y
                if currPitchAngle > TOUCH_ADJUST_AREA_UP and delta.Y < 0 then
                    local fractionAdjust = (currPitchAngle - TOUCH_ADJUST_AREA_UP)/(MAX_Y - TOUCH_ADJUST_AREA_UP)
                    fractionAdjust = 1 - (1 - fractionAdjust)^3
                    multiplierY = TOUCH_SENSITIVTY_ADJUST_MAX_Y - fractionAdjust * (
                        TOUCH_SENSITIVTY_ADJUST_MAX_Y - TOUCH_SENSITIVTY_ADJUST_MIN_Y)
                elseif currPitchAngle < TOUCH_ADJUST_AREA_DOWN and delta.Y > 0 then
                    local fractionAdjust = (currPitchAngle - TOUCH_ADJUST_AREA_DOWN)/(MIN_Y - TOUCH_ADJUST_AREA_DOWN)
                    fractionAdjust = 1 - (1 - fractionAdjust)^3
                    multiplierY = TOUCH_SENSITIVTY_ADJUST_MAX_Y - fractionAdjust * (
                        TOUCH_SENSITIVTY_ADJUST_MAX_Y - TOUCH_SENSITIVTY_ADJUST_MIN_Y)
                end
            
                return Vector2.new(
                    sensitivity.X,
                    sensitivity.Y * multiplierY
                )
            end
            
            function BaseCamera:OnTouchBegan(input, processed)
                local canUseDynamicTouch = self.isDynamicThumbstickEnabled and not processed
                if canUseDynamicTouch then
                    if self.dynamicTouchInput == nil and isInDynamicThumbstickArea(input) then
                        -- First input in the dynamic thumbstick area should always be ignored for camera purposes
                        -- Even if the dynamic thumbstick does not process it immediately
                        self.dynamicTouchInput = input
                        return
                    end
                    self.fingerTouches[input] = processed
                    self.inputStartPositions[input] = input.Position
                    self.inputStartTimes[input] = tick()
                    self.numUnsunkTouches = self.numUnsunkTouches + 1
                end
            end
            
            function BaseCamera:OnTouchChanged(input, processed)
                if self.fingerTouches[input] == nil then
                    if self.isDynamicThumbstickEnabled then
                        return
                    end
                    self.fingerTouches[input] = processed
                    if not processed then
                        self.numUnsunkTouches = self.numUnsunkTouches + 1
                    end
                end
            
                if self.numUnsunkTouches == 1 then
                    if self.fingerTouches[input] == false then
                        self.panBeginLook = self.panBeginLook or self:GetCameraLookVector()
                        self.startPos = self.startPos or input.Position
                        self.lastPos = self.lastPos or self.startPos
                        self.userPanningTheCamera = true
            
                        local delta = input.Position - self.lastPos
                        delta = Vector2.new(delta.X, delta.Y * UserGameSettings:GetCameraYInvertValue())
                        if self.panEnabled then
                            local adjustedTouchSensitivity = TOUCH_SENSITIVTY
                            self:AdjustTouchSensitivity(delta, TOUCH_SENSITIVTY)
            
                            local desiredXYVector = self:InputTranslationToCameraAngleChange(delta, adjustedTouchSensitivity)
                            self.rotateInput = self.rotateInput + desiredXYVector
                        end
                        self.lastPos = input.Position
                    end
                else
                    self.panBeginLook = nil
                    self.startPos = nil
                    self.lastPos = nil
                    self.userPanningTheCamera = false
                end
                if self.numUnsunkTouches == 2 then
                    local unsunkTouches = {}
                    for touch, wasSunk in pairs(self.fingerTouches) do
                        if not wasSunk then
                            table.insert(unsunkTouches, touch)
                        end
                    end
                    if #unsunkTouches == 2 then
                        local difference = (unsunkTouches[1].Position - unsunkTouches[2].Position).magnitude
                        if self.startingDiff and self.pinchBeginZoom then
                            local scale = difference / math.max(0.01, self.startingDiff)
                            local clampedScale = math.clamp(scale, 0.1, 10)
                            if self.distanceChangeEnabled then
                                self:SetCameraToSubjectDistance(self.pinchBeginZoom / clampedScale)
                            end
                        else
                            self.startingDiff = difference
                            self.pinchBeginZoom = self:GetCameraToSubjectDistance()
                        end
                    end
                else
                    self.startingDiff = nil
                    self.pinchBeginZoom = nil
                end
            end
            
            function BaseCamera:OnTouchEnded(input, processed)
                if input == self.dynamicTouchInput then
                    self.dynamicTouchInput = nil
                    return
                end
            
                if self.fingerTouches[input] == false then
                    if self.numUnsunkTouches == 1 then
                        self.panBeginLook = nil
                        self.startPos = nil
                        self.lastPos = nil
                        self.userPanningTheCamera = false
                    elseif self.numUnsunkTouches == 2 then
                        self.startingDiff = nil
                        self.pinchBeginZoom = nil
                    end
                end
            
                if self.fingerTouches[input] ~= nil and self.fingerTouches[input] == false then
                    self.numUnsunkTouches = self.numUnsunkTouches - 1
                end
                self.fingerTouches[input] = nil
                self.inputStartPositions[input] = nil
                self.inputStartTimes[input] = nil
            end
            
            function BaseCamera:OnMouse2Down(input, processed)
                if processed then return end
            
                self.isRightMouseDown = true
                self:OnMousePanButtonPressed(input, processed)
            end
            
            function BaseCamera:OnMouse2Up(input, processed)
                self.isRightMouseDown = false
                self:OnMousePanButtonReleased(input, processed)
            end
            
            function BaseCamera:OnMouse3Down(input, processed)
                if processed then return end
            
                self.isMiddleMouseDown = true
                self:OnMousePanButtonPressed(input, processed)
            end
            
            function BaseCamera:OnMouse3Up(input, processed)
                self.isMiddleMouseDown = false
                self:OnMousePanButtonReleased(input, processed)
            end
            
            function BaseCamera:OnMouseMoved(input, processed)
                if not self.hasGameLoaded and VRService.VREnabled then
                    return
                end
            
                local inputDelta = input.Delta
                inputDelta = Vector2.new(inputDelta.X, inputDelta.Y * UserGameSettings:GetCameraYInvertValue())
            
                local isInputPanning = FFlagUserCameraToggle and CameraInput.getPanning()
                local isBeginLook = self.startPos and self.lastPos and self.panBeginLook
                local isPanning = isBeginLook or self.inFirstPerson or self.inMouseLockedMode or isInputPanning
            
                if self.panEnabled and isPanning then
                    local desiredXYVector = self:InputTranslationToCameraAngleChange(inputDelta, MOUSE_SENSITIVITY)
                    self.rotateInput = self.rotateInput + desiredXYVector
                end
            
                if self.startPos and self.lastPos and self.panBeginLook then
                    self.lastPos = self.lastPos + input.Delta
                end
            end
            
            function BaseCamera:OnMousePanButtonPressed(input, processed)
                if processed then return end
                if not FFlagUserCameraToggle then
                    self:UpdateMouseBehavior()
                end
                self.panBeginLook = self.panBeginLook or self:GetCameraLookVector()
                self.startPos = self.startPos or input.Position
                self.lastPos = self.lastPos or self.startPos
                self.userPanningTheCamera = true
            end
            
            function BaseCamera:OnMousePanButtonReleased(input, processed)
                if not FFlagUserCameraToggle then
                    self:UpdateMouseBehavior()
                end
                if not (self.isRightMouseDown or self.isMiddleMouseDown) then
                    self.panBeginLook = nil
                    self.startPos = nil
                    self.lastPos = nil
                    self.userPanningTheCamera = false
                end
            end
            
            function BaseCamera:UpdateMouseBehavior()
                if FFlagUserCameraToggle and self.isCameraToggle then
                    CameraUI.setCameraModeToastEnabled(true)
                    CameraInput.enableCameraToggleInput()
                    CameraToggleStateController(self.inFirstPerson)
                else
                    if FFlagUserCameraToggle then
                        CameraUI.setCameraModeToastEnabled(false)
                        CameraInput.disableCameraToggleInput()
                    end
                    -- first time transition to first person mode or mouse-locked third person
                    if self.inFirstPerson or self.inMouseLockedMode then
                        --UserGameSettings.RotationType = Enum.RotationType.CameraRelative
                        UserInputService.MouseBehavior = Enum.MouseBehavior.LockCenter
                    else
                        UserGameSettings.RotationType = Enum.RotationType.MovementRelative
                        if self.isRightMouseDown or self.isMiddleMouseDown then
                            UserInputService.MouseBehavior = Enum.MouseBehavior.LockCurrentPosition
                        else
                            UserInputService.MouseBehavior = Enum.MouseBehavior.Default
                        end
                    end
                end
            end
            
            function BaseCamera:UpdateForDistancePropertyChange()
                -- Calling this setter with the current value will force checking that it is still
                -- in range after a change to the min/max distance limits
                self:SetCameraToSubjectDistance(self.currentSubjectDistance)
            end
            
            function BaseCamera:SetCameraToSubjectDistance(desiredSubjectDistance)
                local lastSubjectDistance = self.currentSubjectDistance
            
                -- By default, camera modules will respect LockFirstPerson and override the currentSubjectDistance with 0
                -- regardless of what Player.CameraMinZoomDistance is set to, so that first person can be made
                -- available by the developer without needing to allow players to mousewheel dolly into first person.
                -- Some modules will override this function to remove or change first-person capability.
                if player.CameraMode == Enum.CameraMode.LockFirstPerson then
                    self.currentSubjectDistance = 0.5
                    if not self.inFirstPerson then
                        self:EnterFirstPerson()
                    end
                else
                    local newSubjectDistance = math.clamp(desiredSubjectDistance, player.CameraMinZoomDistance, player.CameraMaxZoomDistance)
                    if newSubjectDistance < FIRST_PERSON_DISTANCE_THRESHOLD then
                        self.currentSubjectDistance = 0.5
                        if not self.inFirstPerson then
                            self:EnterFirstPerson()
                        end
                    else
                        self.currentSubjectDistance = newSubjectDistance
                        if self.inFirstPerson then
                            self:LeaveFirstPerson()
                        end
                    end
                end
            
                -- Pass target distance and zoom direction to the zoom controller
                ZoomController.SetZoomParameters(self.currentSubjectDistance, math.sign(desiredSubjectDistance - lastSubjectDistance))
            
                -- Returned only for convenience to the caller to know the outcome
                return self.currentSubjectDistance
            end
            
            function BaseCamera:SetCameraType( cameraType )
                --Used by derived classes
                self.cameraType = cameraType
            end
            
            function BaseCamera:GetCameraType()
                return self.cameraType
            end
            
            -- Movement mode standardized to Enum.ComputerCameraMovementMode values
            function BaseCamera:SetCameraMovementMode( cameraMovementMode )
                self.cameraMovementMode = cameraMovementMode
            end
            
            function BaseCamera:GetCameraMovementMode()
                return self.cameraMovementMode
            end
            
            function BaseCamera:SetIsMouseLocked(mouseLocked)
                self.inMouseLockedMode = mouseLocked
                if not FFlagUserCameraToggle then
                    self:UpdateMouseBehavior()
                end
            end
            
            function BaseCamera:GetIsMouseLocked()
                return self.inMouseLockedMode
            end
            
            function BaseCamera:SetMouseLockOffset(offsetVector)
                self.mouseLockOffset = offsetVector
            end
            
            function BaseCamera:GetMouseLockOffset()
                return self.mouseLockOffset
            end
            
            function BaseCamera:InFirstPerson()
                return self.inFirstPerson
            end
            
            function BaseCamera:EnterFirstPerson()
                -- Overridden in ClassicCamera, the only module which supports FirstPerson
            end
            
            function BaseCamera:LeaveFirstPerson()
                -- Overridden in ClassicCamera, the only module which supports FirstPerson
            end
            
            -- Nominal distance, set by dollying in and out with the mouse wheel or equivalent, not measured distance
            function BaseCamera:GetCameraToSubjectDistance()
                return self.currentSubjectDistance
            end
            
            -- Actual measured distance to the camera Focus point, which may be needed in special circumstances, but should
            -- never be used as the starting point for updating the nominal camera-to-subject distance (self.currentSubjectDistance)
            -- since that is a desired target value set only by mouse wheel (or equivalent) input, PopperCam, and clamped to min max camera distance
            function BaseCamera:GetMeasuredDistanceToFocus()
                local camera = game.Workspace.CurrentCamera
                if camera then
                    return (camera.CoordinateFrame.p - camera.Focus.p).magnitude
                end
                return nil
            end
            
            function BaseCamera:GetCameraLookVector()
                return game.Workspace.CurrentCamera and game.Workspace.CurrentCamera.CFrame.lookVector or UNIT_Z
            end
            
            -- Replacements for RootCamera:RotateCamera() which did not actually rotate the camera
            -- suppliedLookVector is not normally passed in, it's used only by Watch camera
            function BaseCamera:CalculateNewLookCFrame(suppliedLookVector)
                local currLookVector = suppliedLookVector or self:GetCameraLookVector()
                local currPitchAngle = math.asin(currLookVector.y)
                local yTheta = math.clamp(self.rotateInput.y, -MAX_Y + currPitchAngle, -MIN_Y + currPitchAngle)
                local constrainedRotateInput = Vector2.new(self.rotateInput.x, yTheta)
                local startCFrame = CFrame.new(ZERO_VECTOR3, currLookVector)
                local newLookCFrame = CFrame.Angles(0, -constrainedRotateInput.x, 0) * startCFrame * CFrame.Angles(-constrainedRotateInput.y,0,0)
                return newLookCFrame
            end
            function BaseCamera:CalculateNewLookVector(suppliedLookVector)
                local newLookCFrame = self:CalculateNewLookCFrame(suppliedLookVector)
                return newLookCFrame.lookVector
            end
            
            function BaseCamera:CalculateNewLookVectorVR()
                local subjectPosition = self:GetSubjectPosition()
                local vecToSubject = (subjectPosition - game.Workspace.CurrentCamera.CFrame.p)
                local currLookVector = (vecToSubject * X1_Y0_Z1).unit
                local vrRotateInput = Vector2.new(self.rotateInput.x, 0)
                local startCFrame = CFrame.new(ZERO_VECTOR3, currLookVector)
                local yawRotatedVector = (CFrame.Angles(0, -vrRotateInput.x, 0) * startCFrame * CFrame.Angles(-vrRotateInput.y,0,0)).lookVector
                return (yawRotatedVector * X1_Y0_Z1).unit
            end
            
            function BaseCamera:GetHumanoid()
                local character = player and player.Character
                if character then
                    local resultHumanoid = self.humanoidCache[player]
                    if resultHumanoid and resultHumanoid.Parent == character then
                        return resultHumanoid
                    else
                        self.humanoidCache[player] = nil -- Bust Old Cache
                        local humanoid = character:FindFirstChildOfClass("Humanoid")
                        if humanoid then
                            self.humanoidCache[player] = humanoid
                        end
                        return humanoid
                    end
                end
                return nil
            end
            
            function BaseCamera:GetHumanoidPartToFollow(humanoid, humanoidStateType)
                if humanoidStateType == Enum.HumanoidStateType.Dead then
                    local character = humanoid.Parent
                    if character then
                        return character:FindFirstChild("Head") or humanoid.Torso
                    else
                        return humanoid.Torso
                    end
                else
                    return humanoid.Torso
                end
            end
            
            function BaseCamera:UpdateGamepad()
                local gamepadPan = self.gamepadPanningCamera
                if gamepadPan and (self.hasGameLoaded or not VRService.VREnabled) then
                    gamepadPan = Util.GamepadLinearToCurve(gamepadPan)
                    local currentTime = tick()
                    if gamepadPan.X ~= 0 or gamepadPan.Y ~= 0 then
                        self.userPanningTheCamera = true
                    elseif gamepadPan == ZERO_VECTOR2 then
                        self.lastThumbstickRotate = nil
                        if self.lastThumbstickPos == ZERO_VECTOR2 then
                            self.currentSpeed = 0
                        end
                    end
            
                    local finalConstant = 0
            
                    if self.lastThumbstickRotate then
                        if VRService.VREnabled then
                            self.currentSpeed = self.vrMaxSpeed
                        else
                            local elapsedTime = (currentTime - self.lastThumbstickRotate) * 10
                            self.currentSpeed = self.currentSpeed + (self.maxSpeed * ((elapsedTime*elapsedTime)/self.numOfSeconds))
            
                            if self.currentSpeed > self.maxSpeed then self.currentSpeed = self.maxSpeed end
            
                            if self.lastVelocity then
                                local velocity = (gamepadPan - self.lastThumbstickPos)/(currentTime - self.lastThumbstickRotate)
                                local velocityDeltaMag = (velocity - self.lastVelocity).magnitude
            
                                if velocityDeltaMag > 12 then
                                    self.currentSpeed = self.currentSpeed * (20/velocityDeltaMag)
                                    if self.currentSpeed > self.maxSpeed then self.currentSpeed = self.maxSpeed end
                                end
                            end
                        end
            
                        finalConstant = UserGameSettings.GamepadCameraSensitivity * self.currentSpeed
                        self.lastVelocity = (gamepadPan - self.lastThumbstickPos)/(currentTime - self.lastThumbstickRotate)
                    end
            
                    self.lastThumbstickPos = gamepadPan
                    self.lastThumbstickRotate = currentTime
            
                    return Vector2.new( gamepadPan.X * finalConstant, gamepadPan.Y * finalConstant * self.ySensitivity * UserGameSettings:GetCameraYInvertValue())
                end
            
                return ZERO_VECTOR2
            end
            
            -- [[ VR Support Section ]] --
            
            function BaseCamera:ApplyVRTransform()
                if not VRService.VREnabled then
                    return
                end
            
                --we only want this to happen in first person VR
                local rootJoint = self.humanoidRootPart and self.humanoidRootPart:FindFirstChild("RootJoint")
                if not rootJoint then
                    return
                end
            
                local cameraSubject = game.Workspace.CurrentCamera.CameraSubject
                local isInVehicle = cameraSubject and cameraSubject:IsA("VehicleSeat")
            
                if self.inFirstPerson and not isInVehicle then
                    local vrFrame = VRService:GetUserCFrame(Enum.UserCFrame.Head)
                    local vrRotation = vrFrame - vrFrame.p
                    rootJoint.C0 = CFrame.new(vrRotation:vectorToObjectSpace(vrFrame.p)) * CFrame.new(0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 1, 0)
                else
                    rootJoint.C0 = CFrame.new(0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 1, 0)
                end
            end
            
            function BaseCamera:IsInFirstPerson()
                return self.inFirstPerson
            end
            
            function BaseCamera:ShouldUseVRRotation()
                if not VRService.VREnabled then
                    return false
                end
            
                if not self.VRRotationIntensityAvailable and tick() - self.lastVRRotationIntensityCheckTime < 1 then
                    return false
                end
            
                local success, vrRotationIntensity = pcall(function() return StarterGui:GetCore("VRRotationIntensity") end)
                self.VRRotationIntensityAvailable = success and vrRotationIntensity ~= nil
                self.lastVRRotationIntensityCheckTime = tick()
            
                self.shouldUseVRRotation = success and vrRotationIntensity ~= nil and vrRotationIntensity ~= "Smooth"
            
                return self.shouldUseVRRotation
            end
            
            function BaseCamera:GetVRRotationInput()
                local vrRotateSum = ZERO_VECTOR2
                local success, vrRotationIntensity = pcall(function() return StarterGui:GetCore("VRRotationIntensity") end)
            
                if not success then
                    return
                end
            
                local vrGamepadRotation = self.GamepadPanningCamera or ZERO_VECTOR2
                local delayExpired = (tick() - self.lastVRRotationTime) >= self:GetRepeatDelayValue(vrRotationIntensity)
            
                if math.abs(vrGamepadRotation.x) >= self:GetActivateValue() then
                    if (delayExpired or not self.vrRotateKeyCooldown[Enum.KeyCode.Thumbstick2]) then
                        local sign = 1
                        if vrGamepadRotation.x < 0 then
                            sign = -1
                        end
                        vrRotateSum = vrRotateSum + self:GetRotateAmountValue(vrRotationIntensity) * sign
                        self.vrRotateKeyCooldown[Enum.KeyCode.Thumbstick2] = true
                    end
                elseif math.abs(vrGamepadRotation.x) < self:GetActivateValue() - 0.1 then
                    self.vrRotateKeyCooldown[Enum.KeyCode.Thumbstick2] = nil
                end
                if self.turningLeft then
                    if delayExpired or not self.vrRotateKeyCooldown[Enum.KeyCode.Left] then
                        vrRotateSum = vrRotateSum - self:GetRotateAmountValue(vrRotationIntensity)
                        self.vrRotateKeyCooldown[Enum.KeyCode.Left] = true
                    end
                else
                    self.vrRotateKeyCooldown[Enum.KeyCode.Left] = nil
                end
                if self.turningRight then
                    if (delayExpired or not self.vrRotateKeyCooldown[Enum.KeyCode.Right]) then
                        vrRotateSum = vrRotateSum + self:GetRotateAmountValue(vrRotationIntensity)
                        self.vrRotateKeyCooldown[Enum.KeyCode.Right] = true
                    end
                else
                    self.vrRotateKeyCooldown[Enum.KeyCode.Right] = nil
                end
            
                if vrRotateSum ~= ZERO_VECTOR2 then
                    self.lastVRRotationTime = tick()
                end
            
                return vrRotateSum
            end
            
            function BaseCamera:CancelCameraFreeze(keepConstraints)
                if not keepConstraints then
                    self.cameraTranslationConstraints = Vector3.new(self.cameraTranslationConstraints.x, 1, self.cameraTranslationConstraints.z)
                end
                if self.cameraFrozen then
                    self.trackingHumanoid = nil
                    self.cameraFrozen = false
                end
            end
            
            function BaseCamera:StartCameraFreeze(subjectPosition, humanoidToTrack)
                if not self.cameraFrozen then
                    self.humanoidJumpOrigin = subjectPosition
                    self.trackingHumanoid = humanoidToTrack
                    self.cameraTranslationConstraints = Vector3.new(self.cameraTranslationConstraints.x, 0, self.cameraTranslationConstraints.z)
                    self.cameraFrozen = true
                end
            end
            
            function BaseCamera:OnNewCameraSubject()
                if self.subjectStateChangedConn then
                    self.subjectStateChangedConn:Disconnect()
                    self.subjectStateChangedConn = nil
                end
            
                local humanoid = workspace.CurrentCamera and workspace.CurrentCamera.CameraSubject
                if self.trackingHumanoid ~= humanoid then
                    self:CancelCameraFreeze()
                end
                if humanoid and humanoid:IsA("Humanoid") then
                    self.subjectStateChangedConn = humanoid.StateChanged:Connect(function(oldState, newState)
                        if VRService.VREnabled and newState == Enum.HumanoidStateType.Jumping and not self.inFirstPerson then
                            self:StartCameraFreeze(self:GetSubjectPosition(), humanoid)
                        elseif newState ~= Enum.HumanoidStateType.Jumping and newState ~= Enum.HumanoidStateType.Freefall then
                            self:CancelCameraFreeze(true)
                        end
                    end)
                end
            end
            
            function BaseCamera:GetVRFocus(subjectPosition, timeDelta)
                local lastFocus = self.LastCameraFocus or subjectPosition
                if not self.cameraFrozen then
                    self.cameraTranslationConstraints = Vector3.new(self.cameraTranslationConstraints.x, math.min(1, self.cameraTranslationConstraints.y + 0.42 * timeDelta), self.cameraTranslationConstraints.z)
                end
            
                local newFocus
                if self.cameraFrozen and self.humanoidJumpOrigin and self.humanoidJumpOrigin.y > lastFocus.y then
                    newFocus = CFrame.new(Vector3.new(subjectPosition.x, math.min(self.humanoidJumpOrigin.y, lastFocus.y + 5 * timeDelta), subjectPosition.z))
                else
                    newFocus = CFrame.new(Vector3.new(subjectPosition.x, lastFocus.y, subjectPosition.z):lerp(subjectPosition, self.cameraTranslationConstraints.y))
                end
            
                if self.cameraFrozen then
                    -- No longer in 3rd person
                    if self.inFirstPerson then -- not VRService.VREnabled
                        self:CancelCameraFreeze()
                    end
                    -- This case you jumped off a cliff and want to keep your character in view
                    -- 0.5 is to fix floating point error when not jumping off cliffs
                    if self.humanoidJumpOrigin and subjectPosition.y < (self.humanoidJumpOrigin.y - 0.5) then
                        self:CancelCameraFreeze()
                    end
                end
            
                return newFocus
            end
            
            function BaseCamera:GetRotateAmountValue(vrRotationIntensity)
                vrRotationIntensity = vrRotationIntensity or StarterGui:GetCore("VRRotationIntensity")
                if vrRotationIntensity then
                    if vrRotationIntensity == "Low" then
                        return VR_LOW_INTENSITY_ROTATION
                    elseif vrRotationIntensity == "High" then
                        return VR_HIGH_INTENSITY_ROTATION
                    end
                end
                return ZERO_VECTOR2
            end
            
            function BaseCamera:GetRepeatDelayValue(vrRotationIntensity)
                vrRotationIntensity = vrRotationIntensity or StarterGui:GetCore("VRRotationIntensity")
                if vrRotationIntensity then
                    if vrRotationIntensity == "Low" then
                        return VR_LOW_INTENSITY_REPEAT
                    elseif vrRotationIntensity == "High" then
                        return VR_HIGH_INTENSITY_REPEAT
                    end
                end
                return 0
            end
            
            function BaseCamera:Update(dt)
                error("BaseCamera:Update() This is a virtual function that should never be getting called.", 2)
            end
            
            BaseCamera.UpCFrame = CFrame.new()
            
            function BaseCamera:UpdateUpCFrame(cf)
                self.UpCFrame = cf
            end
            local ZERO = Vector3.new(0, 0, 0)
            function BaseCamera:CalculateNewLookCFrame(suppliedLookVector)
                local currLookVector = suppliedLookVector or self:GetCameraLookVector()
                currLookVector = self.UpCFrame:VectorToObjectSpace(currLookVector)
                
                local currPitchAngle = math.asin(currLookVector.y)
                local yTheta = math.clamp(self.rotateInput.y, -MAX_Y + currPitchAngle, -MIN_Y + currPitchAngle)
                local constrainedRotateInput = Vector2.new(self.rotateInput.x, yTheta)
                local startCFrame = CFrame.new(ZERO, currLookVector)
                local newLookCFrame = CFrame.Angles(0, -constrainedRotateInput.x, 0) * startCFrame * CFrame.Angles(-constrainedRotateInput.y,0,0)
                
                return newLookCFrame
            end
            
            return BaseCamera
        end
        
        function _BaseOcclusion()
            --[[ The Module ]]--
            local BaseOcclusion = {}
            BaseOcclusion.__index = BaseOcclusion
            setmetatable(BaseOcclusion, {
                __call = function(_, ...)
                    return BaseOcclusion.new(...)
                end
            })
            
            function BaseOcclusion.new()
                local self = setmetatable({}, BaseOcclusion)
                return self
            end
            
            -- Called when character is added
            function BaseOcclusion:CharacterAdded(char, player)
            end
            
            -- Called when character is about to be removed
            function BaseOcclusion:CharacterRemoving(char, player)
            end
            
            function BaseOcclusion:OnCameraSubjectChanged(newSubject)
            end
            
            --[[ Derived classes are required to override and implement all of the following functions ]]--
            function BaseOcclusion:GetOcclusionMode()
                -- Must be overridden in derived classes to return an Enum.DevCameraOcclusionMode value
                warn("BaseOcclusion GetOcclusionMode must be overridden by derived classes")
                return nil
            end
            
            function BaseOcclusion:Enable(enabled)
                warn("BaseOcclusion Enable must be overridden by derived classes")
            end
            
            function BaseOcclusion:Update(dt, desiredCameraCFrame, desiredCameraFocus)
                warn("BaseOcclusion Update must be overridden by derived classes")
                return desiredCameraCFrame, desiredCameraFocus
            end
            
            return BaseOcclusion
        end
        
        function _Popper()
            
            local Players = game:GetService("Players")
            
            local camera = game.Workspace.CurrentCamera
            
            local min = math.min
            local tan = math.tan
            local rad = math.rad
            local inf = math.huge
            local ray = Ray.new
            
            local function getTotalTransparency(part)
                return 1 - (1 - part.Transparency)*(1 - part.LocalTransparencyModifier)
            end
            
            local function eraseFromEnd(t, toSize)
                for i = #t, toSize + 1, -1 do
                    t[i] = nil
                end
            end
            
            local nearPlaneZ, projX, projY do
                local function updateProjection()
                    local fov = rad(camera.FieldOfView)
                    local view = camera.ViewportSize
                    local ar = view.X/view.Y
            
                    projY = 2*tan(fov/2)
                    projX = ar*projY
                end
            
                camera:GetPropertyChangedSignal("FieldOfView"):Connect(updateProjection)
                camera:GetPropertyChangedSignal("ViewportSize"):Connect(updateProjection)
            
                updateProjection()
            
                nearPlaneZ = camera.NearPlaneZ
                camera:GetPropertyChangedSignal("NearPlaneZ"):Connect(function()
                    nearPlaneZ = camera.NearPlaneZ
                end)
            end
            
            local blacklist = {} do
                local charMap = {}
            
                local function refreshIgnoreList()
                    local n = 1
                    blacklist = {}
                    for _, character in pairs(charMap) do
                        blacklist[n] = character
                        n = n + 1
                    end
                end
            
                local function playerAdded(player)
                    local function characterAdded(character)
                        charMap[player] = character
                        refreshIgnoreList()
                    end
                    local function characterRemoving()
                        charMap[player] = nil
                        refreshIgnoreList()
                    end
            
                    player.CharacterAdded:Connect(characterAdded)
                    player.CharacterRemoving:Connect(characterRemoving)
                    if player.Character then
                        characterAdded(player.Character)
                    end
                end
            
                local function playerRemoving(player)
                    charMap[player] = nil
                    refreshIgnoreList()
                end
            
                Players.PlayerAdded:Connect(playerAdded)
                Players.PlayerRemoving:Connect(playerRemoving)
            
                for _, player in ipairs(Players:GetPlayers()) do
                    playerAdded(player)
                end
                refreshIgnoreList()
            end
            
            --------------------------------------------------------------------------------------------
            -- Popper uses the level geometry find an upper bound on subject-to-camera distance.
            --
            -- Hard limits are applied immediately and unconditionally. They are generally caused
            -- when level geometry intersects with the near plane (with exceptions, see below).
            --
            -- Soft limits are only applied under certain conditions.
            -- They are caused when level geometry occludes the subject without actually intersecting
            -- with the near plane at the target distance.
            --
            -- Soft limits can be promoted to hard limits and hard limits can be demoted to soft limits.
            -- We usually don"t want the latter to happen.
            --
            -- A soft limit will be promoted to a hard limit if an obstruction
            -- lies between the current and target camera positions.
            --------------------------------------------------------------------------------------------
            
            local subjectRoot
            local subjectPart
            
            camera:GetPropertyChangedSignal("CameraSubject"):Connect(function()
                local subject = camera.CameraSubject
                if subject:IsA("Humanoid") then
                    subjectPart = subject.RootPart
                elseif subject:IsA("BasePart") then
                    subjectPart = subject
                else
                    subjectPart = nil
                end
            end)
            
            local function canOcclude(part)
                -- Occluders must be:
                -- 1. Opaque
                -- 2. Interactable
                -- 3. Not in the same assembly as the subject
            
                return
                    getTotalTransparency(part) < 0.25 and
                    part.CanCollide and
                    subjectRoot ~= (part:GetRootPart() or part) and
                    not part:IsA("TrussPart")
            end
            
            -- Offsets for the volume visibility test
            local SCAN_SAMPLE_OFFSETS = {
                Vector2.new( 0.4, 0.0),
                Vector2.new(-0.4, 0.0),
                Vector2.new( 0.0,-0.4),
                Vector2.new( 0.0, 0.4),
                Vector2.new( 0.0, 0.2),
            }
            
            --------------------------------------------------------------------------------
            -- Piercing raycasts
            
            local function getCollisionPoint(origin, dir)
                local originalSize = #blacklist
                repeat
                    local hitPart, hitPoint = workspace:FindPartOnRayWithIgnoreList(
                        ray(origin, dir), blacklist, false, true
                    )
            
                    if hitPart then
                        if hitPart.CanCollide then
                            eraseFromEnd(blacklist, originalSize)
                            return hitPoint, true
                        end
                        blacklist[#blacklist + 1] = hitPart
                    end
                until not hitPart
            
                eraseFromEnd(blacklist, originalSize)
                return origin + dir, false
            end
            
            --------------------------------------------------------------------------------
            
            local function queryPoint(origin, unitDir, dist, lastPos)
                debug.profilebegin("queryPoint")
            
                local originalSize = #blacklist
            
                dist = dist + nearPlaneZ
                local target = origin + unitDir*dist
            
                local softLimit = inf
                local hardLimit = inf
                local movingOrigin = origin
            
                repeat
                    local entryPart, entryPos = workspace:FindPartOnRayWithIgnoreList(ray(movingOrigin, target - movingOrigin), blacklist, false, true)
            
                    if entryPart then
                        if canOcclude(entryPart) then
                            local wl = {entryPart}
                            local exitPart = workspace:FindPartOnRayWithWhitelist(ray(target, entryPos - target), wl, true)
            
                            local lim = (entryPos - origin).Magnitude
            
                            if exitPart then
                                local promote = false
                                if lastPos then
                                    promote =
                                        workspace:FindPartOnRayWithWhitelist(ray(lastPos, target - lastPos), wl, true) or
                                        workspace:FindPartOnRayWithWhitelist(ray(target, lastPos - target), wl, true)
                                end
            
                                if promote then
                                    -- Ostensibly a soft limit, but the camera has passed through it in the last frame, so promote to a hard limit.
                                    hardLimit = lim
                                elseif dist < softLimit then
                                    -- Trivial soft limit
                                    softLimit = lim
                                end
                            else
                                -- Trivial hard limit
                                hardLimit = lim
                            end
                        end
            
                        blacklist[#blacklist + 1] = entryPart
                        movingOrigin = entryPos - unitDir*1e-3
                    end
                until hardLimit < inf or not entryPart
            
                eraseFromEnd(blacklist, originalSize)
            
                debug.profileend()
                return softLimit - nearPlaneZ, hardLimit - nearPlaneZ
            end
            
            local function queryViewport(focus, dist)
                debug.profilebegin("queryViewport")
            
                local fP =  focus.p
                local fX =  focus.rightVector
                local fY =  focus.upVector
                local fZ = -focus.lookVector
            
                local viewport = camera.ViewportSize
            
                local hardBoxLimit = inf
                local softBoxLimit = inf
            
                -- Center the viewport on the PoI, sweep points on the edge towards the target, and take the minimum limits
                for viewX = 0, 1 do
                    local worldX = fX*((viewX - 0.5)*projX)
            
                    for viewY = 0, 1 do
                        local worldY = fY*((viewY - 0.5)*projY)
            
                        local origin = fP + nearPlaneZ*(worldX + worldY)
                        local lastPos = camera:ViewportPointToRay(
                            viewport.x*viewX,
                            viewport.y*viewY
                        ).Origin
            
                        local softPointLimit, hardPointLimit = queryPoint(origin, fZ, dist, lastPos)
            
                        if hardPointLimit < hardBoxLimit then
                            hardBoxLimit = hardPointLimit
                        end
                        if softPointLimit < softBoxLimit then
                            softBoxLimit = softPointLimit
                        end
                    end
                end
                debug.profileend()
            
                return softBoxLimit, hardBoxLimit
            end
            
            local function testPromotion(focus, dist, focusExtrapolation)
                debug.profilebegin("testPromotion")
            
                local fP = focus.p
                local fX = focus.rightVector
                local fY = focus.upVector
                local fZ = -focus.lookVector
            
                do
                    -- Dead reckoning the camera rotation and focus
                    debug.profilebegin("extrapolate")
            
                    local SAMPLE_DT = 0.0625
                    local SAMPLE_MAX_T = 1.25
            
                    local maxDist = (getCollisionPoint(fP, focusExtrapolation.posVelocity*SAMPLE_MAX_T) - fP).Magnitude
                    -- Metric that decides how many samples to take
                    local combinedSpeed = focusExtrapolation.posVelocity.magnitude
            
                    for dt = 0, min(SAMPLE_MAX_T, focusExtrapolation.rotVelocity.magnitude + maxDist/combinedSpeed), SAMPLE_DT do
                        local cfDt = focusExtrapolation.extrapolate(dt) -- Extrapolated CFrame at time dt
            
                        if queryPoint(cfDt.p, -cfDt.lookVector, dist) >= dist then
                            return false
                        end
                    end
            
                    debug.profileend()
                end
            
                do
                    -- Test screen-space offsets from the focus for the presence of soft limits
                    debug.profilebegin("testOffsets")
            
                    for _, offset in ipairs(SCAN_SAMPLE_OFFSETS) do
                        local scaledOffset = offset
                        local pos = getCollisionPoint(fP, fX*scaledOffset.x + fY*scaledOffset.y)
                        if queryPoint(pos, (fP + fZ*dist - pos).Unit, dist) == inf then
                            return false
                        end
                    end
            
                    debug.profileend()
                end
            
                debug.profileend()
                return true
            end
            
            local function Popper(focus, targetDist, focusExtrapolation)
                debug.profilebegin("popper")
            
                subjectRoot = subjectPart and subjectPart:GetRootPart() or subjectPart
            
                local dist = targetDist
                local soft, hard = queryViewport(focus, targetDist)
                if hard < dist then
                    dist = hard
                end
                if soft < dist and testPromotion(focus, targetDist, focusExtrapolation) then
                    dist = soft
                end
            
                subjectRoot = nil
            
                debug.profileend()
                return dist
            end
            
            return Popper
        end
        
        function _ZoomController()
            local ZOOM_STIFFNESS = 4.5
            local ZOOM_DEFAULT = 12.5
            local ZOOM_ACCELERATION = 0.0375
            
            local MIN_FOCUS_DIST = 0.5
            local DIST_OPAQUE = 1
            
            local Popper = _Popper()
            
            local clamp = math.clamp
            local exp = math.exp
            local min = math.min
            local max = math.max
            local pi = math.pi
            
            local cameraMinZoomDistance, cameraMaxZoomDistance do
                local Player = game:GetService("Players").LocalPlayer
            
                local function updateBounds()
                    cameraMinZoomDistance = Player.CameraMinZoomDistance
                    cameraMaxZoomDistance = Player.CameraMaxZoomDistance
                end
            
                updateBounds()
            
                Player:GetPropertyChangedSignal("CameraMinZoomDistance"):Connect(updateBounds)
                Player:GetPropertyChangedSignal("CameraMaxZoomDistance"):Connect(updateBounds)
            end
            
            local ConstrainedSpring = {} do
                ConstrainedSpring.__index = ConstrainedSpring
            
                function ConstrainedSpring.new(freq, x, minValue, maxValue)
                    x = clamp(x, minValue, maxValue)
                    return setmetatable({
                        freq = freq, -- Undamped frequency (Hz)
                        x = x, -- Current position
                        v = 0, -- Current velocity
                        minValue = minValue, -- Minimum bound
                        maxValue = maxValue, -- Maximum bound
                        goal = x, -- Goal position
                    }, ConstrainedSpring)
                end
            
                function ConstrainedSpring:Step(dt)
                    local freq = self.freq*2*pi -- Convert from Hz to rad/s
                    local x = self.x
                    local v = self.v
                    local minValue = self.minValue
                    local maxValue = self.maxValue
                    local goal = self.goal
            
                    -- Solve the spring ODE for position and velocity after time t, assuming critical damping:
                    --   2*f*x'[t] + x''[t] = f^2*(g - x[t])
                    -- Knowns are x[0] and x'[0].
                    -- Solve for x[t] and x'[t].
            
                    local offset = goal - x
                    local step = freq*dt
                    local decay = exp(-step)
            
                    local x1 = goal + (v*dt - offset*(step + 1))*decay
                    local v1 = ((offset*freq - v)*step + v)*decay
            
                    -- Constrain
                    if x1 < minValue then
                        x1 = minValue
                        v1 = 0
                    elseif x1 > maxValue then
                        x1 = maxValue
                        v1 = 0
                    end
            
                    self.x = x1
                    self.v = v1
            
                    return x1
                end
            end
            
            local zoomSpring = ConstrainedSpring.new(ZOOM_STIFFNESS, ZOOM_DEFAULT, MIN_FOCUS_DIST, cameraMaxZoomDistance)
            
            local function stepTargetZoom(z, dz, zoomMin, zoomMax)
                z = clamp(z + dz*(1 + z*ZOOM_ACCELERATION), zoomMin, zoomMax)
                if z < DIST_OPAQUE then
                    z = dz <= 0 and zoomMin or DIST_OPAQUE
                end
                return z
            end
            
            local zoomDelta = 0
            
            local Zoom = {} do
                function Zoom.Update(renderDt, focus, extrapolation)
                    local poppedZoom = math.huge
            
                    if zoomSpring.goal > DIST_OPAQUE then
                        -- Make a pessimistic estimate of zoom distance for this step without accounting for poppercam
                        local maxPossibleZoom = max(
                            zoomSpring.x,
                            stepTargetZoom(zoomSpring.goal, zoomDelta, cameraMinZoomDistance, cameraMaxZoomDistance)
                        )
            
                        -- Run the Popper algorithm on the feasible zoom range, [MIN_FOCUS_DIST, maxPossibleZoom]
                        poppedZoom = Popper(
                            focus*CFrame.new(0, 0, MIN_FOCUS_DIST),
                            maxPossibleZoom - MIN_FOCUS_DIST,
                            extrapolation
                        ) + MIN_FOCUS_DIST
                    end
            
                    zoomSpring.minValue = MIN_FOCUS_DIST
                    zoomSpring.maxValue = min(cameraMaxZoomDistance, poppedZoom)
            
                    return zoomSpring:Step(renderDt)
                end
            
                function Zoom.SetZoomParameters(targetZoom, newZoomDelta)
                    zoomSpring.goal = targetZoom
                    zoomDelta = newZoomDelta
                end
            end
            
            return Zoom
        end
        
        function _MouseLockController()
            --[[ Constants ]]--
            local DEFAULT_MOUSE_LOCK_CURSOR = "rbxasset://textures/MouseLockedCursor.png"
            
            local CONTEXT_ACTION_NAME = "MouseLockSwitchAction"
            local MOUSELOCK_ACTION_PRIORITY = Enum.ContextActionPriority.Default.Value
            
            --[[ Services ]]--
            local PlayersService = game:GetService("Players")
            local ContextActionService = game:GetService("ContextActionService")
            local Settings = UserSettings()	-- ignore warning
            local GameSettings = Settings.GameSettings
            local Mouse = PlayersService.LocalPlayer:GetMouse()
            
            --[[ The Module ]]--
            local MouseLockController = {}
            MouseLockController.__index = MouseLockController
            
            function MouseLockController.new()
                local self = setmetatable({}, MouseLockController)
            
                self.isMouseLocked = false
                self.savedMouseCursor = nil
                self.boundKeys = {Enum.KeyCode.LeftShift, Enum.KeyCode.RightShift} -- defaults
            
                self.mouseLockToggledEvent = Instance.new("BindableEvent")
            
                local boundKeysObj = script:FindFirstChild("BoundKeys")
                if (not boundKeysObj) or (not boundKeysObj:IsA("StringValue")) then
                    -- If object with correct name was found, but it's not a StringValue, destroy and replace
                    if boundKeysObj then
                        boundKeysObj:Destroy()
                    end
            
                    boundKeysObj = Instance.new("StringValue")
                    boundKeysObj.Name = "BoundKeys"
                    boundKeysObj.Value = "LeftShift,RightShift"
                    boundKeysObj.Parent = script
                end
            
                if boundKeysObj then
                    boundKeysObj.Changed:Connect(function(value)
                        self:OnBoundKeysObjectChanged(value)
                    end)
                    self:OnBoundKeysObjectChanged(boundKeysObj.Value) -- Initial setup call
                end
            
                -- Watch for changes to user's ControlMode and ComputerMovementMode settings and update the feature availability accordingly
                GameSettings.Changed:Connect(function(property)
                    if property == "ControlMode" or property == "ComputerMovementMode" then
                        self:UpdateMouseLockAvailability()
                    end
                end)
            
                -- Watch for changes to DevEnableMouseLock and update the feature availability accordingly
                PlayersService.LocalPlayer:GetPropertyChangedSignal("DevEnableMouseLock"):Connect(function()
                    self:UpdateMouseLockAvailability()
                end)
            
                -- Watch for changes to DevEnableMouseLock and update the feature availability accordingly
                PlayersService.LocalPlayer:GetPropertyChangedSignal("DevComputerMovementMode"):Connect(function()
                    self:UpdateMouseLockAvailability()
                end)
            
                self:UpdateMouseLockAvailability()
            
                return self
            end
            
            function MouseLockController:GetIsMouseLocked()
                return self.isMouseLocked
            end
            
            function MouseLockController:GetBindableToggleEvent()
                return self.mouseLockToggledEvent.Event
            end
            
            function MouseLockController:GetMouseLockOffset()
                local offsetValueObj = script:FindFirstChild("CameraOffset")
                if offsetValueObj and offsetValueObj:IsA("Vector3Value") then
                    return offsetValueObj.Value
                else
                    -- If CameraOffset object was found but not correct type, destroy
                    if offsetValueObj then
                        offsetValueObj:Destroy()
                    end
                    offsetValueObj = Instance.new("Vector3Value")
                    offsetValueObj.Name = "CameraOffset"
                    offsetValueObj.Value = Vector3.new(1.75,0,0) -- Legacy Default Value
                    offsetValueObj.Parent = script
                end
            
                if offsetValueObj and offsetValueObj.Value then
                    return offsetValueObj.Value
                end
            
                return Vector3.new(1.75,0,0)
            end
            
            function MouseLockController:UpdateMouseLockAvailability()
                local devAllowsMouseLock = PlayersService.LocalPlayer.DevEnableMouseLock
                local devMovementModeIsScriptable = PlayersService.LocalPlayer.DevComputerMovementMode == Enum.DevComputerMovementMode.Scriptable
                local userHasMouseLockModeEnabled = GameSettings.ControlMode == Enum.ControlMode.MouseLockSwitch
                local userHasClickToMoveEnabled =  GameSettings.ComputerMovementMode == Enum.ComputerMovementMode.ClickToMove
                local MouseLockAvailable = devAllowsMouseLock and userHasMouseLockModeEnabled and not userHasClickToMoveEnabled and not devMovementModeIsScriptable
            
                if MouseLockAvailable~=self.enabled then
                    self:EnableMouseLock(MouseLockAvailable)
                end
            end
            
            function MouseLockController:OnBoundKeysObjectChanged(newValue)
                self.boundKeys = {} -- Overriding defaults, note: possibly with nothing at all if boundKeysObj.Value is "" or contains invalid values
                for token in string.gmatch(newValue,"[^%s,]+") do
                    for _, keyEnum in pairs(Enum.KeyCode:GetEnumItems()) do
                        if token == keyEnum.Name then
                            self.boundKeys[#self.boundKeys+1] = keyEnum
                            break
                        end
                    end
                end
                self:UnbindContextActions()
                self:BindContextActions()
            end
            
            --[[ Local Functions ]]--
            function MouseLockController:OnMouseLockToggled()
                self.isMouseLocked = not self.isMouseLocked
            
                if self.isMouseLocked then
                    local cursorImageValueObj = script:FindFirstChild("CursorImage")
                    if cursorImageValueObj and cursorImageValueObj:IsA("StringValue") and cursorImageValueObj.Value then
                        self.savedMouseCursor = Mouse.Icon
                        Mouse.Icon = cursorImageValueObj.Value
                    else
                        if cursorImageValueObj then
                            cursorImageValueObj:Destroy()
                        end
                        cursorImageValueObj = Instance.new("StringValue")
                        cursorImageValueObj.Name = "CursorImage"
                        cursorImageValueObj.Value = DEFAULT_MOUSE_LOCK_CURSOR
                        cursorImageValueObj.Parent = script
                        self.savedMouseCursor = Mouse.Icon
                        Mouse.Icon = DEFAULT_MOUSE_LOCK_CURSOR
                    end
                else
                    if self.savedMouseCursor then
                        Mouse.Icon = self.savedMouseCursor
                        self.savedMouseCursor = nil
                    end
                end
            
                self.mouseLockToggledEvent:Fire()
            end
            
            function MouseLockController:DoMouseLockSwitch(name, state, input)
                if state == Enum.UserInputState.Begin then
                    self:OnMouseLockToggled()
                    return Enum.ContextActionResult.Sink
                end
                return Enum.ContextActionResult.Pass
            end
            
            function MouseLockController:BindContextActions()
                ContextActionService:BindActionAtPriority(CONTEXT_ACTION_NAME, function(name, state, input)
                    return self:DoMouseLockSwitch(name, state, input)
                end, false, MOUSELOCK_ACTION_PRIORITY, unpack(self.boundKeys))
            end
            
            function MouseLockController:UnbindContextActions()
                ContextActionService:UnbindAction(CONTEXT_ACTION_NAME)
            end
            
            function MouseLockController:IsMouseLocked()
                return self.enabled and self.isMouseLocked
            end
            
            function MouseLockController:EnableMouseLock(enable)
                if enable ~= self.enabled then
            
                    self.enabled = enable
            
                    if self.enabled then
                        -- Enabling the mode
                        self:BindContextActions()
                    else
                        -- Disabling
                        -- Restore mouse cursor
                        if Mouse.Icon~="" then
                            Mouse.Icon = ""
                        end
            
                        self:UnbindContextActions()
            
                        -- If the mode is disabled while being used, fire the event to toggle it off
                        if self.isMouseLocked then
                            self.mouseLockToggledEvent:Fire()
                        end
            
                        self.isMouseLocked = false
                    end
            
                end
            end
            
            return MouseLockController
        end
        
        function _TransparencyController()
            
            local MAX_TWEEN_RATE = 2.8 -- per second
            
            local Util = _CameraUtils()
            
            --[[ The Module ]]--
            local TransparencyController = {}
            TransparencyController.__index = TransparencyController
            
            function TransparencyController.new()
                local self = setmetatable({}, TransparencyController)
            
                self.lastUpdate = tick()
                self.transparencyDirty = false
                self.enabled = false
                self.lastTransparency = nil
            
                self.descendantAddedConn, self.descendantRemovingConn = nil, nil
                self.toolDescendantAddedConns = {}
                self.toolDescendantRemovingConns = {}
                self.cachedParts = {}
            
                return self
            end
            
            
            function TransparencyController:HasToolAncestor(object)
                if object.Parent == nil then return false end
                return object.Parent:IsA('Tool') or self:HasToolAncestor(object.Parent)
            end
            
            function TransparencyController:IsValidPartToModify(part)
                if part:IsA('BasePart') or part:IsA('Decal') then
                    return not self:HasToolAncestor(part)
                end
                return false
            end
            
            function TransparencyController:CachePartsRecursive(object)
                if object then
                    if self:IsValidPartToModify(object) then
                        self.cachedParts[object] = true
                        self.transparencyDirty = true
                    end
                    for _, child in pairs(object:GetChildren()) do
                        self:CachePartsRecursive(child)
                    end
                end
            end
            
            function TransparencyController:TeardownTransparency()
                for child, _ in pairs(self.cachedParts) do
                    child.LocalTransparencyModifier = 0
                end
                self.cachedParts = {}
                self.transparencyDirty = true
                self.lastTransparency = nil
            
                if self.descendantAddedConn then
                    self.descendantAddedConn:disconnect()
                    self.descendantAddedConn = nil
                end
                if self.descendantRemovingConn then
                    self.descendantRemovingConn:disconnect()
                    self.descendantRemovingConn = nil
                end
                for object, conn in pairs(self.toolDescendantAddedConns) do
                    conn:Disconnect()
                    self.toolDescendantAddedConns[object] = nil
                end
                for object, conn in pairs(self.toolDescendantRemovingConns) do
                    conn:Disconnect()
                    self.toolDescendantRemovingConns[object] = nil
                end
            end
            
            function TransparencyController:SetupTransparency(character)
                self:TeardownTransparency()
            
                if self.descendantAddedConn then self.descendantAddedConn:disconnect() end
                self.descendantAddedConn = character.DescendantAdded:Connect(function(object)
                    -- This is a part we want to invisify
                    if self:IsValidPartToModify(object) then
                        self.cachedParts[object] = true
                        self.transparencyDirty = true
                    -- There is now a tool under the character
                    elseif object:IsA('Tool') then
                        if self.toolDescendantAddedConns[object] then self.toolDescendantAddedConns[object]:Disconnect() end
                        self.toolDescendantAddedConns[object] = object.DescendantAdded:Connect(function(toolChild)
                            self.cachedParts[toolChild] = nil
                            if toolChild:IsA('BasePart') or toolChild:IsA('Decal') then
                                -- Reset the transparency
                                toolChild.LocalTransparencyModifier = 0
                            end
                        end)
                        if self.toolDescendantRemovingConns[object] then self.toolDescendantRemovingConns[object]:disconnect() end
                        self.toolDescendantRemovingConns[object] = object.DescendantRemoving:Connect(function(formerToolChild)
                            wait() -- wait for new parent
                            if character and formerToolChild and formerToolChild:IsDescendantOf(character) then
                                if self:IsValidPartToModify(formerToolChild) then
                                    self.cachedParts[formerToolChild] = true
                                    self.transparencyDirty = true
                                end
                            end
                        end)
                    end
                end)
                if self.descendantRemovingConn then self.descendantRemovingConn:disconnect() end
                self.descendantRemovingConn = character.DescendantRemoving:connect(function(object)
                    if self.cachedParts[object] then
                        self.cachedParts[object] = nil
                        -- Reset the transparency
                        object.LocalTransparencyModifier = 0
                    end
                end)
                self:CachePartsRecursive(character)
            end
            
            
            function TransparencyController:Enable(enable)
                if self.enabled ~= enable then
                    self.enabled = enable
                    self:Update()
                end
            end
            
            function TransparencyController:SetSubject(subject)
                local character = nil
                if subject and subject:IsA("Humanoid") then
                    character = subject.Parent
                end
                if subject and subject:IsA("VehicleSeat") and subject.Occupant then
                    character = subject.Occupant.Parent
                end
                if character then
                    self:SetupTransparency(character)
                else
                    self:TeardownTransparency()
                end
            end
            
            function TransparencyController:Update()
                local instant = false
                local now = tick()
                local currentCamera = workspace.CurrentCamera
            
                if currentCamera then
                    local transparency = 0
                    if not self.enabled then
                        instant = true
                    else
                        local distance = (currentCamera.Focus.p - currentCamera.CoordinateFrame.p).magnitude
                        transparency = (distance<2) and (1.0-(distance-0.5)/1.5) or 0 --(7 - distance) / 5
                        if transparency < 0.5 then
                            transparency = 0
                        end
            
                        if self.lastTransparency then
                            local deltaTransparency = transparency - self.lastTransparency
            
                            -- Don't tween transparency if it is instant or your character was fully invisible last frame
                            if not instant and transparency < 1 and self.lastTransparency < 0.95 then
                                local maxDelta = MAX_TWEEN_RATE * (now - self.lastUpdate)
                                deltaTransparency = math.clamp(deltaTransparency, -maxDelta, maxDelta)
                            end
                            transparency = self.lastTransparency + deltaTransparency
                        else
                            self.transparencyDirty = true
                        end
            
                        transparency = math.clamp(Util.Round(transparency, 2), 0, 1)
                    end
            
                    if self.transparencyDirty or self.lastTransparency ~= transparency then
                        for child, _ in pairs(self.cachedParts) do
                            child.LocalTransparencyModifier = transparency
                        end
                        self.transparencyDirty = false
                        self.lastTransparency = transparency
                    end
                end
                self.lastUpdate = now
            end
            
            return TransparencyController
        end
        
        function _Poppercam()
            local ZoomController =  _ZoomController()
            
            local TransformExtrapolator = {} do
                TransformExtrapolator.__index = TransformExtrapolator
            
                local CF_IDENTITY = CFrame.new()
            
                local function cframeToAxis(cframe)
                    local axis, angle = cframe:toAxisAngle()
                    return axis*angle
                end
            
                local function axisToCFrame(axis)
                    local angle = axis.magnitude
                    if angle > 1e-5 then
                        return CFrame.fromAxisAngle(axis, angle)
                    end
                    return CF_IDENTITY
                end
            
                local function extractRotation(cf)
                    local _, _, _, xx, yx, zx, xy, yy, zy, xz, yz, zz = cf:components()
                    return CFrame.new(0, 0, 0, xx, yx, zx, xy, yy, zy, xz, yz, zz)
                end
            
                function TransformExtrapolator.new()
                    return setmetatable({
                        lastCFrame = nil,
                    }, TransformExtrapolator)
                end
            
                function TransformExtrapolator:Step(dt, currentCFrame)
                    local lastCFrame = self.lastCFrame or currentCFrame
                    self.lastCFrame = currentCFrame
            
                    local currentPos = currentCFrame.p
                    local currentRot = extractRotation(currentCFrame)
            
                    local lastPos = lastCFrame.p
                    local lastRot = extractRotation(lastCFrame)
            
                    -- Estimate velocities from the delta between now and the last frame
                    -- This estimation can be a little noisy.
                    local dp = (currentPos - lastPos)/dt
                    local dr = cframeToAxis(currentRot*lastRot:inverse())/dt
            
                    local function extrapolate(t)
                        local p = dp*t + currentPos
                        local r = axisToCFrame(dr*t)*currentRot
                        return r + p
                    end
            
                    return {
                        extrapolate = extrapolate,
                        posVelocity = dp,
                        rotVelocity = dr,
                    }
                end
            
                function TransformExtrapolator:Reset()
                    self.lastCFrame = nil
                end
            end
            
            --[[ The Module ]]--
            local BaseOcclusion = _BaseOcclusion()
            local Poppercam = setmetatable({}, BaseOcclusion)
            Poppercam.__index = Poppercam
            
            function Poppercam.new()
                local self = setmetatable(BaseOcclusion.new(), Poppercam)
                self.focusExtrapolator = TransformExtrapolator.new()
                return self
            end
            
            function Poppercam:GetOcclusionMode()
                return Enum.DevCameraOcclusionMode.Zoom
            end
            
            function Poppercam:Enable(enable)
                self.focusExtrapolator:Reset()
            end
            
            function Poppercam:Update(renderDt, desiredCameraCFrame, desiredCameraFocus, cameraController)
                local rotatedFocus = CFrame.new(desiredCameraFocus.p, desiredCameraCFrame.p)*CFrame.new(
                    0, 0, 0,
                    -1, 0, 0,
                    0, 1, 0,
                    0, 0, -1
                )
                local extrapolation = self.focusExtrapolator:Step(renderDt, rotatedFocus)
                local zoom = ZoomController.Update(renderDt, rotatedFocus, extrapolation)
                return rotatedFocus*CFrame.new(0, 0, zoom), desiredCameraFocus
            end
            
            -- Called when character is added
            function Poppercam:CharacterAdded(character, player)
            end
            
            -- Called when character is about to be removed
            function Poppercam:CharacterRemoving(character, player)
            end
            
            function Poppercam:OnCameraSubjectChanged(newSubject)
            end
            
            local ZoomController = _ZoomController()
            
            function Poppercam:Update(renderDt, desiredCameraCFrame, desiredCameraFocus, cameraController)
                local rotatedFocus = desiredCameraFocus * (desiredCameraCFrame - desiredCameraCFrame.p)
                local extrapolation = self.focusExtrapolator:Step(renderDt, rotatedFocus)
                local zoom = ZoomController.Update(renderDt, rotatedFocus, extrapolation)
                return rotatedFocus*CFrame.new(0, 0, zoom), desiredCameraFocus
            end
            
            return Poppercam
        end
        
        function _Invisicam()
            
            --[[ Top Level Roblox Services ]]--
            local PlayersService = game:GetService("Players")
            
            --[[ Constants ]]--
            local ZERO_VECTOR3 = Vector3.new(0,0,0)
            local USE_STACKING_TRANSPARENCY = true	-- Multiple items between the subject and camera get transparency values that add up to TARGET_TRANSPARENCY
            local TARGET_TRANSPARENCY = 0.75 -- Classic Invisicam's Value, also used by new invisicam for parts hit by head and torso rays
            local TARGET_TRANSPARENCY_PERIPHERAL = 0.5 -- Used by new SMART_CIRCLE mode for items not hit by head and torso rays
            
            local MODE = {
                --CUSTOM = 1, 		-- Retired, unused
                LIMBS = 2, 			-- Track limbs
                MOVEMENT = 3, 		-- Track movement
                CORNERS = 4, 		-- Char model corners
                CIRCLE1 = 5, 		-- Circle of casts around character
                CIRCLE2 = 6, 		-- Circle of casts around character, camera relative
                LIMBMOVE = 7, 		-- LIMBS mode + MOVEMENT mode
                SMART_CIRCLE = 8, 	-- More sample points on and around character
                CHAR_OUTLINE = 9,	-- Dynamic outline around the character
            }
            
            local LIMB_TRACKING_SET = {
                -- Body parts common to R15 and R6
                ['Head'] = true,
            
                -- Body parts unique to R6
                ['Left Arm'] = true,
                ['Right Arm'] = true,
                ['Left Leg'] = true,
                ['Right Leg'] = true,
            
                -- Body parts unique to R15
                ['LeftLowerArm'] = true,
                ['RightLowerArm'] = true,
                ['LeftUpperLeg'] = true,
                ['RightUpperLeg'] = true
            }
            
            local CORNER_FACTORS = {
                Vector3.new(1,1,-1),
                Vector3.new(1,-1,-1),
                Vector3.new(-1,-1,-1),
                Vector3.new(-1,1,-1)
            }
            
            local CIRCLE_CASTS = 10
            local MOVE_CASTS = 3
            local SMART_CIRCLE_CASTS = 24
            local SMART_CIRCLE_INCREMENT = 2.0 * math.pi / SMART_CIRCLE_CASTS
            local CHAR_OUTLINE_CASTS = 24
            
            -- Used to sanitize user-supplied functions
            local function AssertTypes(param, ...)
                local allowedTypes = {}
                local typeString = ''
                for _, typeName in pairs({...}) do
                    allowedTypes[typeName] = true
                    typeString = typeString .. (typeString == '' and '' or ' or ') .. typeName
                end
                local theType = type(param)
                assert(allowedTypes[theType], typeString .. " type expected, got: " .. theType)
            end
            
            -- Helper function for Determinant of 3x3, not in CameraUtils for performance reasons
            local function Det3x3(a,b,c,d,e,f,g,h,i)
                return (a*(e*i-f*h)-b*(d*i-f*g)+c*(d*h-e*g))
            end
            
            -- Smart Circle mode needs the intersection of 2 rays that are known to be in the same plane
            -- because they are generated from cross products with a common vector. This function is computing
            -- that intersection, but it's actually the general solution for the point halfway between where
            -- two skew lines come nearest to each other, which is more forgiving.
            local function RayIntersection(p0, v0, p1, v1)
                local v2 = v0:Cross(v1)
                local d1 = p1.x - p0.x
                local d2 = p1.y - p0.y
                local d3 = p1.z - p0.z
                local denom = Det3x3(v0.x,-v1.x,v2.x,v0.y,-v1.y,v2.y,v0.z,-v1.z,v2.z)
            
                if (denom == 0) then
                    return ZERO_VECTOR3 -- No solution (rays are parallel)
                end
            
                local t0 = Det3x3(d1,-v1.x,v2.x,d2,-v1.y,v2.y,d3,-v1.z,v2.z) / denom
                local t1 = Det3x3(v0.x,d1,v2.x,v0.y,d2,v2.y,v0.z,d3,v2.z) / denom
                local s0 = p0 + t0 * v0
                local s1 = p1 + t1 * v1
                local s = s0 + 0.5 * ( s1 - s0 )
            
                -- 0.25 studs is a threshold for deciding if the rays are
                -- close enough to be considered intersecting, found through testing 
                if (s1-s0).Magnitude < 0.25 then
                    return s
                else
                    return ZERO_VECTOR3
                end
            end
            
            
            
            --[[ The Module ]]--
            local BaseOcclusion = _BaseOcclusion()
            local Invisicam = setmetatable({}, BaseOcclusion)
            Invisicam.__index = Invisicam
            
            function Invisicam.new()
                local self = setmetatable(BaseOcclusion.new(), Invisicam)
            
                self.char = nil
                self.humanoidRootPart = nil
                self.torsoPart = nil
                self.headPart = nil
            
                self.childAddedConn = nil
                self.childRemovedConn = nil
            
                self.behaviors = {} 	-- Map of modes to behavior fns
                self.behaviors[MODE.LIMBS] = self.LimbBehavior
                self.behaviors[MODE.MOVEMENT] = self.MoveBehavior
                self.behaviors[MODE.CORNERS] = self.CornerBehavior
                self.behaviors[MODE.CIRCLE1] = self.CircleBehavior
                self.behaviors[MODE.CIRCLE2] = self.CircleBehavior
                self.behaviors[MODE.LIMBMOVE] = self.LimbMoveBehavior
                self.behaviors[MODE.SMART_CIRCLE] = self.SmartCircleBehavior
                self.behaviors[MODE.CHAR_OUTLINE] = self.CharacterOutlineBehavior
            
                self.mode = MODE.SMART_CIRCLE
                self.behaviorFunction = self.SmartCircleBehavior
            
                self.savedHits = {} 	-- Objects currently being faded in/out
                self.trackedLimbs = {}	-- Used in limb-tracking casting modes
            
                self.camera = game.Workspace.CurrentCamera
            
                self.enabled = false
                return self
            end
            
            function Invisicam:Enable(enable)
                self.enabled = enable
            
                if not enable then
                    self:Cleanup()
                end
            end
            
            function Invisicam:GetOcclusionMode()
                return Enum.DevCameraOcclusionMode.Invisicam
            end
            
            --[[ Module functions ]]--
            function Invisicam:LimbBehavior(castPoints)
                for limb, _ in pairs(self.trackedLimbs) do
                    castPoints[#castPoints + 1] = limb.Position
                end
            end
            
            function Invisicam:MoveBehavior(castPoints)
                for i = 1, MOVE_CASTS do
                    local position, velocity = self.humanoidRootPart.Position, self.humanoidRootPart.Velocity
                    local horizontalSpeed = Vector3.new(velocity.X, 0, velocity.Z).Magnitude / 2
                    local offsetVector = (i - 1) * self.humanoidRootPart.CFrame.lookVector * horizontalSpeed
                    castPoints[#castPoints + 1] = position + offsetVector
                end
            end
            
            function Invisicam:CornerBehavior(castPoints)
                local cframe = self.humanoidRootPart.CFrame
                local centerPoint = cframe.p
                local rotation = cframe - centerPoint
                local halfSize = self.char:GetExtentsSize() / 2 --NOTE: Doesn't update w/ limb animations
                castPoints[#castPoints + 1] = centerPoint
                for i = 1, #CORNER_FACTORS do
                    castPoints[#castPoints + 1] = centerPoint + (rotation * (halfSize * CORNER_FACTORS[i]))
                end
            end
            
            function Invisicam:CircleBehavior(castPoints)
                local cframe
                if self.mode == MODE.CIRCLE1 then
                    cframe = self.humanoidRootPart.CFrame
                else
                    local camCFrame = self.camera.CoordinateFrame
                    cframe = camCFrame - camCFrame.p + self.humanoidRootPart.Position
                end
                castPoints[#castPoints + 1] = cframe.p
                for i = 0, CIRCLE_CASTS - 1 do
                    local angle = (2 * math.pi / CIRCLE_CASTS) * i
                    local offset = 3 * Vector3.new(math.cos(angle), math.sin(angle), 0)
                    castPoints[#castPoints + 1] = cframe * offset
                end
            end
            
            function Invisicam:LimbMoveBehavior(castPoints)
                self:LimbBehavior(castPoints)
                self:MoveBehavior(castPoints)
            end
            
            function Invisicam:CharacterOutlineBehavior(castPoints)
                local torsoUp = self.torsoPart.CFrame.upVector.unit
                local torsoRight = self.torsoPart.CFrame.rightVector.unit
            
                -- Torso cross of points for interior coverage
                castPoints[#castPoints + 1] = self.torsoPart.CFrame.p
                castPoints[#castPoints + 1] = self.torsoPart.CFrame.p + torsoUp
                castPoints[#castPoints + 1] = self.torsoPart.CFrame.p - torsoUp
                castPoints[#castPoints + 1] = self.torsoPart.CFrame.p + torsoRight
                castPoints[#castPoints + 1] = self.torsoPart.CFrame.p - torsoRight
                if self.headPart then
                    castPoints[#castPoints + 1] = self.headPart.CFrame.p
                end
            
                local cframe = CFrame.new(ZERO_VECTOR3,Vector3.new(self.camera.CoordinateFrame.lookVector.X,0,self.camera.CoordinateFrame.lookVector.Z))
                local centerPoint = (self.torsoPart and self.torsoPart.Position or self.humanoidRootPart.Position)
            
                local partsWhitelist = {self.torsoPart}
                if self.headPart then
                    partsWhitelist[#partsWhitelist + 1] = self.headPart
                end
            
                for i = 1, CHAR_OUTLINE_CASTS do
                    local angle = (2 * math.pi * i / CHAR_OUTLINE_CASTS)
                    local offset = cframe * (3 * Vector3.new(math.cos(angle), math.sin(angle), 0))
            
                    offset = Vector3.new(offset.X, math.max(offset.Y, -2.25), offset.Z)	
            
                    local ray = Ray.new(centerPoint + offset, -3 * offset)
                    local hit, hitPoint = game.Workspace:FindPartOnRayWithWhitelist(ray, partsWhitelist, false, false)
            
                    if hit then
                        -- Use hit point as the cast point, but nudge it slightly inside the character so that bumping up against
                        -- walls is less likely to cause a transparency glitch
                        castPoints[#castPoints + 1] = hitPoint + 0.2 * (centerPoint - hitPoint).unit
                    end
                end
            end
            
            function Invisicam:SmartCircleBehavior(castPoints)
                local torsoUp = self.torsoPart.CFrame.upVector.unit
                local torsoRight = self.torsoPart.CFrame.rightVector.unit
            
                -- SMART_CIRCLE mode includes rays to head and 5 to the torso.
                -- Hands, arms, legs and feet are not included since they
                -- are not canCollide and can therefore go inside of parts
                castPoints[#castPoints + 1] = self.torsoPart.CFrame.p
                castPoints[#castPoints + 1] = self.torsoPart.CFrame.p + torsoUp
                castPoints[#castPoints + 1] = self.torsoPart.CFrame.p - torsoUp
                castPoints[#castPoints + 1] = self.torsoPart.CFrame.p + torsoRight
                castPoints[#castPoints + 1] = self.torsoPart.CFrame.p - torsoRight
                if self.headPart then
                    castPoints[#castPoints + 1] = self.headPart.CFrame.p
                end
            
                local cameraOrientation = self.camera.CFrame - self.camera.CFrame.p
                local torsoPoint = Vector3.new(0,0.5,0) + (self.torsoPart and self.torsoPart.Position or self.humanoidRootPart.Position)
                local radius = 2.5
            
                -- This loop first calculates points in a circle of radius 2.5 around the torso of the character, in the
                -- plane orthogonal to the camera's lookVector. Each point is then raycast to, to determine if it is within
                -- the free space surrounding the player (not inside anything). Two iterations are done to adjust points that
                -- are inside parts, to try to move them to valid locations that are still on their camera ray, so that the
                -- circle remains circular from the camera's perspective, but does not cast rays into walls or parts that are
                -- behind, below or beside the character and not really obstructing view of the character. This minimizes
                -- the undesirable situation where the character walks up to an exterior wall and it is made invisible even
                -- though it is behind the character.
                for i = 1, SMART_CIRCLE_CASTS do
                    local angle = SMART_CIRCLE_INCREMENT * i - 0.5 * math.pi
                    local offset = radius * Vector3.new(math.cos(angle), math.sin(angle), 0)
                    local circlePoint = torsoPoint + cameraOrientation * offset
            
                    -- Vector from camera to point on the circle being tested
                    local vp = circlePoint - self.camera.CFrame.p
            
                    local ray = Ray.new(torsoPoint, circlePoint - torsoPoint)
                    local hit, hp, hitNormal = game.Workspace:FindPartOnRayWithIgnoreList(ray, {self.char}, false, false )
                    local castPoint = circlePoint
            
                    if hit then
                        local hprime = hp + 0.1 * hitNormal.unit -- Slightly offset hit point from the hit surface
                        local v0 = hprime - torsoPoint -- Vector from torso to offset hit point
            
                        local perp = (v0:Cross(vp)).unit
            
                        -- Vector from the offset hit point, along the hit surface
                        local v1 = (perp:Cross(hitNormal)).unit
            
                        -- Vector from camera to offset hit
                        local vprime = (hprime - self.camera.CFrame.p).unit
            
                        -- This dot product checks to see if the vector along the hit surface would hit the correct
                        -- side of the invisicam cone, or if it would cross the camera look vector and hit the wrong side
                        if ( v0.unit:Dot(-v1) < v0.unit:Dot(vprime)) then
                            castPoint = RayIntersection(hprime, v1, circlePoint, vp)
            
                            if castPoint.Magnitude > 0 then
                                local ray = Ray.new(hprime, castPoint - hprime)
                                local hit, hitPoint, hitNormal = game.Workspace:FindPartOnRayWithIgnoreList(ray, {self.char}, false, false )
            
                                if hit then
                                    local hprime2 = hitPoint + 0.1 * hitNormal.unit
                                    castPoint = hprime2
                                end
                            else
                                castPoint = hprime
                            end
                        else
                            castPoint = hprime
                        end
            
                        local ray = Ray.new(torsoPoint, (castPoint - torsoPoint))
                        local hit, hitPoint, hitNormal = game.Workspace:FindPartOnRayWithIgnoreList(ray, {self.char}, false, false )
            
                        if hit then
                            local castPoint2 = hitPoint - 0.1 * (castPoint - torsoPoint).unit
                            castPoint = castPoint2
                        end
                    end
            
                    castPoints[#castPoints + 1] = castPoint
                end
            end
            
            function Invisicam:CheckTorsoReference()
                if self.char then
                    self.torsoPart = self.char:FindFirstChild("Torso")
                    if not self.torsoPart then
                        self.torsoPart = self.char:FindFirstChild("UpperTorso")
                        if not self.torsoPart then
                            self.torsoPart = self.char:FindFirstChild("HumanoidRootPart")
                        end
                    end
            
                    self.headPart = self.char:FindFirstChild("Head")
                end
            end
            
            function Invisicam:CharacterAdded(char, player)
                -- We only want the LocalPlayer's character
                if player~=PlayersService.LocalPlayer then return end
            
                if self.childAddedConn then
                    self.childAddedConn:Disconnect()
                    self.childAddedConn = nil
                end
                if self.childRemovedConn then
                    self.childRemovedConn:Disconnect()
                    self.childRemovedConn = nil
                end
            
                self.char = char
            
                self.trackedLimbs = {}
                local function childAdded(child)
                    if child:IsA("BasePart") then
                        if LIMB_TRACKING_SET[child.Name] then
                            self.trackedLimbs[child] = true
                        end
            
                        if child.Name == "Torso" or child.Name == "UpperTorso" then
                            self.torsoPart = child
                        end
            
                        if child.Name == "Head" then
                            self.headPart = child
                        end
                    end
                end
            
                local function childRemoved(child)
                    self.trackedLimbs[child] = nil
            
                    -- If removed/replaced part is 'Torso' or 'UpperTorso' double check that we still have a TorsoPart to use
                    self:CheckTorsoReference()
                end
            
                self.childAddedConn = char.ChildAdded:Connect(childAdded)
                self.childRemovedConn = char.ChildRemoved:Connect(childRemoved)
                for _, child in pairs(self.char:GetChildren()) do
                    childAdded(child)
                end
            end
            
            function Invisicam:SetMode(newMode)
                AssertTypes(newMode, 'number')
                for _, modeNum in pairs(MODE) do
                    if modeNum == newMode then
                        self.mode = newMode
                        self.behaviorFunction = self.behaviors[self.mode]
                        return
                    end
                end
                error("Invalid mode number")
            end
            
            function Invisicam:GetObscuredParts()
                return self.savedHits
            end
            
            -- Want to turn off Invisicam? Be sure to call this after.
            function Invisicam:Cleanup()
                for hit, originalFade in pairs(self.savedHits) do
                    hit.LocalTransparencyModifier = originalFade
                end
            end
            
            function Invisicam:Update(dt, desiredCameraCFrame, desiredCameraFocus)
                -- Bail if there is no Character
                if not self.enabled or not self.char then
                    return desiredCameraCFrame, desiredCameraFocus
                end
            
                self.camera = game.Workspace.CurrentCamera
            
                -- TODO: Move this to a GetHumanoidRootPart helper, probably combine with CheckTorsoReference
                -- Make sure we still have a HumanoidRootPart
                if not self.humanoidRootPart then
                    local humanoid = self.char:FindFirstChildOfClass("Humanoid")
                    if humanoid and humanoid.RootPart then
                        self.humanoidRootPart = humanoid.RootPart
                    else
                        -- Not set up with Humanoid? Try and see if there's one in the Character at all:
                        self.humanoidRootPart = self.char:FindFirstChild("HumanoidRootPart")
                        if not self.humanoidRootPart then
                            -- Bail out, since we're relying on HumanoidRootPart existing
                            return desiredCameraCFrame, desiredCameraFocus
                        end
                    end
            
                    -- TODO: Replace this with something more sensible
                    local ancestryChangedConn
                    ancestryChangedConn = self.humanoidRootPart.AncestryChanged:Connect(function(child, parent)
                        if child == self.humanoidRootPart and not parent then 
                            self.humanoidRootPart = nil
                            if ancestryChangedConn and ancestryChangedConn.Connected then
                                ancestryChangedConn:Disconnect()
                                ancestryChangedConn = nil
                            end
                        end
                    end)
                end
            
                if not self.torsoPart then
                    self:CheckTorsoReference()
                    if not self.torsoPart then
                        -- Bail out, since we're relying on Torso existing, should never happen since we fall back to using HumanoidRootPart as torso
                        return desiredCameraCFrame, desiredCameraFocus
                    end
                end
            
                -- Make a list of world points to raycast to
                local castPoints = {}
                self.behaviorFunction(self, castPoints)
            
                -- Cast to get a list of objects between the camera and the cast points
                local currentHits = {}
                local ignoreList = {self.char}
                local function add(hit)
                    currentHits[hit] = true
                    if not self.savedHits[hit] then
                        self.savedHits[hit] = hit.LocalTransparencyModifier
                    end
                end
            
                local hitParts
                local hitPartCount = 0
            
                -- Hash table to treat head-ray-hit parts differently than the rest of the hit parts hit by other rays
                -- head/torso ray hit parts will be more transparent than peripheral parts when USE_STACKING_TRANSPARENCY is enabled
                local headTorsoRayHitParts = {}
            
                local perPartTransparencyHeadTorsoHits = TARGET_TRANSPARENCY
                local perPartTransparencyOtherHits = TARGET_TRANSPARENCY
            
                if USE_STACKING_TRANSPARENCY then
            
                    -- This first call uses head and torso rays to find out how many parts are stacked up
                    -- for the purpose of calculating required per-part transparency
                    local headPoint = self.headPart and self.headPart.CFrame.p or castPoints[1]
                    local torsoPoint = self.torsoPart and self.torsoPart.CFrame.p or castPoints[2]
                    hitParts = self.camera:GetPartsObscuringTarget({headPoint, torsoPoint}, ignoreList)
            
                    -- Count how many things the sample rays passed through, including decals. This should only
                    -- count decals facing the camera, but GetPartsObscuringTarget does not return surface normals,
                    -- so my compromise for now is to just let any decal increase the part count by 1. Only one
                    -- decal per part will be considered.
                    for i = 1, #hitParts do
                        local hitPart = hitParts[i]
                        hitPartCount = hitPartCount + 1 -- count the part itself
                        headTorsoRayHitParts[hitPart] = true
                        for _, child in pairs(hitPart:GetChildren()) do
                            if child:IsA('Decal') or child:IsA('Texture') then
                                hitPartCount = hitPartCount + 1 -- count first decal hit, then break
                                break
                            end
                        end
                    end
            
                    if (hitPartCount > 0) then
                        perPartTransparencyHeadTorsoHits = math.pow( ((0.5 * TARGET_TRANSPARENCY) + (0.5 * TARGET_TRANSPARENCY / hitPartCount)), 1 / hitPartCount )
                        perPartTransparencyOtherHits = math.pow( ((0.5 * TARGET_TRANSPARENCY_PERIPHERAL) + (0.5 * TARGET_TRANSPARENCY_PERIPHERAL / hitPartCount)), 1 / hitPartCount )
                    end
                end
            
                -- Now get all the parts hit by all the rays
                hitParts = self.camera:GetPartsObscuringTarget(castPoints, ignoreList)
            
                local partTargetTransparency = {}
            
                -- Include decals and textures
                for i = 1, #hitParts do
                    local hitPart = hitParts[i]
            
                    partTargetTransparency[hitPart] =headTorsoRayHitParts[hitPart] and perPartTransparencyHeadTorsoHits or perPartTransparencyOtherHits
            
                    -- If the part is not already as transparent or more transparent than what invisicam requires, add it to the list of
                    -- parts to be modified by invisicam
                    if hitPart.Transparency < partTargetTransparency[hitPart] then
                        add(hitPart)
                    end
            
                    -- Check all decals and textures on the part
                    for _, child in pairs(hitPart:GetChildren()) do
                        if child:IsA('Decal') or child:IsA('Texture') then
                            if (child.Transparency < partTargetTransparency[hitPart]) then
                                partTargetTransparency[child] = partTargetTransparency[hitPart]
                                add(child)
                            end
                        end
                    end
                end
            
                -- Invisibilize objects that are in the way, restore those that aren't anymore
                for hitPart, originalLTM in pairs(self.savedHits) do
                    if currentHits[hitPart] then
                        -- LocalTransparencyModifier gets whatever value is required to print the part's total transparency to equal perPartTransparency
                        hitPart.LocalTransparencyModifier = (hitPart.Transparency < 1) and ((partTargetTransparency[hitPart] - hitPart.Transparency) / (1.0 - hitPart.Transparency)) or 0
                    else -- Restore original pre-invisicam value of LTM
                        hitPart.LocalTransparencyModifier = originalLTM
                        self.savedHits[hitPart] = nil
                    end
                end
            
                -- Invisicam does not change the camera values
                return desiredCameraCFrame, desiredCameraFocus
            end
            
            return Invisicam
        end
        
        function _LegacyCamera()
            
            local ZERO_VECTOR2 = Vector2.new(0,0)
            
            local Util = _CameraUtils()
            
            --[[ Services ]]--
            local PlayersService = game:GetService('Players')
            
            --[[ The Module ]]--
            local BaseCamera = _BaseCamera()
            local LegacyCamera = setmetatable({}, BaseCamera)
            LegacyCamera.__index = LegacyCamera
            
            function LegacyCamera.new()
                local self = setmetatable(BaseCamera.new(), LegacyCamera)
            
                self.cameraType = Enum.CameraType.Fixed
                self.lastUpdate = tick()
                self.lastDistanceToSubject = nil
            
                return self
            end
            
            function LegacyCamera:GetModuleName()
                return "LegacyCamera"
            end
            
            --[[ Functions overridden from BaseCamera ]]--
            function LegacyCamera:SetCameraToSubjectDistance(desiredSubjectDistance)
                return BaseCamera.SetCameraToSubjectDistance(self,desiredSubjectDistance)
            end
            
            function LegacyCamera:Update(dt)
            
                -- Cannot update until cameraType has been set
                if not self.cameraType then return end
            
                local now = tick()
                local timeDelta = (now - self.lastUpdate)
                local camera = 	workspace.CurrentCamera
                local newCameraCFrame = camera.CFrame
                local newCameraFocus = camera.Focus
                local player = PlayersService.LocalPlayer
            
                if self.lastUpdate == nil or timeDelta > 1 then
                    self.lastDistanceToSubject = nil
                end
                local subjectPosition = self:GetSubjectPosition()
            
                if self.cameraType == Enum.CameraType.Fixed then
                    if self.lastUpdate then
                        -- Cap out the delta to 0.1 so we don't get some crazy things when we re-resume from
                        local delta = math.min(0.1, now - self.lastUpdate)
                        local gamepadRotation = self:UpdateGamepad()
                        self.rotateInput = self.rotateInput + (gamepadRotation * delta)
                    end
            
                    if subjectPosition and player and camera then
                        local distanceToSubject = self:GetCameraToSubjectDistance()
                        local newLookVector = self:CalculateNewLookVector()
                        self.rotateInput = ZERO_VECTOR2
            
                        newCameraFocus = camera.Focus -- Fixed camera does not change focus
                        newCameraCFrame = CFrame.new(camera.CFrame.p, camera.CFrame.p + (distanceToSubject * newLookVector))
                    end
                elseif self.cameraType == Enum.CameraType.Attach then
                    if subjectPosition and camera then
                        local distanceToSubject = self:GetCameraToSubjectDistance()
                        local humanoid = self:GetHumanoid()
                        if self.lastUpdate and humanoid and humanoid.RootPart then
            
                            -- Cap out the delta to 0.1 so we don't get some crazy things when we re-resume from
                            local delta = math.min(0.1, now - self.lastUpdate)
                            local gamepadRotation = self:UpdateGamepad()
                            self.rotateInput = self.rotateInput + (gamepadRotation * delta)
            
                            local forwardVector = humanoid.RootPart.CFrame.lookVector
            
                            local y = Util.GetAngleBetweenXZVectors(forwardVector, self:GetCameraLookVector())
                            if Util.IsFinite(y) then
                                -- Preserve vertical rotation from user input
                                self.rotateInput = Vector2.new(y, self.rotateInput.Y)
                            end
                        end
            
                        local newLookVector = self:CalculateNewLookVector()
                        self.rotateInput = ZERO_VECTOR2
            
                        newCameraFocus = CFrame.new(subjectPosition)
                        newCameraCFrame = CFrame.new(subjectPosition - (distanceToSubject * newLookVector), subjectPosition)
                    end
                elseif self.cameraType == Enum.CameraType.Watch then
                    if subjectPosition and player and camera then
                        local cameraLook = nil
            
                        local humanoid = self:GetHumanoid()
                        if humanoid and humanoid.RootPart then
                            local diffVector = subjectPosition - camera.CFrame.p
                            cameraLook = diffVector.unit
            
                            if self.lastDistanceToSubject and self.lastDistanceToSubject == self:GetCameraToSubjectDistance() then
                                -- Don't clobber the zoom if they zoomed the camera
                                local newDistanceToSubject = diffVector.magnitude
                                self:SetCameraToSubjectDistance(newDistanceToSubject)
                            end
                        end
            
                        local distanceToSubject = self:GetCameraToSubjectDistance()
                        local newLookVector = self:CalculateNewLookVector(cameraLook)
                        self.rotateInput = ZERO_VECTOR2
            
                        newCameraFocus = CFrame.new(subjectPosition)
                        newCameraCFrame = CFrame.new(subjectPosition - (distanceToSubject * newLookVector), subjectPosition)
            
                        self.lastDistanceToSubject = distanceToSubject
                    end
                else
                    -- Unsupported type, return current values unchanged
                    return camera.CFrame, camera.Focus
                end
            
                self.lastUpdate = now
                return newCameraCFrame, newCameraFocus
            end
            
            return LegacyCamera
        end
        
        function _OrbitalCamera()
            
            -- Local private variables and constants
            local UNIT_Z = Vector3.new(0,0,1)
            local X1_Y0_Z1 = Vector3.new(1,0,1)	--Note: not a unit vector, used for projecting onto XZ plane
            local ZERO_VECTOR3 = Vector3.new(0,0,0)
            local ZERO_VECTOR2 = Vector2.new(0,0)
            local TAU = 2 * math.pi
            
            --[[ Gamepad Support ]]--
            local THUMBSTICK_DEADZONE = 0.2
            
            -- Do not edit these values, they are not the developer-set limits, they are limits
            -- to the values the camera system equations can correctly handle
            local MIN_ALLOWED_ELEVATION_DEG = -80
            local MAX_ALLOWED_ELEVATION_DEG = 80
            
            local externalProperties = {}
            externalProperties["InitialDistance"]  = 25
            externalProperties["MinDistance"]      = 10
            externalProperties["MaxDistance"]      = 100
            externalProperties["InitialElevation"] = 35
            externalProperties["MinElevation"]     = 35
            externalProperties["MaxElevation"]     = 35
            externalProperties["ReferenceAzimuth"] = -45	-- Angle around the Y axis where the camera starts. -45 offsets the camera in the -X and +Z directions equally
            externalProperties["CWAzimuthTravel"]  = 90	-- How many degrees the camera is allowed to rotate from the reference position, CW as seen from above
            externalProperties["CCWAzimuthTravel"] = 90	-- How many degrees the camera is allowed to rotate from the reference position, CCW as seen from above
            externalProperties["UseAzimuthLimits"] = false -- Full rotation around Y axis available by default
            
            local Util = _CameraUtils()
            
            --[[ Services ]]--
            local PlayersService = game:GetService('Players')
            local VRService = game:GetService("VRService")
            
            --[[ The Module ]]--
            local BaseCamera = _BaseCamera()
            local OrbitalCamera = setmetatable({}, BaseCamera)
            OrbitalCamera.__index = OrbitalCamera
            
            
            function OrbitalCamera.new()
                local self = setmetatable(BaseCamera.new(), OrbitalCamera)
            
                self.lastUpdate = tick()
            
                -- OrbitalCamera-specific members
                self.changedSignalConnections = {}
                self.refAzimuthRad = nil
                self.curAzimuthRad = nil
                self.minAzimuthAbsoluteRad = nil
                self.maxAzimuthAbsoluteRad = nil
                self.useAzimuthLimits = nil
                self.curElevationRad = nil
                self.minElevationRad = nil
                self.maxElevationRad = nil
                self.curDistance = nil
                self.minDistance = nil
                self.maxDistance = nil
            
                -- Gamepad
                self.r3ButtonDown = false
                self.l3ButtonDown = false
                self.gamepadDollySpeedMultiplier = 1
            
                self.lastUserPanCamera = tick()
            
                self.externalProperties = {}
                self.externalProperties["InitialDistance"] 	= 25
                self.externalProperties["MinDistance"] 		= 10
                self.externalProperties["MaxDistance"] 		= 100
                self.externalProperties["InitialElevation"] 	= 35
                self.externalProperties["MinElevation"] 		= 35
                self.externalProperties["MaxElevation"] 		= 35
                self.externalProperties["ReferenceAzimuth"] 	= -45	-- Angle around the Y axis where the camera starts. -45 offsets the camera in the -X and +Z directions equally
                self.externalProperties["CWAzimuthTravel"] 	= 90	-- How many degrees the camera is allowed to rotate from the reference position, CW as seen from above
                self.externalProperties["CCWAzimuthTravel"] 	= 90	-- How many degrees the camera is allowed to rotate from the reference position, CCW as seen from above
                self.externalProperties["UseAzimuthLimits"] 	= false -- Full rotation around Y axis available by default
                self:LoadNumberValueParameters()
            
                return self
            end
            
            function OrbitalCamera:LoadOrCreateNumberValueParameter(name, valueType, updateFunction)
                local valueObj = script:FindFirstChild(name)
            
                if valueObj and valueObj:isA(valueType) then
                    -- Value object exists and is the correct type, use its value
                    self.externalProperties[name] = valueObj.Value
                elseif self.externalProperties[name] ~= nil then
                    -- Create missing (or replace incorrectly-typed) valueObject with default value
                    valueObj = Instance.new(valueType)
                    valueObj.Name = name
                    valueObj.Parent = script
                    valueObj.Value = self.externalProperties[name]
                else
                    print("externalProperties table has no entry for ",name)
                    return
                end
            
                if updateFunction then
                    if self.changedSignalConnections[name] then
                        self.changedSignalConnections[name]:Disconnect()
                    end
                    self.changedSignalConnections[name] = valueObj.Changed:Connect(function(newValue)
                        self.externalProperties[name] = newValue
                        updateFunction(self)
                    end)
                end
            end
            
            function OrbitalCamera:SetAndBoundsCheckAzimuthValues()
                self.minAzimuthAbsoluteRad = math.rad(self.externalProperties["ReferenceAzimuth"]) - math.abs(math.rad(self.externalProperties["CWAzimuthTravel"]))
                self.maxAzimuthAbsoluteRad = math.rad(self.externalProperties["ReferenceAzimuth"]) + math.abs(math.rad(self.externalProperties["CCWAzimuthTravel"]))
                self.useAzimuthLimits = self.externalProperties["UseAzimuthLimits"]
                if self.useAzimuthLimits then
                    self.curAzimuthRad = math.max(self.curAzimuthRad, self.minAzimuthAbsoluteRad)
                    self.curAzimuthRad = math.min(self.curAzimuthRad, self.maxAzimuthAbsoluteRad)
                end
            end
            
            function OrbitalCamera:SetAndBoundsCheckElevationValues()
                -- These degree values are the direct user input values. It is deliberate that they are
                -- ranged checked only against the extremes, and not against each other. Any time one
                -- is changed, both of the internal values in radians are recalculated. This allows for
                -- A developer to change the values in any order and for the end results to be that the
                -- internal values adjust to match intent as best as possible.
                local minElevationDeg = math.max(self.externalProperties["MinElevation"], MIN_ALLOWED_ELEVATION_DEG)
                local maxElevationDeg = math.min(self.externalProperties["MaxElevation"], MAX_ALLOWED_ELEVATION_DEG)
            
                -- Set internal values in radians
                self.minElevationRad = math.rad(math.min(minElevationDeg, maxElevationDeg))
                self.maxElevationRad = math.rad(math.max(minElevationDeg, maxElevationDeg))
                self.curElevationRad = math.max(self.curElevationRad, self.minElevationRad)
                self.curElevationRad = math.min(self.curElevationRad, self.maxElevationRad)
            end
            
            function OrbitalCamera:SetAndBoundsCheckDistanceValues()
                self.minDistance = self.externalProperties["MinDistance"]
                self.maxDistance = self.externalProperties["MaxDistance"]
                self.curDistance = math.max(self.curDistance, self.minDistance)
                self.curDistance = math.min(self.curDistance, self.maxDistance)
            end
            
            -- This loads from, or lazily creates, NumberValue objects for exposed parameters
            function OrbitalCamera:LoadNumberValueParameters()
                -- These initial values do not require change listeners since they are read only once
                self:LoadOrCreateNumberValueParameter("InitialElevation", "NumberValue", nil)
                self:LoadOrCreateNumberValueParameter("InitialDistance", "NumberValue", nil)
            
                -- Note: ReferenceAzimuth is also used as an initial value, but needs a change listener because it is used in the calculation of the limits
                self:LoadOrCreateNumberValueParameter("ReferenceAzimuth", "NumberValue", self.SetAndBoundsCheckAzimuthValue)
                self:LoadOrCreateNumberValueParameter("CWAzimuthTravel", "NumberValue", self.SetAndBoundsCheckAzimuthValues)
                self:LoadOrCreateNumberValueParameter("CCWAzimuthTravel", "NumberValue", self.SetAndBoundsCheckAzimuthValues)
                self:LoadOrCreateNumberValueParameter("MinElevation", "NumberValue", self.SetAndBoundsCheckElevationValues)
                self:LoadOrCreateNumberValueParameter("MaxElevation", "NumberValue", self.SetAndBoundsCheckElevationValues)
                self:LoadOrCreateNumberValueParameter("MinDistance", "NumberValue", self.SetAndBoundsCheckDistanceValues)
                self:LoadOrCreateNumberValueParameter("MaxDistance", "NumberValue", self.SetAndBoundsCheckDistanceValues)
                self:LoadOrCreateNumberValueParameter("UseAzimuthLimits", "BoolValue", self.SetAndBoundsCheckAzimuthValues)
            
                -- Internal values set (in radians, from degrees), plus sanitization
                self.curAzimuthRad = math.rad(self.externalProperties["ReferenceAzimuth"])
                self.curElevationRad = math.rad(self.externalProperties["InitialElevation"])
                self.curDistance = self.externalProperties["InitialDistance"]
            
                self:SetAndBoundsCheckAzimuthValues()
                self:SetAndBoundsCheckElevationValues()
                self:SetAndBoundsCheckDistanceValues()
            end
            
            function OrbitalCamera:GetModuleName()
                return "OrbitalCamera"
            end
            
            function OrbitalCamera:SetInitialOrientation(humanoid)
                if not humanoid or not humanoid.RootPart then
                    warn("OrbitalCamera could not set initial orientation due to missing humanoid")
                    return
                end
                local newDesiredLook = (humanoid.RootPart.CFrame.lookVector - Vector3.new(0,0.23,0)).unit
                local horizontalShift = Util.GetAngleBetweenXZVectors(newDesiredLook, self:GetCameraLookVector())
                local vertShift = math.asin(self:GetCameraLookVector().y) - math.asin(newDesiredLook.y)
                if not Util.IsFinite(horizontalShift) then
                    horizontalShift = 0
                end
                if not Util.IsFinite(vertShift) then
                    vertShift = 0
                end
                self.rotateInput = Vector2.new(horizontalShift, vertShift)
            end
            
            --[[ Functions of BaseCamera that are overridden by OrbitalCamera ]]--
            function OrbitalCamera:GetCameraToSubjectDistance()
                return self.curDistance
            end
            
            function OrbitalCamera:SetCameraToSubjectDistance(desiredSubjectDistance)
                print("OrbitalCamera SetCameraToSubjectDistance ",desiredSubjectDistance)
                local player = PlayersService.LocalPlayer
                if player then
                    self.currentSubjectDistance = math.clamp(desiredSubjectDistance, self.minDistance, self.maxDistance)
            
                    -- OrbitalCamera is not allowed to go into the first-person range
                    self.currentSubjectDistance = math.max(self.currentSubjectDistance, self.FIRST_PERSON_DISTANCE_THRESHOLD)
                end
                self.inFirstPerson = false
                self:UpdateMouseBehavior()
                return self.currentSubjectDistance
            end
            
            function OrbitalCamera:CalculateNewLookVector(suppliedLookVector, xyRotateVector)
                local currLookVector = suppliedLookVector or self:GetCameraLookVector()
                local currPitchAngle = math.asin(currLookVector.y)
                local yTheta = math.clamp(xyRotateVector.y, currPitchAngle - math.rad(MAX_ALLOWED_ELEVATION_DEG), currPitchAngle - math.rad(MIN_ALLOWED_ELEVATION_DEG))
                local constrainedRotateInput = Vector2.new(xyRotateVector.x, yTheta)
                local startCFrame = CFrame.new(ZERO_VECTOR3, currLookVector)
                local newLookVector = (CFrame.Angles(0, -constrainedRotateInput.x, 0) * startCFrame * CFrame.Angles(-constrainedRotateInput.y,0,0)).lookVector
                return newLookVector
            end
            
            function OrbitalCamera:GetGamepadPan(name, state, input)
                if input.UserInputType == self.activeGamepad and input.KeyCode == Enum.KeyCode.Thumbstick2 then
                    if self.r3ButtonDown or self.l3ButtonDown then
                    -- R3 or L3 Thumbstick is depressed, right stick controls dolly in/out
                        if (input.Position.Y > THUMBSTICK_DEADZONE) then
                            self.gamepadDollySpeedMultiplier = 0.96
                        elseif (input.Position.Y < -THUMBSTICK_DEADZONE) then
                            self.gamepadDollySpeedMultiplier = 1.04
                        else
                            self.gamepadDollySpeedMultiplier = 1.00
                        end
                    else
                        if state == Enum.UserInputState.Cancel then
                            self.gamepadPanningCamera = ZERO_VECTOR2
                            return
                        end
            
                        local inputVector = Vector2.new(input.Position.X, -input.Position.Y)
                        if inputVector.magnitude > THUMBSTICK_DEADZONE then
                            self.gamepadPanningCamera = Vector2.new(input.Position.X, -input.Position.Y)
                        else
                            self.gamepadPanningCamera = ZERO_VECTOR2
                        end
                    end
                    return Enum.ContextActionResult.Sink
                end
                return Enum.ContextActionResult.Pass
            end
            
            function OrbitalCamera:DoGamepadZoom(name, state, input)
                if input.UserInputType == self.activeGamepad and (input.KeyCode == Enum.KeyCode.ButtonR3 or input.KeyCode == Enum.KeyCode.ButtonL3) then
                    if (state == Enum.UserInputState.Begin) then
                        self.r3ButtonDown = input.KeyCode == Enum.KeyCode.ButtonR3
                        self.l3ButtonDown = input.KeyCode == Enum.KeyCode.ButtonL3
                    elseif (state == Enum.UserInputState.End) then
                        if (input.KeyCode == Enum.KeyCode.ButtonR3) then
                            self.r3ButtonDown = false
                        elseif (input.KeyCode == Enum.KeyCode.ButtonL3) then
                            self.l3ButtonDown = false
                        end
                        if (not self.r3ButtonDown) and (not self.l3ButtonDown) then
                            self.gamepadDollySpeedMultiplier = 1.00
                        end
                    end
                    return Enum.ContextActionResult.Sink
                end
                return Enum.ContextActionResult.Pass
            end
            
            function OrbitalCamera:BindGamepadInputActions()
                self:BindAction("OrbitalCamGamepadPan", function(name, state, input) return self:GetGamepadPan(name, state, input) end,
                    false, Enum.KeyCode.Thumbstick2)
                self:BindAction("OrbitalCamGamepadZoom", function(name, state, input) return self:DoGamepadZoom(name, state, input) end,
                    false, Enum.KeyCode.ButtonR3, Enum.KeyCode.ButtonL3)
            end
            
            
            -- [[ Update ]]--
            function OrbitalCamera:Update(dt)
                local now = tick()
                local timeDelta = (now - self.lastUpdate)
                local userPanningTheCamera = (self.UserPanningTheCamera == true)
                local camera = 	workspace.CurrentCamera
                local newCameraCFrame = camera.CFrame
                local newCameraFocus = camera.Focus
                local player = PlayersService.LocalPlayer
                local cameraSubject = camera and camera.CameraSubject
                local isInVehicle = cameraSubject and cameraSubject:IsA('VehicleSeat')
                local isOnASkateboard = cameraSubject and cameraSubject:IsA('SkateboardPlatform')
            
                if self.lastUpdate == nil or timeDelta > 1 then
                    self.lastCameraTransform = nil
                end
            
                if self.lastUpdate then
                    local gamepadRotation = self:UpdateGamepad()
            
                    if self:ShouldUseVRRotation() then
                        self.RotateInput = self.RotateInput + self:GetVRRotationInput()
                    else
                        -- Cap out the delta to 0.1 so we don't get some crazy things when we re-resume from
                        local delta = math.min(0.1, timeDelta)
            
                        if gamepadRotation ~= ZERO_VECTOR2 then
                            userPanningTheCamera = true
                            self.rotateInput = self.rotateInput + (gamepadRotation * delta)
                        end
            
                        local angle = 0
                        if not (isInVehicle or isOnASkateboard) then
                            angle = angle + (self.TurningLeft and -120 or 0)
                            angle = angle + (self.TurningRight and 120 or 0)
                        end
            
                        if angle ~= 0 then
                            self.rotateInput = self.rotateInput +  Vector2.new(math.rad(angle * delta), 0)
                            userPanningTheCamera = true
                        end
                    end
                end
            
                -- Reset tween speed if user is panning
                if userPanningTheCamera then
                    self.lastUserPanCamera = tick()
                end
            
                local subjectPosition = self:GetSubjectPosition()
            
                if subjectPosition and player and camera then
            
                    -- Process any dollying being done by gamepad
                    -- TODO: Move this
                    if self.gamepadDollySpeedMultiplier ~= 1 then
                        self:SetCameraToSubjectDistance(self.currentSubjectDistance * self.gamepadDollySpeedMultiplier)
                    end
            
                    local VREnabled = VRService.VREnabled
                    newCameraFocus = VREnabled and self:GetVRFocus(subjectPosition, timeDelta) or CFrame.new(subjectPosition)
            
                    local cameraFocusP = newCameraFocus.p
                    if VREnabled and not self:IsInFirstPerson() then
                        local cameraHeight = self:GetCameraHeight()
                        local vecToSubject = (subjectPosition - camera.CFrame.p)
                        local distToSubject = vecToSubject.magnitude
            
                        -- Only move the camera if it exceeded a maximum distance to the subject in VR
                        if distToSubject > self.currentSubjectDistance or self.rotateInput.x ~= 0 then
                            local desiredDist = math.min(distToSubject, self.currentSubjectDistance)
            
                            -- Note that CalculateNewLookVector is overridden from BaseCamera
                            vecToSubject = self:CalculateNewLookVector(vecToSubject.unit * X1_Y0_Z1, Vector2.new(self.rotateInput.x, 0)) * desiredDist
            
                            local newPos = cameraFocusP - vecToSubject
                            local desiredLookDir = camera.CFrame.lookVector
                            if self.rotateInput.x ~= 0 then
                                desiredLookDir = vecToSubject
                            end
                            local lookAt = Vector3.new(newPos.x + desiredLookDir.x, newPos.y, newPos.z + desiredLookDir.z)
                            self.RotateInput = ZERO_VECTOR2
            
                            newCameraCFrame = CFrame.new(newPos, lookAt) + Vector3.new(0, cameraHeight, 0)
                        end
                    else
                        -- self.RotateInput is a Vector2 of mouse movement deltas since last update
                        self.curAzimuthRad = self.curAzimuthRad - self.rotateInput.x
            
                        if self.useAzimuthLimits then
                            self.curAzimuthRad = math.clamp(self.curAzimuthRad, self.minAzimuthAbsoluteRad, self.maxAzimuthAbsoluteRad)
                        else
                            self.curAzimuthRad = (self.curAzimuthRad ~= 0) and (math.sign(self.curAzimuthRad) * (math.abs(self.curAzimuthRad) % TAU)) or 0
                        end
            
                        self.curElevationRad = math.clamp(self.curElevationRad + self.rotateInput.y, self.minElevationRad, self.maxElevationRad)
            
                        local cameraPosVector = self.currentSubjectDistance * ( CFrame.fromEulerAnglesYXZ( -self.curElevationRad, self.curAzimuthRad, 0 ) * UNIT_Z )
                        local camPos = subjectPosition + cameraPosVector
            
                        newCameraCFrame = CFrame.new(camPos, subjectPosition)
            
                        self.rotateInput = ZERO_VECTOR2
                    end
            
                    self.lastCameraTransform = newCameraCFrame
                    self.lastCameraFocus = newCameraFocus
                    if (isInVehicle or isOnASkateboard) and cameraSubject:IsA('BasePart') then
                        self.lastSubjectCFrame = cameraSubject.CFrame
                    else
                        self.lastSubjectCFrame = nil
                    end
                end
            
                self.lastUpdate = now
                return newCameraCFrame, newCameraFocus
            end
            
            return OrbitalCamera
        end
        
        function _ClassicCamera()
            
            -- Local private variables and constants
            local ZERO_VECTOR2 = Vector2.new(0,0)
            
            local tweenAcceleration = math.rad(220)		--Radians/Second^2
            local tweenSpeed = math.rad(0)				--Radians/Second
            local tweenMaxSpeed = math.rad(250)			--Radians/Second
            local TIME_BEFORE_AUTO_ROTATE = 2.0 		--Seconds, used when auto-aligning camera with vehicles
            
            local INITIAL_CAMERA_ANGLE = CFrame.fromOrientation(math.rad(-15), 0, 0)
            
            local FFlagUserCameraToggle do
                local success, result = pcall(function()
                    return UserSettings():IsUserFeatureEnabled("UserCameraToggle")
                end)
                FFlagUserCameraToggle = success and result
            end
            
            --[[ Services ]]--
            local PlayersService = game:GetService('Players')
            local VRService = game:GetService("VRService")
            
            local CameraInput = _CameraInput()
            local Util = _CameraUtils()
            
            --[[ The Module ]]--
            local BaseCamera = _BaseCamera()
            local ClassicCamera = setmetatable({}, BaseCamera)
            ClassicCamera.__index = ClassicCamera
            
            function ClassicCamera.new()
                local self = setmetatable(BaseCamera.new(), ClassicCamera)
            
                self.isFollowCamera = false
                self.isCameraToggle = false
                self.lastUpdate = tick()
                self.cameraToggleSpring = Util.Spring.new(5, 0)
            
                return self
            end
            
            function ClassicCamera:GetCameraToggleOffset(dt)
                assert(FFlagUserCameraToggle)
            
                if self.isCameraToggle then
                    local zoom = self.currentSubjectDistance
            
                    if CameraInput.getTogglePan() then
                        self.cameraToggleSpring.goal = math.clamp(Util.map(zoom, 0.5, self.FIRST_PERSON_DISTANCE_THRESHOLD, 0, 1), 0, 1)
                    else
                        self.cameraToggleSpring.goal = 0
                    end
            
                    local distanceOffset = math.clamp(Util.map(zoom, 0.5, 64, 0, 1), 0, 1) + 1
                    return Vector3.new(0, self.cameraToggleSpring:step(dt)*distanceOffset, 0)
                end
            
                return Vector3.new()
            end
            
            -- Movement mode standardized to Enum.ComputerCameraMovementMode values
            function ClassicCamera:SetCameraMovementMode(cameraMovementMode)
                BaseCamera.SetCameraMovementMode(self, cameraMovementMode)
            
                self.isFollowCamera = cameraMovementMode == Enum.ComputerCameraMovementMode.Follow
                self.isCameraToggle = cameraMovementMode == Enum.ComputerCameraMovementMode.CameraToggle
            end
            
            function ClassicCamera:Update()
                local now = tick()
                local timeDelta = now - self.lastUpdate
            
                local camera = workspace.CurrentCamera
                local newCameraCFrame = camera.CFrame
                local newCameraFocus = camera.Focus
            
                local overrideCameraLookVector = nil
                if self.resetCameraAngle then
                    local rootPart = self:GetHumanoidRootPart()
                    if rootPart then
                        overrideCameraLookVector = (rootPart.CFrame * INITIAL_CAMERA_ANGLE).lookVector
                    else
                        overrideCameraLookVector = INITIAL_CAMERA_ANGLE.lookVector
                    end
                    self.resetCameraAngle = false
                end
            
                local player = PlayersService.LocalPlayer
                local humanoid = self:GetHumanoid()
                local cameraSubject = camera.CameraSubject
                local isInVehicle = cameraSubject and cameraSubject:IsA('VehicleSeat')
                local isOnASkateboard = cameraSubject and cameraSubject:IsA('SkateboardPlatform')
                local isClimbing = humanoid and humanoid:GetState() == Enum.HumanoidStateType.Climbing
            
                if self.lastUpdate == nil or timeDelta > 1 then
                    self.lastCameraTransform = nil
                end
            
                if self.lastUpdate then
                    local gamepadRotation = self:UpdateGamepad()
            
                    if self:ShouldUseVRRotation() then
                        self.rotateInput = self.rotateInput + self:GetVRRotationInput()
                    else
                        -- Cap out the delta to 0.1 so we don't get some crazy things when we re-resume from
                        local delta = math.min(0.1, timeDelta)
            
                        if gamepadRotation ~= ZERO_VECTOR2 then
                            self.rotateInput = self.rotateInput + (gamepadRotation * delta)
                        end
            
                        local angle = 0
                        if not (isInVehicle or isOnASkateboard) then
                            angle = angle + (self.turningLeft and -120 or 0)
                            angle = angle + (self.turningRight and 120 or 0)
                        end
            
                        if angle ~= 0 then
                            self.rotateInput = self.rotateInput +  Vector2.new(math.rad(angle * delta), 0)
                        end
                    end
                end
            
                local cameraHeight = self:GetCameraHeight()
            
                -- Reset tween speed if user is panning
                if self.userPanningTheCamera then
                    tweenSpeed = 0
                    self.lastUserPanCamera = tick()
                end
            
                local userRecentlyPannedCamera = now - self.lastUserPanCamera < TIME_BEFORE_AUTO_ROTATE
                local subjectPosition = self:GetSubjectPosition()
            
                if subjectPosition and player and camera then
                    local zoom = self:GetCameraToSubjectDistance()
                    if zoom < 0.5 then
                        zoom = 0.5
                    end
            
                    if self:GetIsMouseLocked() and not self:IsInFirstPerson() then
                        -- We need to use the right vector of the camera after rotation, not before
                        local newLookCFrame = self:CalculateNewLookCFrame(overrideCameraLookVector)
            
                        local offset = self:GetMouseLockOffset()
                        local cameraRelativeOffset = offset.X * newLookCFrame.rightVector + offset.Y * newLookCFrame.upVector + offset.Z * newLookCFrame.lookVector
            
                        --offset can be NAN, NAN, NAN if newLookVector has only y component
                        if Util.IsFiniteVector3(cameraRelativeOffset) then
                            subjectPosition = subjectPosition + cameraRelativeOffset
                        end
                    else
                        if not self.userPanningTheCamera and self.lastCameraTransform then
            
                            local isInFirstPerson = self:IsInFirstPerson()
            
                            if (isInVehicle or isOnASkateboard or (self.isFollowCamera and isClimbing)) and self.lastUpdate and humanoid and humanoid.Torso then
                                if isInFirstPerson then
                                    if self.lastSubjectCFrame and (isInVehicle or isOnASkateboard) and cameraSubject:IsA('BasePart') then
                                        local y = -Util.GetAngleBetweenXZVectors(self.lastSubjectCFrame.lookVector, cameraSubject.CFrame.lookVector)
                                        if Util.IsFinite(y) then
                                            self.rotateInput = self.rotateInput + Vector2.new(y, 0)
                                        end
                                        tweenSpeed = 0
                                    end
                                elseif not userRecentlyPannedCamera then
                                    local forwardVector = humanoid.Torso.CFrame.lookVector
                                    if isOnASkateboard then
                                        forwardVector = cameraSubject.CFrame.lookVector
                                    end
            
                                    tweenSpeed = math.clamp(tweenSpeed + tweenAcceleration * timeDelta, 0, tweenMaxSpeed)
            
                                    local percent = math.clamp(tweenSpeed * timeDelta, 0, 1)
                                    if self:IsInFirstPerson() and not (self.isFollowCamera and self.isClimbing) then
                                        percent = 1
                                    end
            
                                    local y = Util.GetAngleBetweenXZVectors(forwardVector, self:GetCameraLookVector())
                                    if Util.IsFinite(y) and math.abs(y) > 0.0001 then
                                        self.rotateInput = self.rotateInput + Vector2.new(y * percent, 0)
                                    end
                                end
            
                            elseif self.isFollowCamera and (not (isInFirstPerson or userRecentlyPannedCamera) and not VRService.VREnabled) then
                                -- Logic that was unique to the old FollowCamera module
                                local lastVec = -(self.lastCameraTransform.p - subjectPosition)
            
                                local y = Util.GetAngleBetweenXZVectors(lastVec, self:GetCameraLookVector())
            
                                -- This cutoff is to decide if the humanoid's angle of movement,
                                -- relative to the camera's look vector, is enough that
                                -- we want the camera to be following them. The point is to provide
                                -- a sizable dead zone to allow more precise forward movements.
                                local thetaCutoff = 0.4
            
                                -- Check for NaNs
                                if Util.IsFinite(y) and math.abs(y) > 0.0001 and math.abs(y) > thetaCutoff * timeDelta then
                                    self.rotateInput = self.rotateInput + Vector2.new(y, 0)
                                end
                            end
                        end
                    end
            
                    if not self.isFollowCamera then
                        local VREnabled = VRService.VREnabled
            
                        if VREnabled then
                            newCameraFocus = self:GetVRFocus(subjectPosition, timeDelta)
                        else
                            newCameraFocus = CFrame.new(subjectPosition)
                        end
            
                        local cameraFocusP = newCameraFocus.p
                        if VREnabled and not self:IsInFirstPerson() then
                            local vecToSubject = (subjectPosition - camera.CFrame.p)
                            local distToSubject = vecToSubject.magnitude
            
                            -- Only move the camera if it exceeded a maximum distance to the subject in VR
                            if distToSubject > zoom or self.rotateInput.x ~= 0 then
                                local desiredDist = math.min(distToSubject, zoom)
                                vecToSubject = self:CalculateNewLookVectorVR() * desiredDist
                                local newPos = cameraFocusP - vecToSubject
                                local desiredLookDir = camera.CFrame.lookVector
                                if self.rotateInput.x ~= 0 then
                                    desiredLookDir = vecToSubject
                                end
                                local lookAt = Vector3.new(newPos.x + desiredLookDir.x, newPos.y, newPos.z + desiredLookDir.z)
                                self.rotateInput = ZERO_VECTOR2
            
                                newCameraCFrame = CFrame.new(newPos, lookAt) + Vector3.new(0, cameraHeight, 0)
                            end
                        else
                            local newLookVector = self:CalculateNewLookVector(overrideCameraLookVector)
                            self.rotateInput = ZERO_VECTOR2
                            newCameraCFrame = CFrame.new(cameraFocusP - (zoom * newLookVector), cameraFocusP)
                        end
                    else -- is FollowCamera
                        local newLookVector = self:CalculateNewLookVector(overrideCameraLookVector)
                        self.rotateInput = ZERO_VECTOR2
            
                        if VRService.VREnabled then
                            newCameraFocus = self:GetVRFocus(subjectPosition, timeDelta)
                        else
                            newCameraFocus = CFrame.new(subjectPosition)
                        end
                        newCameraCFrame = CFrame.new(newCameraFocus.p - (zoom * newLookVector), newCameraFocus.p) + Vector3.new(0, cameraHeight, 0)
                    end
            
                    if FFlagUserCameraToggle then
                        local toggleOffset = self:GetCameraToggleOffset(timeDelta)
                        newCameraFocus = newCameraFocus + toggleOffset
                        newCameraCFrame = newCameraCFrame + toggleOffset
                    end
            
                    self.lastCameraTransform = newCameraCFrame
                    self.lastCameraFocus = newCameraFocus
                    if (isInVehicle or isOnASkateboard) and cameraSubject:IsA('BasePart') then
                        self.lastSubjectCFrame = cameraSubject.CFrame
                    else
                        self.lastSubjectCFrame = nil
                    end
                end
            
                self.lastUpdate = now
                return newCameraCFrame, newCameraFocus
            end
            
            function ClassicCamera:EnterFirstPerson()
                self.inFirstPerson = true
                self:UpdateMouseBehavior()
            end
            
            function ClassicCamera:LeaveFirstPerson()
                self.inFirstPerson = false
                self:UpdateMouseBehavior()
            end
            
            return ClassicCamera
        end
        
        function _CameraUtils()
        
            local CameraUtils = {}
            
            local FFlagUserCameraToggle do
                local success, result = pcall(function()
                    return UserSettings():IsUserFeatureEnabled("UserCameraToggle")
                end)
                FFlagUserCameraToggle = success and result
            end
            
            local function round(num)
                return math.floor(num + 0.5)
            end
            
            -- Critically damped spring class for fluid motion effects
            local Spring = {} do
                Spring.__index = Spring
            
                -- Initialize to a given undamped frequency and default position
                function Spring.new(freq, pos)
                    return setmetatable({
                        freq = freq,
                        goal = pos,
                        pos = pos,
                        vel = 0,
                    }, Spring)
                end
            
                -- Advance the spring simulation by `dt` seconds
                function Spring:step(dt)
                    local f = self.freq*2*math.pi
                    local g = self.goal
                    local p0 = self.pos
                    local v0 = self.vel
            
                    local offset = p0 - g
                    local decay = math.exp(-f*dt)
            
                    local p1 = (offset*(1 + f*dt) + v0*dt)*decay + g
                    local v1 = (v0*(1 - f*dt) - offset*(f*f*dt))*decay
            
                    self.pos = p1
                    self.vel = v1
            
                    return p1
                end
            end
            
            CameraUtils.Spring = Spring
            
            -- map a value from one range to another
            function CameraUtils.map(x, inMin, inMax, outMin, outMax)
                return (x - inMin)*(outMax - outMin)/(inMax - inMin) + outMin
            end
            
            -- From TransparencyController
            function CameraUtils.Round(num, places)
                local decimalPivot = 10^places
                return math.floor(num * decimalPivot + 0.5) / decimalPivot
            end
            
            function CameraUtils.IsFinite(val)
                return val == val and val ~= math.huge and val ~= -math.huge
            end
            
            function CameraUtils.IsFiniteVector3(vec3)
                return CameraUtils.IsFinite(vec3.X) and CameraUtils.IsFinite(vec3.Y) and CameraUtils.IsFinite(vec3.Z)
            end
            
            -- Legacy implementation renamed
            function CameraUtils.GetAngleBetweenXZVectors(v1, v2)
                return math.atan2(v2.X*v1.Z-v2.Z*v1.X, v2.X*v1.X+v2.Z*v1.Z)
            end
            
            function  CameraUtils.RotateVectorByAngleAndRound(camLook, rotateAngle, roundAmount)
                if camLook.Magnitude > 0 then
                    camLook = camLook.unit
                    local currAngle = math.atan2(camLook.z, camLook.x)
                    local newAngle = round((math.atan2(camLook.z, camLook.x) + rotateAngle) / roundAmount) * roundAmount
                    return newAngle - currAngle
                end
                return 0
            end
            
            -- K is a tunable parameter that changes the shape of the S-curve
            -- the larger K is the more straight/linear the curve gets
            local k = 0.35
            local lowerK = 0.8
            local function SCurveTranform(t)
                t = math.clamp(t, -1, 1)
                if t >= 0 then
                    return (k*t) / (k - t + 1)
                end
                return -((lowerK*-t) / (lowerK + t + 1))
            end
            
            local DEADZONE = 0.1
            local function toSCurveSpace(t)
                return (1 + DEADZONE) * (2*math.abs(t) - 1) - DEADZONE
            end
            
            local function fromSCurveSpace(t)
                return t/2 + 0.5
            end
            
            function CameraUtils.GamepadLinearToCurve(thumbstickPosition)
                local function onAxis(axisValue)
                    local sign = 1
                    if axisValue < 0 then
                        sign = -1
                    end
                    local point = fromSCurveSpace(SCurveTranform(toSCurveSpace(math.abs(axisValue))))
                    point = point * sign
                    return math.clamp(point, -1, 1)
                end
                return Vector2.new(onAxis(thumbstickPosition.x), onAxis(thumbstickPosition.y))
            end
            
            -- This function converts 4 different, redundant enumeration types to one standard so the values can be compared
            function CameraUtils.ConvertCameraModeEnumToStandard(enumValue)
                if enumValue == Enum.TouchCameraMovementMode.Default then
                    return Enum.ComputerCameraMovementMode.Follow
                end
            
                if enumValue == Enum.ComputerCameraMovementMode.Default then
                    return Enum.ComputerCameraMovementMode.Classic
                end
            
                if enumValue == Enum.TouchCameraMovementMode.Classic or
                    enumValue == Enum.DevTouchCameraMovementMode.Classic or
                    enumValue == Enum.DevComputerCameraMovementMode.Classic or
                    enumValue == Enum.ComputerCameraMovementMode.Classic then
                    return Enum.ComputerCameraMovementMode.Classic
                end
            
                if enumValue == Enum.TouchCameraMovementMode.Follow or
                    enumValue == Enum.DevTouchCameraMovementMode.Follow or
                    enumValue == Enum.DevComputerCameraMovementMode.Follow or
                    enumValue == Enum.ComputerCameraMovementMode.Follow then
                    return Enum.ComputerCameraMovementMode.Follow
                end
            
                if enumValue == Enum.TouchCameraMovementMode.Orbital or
                    enumValue == Enum.DevTouchCameraMovementMode.Orbital or
                    enumValue == Enum.DevComputerCameraMovementMode.Orbital or
                    enumValue == Enum.ComputerCameraMovementMode.Orbital then
                    return Enum.ComputerCameraMovementMode.Orbital
                end
            
                if FFlagUserCameraToggle then
                    if enumValue == Enum.ComputerCameraMovementMode.CameraToggle or
                        enumValue == Enum.DevComputerCameraMovementMode.CameraToggle then
                        return Enum.ComputerCameraMovementMode.CameraToggle
                    end
                end
            
                -- Note: Only the Dev versions of the Enums have UserChoice as an option
                if enumValue == Enum.DevTouchCameraMovementMode.UserChoice or
                    enumValue == Enum.DevComputerCameraMovementMode.UserChoice then
                    return Enum.DevComputerCameraMovementMode.UserChoice
                end
            
                -- For any unmapped options return Classic camera
                return Enum.ComputerCameraMovementMode.Classic
            end
            
            return CameraUtils
        end
        
        function _CameraModule()
            local CameraModule = {}
            CameraModule.__index = CameraModule
            
            local FFlagUserCameraToggle do
                local success, result = pcall(function()
                    return UserSettings():IsUserFeatureEnabled("UserCameraToggle")
                end)
                FFlagUserCameraToggle = success and result
            end
            
            local FFlagUserRemoveTheCameraApi do
                local success, result = pcall(function()
                    return UserSettings():IsUserFeatureEnabled("UserRemoveTheCameraApi")
                end)
                FFlagUserRemoveTheCameraApi = success and result
            end
            
            -- NOTICE: Player property names do not all match their StarterPlayer equivalents,
            -- with the differences noted in the comments on the right
            local PLAYER_CAMERA_PROPERTIES =
            {
                "CameraMinZoomDistance",
                "CameraMaxZoomDistance",
                "CameraMode",
                "DevCameraOcclusionMode",
                "DevComputerCameraMode",			-- Corresponds to StarterPlayer.DevComputerCameraMovementMode
                "DevTouchCameraMode",				-- Corresponds to StarterPlayer.DevTouchCameraMovementMode
            
                -- Character movement mode
                "DevComputerMovementMode",
                "DevTouchMovementMode",
                "DevEnableMouseLock",				-- Corresponds to StarterPlayer.EnableMouseLockOption
            }
            
            local USER_GAME_SETTINGS_PROPERTIES =
            {
                "ComputerCameraMovementMode",
                "ComputerMovementMode",
                "ControlMode",
                "GamepadCameraSensitivity",
                "MouseSensitivity",
                "RotationType",
                "TouchCameraMovementMode",
                "TouchMovementMode",
            }
            
            --[[ Roblox Services ]]--
            local Players = game:GetService("Players")
            local RunService = game:GetService("RunService")
            local UserInputService = game:GetService("UserInputService")
            local UserGameSettings = UserSettings():GetService("UserGameSettings")
            
            -- Camera math utility library
            local CameraUtils = _CameraUtils()
            
            -- Load Roblox Camera Controller Modules
            local ClassicCamera = _ClassicCamera()
            local OrbitalCamera = _OrbitalCamera()
            local LegacyCamera = _LegacyCamera()
            
            -- Load Roblox Occlusion Modules
            local Invisicam = _Invisicam()
            local Poppercam = _Poppercam()
            
            -- Load the near-field character transparency controller and the mouse lock "shift lock" controller
            local TransparencyController = _TransparencyController()
            local MouseLockController = _MouseLockController()
            
            -- Table of camera controllers that have been instantiated. They are instantiated as they are used.
            local instantiatedCameraControllers = {}
            local instantiatedOcclusionModules = {}
            
            -- Management of which options appear on the Roblox User Settings screen
            do
                local PlayerScripts = Players.LocalPlayer:WaitForChild("PlayerScripts")
            
                PlayerScripts:RegisterTouchCameraMovementMode(Enum.TouchCameraMovementMode.Default)
                PlayerScripts:RegisterTouchCameraMovementMode(Enum.TouchCameraMovementMode.Follow)
                PlayerScripts:RegisterTouchCameraMovementMode(Enum.TouchCameraMovementMode.Classic)
            
                PlayerScripts:RegisterComputerCameraMovementMode(Enum.ComputerCameraMovementMode.Default)
                PlayerScripts:RegisterComputerCameraMovementMode(Enum.ComputerCameraMovementMode.Follow)
                PlayerScripts:RegisterComputerCameraMovementMode(Enum.ComputerCameraMovementMode.Classic)
                if FFlagUserCameraToggle then
                    PlayerScripts:RegisterComputerCameraMovementMode(Enum.ComputerCameraMovementMode.CameraToggle)
                end
            end
            
            CameraModule.FFlagUserCameraToggle = FFlagUserCameraToggle
            
            
            function CameraModule.new()
                local self = setmetatable({},CameraModule)
            
                -- Current active controller instances
                self.activeCameraController = nil
                self.activeOcclusionModule = nil
                self.activeTransparencyController = nil
                self.activeMouseLockController = nil
            
                self.currentComputerCameraMovementMode = nil
            
                -- Connections to events
                self.cameraSubjectChangedConn = nil
                self.cameraTypeChangedConn = nil
            
                -- Adds CharacterAdded and CharacterRemoving event handlers for all current players
                for _,player in pairs(Players:GetPlayers()) do
                    self:OnPlayerAdded(player)
                end
            
                -- Adds CharacterAdded and CharacterRemoving event handlers for all players who join in the future
                Players.PlayerAdded:Connect(function(player)
                    self:OnPlayerAdded(player)
                end)
            
                self.activeTransparencyController = TransparencyController.new()
                self.activeTransparencyController:Enable(true)
            
                if not UserInputService.TouchEnabled then
                    self.activeMouseLockController = MouseLockController.new()
                    local toggleEvent = self.activeMouseLockController:GetBindableToggleEvent()
                    if toggleEvent then
                        toggleEvent:Connect(function()
                            self:OnMouseLockToggled()
                        end)
                    end
                end
            
                self:ActivateCameraController(self:GetCameraControlChoice())
                self:ActivateOcclusionModule(Players.LocalPlayer.DevCameraOcclusionMode)
                self:OnCurrentCameraChanged() -- Does initializations and makes first camera controller
                RunService:BindToRenderStep("cameraRenderUpdate", Enum.RenderPriority.Camera.Value, function(dt) self:Update(dt) end)
            
                -- Connect listeners to camera-related properties
                for _, propertyName in pairs(PLAYER_CAMERA_PROPERTIES) do
                    Players.LocalPlayer:GetPropertyChangedSignal(propertyName):Connect(function()
                        self:OnLocalPlayerCameraPropertyChanged(propertyName)
                    end)
                end
            
                for _, propertyName in pairs(USER_GAME_SETTINGS_PROPERTIES) do
                    UserGameSettings:GetPropertyChangedSignal(propertyName):Connect(function()
                        self:OnUserGameSettingsPropertyChanged(propertyName)
                    end)
                end
                game.Workspace:GetPropertyChangedSignal("CurrentCamera"):Connect(function()
                    self:OnCurrentCameraChanged()
                end)
            
                self.lastInputType = UserInputService:GetLastInputType()
                UserInputService.LastInputTypeChanged:Connect(function(newLastInputType)
                    self.lastInputType = newLastInputType
                end)
            
                return self
            end
            
            function CameraModule:GetCameraMovementModeFromSettings()
                local cameraMode = Players.LocalPlayer.CameraMode
            
                -- Lock First Person trumps all other settings and forces ClassicCamera
                if cameraMode == Enum.CameraMode.LockFirstPerson then
                    return CameraUtils.ConvertCameraModeEnumToStandard(Enum.ComputerCameraMovementMode.Classic)
                end
            
                local devMode, userMode
                if UserInputService.TouchEnabled then
                    devMode = CameraUtils.ConvertCameraModeEnumToStandard(Players.LocalPlayer.DevTouchCameraMode)
                    userMode = CameraUtils.ConvertCameraModeEnumToStandard(UserGameSettings.TouchCameraMovementMode)
                else
                    devMode = CameraUtils.ConvertCameraModeEnumToStandard(Players.LocalPlayer.DevComputerCameraMode)
                    userMode = CameraUtils.ConvertCameraModeEnumToStandard(UserGameSettings.ComputerCameraMovementMode)
                end
            
                if devMode == Enum.DevComputerCameraMovementMode.UserChoice then
                    -- Developer is allowing user choice, so user setting is respected
                    return userMode
                end
            
                return devMode
            end
            
            function CameraModule:ActivateOcclusionModule( occlusionMode )
                local newModuleCreator
                if occlusionMode == Enum.DevCameraOcclusionMode.Zoom then
                    newModuleCreator = Poppercam
                elseif occlusionMode == Enum.DevCameraOcclusionMode.Invisicam then
                    newModuleCreator = Invisicam
                else
                    warn("CameraScript ActivateOcclusionModule called with unsupported mode")
                    return
                end
            
                -- First check to see if there is actually a change. If the module being requested is already
                -- the currently-active solution then just make sure it's enabled and exit early
                if self.activeOcclusionModule and self.activeOcclusionModule:GetOcclusionMode() == occlusionMode then
                    if not self.activeOcclusionModule:GetEnabled() then
                        self.activeOcclusionModule:Enable(true)
                    end
                    return
                end
            
                -- Save a reference to the current active module (may be nil) so that we can disable it if
                -- we are successful in activating its replacement
                local prevOcclusionModule = self.activeOcclusionModule
            
                -- If there is no active module, see if the one we need has already been instantiated
                self.activeOcclusionModule = instantiatedOcclusionModules[newModuleCreator]
            
                -- If the module was not already instantiated and selected above, instantiate it
                if not self.activeOcclusionModule then
                    self.activeOcclusionModule = newModuleCreator.new()
                    if self.activeOcclusionModule then
                        instantiatedOcclusionModules[newModuleCreator] = self.activeOcclusionModule
                    end
                end
            
                -- If we were successful in either selecting or instantiating the module,
                -- enable it if it's not already the currently-active enabled module
                if self.activeOcclusionModule then
                    local newModuleOcclusionMode = self.activeOcclusionModule:GetOcclusionMode()
                    -- Sanity check that the module we selected or instantiated actually supports the desired occlusionMode
                    if newModuleOcclusionMode ~= occlusionMode then
                        warn("CameraScript ActivateOcclusionModule mismatch: ",self.activeOcclusionModule:GetOcclusionMode(),"~=",occlusionMode)
                    end
            
                    -- Deactivate current module if there is one
                    if prevOcclusionModule then
                        -- Sanity check that current module is not being replaced by itself (that should have been handled above)
                        if prevOcclusionModule ~= self.activeOcclusionModule then
                            prevOcclusionModule:Enable(false)
                        else
                            warn("CameraScript ActivateOcclusionModule failure to detect already running correct module")
                        end
                    end
            
                    -- Occlusion modules need to be initialized with information about characters and cameraSubject
                    -- Invisicam needs the LocalPlayer's character
                    -- Poppercam needs all player characters and the camera subject
                    if occlusionMode == Enum.DevCameraOcclusionMode.Invisicam then
                        -- Optimization to only send Invisicam what we know it needs
                        if Players.LocalPlayer.Character then
                            self.activeOcclusionModule:CharacterAdded(Players.LocalPlayer.Character, Players.LocalPlayer )
                        end
                    else
                        -- When Poppercam is enabled, we send it all existing player characters for its raycast ignore list
                        for _, player in pairs(Players:GetPlayers()) do
                            if player and player.Character then
                                self.activeOcclusionModule:CharacterAdded(player.Character, player)
                            end
                        end
                        self.activeOcclusionModule:OnCameraSubjectChanged(game.Workspace.CurrentCamera.CameraSubject)
                    end
            
                    -- Activate new choice
                    self.activeOcclusionModule:Enable(true)
                end
            end
            
            -- When supplied, legacyCameraType is used and cameraMovementMode is ignored (should be nil anyways)
            -- Next, if userCameraCreator is passed in, that is used as the cameraCreator
            function CameraModule:ActivateCameraController(cameraMovementMode, legacyCameraType)
                local newCameraCreator = nil
            
                if legacyCameraType~=nil then
                    --[[
                        This function has been passed a CameraType enum value. Some of these map to the use of
                        the LegacyCamera module, the value "Custom" will be translated to a movementMode enum
                        value based on Dev and User settings, and "Scriptable" will disable the camera controller.
                    --]]
            
                    if legacyCameraType == Enum.CameraType.Scriptable then
                        if self.activeCameraController then
                            self.activeCameraController:Enable(false)
                            self.activeCameraController = nil
                            return
                        end
                    elseif legacyCameraType == Enum.CameraType.Custom then
                        cameraMovementMode = self:GetCameraMovementModeFromSettings()
            
                    elseif legacyCameraType == Enum.CameraType.Track then
                        -- Note: The TrackCamera module was basically an older, less fully-featured
                        -- version of ClassicCamera, no longer actively maintained, but it is re-implemented in
                        -- case a game was dependent on its lack of ClassicCamera's extra functionality.
                        cameraMovementMode = Enum.ComputerCameraMovementMode.Classic
            
                    elseif legacyCameraType == Enum.CameraType.Follow then
                        cameraMovementMode = Enum.ComputerCameraMovementMode.Follow
            
                    elseif legacyCameraType == Enum.CameraType.Orbital then
                        cameraMovementMode = Enum.ComputerCameraMovementMode.Orbital
            
                    elseif legacyCameraType == Enum.CameraType.Attach or
                           legacyCameraType == Enum.CameraType.Watch or
                           legacyCameraType == Enum.CameraType.Fixed then
                        newCameraCreator = LegacyCamera
                    else
                        warn("CameraScript encountered an unhandled Camera.CameraType value: ",legacyCameraType)
                    end
                end
            
                if not newCameraCreator then
                    if cameraMovementMode == Enum.ComputerCameraMovementMode.Classic or
                        cameraMovementMode == Enum.ComputerCameraMovementMode.Follow or
                        cameraMovementMode == Enum.ComputerCameraMovementMode.Default or
                        (FFlagUserCameraToggle and cameraMovementMode == Enum.ComputerCameraMovementMode.CameraToggle) then
                        newCameraCreator = ClassicCamera
                    elseif cameraMovementMode == Enum.ComputerCameraMovementMode.Orbital then
                        newCameraCreator = OrbitalCamera
                    else
                        warn("ActivateCameraController did not select a module.")
                        return
                    end
                end
            
                -- Create the camera control module we need if it does not already exist in instantiatedCameraControllers
                local newCameraController
                if not instantiatedCameraControllers[newCameraCreator] then
                    newCameraController = newCameraCreator.new()
                    instantiatedCameraControllers[newCameraCreator] = newCameraController
                else
                    newCameraController = instantiatedCameraControllers[newCameraCreator]
                end
            
                -- If there is a controller active and it's not the one we need, disable it,
                -- if it is the one we need, make sure it's enabled
                if self.activeCameraController then
                    if self.activeCameraController ~= newCameraController then
                        self.activeCameraController:Enable(false)
                        self.activeCameraController = newCameraController
                        self.activeCameraController:Enable(true)
                    elseif not self.activeCameraController:GetEnabled() then
                        self.activeCameraController:Enable(true)
                    end
                elseif newCameraController ~= nil then
                    self.activeCameraController = newCameraController
                    self.activeCameraController:Enable(true)
                end
            
                if self.activeCameraController then
                    if cameraMovementMode~=nil then
                        self.activeCameraController:SetCameraMovementMode(cameraMovementMode)
                    elseif legacyCameraType~=nil then
                        -- Note that this is only called when legacyCameraType is not a type that
                        -- was convertible to a ComputerCameraMovementMode value, i.e. really only applies to LegacyCamera
                        self.activeCameraController:SetCameraType(legacyCameraType)
                    end
                end
            end
            
            -- Note: The active transparency controller could be made to listen for this event itself.
            function CameraModule:OnCameraSubjectChanged()
                if self.activeTransparencyController then
                    self.activeTransparencyController:SetSubject(game.Workspace.CurrentCamera.CameraSubject)
                end
            
                if self.activeOcclusionModule then
                    self.activeOcclusionModule:OnCameraSubjectChanged(game.Workspace.CurrentCamera.CameraSubject)
                end
            end
            
            function CameraModule:OnCameraTypeChanged(newCameraType)
                if newCameraType == Enum.CameraType.Scriptable then
                    if UserInputService.MouseBehavior == Enum.MouseBehavior.LockCenter then
                        UserInputService.MouseBehavior = Enum.MouseBehavior.Default
                    end
                end
            
                -- Forward the change to ActivateCameraController to handle
                self:ActivateCameraController(nil, newCameraType)
            end
            
            -- Note: Called whenever workspace.CurrentCamera changes, but also on initialization of this script
            function CameraModule:OnCurrentCameraChanged()
                local currentCamera = game.Workspace.CurrentCamera
                if not currentCamera then return end
            
                if self.cameraSubjectChangedConn then
                    self.cameraSubjectChangedConn:Disconnect()
                end
            
                if self.cameraTypeChangedConn then
                    self.cameraTypeChangedConn:Disconnect()
                end
            
                self.cameraSubjectChangedConn = currentCamera:GetPropertyChangedSignal("CameraSubject"):Connect(function()
                    self:OnCameraSubjectChanged(currentCamera.CameraSubject)
                end)
            
                self.cameraTypeChangedConn = currentCamera:GetPropertyChangedSignal("CameraType"):Connect(function()
                    self:OnCameraTypeChanged(currentCamera.CameraType)
                end)
            
                self:OnCameraSubjectChanged(currentCamera.CameraSubject)
                self:OnCameraTypeChanged(currentCamera.CameraType)
            end
            
            function CameraModule:OnLocalPlayerCameraPropertyChanged(propertyName)
                if propertyName == "CameraMode" then
                    -- CameraMode is only used to turn on/off forcing the player into first person view. The
                    -- Note: The case "Classic" is used for all other views and does not correspond only to the ClassicCamera module
                    if Players.LocalPlayer.CameraMode == Enum.CameraMode.LockFirstPerson then
                        -- Locked in first person, use ClassicCamera which supports this
                        if not self.activeCameraController or self.activeCameraController:GetModuleName() ~= "ClassicCamera" then
                            self:ActivateCameraController(CameraUtils.ConvertCameraModeEnumToStandard(Enum.DevComputerCameraMovementMode.Classic))
                        end
            
                        if self.activeCameraController then
                            self.activeCameraController:UpdateForDistancePropertyChange()
                        end
                    elseif Players.LocalPlayer.CameraMode == Enum.CameraMode.Classic then
                        -- Not locked in first person view
                        local cameraMovementMode =self: GetCameraMovementModeFromSettings()
                        self:ActivateCameraController(CameraUtils.ConvertCameraModeEnumToStandard(cameraMovementMode))
                    else
                        warn("Unhandled value for property player.CameraMode: ",Players.LocalPlayer.CameraMode)
                    end
            
                elseif propertyName == "DevComputerCameraMode" or 
                       propertyName == "DevTouchCameraMode" then
                    local cameraMovementMode = self:GetCameraMovementModeFromSettings()
                    self:ActivateCameraController(CameraUtils.ConvertCameraModeEnumToStandard(cameraMovementMode))
            
                elseif propertyName == "DevCameraOcclusionMode" then
                    self:ActivateOcclusionModule(Players.LocalPlayer.DevCameraOcclusionMode)
            
                elseif propertyName == "CameraMinZoomDistance" or propertyName == "CameraMaxZoomDistance" then
                    if self.activeCameraController then
                        self.activeCameraController:UpdateForDistancePropertyChange()
                    end
                elseif propertyName == "DevTouchMovementMode" then
                elseif propertyName == "DevComputerMovementMode" then
                elseif propertyName == "DevEnableMouseLock" then
                    -- This is the enabling/disabling of "Shift Lock" mode, not LockFirstPerson (which is a CameraMode)
                    -- Note: Enabling and disabling of MouseLock mode is normally only a publish-time choice made via
                    -- the corresponding EnableMouseLockOption checkbox of StarterPlayer, and this script does not have
                    -- support for changing the availability of MouseLock at runtime (this would require listening to
                    -- Player.DevEnableMouseLock changes)
                end
            end
            
            function CameraModule:OnUserGameSettingsPropertyChanged(propertyName)
                if propertyName == 	"ComputerCameraMovementMode" then
                    local cameraMovementMode = self:GetCameraMovementModeFromSettings()
                    self:ActivateCameraController(CameraUtils.ConvertCameraModeEnumToStandard(cameraMovementMode))
                end
            end
            
            --[[
                Main RenderStep Update. The camera controller and occlusion module both have opportunities
                to set and modify (respectively) the CFrame and Focus before it is set once on CurrentCamera.
                The camera and occlusion modules should only return CFrames, not set the CFrame property of
                CurrentCamera directly.
            --]]
            function CameraModule:Update(dt)
                if self.activeCameraController then
                    if FFlagUserCameraToggle then
                        self.activeCameraController:UpdateMouseBehavior()
                    end
            
                    local newCameraCFrame, newCameraFocus = self.activeCameraController:Update(dt)
                    self.activeCameraController:ApplyVRTransform()
                    if self.activeOcclusionModule then
                        newCameraCFrame, newCameraFocus = self.activeOcclusionModule:Update(dt, newCameraCFrame, newCameraFocus)
                    end
            
                    -- Here is where the new CFrame and Focus are set for this render frame
                    game.Workspace.CurrentCamera.CFrame = newCameraCFrame
                    game.Workspace.CurrentCamera.Focus = newCameraFocus
            
                    -- Update to character local transparency as needed based on camera-to-subject distance
                    if self.activeTransparencyController then
                        self.activeTransparencyController:Update()
                    end
                end
            end
            
            -- Formerly getCurrentCameraMode, this function resolves developer and user camera control settings to
            -- decide which camera control module should be instantiated. The old method of converting redundant enum types
            function CameraModule:GetCameraControlChoice()
                local player = Players.LocalPlayer
            
                if player then
                    if self.lastInputType == Enum.UserInputType.Touch or UserInputService.TouchEnabled then
                        -- Touch
                        if player.DevTouchCameraMode == Enum.DevTouchCameraMovementMode.UserChoice then
                            return CameraUtils.ConvertCameraModeEnumToStandard( UserGameSettings.TouchCameraMovementMode )
                        else
                            return CameraUtils.ConvertCameraModeEnumToStandard( player.DevTouchCameraMode )
                        end
                    else
                        -- Computer
                        if player.DevComputerCameraMode == Enum.DevComputerCameraMovementMode.UserChoice then
                            local computerMovementMode = CameraUtils.ConvertCameraModeEnumToStandard(UserGameSettings.ComputerCameraMovementMode)
                            return CameraUtils.ConvertCameraModeEnumToStandard(computerMovementMode)
                        else
                            return CameraUtils.ConvertCameraModeEnumToStandard(player.DevComputerCameraMode)
                        end
                    end
                end
            end
            
            function CameraModule:OnCharacterAdded(char, player)
                if self.activeOcclusionModule then
                    self.activeOcclusionModule:CharacterAdded(char, player)
                end
            end
            
            function CameraModule:OnCharacterRemoving(char, player)
                if self.activeOcclusionModule then
                    self.activeOcclusionModule:CharacterRemoving(char, player)
                end
            end
            
            function CameraModule:OnPlayerAdded(player)
                player.CharacterAdded:Connect(function(char)
                    self:OnCharacterAdded(char, player)
                end)
                player.CharacterRemoving:Connect(function(char)
                    self:OnCharacterRemoving(char, player)
                end)
            end
            
            function CameraModule:OnMouseLockToggled()
                if self.activeMouseLockController then
                    local mouseLocked = self.activeMouseLockController:GetIsMouseLocked()
                    local mouseLockOffset = self.activeMouseLockController:GetMouseLockOffset()
                    if self.activeCameraController then
                        self.activeCameraController:SetIsMouseLocked(mouseLocked)
                        self.activeCameraController:SetMouseLockOffset(mouseLockOffset)
                    end
                end
            end
            --begin edit
            local Camera = CameraModule
            local IDENTITYCF = CFrame.new()
            local lastUpCFrame = IDENTITYCF
            
            Camera.UpVector = Vector3.new(0, 1, 0)
            Camera.TransitionRate = 0.15
            Camera.UpCFrame = IDENTITYCF
            
            function Camera:GetUpVector(oldUpVector)
                return oldUpVector
            end
            local function getRotationBetween(u, v, axis)
                local dot, uxv = u:Dot(v), u:Cross(v)
                if (dot < -0.99999) then return CFrame.fromAxisAngle(axis, math.pi) end
                return CFrame.new(0, 0, 0, uxv.x, uxv.y, uxv.z, 1 + dot)
            end
            function Camera:CalculateUpCFrame()
                local oldUpVector = self.UpVector
                local newUpVector = self:GetUpVector(oldUpVector)
                
                local backup = game.Workspace.CurrentCamera.CFrame.RightVector
                local transitionCF = getRotationBetween(oldUpVector, newUpVector, backup)
                local vecSlerpCF = IDENTITYCF:Lerp(transitionCF, self.TransitionRate)
                
                self.UpVector = vecSlerpCF * oldUpVector
                self.UpCFrame = vecSlerpCF * self.UpCFrame
                
                lastUpCFrame = self.UpCFrame
            end
            
            function Camera:Update(dt)
                if self.activeCameraController then
                    if Camera.FFlagUserCameraToggle then
                        self.activeCameraController:UpdateMouseBehavior()
                    end
                    
                    local newCameraCFrame, newCameraFocus = self.activeCameraController:Update(dt)
                    self.activeCameraController:ApplyVRTransform()
                    
                    self:CalculateUpCFrame()
                    self.activeCameraController:UpdateUpCFrame(self.UpCFrame)
                    
                    -- undo shift-lock offset
            
                    local lockOffset = Vector3.new(0, 0, 0)
                    if (self.activeMouseLockController and self.activeMouseLockController:GetIsMouseLocked()) then
                        lockOffset = self.activeMouseLockController:GetMouseLockOffset()
                    end
                    
                    local offset = newCameraFocus:ToObjectSpace(newCameraCFrame)
                    local camRotation = self.UpCFrame * offset
                    newCameraFocus = newCameraFocus - newCameraCFrame:VectorToWorldSpace(lockOffset) + camRotation:VectorToWorldSpace(lockOffset)
                    newCameraCFrame = newCameraFocus * camRotation
                    
                    --local offset = newCameraFocus:Inverse() * newCameraCFrame
                    --newCameraCFrame = newCameraFocus * self.UpCFrame * offset
                    
                    if (self.activeCameraController.lastCameraTransform) then
                        self.activeCameraController.lastCameraTransform = newCameraCFrame
                        self.activeCameraController.lastCameraFocus = newCameraFocus
                    end
                    
                    if self.activeOcclusionModule then
                        newCameraCFrame, newCameraFocus = self.activeOcclusionModule:Update(dt, newCameraCFrame, newCameraFocus)
                    end
            
                    game.Workspace.CurrentCamera.CFrame = newCameraCFrame
                    game.Workspace.CurrentCamera.Focus = newCameraFocus
            
                    if self.activeTransparencyController then
                        self.activeTransparencyController:Update()
                    end
                end
            end
            
            function Camera:IsFirstPerson()
                if self.activeCameraController then
                    return self.activeCameraController:InFirstPerson()
                end
                return false
            end
            
            function Camera:IsMouseLocked()
                if self.activeCameraController then
                    return self.activeCameraController:GetIsMouseLocked()
                end
                return false
            end
            function Camera:IsToggleMode()
                if self.activeCameraController then
                    return self.activeCameraController.isCameraToggle
                end
                return false
            end
            function Camera:IsCamRelative()
                return self:IsMouseLocked() or self:IsFirstPerson()
                --return self:IsToggleMode(), self:IsMouseLocked(), self:IsFirstPerson()
            end
            --
            local Utils = _CameraUtils()
            function Utils.GetAngleBetweenXZVectors(v1, v2)
                local upCFrame = lastUpCFrame
                v1 = upCFrame:VectorToObjectSpace(v1)
                v2 = upCFrame:VectorToObjectSpace(v2)
                return math.atan2(v2.X*v1.Z-v2.Z*v1.X, v2.X*v1.X+v2.Z*v1.Z)
            end
            --end edit
            local cameraModuleObject = CameraModule.new()
            local cameraApi = {}
            return cameraModuleObject
        end
        
        function _ClickToMoveDisplay()
            local ClickToMoveDisplay = {}
            
            local FAILURE_ANIMATION_ID = "rbxassetid://2874840706"
            
            local TrailDotIcon = "rbxasset://textures/ui/traildot.png"
            local EndWaypointIcon = "rbxasset://textures/ui/waypoint.png"
            
            local WaypointsAlwaysOnTop = false
            
            local WAYPOINT_INCLUDE_FACTOR = 2
            local LAST_DOT_DISTANCE = 3
            
            local WAYPOINT_BILLBOARD_SIZE = UDim2.new(0, 1.68 * 25, 0, 2 * 25)
            
            local ENDWAYPOINT_SIZE_OFFSET_MIN = Vector2.new(0, 0.5)
            local ENDWAYPOINT_SIZE_OFFSET_MAX = Vector2.new(0, 1)
            
            local FAIL_WAYPOINT_SIZE_OFFSET_CENTER = Vector2.new(0, 0.5)
            local FAIL_WAYPOINT_SIZE_OFFSET_LEFT = Vector2.new(0.1, 0.5)
            local FAIL_WAYPOINT_SIZE_OFFSET_RIGHT = Vector2.new(-0.1, 0.5)
            
            local FAILURE_TWEEN_LENGTH = 0.125
            local FAILURE_TWEEN_COUNT = 4
            
            local TWEEN_WAYPOINT_THRESHOLD = 5
            
            local TRAIL_DOT_PARENT_NAME = "ClickToMoveDisplay"
            
            local TrailDotSize = Vector2.new(1.5, 1.5)
            
            local TRAIL_DOT_MIN_SCALE = 1
            local TRAIL_DOT_MIN_DISTANCE = 10
            local TRAIL_DOT_MAX_SCALE = 2.5
            local TRAIL_DOT_MAX_DISTANCE = 100
            
            local PlayersService = game:GetService("Players")
            local TweenService = game:GetService("TweenService")
            local RunService = game:GetService("RunService")
            local Workspace = game:GetService("Workspace")
            
            local LocalPlayer = PlayersService.LocalPlayer
            
            local function CreateWaypointTemplates()
                local TrailDotTemplate = Instance.new("Part")
                TrailDotTemplate.Size = Vector3.new(1, 1, 1)
                TrailDotTemplate.Anchored = true
                TrailDotTemplate.CanCollide = false
                TrailDotTemplate.Name = "TrailDot"
                TrailDotTemplate.Transparency = 1
                local TrailDotImage = Instance.new("ImageHandleAdornment")
                TrailDotImage.Name = "TrailDotImage"
                TrailDotImage.Size = TrailDotSize
                TrailDotImage.SizeRelativeOffset = Vector3.new(0, 0, -0.1)
                TrailDotImage.AlwaysOnTop = WaypointsAlwaysOnTop
                TrailDotImage.Image = TrailDotIcon
                TrailDotImage.Adornee = TrailDotTemplate
                TrailDotImage.Parent = TrailDotTemplate
            
                local EndWaypointTemplate = Instance.new("Part")
                EndWaypointTemplate.Size = Vector3.new(2, 2, 2)
                EndWaypointTemplate.Anchored = true
                EndWaypointTemplate.CanCollide = false
                EndWaypointTemplate.Name = "EndWaypoint"
                EndWaypointTemplate.Transparency = 1
                local EndWaypointImage = Instance.new("ImageHandleAdornment")
                EndWaypointImage.Name = "TrailDotImage"
                EndWaypointImage.Size = TrailDotSize
                EndWaypointImage.SizeRelativeOffset = Vector3.new(0, 0, -0.1)
                EndWaypointImage.AlwaysOnTop = WaypointsAlwaysOnTop
                EndWaypointImage.Image = TrailDotIcon
                EndWaypointImage.Adornee = EndWaypointTemplate
                EndWaypointImage.Parent = EndWaypointTemplate
                local EndWaypointBillboard = Instance.new("BillboardGui")
                EndWaypointBillboard.Name = "EndWaypointBillboard"
                EndWaypointBillboard.Size = WAYPOINT_BILLBOARD_SIZE
                EndWaypointBillboard.LightInfluence = 0
                EndWaypointBillboard.SizeOffset = ENDWAYPOINT_SIZE_OFFSET_MIN
                EndWaypointBillboard.AlwaysOnTop = true
                EndWaypointBillboard.Adornee = EndWaypointTemplate
                EndWaypointBillboard.Parent = EndWaypointTemplate
                local EndWaypointImageLabel = Instance.new("ImageLabel")
                EndWaypointImageLabel.Image = EndWaypointIcon
                EndWaypointImageLabel.BackgroundTransparency = 1
                EndWaypointImageLabel.Size = UDim2.new(1, 0, 1, 0)
                EndWaypointImageLabel.Parent = EndWaypointBillboard
            
            
                local FailureWaypointTemplate = Instance.new("Part")
                FailureWaypointTemplate.Size = Vector3.new(2, 2, 2)
                FailureWaypointTemplate.Anchored = true
                FailureWaypointTemplate.CanCollide = false
                FailureWaypointTemplate.Name = "FailureWaypoint"
                FailureWaypointTemplate.Transparency = 1
                local FailureWaypointImage = Instance.new("ImageHandleAdornment")
                FailureWaypointImage.Name = "TrailDotImage"
                FailureWaypointImage.Size = TrailDotSize
                FailureWaypointImage.SizeRelativeOffset = Vector3.new(0, 0, -0.1)
                FailureWaypointImage.AlwaysOnTop = WaypointsAlwaysOnTop
                FailureWaypointImage.Image = TrailDotIcon
                FailureWaypointImage.Adornee = FailureWaypointTemplate
                FailureWaypointImage.Parent = FailureWaypointTemplate
                local FailureWaypointBillboard = Instance.new("BillboardGui")
                FailureWaypointBillboard.Name = "FailureWaypointBillboard"
                FailureWaypointBillboard.Size = WAYPOINT_BILLBOARD_SIZE
                FailureWaypointBillboard.LightInfluence = 0
                FailureWaypointBillboard.SizeOffset = FAIL_WAYPOINT_SIZE_OFFSET_CENTER
                FailureWaypointBillboard.AlwaysOnTop = true
                FailureWaypointBillboard.Adornee = FailureWaypointTemplate
                FailureWaypointBillboard.Parent = FailureWaypointTemplate
                local FailureWaypointFrame = Instance.new("Frame")
                FailureWaypointFrame.BackgroundTransparency = 1
                FailureWaypointFrame.Size = UDim2.new(0, 0, 0, 0)
                FailureWaypointFrame.Position = UDim2.new(0.5, 0, 1, 0)
                FailureWaypointFrame.Parent = FailureWaypointBillboard
                local FailureWaypointImageLabel = Instance.new("ImageLabel")
                FailureWaypointImageLabel.Image = EndWaypointIcon
                FailureWaypointImageLabel.BackgroundTransparency = 1
                FailureWaypointImageLabel.Position = UDim2.new(
                    0, -WAYPOINT_BILLBOARD_SIZE.X.Offset/2, 0, -WAYPOINT_BILLBOARD_SIZE.Y.Offset
                )
                FailureWaypointImageLabel.Size = WAYPOINT_BILLBOARD_SIZE
                FailureWaypointImageLabel.Parent = FailureWaypointFrame
            
                return TrailDotTemplate, EndWaypointTemplate, FailureWaypointTemplate
            end
            
            local TrailDotTemplate, EndWaypointTemplate, FailureWaypointTemplate = CreateWaypointTemplates()
            
            local function getTrailDotParent()
                local camera = Workspace.CurrentCamera
                local trailParent = camera:FindFirstChild(TRAIL_DOT_PARENT_NAME)
                if not trailParent then
                    trailParent = Instance.new("Model")
                    trailParent.Name = TRAIL_DOT_PARENT_NAME
                    trailParent.Parent = camera
                end
                return trailParent
            end
            
            local function placePathWaypoint(waypointModel, position)
                local ray = Ray.new(position + Vector3.new(0, 2.5, 0), Vector3.new(0, -10, 0))
                local hitPart, hitPoint, hitNormal = Workspace:FindPartOnRayWithIgnoreList(
                    ray,
                    { Workspace.CurrentCamera, LocalPlayer.Character }
                )
                if hitPart then
                    waypointModel.CFrame = CFrame.new(hitPoint, hitPoint + hitNormal)
                    waypointModel.Parent = getTrailDotParent()
                end
            end
            
            local TrailDot = {}
            TrailDot.__index = TrailDot
            
            function TrailDot:Destroy()
                self.DisplayModel:Destroy()
            end
            
            function TrailDot:NewDisplayModel(position)
                local newDisplayModel = TrailDotTemplate:Clone()
                placePathWaypoint(newDisplayModel, position)
                return newDisplayModel
            end
            
            function TrailDot.new(position, closestWaypoint)
                local self = setmetatable({}, TrailDot)
            
                self.DisplayModel = self:NewDisplayModel(position)
                self.ClosestWayPoint = closestWaypoint
            
                return self
            end
            
            local EndWaypoint = {}
            EndWaypoint.__index = EndWaypoint
            
            function EndWaypoint:Destroy()
                self.Destroyed = true
                self.Tween:Cancel()
                self.DisplayModel:Destroy()
            end
            
            function EndWaypoint:NewDisplayModel(position)
                local newDisplayModel = EndWaypointTemplate:Clone()
                placePathWaypoint(newDisplayModel, position)
                return newDisplayModel
            end
            
            function EndWaypoint:CreateTween()
                local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Sine, Enum.EasingDirection.Out, -1, true)
                local tween = TweenService:Create(
                    self.DisplayModel.EndWaypointBillboard,
                    tweenInfo,
                    { SizeOffset = ENDWAYPOINT_SIZE_OFFSET_MAX }
                )
                tween:Play()
                return tween
            end
            
            function EndWaypoint:TweenInFrom(originalPosition)
                local currentPositon = self.DisplayModel.Position
                local studsOffset = originalPosition - currentPositon
                self.DisplayModel.EndWaypointBillboard.StudsOffset = Vector3.new(0, studsOffset.Y, 0)
                local tweenInfo = TweenInfo.new(1, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)
                local tween = TweenService:Create(
                    self.DisplayModel.EndWaypointBillboard,
                    tweenInfo,
                    { StudsOffset = Vector3.new(0, 0, 0) }
                )
                tween:Play()
                return tween
            end
            
            function EndWaypoint.new(position, closestWaypoint, originalPosition)
                local self = setmetatable({}, EndWaypoint)
            
                self.DisplayModel = self:NewDisplayModel(position)
                self.Destroyed = false
                if originalPosition and (originalPosition - position).magnitude > TWEEN_WAYPOINT_THRESHOLD then
                    self.Tween = self:TweenInFrom(originalPosition)
                    coroutine.wrap(function()
                        self.Tween.Completed:Wait()
                        if not self.Destroyed then
                            self.Tween = self:CreateTween()
                        end
                    end)()
                else
                    self.Tween = self:CreateTween()
                end
                self.ClosestWayPoint = closestWaypoint
            
                return self
            end
            
            local FailureWaypoint = {}
            FailureWaypoint.__index = FailureWaypoint
            
            function FailureWaypoint:Hide()
                self.DisplayModel.Parent = nil
            end
            
            function FailureWaypoint:Destroy()
                self.DisplayModel:Destroy()
            end
            
            function FailureWaypoint:NewDisplayModel(position)
                local newDisplayModel = FailureWaypointTemplate:Clone()
                placePathWaypoint(newDisplayModel, position)
                local ray = Ray.new(position + Vector3.new(0, 2.5, 0), Vector3.new(0, -10, 0))
                local hitPart, hitPoint, hitNormal = Workspace:FindPartOnRayWithIgnoreList(
                    ray, { Workspace.CurrentCamera, LocalPlayer.Character }
                )
                if hitPart then
                    newDisplayModel.CFrame = CFrame.new(hitPoint, hitPoint + hitNormal)
                    newDisplayModel.Parent = getTrailDotParent()
                end
                return newDisplayModel
            end
            
            function FailureWaypoint:RunFailureTween()
                wait(FAILURE_TWEEN_LENGTH) -- Delay one tween length betfore starting tweening
                -- Tween out from center
                local tweenInfo = TweenInfo.new(FAILURE_TWEEN_LENGTH/2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)
                local tweenLeft = TweenService:Create(self.DisplayModel.FailureWaypointBillboard, tweenInfo,
                    { SizeOffset = FAIL_WAYPOINT_SIZE_OFFSET_LEFT })
                tweenLeft:Play()
            
                local tweenLeftRoation = TweenService:Create(self.DisplayModel.FailureWaypointBillboard.Frame, tweenInfo,
                    { Rotation = 10 })
                tweenLeftRoation:Play()
            
                tweenLeft.Completed:wait()
            
                -- Tween back and forth
                tweenInfo = TweenInfo.new(FAILURE_TWEEN_LENGTH, Enum.EasingStyle.Sine, Enum.EasingDirection.Out,
                    FAILURE_TWEEN_COUNT - 1, true)
                local tweenSideToSide = TweenService:Create(self.DisplayModel.FailureWaypointBillboard, tweenInfo,
                    { SizeOffset = FAIL_WAYPOINT_SIZE_OFFSET_RIGHT})
                tweenSideToSide:Play()
            
                -- Tween flash dark and roate left and right
                tweenInfo = TweenInfo.new(FAILURE_TWEEN_LENGTH, Enum.EasingStyle.Sine, Enum.EasingDirection.Out,
                    FAILURE_TWEEN_COUNT - 1, true)
                local tweenFlash = TweenService:Create(self.DisplayModel.FailureWaypointBillboard.Frame.ImageLabel, tweenInfo,
                    { ImageColor3 = Color3.new(0.75, 0.75, 0.75)})
                tweenFlash:Play()
            
                local tweenRotate = TweenService:Create(self.DisplayModel.FailureWaypointBillboard.Frame, tweenInfo,
                    { Rotation = -10 })
                tweenRotate:Play()
            
                tweenSideToSide.Completed:wait()
            
                -- Tween back to center
                tweenInfo = TweenInfo.new(FAILURE_TWEEN_LENGTH/2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)
                local tweenCenter = TweenService:Create(self.DisplayModel.FailureWaypointBillboard, tweenInfo,
                    { SizeOffset = FAIL_WAYPOINT_SIZE_OFFSET_CENTER })
                tweenCenter:Play()
            
                local tweenRoation = TweenService:Create(self.DisplayModel.FailureWaypointBillboard.Frame, tweenInfo,
                    { Rotation = 0 })
                tweenRoation:Play()
            
                tweenCenter.Completed:wait()
            
                wait(FAILURE_TWEEN_LENGTH) -- Delay one tween length betfore removing
            end
            
            function FailureWaypoint.new(position)
                local self = setmetatable({}, FailureWaypoint)
            
                self.DisplayModel = self:NewDisplayModel(position)
            
                return self
            end
            
            local failureAnimation = Instance.new("Animation")
            failureAnimation.AnimationId = FAILURE_ANIMATION_ID
            
            local lastHumanoid = nil
            local lastFailureAnimationTrack = nil
            
            local function getFailureAnimationTrack(myHumanoid)
                if myHumanoid == lastHumanoid then
                    return lastFailureAnimationTrack
                end
                lastFailureAnimationTrack = myHumanoid:LoadAnimation(failureAnimation)
                lastFailureAnimationTrack.Priority = Enum.AnimationPriority.Action
                lastFailureAnimationTrack.Looped = false
                return lastFailureAnimationTrack
            end
            
            local function findPlayerHumanoid()
                local character = LocalPlayer.Character
                if character then
                    return character:FindFirstChildOfClass("Humanoid")
                end
            end
            
            local function createTrailDots(wayPoints, originalEndWaypoint)
                local newTrailDots = {}
                local count = 1
                for i = 1, #wayPoints - 1 do
                    local closeToEnd = (wayPoints[i].Position - wayPoints[#wayPoints].Position).magnitude < LAST_DOT_DISTANCE
                    local includeWaypoint = i % WAYPOINT_INCLUDE_FACTOR == 0 and not closeToEnd
                    if includeWaypoint then
                        local trailDot = TrailDot.new(wayPoints[i].Position, i)
                        newTrailDots[count] = trailDot
                        count = count + 1
                    end
                end
            
                local newEndWaypoint = EndWaypoint.new(wayPoints[#wayPoints].Position, #wayPoints, originalEndWaypoint)
                table.insert(newTrailDots, newEndWaypoint)
            
                local reversedTrailDots = {}
                count = 1
                for i = #newTrailDots, 1, -1 do
                    reversedTrailDots[count] = newTrailDots[i]
                    count = count + 1
                end
                return reversedTrailDots
            end
            
            local function getTrailDotScale(distanceToCamera, defaultSize)
                local rangeLength = TRAIL_DOT_MAX_DISTANCE - TRAIL_DOT_MIN_DISTANCE
                local inRangePoint = math.clamp(distanceToCamera - TRAIL_DOT_MIN_DISTANCE, 0, rangeLength)/rangeLength
                local scale = TRAIL_DOT_MIN_SCALE + (TRAIL_DOT_MAX_SCALE - TRAIL_DOT_MIN_SCALE)*inRangePoint
                return defaultSize * scale
            end
            
            local createPathCount = 0
            -- originalEndWaypoint is optional, causes the waypoint to tween from that position.
            function ClickToMoveDisplay.CreatePathDisplay(wayPoints, originalEndWaypoint)
                createPathCount = createPathCount + 1
                local trailDots = createTrailDots(wayPoints, originalEndWaypoint)
            
                local function removePathBeforePoint(wayPointNumber)
                    -- kill all trailDots before and at wayPointNumber
                    for i = #trailDots, 1, -1 do
                        local trailDot = trailDots[i]
                        if trailDot.ClosestWayPoint <= wayPointNumber then
                            trailDot:Destroy()
                            trailDots[i] = nil
                        else
                            break
                        end
                    end
                end
            
                local reiszeTrailDotsUpdateName = "ClickToMoveResizeTrail" ..createPathCount
                local function resizeTrailDots()
                    if #trailDots == 0 then
                        RunService:UnbindFromRenderStep(reiszeTrailDotsUpdateName)
                        return
                    end
                    local cameraPos = Workspace.CurrentCamera.CFrame.p
                    for i = 1, #trailDots do
                        local trailDotImage = trailDots[i].DisplayModel:FindFirstChild("TrailDotImage")
                        if trailDotImage then
                            local distanceToCamera = (trailDots[i].DisplayModel.Position - cameraPos).magnitude
                            trailDotImage.Size = getTrailDotScale(distanceToCamera, TrailDotSize)
                        end
                    end
                end
                RunService:BindToRenderStep(reiszeTrailDotsUpdateName, Enum.RenderPriority.Camera.Value - 1, resizeTrailDots)
            
                local function removePath()
                    removePathBeforePoint(#wayPoints)
                end
            
                return removePath, removePathBeforePoint
            end
            
            local lastFailureWaypoint = nil
            function ClickToMoveDisplay.DisplayFailureWaypoint(position)
                if lastFailureWaypoint then
                    lastFailureWaypoint:Hide()
                end
                local failureWaypoint = FailureWaypoint.new(position)
                lastFailureWaypoint = failureWaypoint
                coroutine.wrap(function()
                    failureWaypoint:RunFailureTween()
                    failureWaypoint:Destroy()
                    failureWaypoint = nil
                end)()
            end
            
            function ClickToMoveDisplay.CreateEndWaypoint(position)
                return EndWaypoint.new(position)
            end
            
            function ClickToMoveDisplay.PlayFailureAnimation()
                local myHumanoid = findPlayerHumanoid()
                if myHumanoid then
                    local animationTrack = getFailureAnimationTrack(myHumanoid)
                    animationTrack:Play()
                end
            end
            
            function ClickToMoveDisplay.CancelFailureAnimation()
                if lastFailureAnimationTrack ~= nil and lastFailureAnimationTrack.IsPlaying then
                    lastFailureAnimationTrack:Stop()
                end
            end
            
            function ClickToMoveDisplay.SetWaypointTexture(texture)
                TrailDotIcon = texture
                TrailDotTemplate, EndWaypointTemplate, FailureWaypointTemplate = CreateWaypointTemplates()
            end
            
            function ClickToMoveDisplay.GetWaypointTexture()
                return TrailDotIcon
            end
            
            function ClickToMoveDisplay.SetWaypointRadius(radius)
                TrailDotSize = Vector2.new(radius, radius)
                TrailDotTemplate, EndWaypointTemplate, FailureWaypointTemplate = CreateWaypointTemplates()
            end
            
            function ClickToMoveDisplay.GetWaypointRadius()
                return TrailDotSize.X
            end
            
            function ClickToMoveDisplay.SetEndWaypointTexture(texture)
                EndWaypointIcon = texture
                TrailDotTemplate, EndWaypointTemplate, FailureWaypointTemplate = CreateWaypointTemplates()
            end
            
            function ClickToMoveDisplay.GetEndWaypointTexture()
                return EndWaypointIcon
            end
            
            function ClickToMoveDisplay.SetWaypointsAlwaysOnTop(alwaysOnTop)
                WaypointsAlwaysOnTop = alwaysOnTop
                TrailDotTemplate, EndWaypointTemplate, FailureWaypointTemplate = CreateWaypointTemplates()
            end
            
            function ClickToMoveDisplay.GetWaypointsAlwaysOnTop()
                return WaypointsAlwaysOnTop
            end
            
            return ClickToMoveDisplay
        end
        
        function _BaseCharacterController()
        
            local ZERO_VECTOR3 = Vector3.new(0,0,0)
            
            --[[ The Module ]]--
            local BaseCharacterController = {}
            BaseCharacterController.__index = BaseCharacterController
            
            function BaseCharacterController.new()
                local self = setmetatable({}, BaseCharacterController)
                self.enabled = false
                self.moveVector = ZERO_VECTOR3
                self.moveVectorIsCameraRelative = true
                self.isJumping = false
                return self
            end
            
            function BaseCharacterController:OnRenderStepped(dt)
                -- By default, nothing to do
            end
            
            function BaseCharacterController:GetMoveVector()
                return self.moveVector
            end
            
            function BaseCharacterController:IsMoveVectorCameraRelative()
                return self.moveVectorIsCameraRelative
            end
            
            function BaseCharacterController:GetIsJumping()
                return self.isJumping
            end
            
            -- Override in derived classes to set self.enabled and return boolean indicating
            -- whether Enable/Disable was successful. Return true if controller is already in the requested state.
            function BaseCharacterController:Enable(enable)
                error("BaseCharacterController:Enable must be overridden in derived classes and should not be called.")
                return false
            end
            
            return BaseCharacterController
        end
        
        function _VehicleController()
            local ContextActionService = game:GetService("ContextActionService")
            
            --[[ Constants ]]--
            -- Set this to true if you want to instead use the triggers for the throttle
            local useTriggersForThrottle = true
            -- Also set this to true if you want the thumbstick to not affect throttle, only triggers when a gamepad is conected
            local onlyTriggersForThrottle = false
            local ZERO_VECTOR3 = Vector3.new(0,0,0)
            
            local AUTO_PILOT_DEFAULT_MAX_STEERING_ANGLE = 35
            
            
            -- Note that VehicleController does not derive from BaseCharacterController, it is a special case
            local VehicleController = {}
            VehicleController.__index = VehicleController
            
            function VehicleController.new(CONTROL_ACTION_PRIORITY)
                local self = setmetatable({}, VehicleController)
            
                self.CONTROL_ACTION_PRIORITY = CONTROL_ACTION_PRIORITY
            
                self.enabled = false
                self.vehicleSeat = nil
                self.throttle = 0
                self.steer = 0
            
                self.acceleration = 0
                self.decceleration = 0
                self.turningRight = 0
                self.turningLeft = 0
            
                self.vehicleMoveVector = ZERO_VECTOR3
            
                self.autoPilot = {}
                self.autoPilot.MaxSpeed = 0
                self.autoPilot.MaxSteeringAngle = 0
            
                return self
            end
            
            function VehicleController:BindContextActions()
                if useTriggersForThrottle then
                    ContextActionService:BindActionAtPriority("throttleAccel", (function(actionName, inputState, inputObject)
                        self:OnThrottleAccel(actionName, inputState, inputObject)
                        return Enum.ContextActionResult.Pass
                    end), false, self.CONTROL_ACTION_PRIORITY, Enum.KeyCode.ButtonR2)
                    ContextActionService:BindActionAtPriority("throttleDeccel", (function(actionName, inputState, inputObject)
                        self:OnThrottleDeccel(actionName, inputState, inputObject)
                        return Enum.ContextActionResult.Pass
                    end), false, self.CONTROL_ACTION_PRIORITY, Enum.KeyCode.ButtonL2)
                end
                ContextActionService:BindActionAtPriority("arrowSteerRight", (function(actionName, inputState, inputObject)
                    self:OnSteerRight(actionName, inputState, inputObject)
                    return Enum.ContextActionResult.Pass
                end), false, self.CONTROL_ACTION_PRIORITY, Enum.KeyCode.Right)
                ContextActionService:BindActionAtPriority("arrowSteerLeft", (function(actionName, inputState, inputObject)
                    self:OnSteerLeft(actionName, inputState, inputObject)
                    return Enum.ContextActionResult.Pass
                end), false, self.CONTROL_ACTION_PRIORITY, Enum.KeyCode.Left)
            end
            
            function VehicleController:Enable(enable, vehicleSeat)
                if enable == self.enabled and vehicleSeat == self.vehicleSeat then
                    return
                end
            
                self.enabled = enable
                self.vehicleMoveVector = ZERO_VECTOR3
            
                if enable then
                    if vehicleSeat then
                        self.vehicleSeat = vehicleSeat
            
                        self:SetupAutoPilot()
                        self:BindContextActions()
                    end
                else
                    if useTriggersForThrottle then
                        ContextActionService:UnbindAction("throttleAccel")
                        ContextActionService:UnbindAction("throttleDeccel")
                    end
                    ContextActionService:UnbindAction("arrowSteerRight")
                    ContextActionService:UnbindAction("arrowSteerLeft")
                    self.vehicleSeat = nil
                end
            end
            
            function VehicleController:OnThrottleAccel(actionName, inputState, inputObject)
                if inputState == Enum.UserInputState.End or inputState == Enum.UserInputState.Cancel then
                    self.acceleration = 0
                else
                    self.acceleration = -1
                end
                self.throttle = self.acceleration + self.decceleration
            end
            
            function VehicleController:OnThrottleDeccel(actionName, inputState, inputObject)
                if inputState == Enum.UserInputState.End or inputState == Enum.UserInputState.Cancel then
                    self.decceleration = 0
                else
                    self.decceleration = 1
                end
                self.throttle = self.acceleration + self.decceleration
            end
            
            function VehicleController:OnSteerRight(actionName, inputState, inputObject)
                if inputState == Enum.UserInputState.End or inputState == Enum.UserInputState.Cancel then
                    self.turningRight = 0
                else
                    self.turningRight = 1
                end
                self.steer = self.turningRight + self.turningLeft
            end
            
            function VehicleController:OnSteerLeft(actionName, inputState, inputObject)
                if inputState == Enum.UserInputState.End or inputState == Enum.UserInputState.Cancel then
                    self.turningLeft = 0
                else
                    self.turningLeft = -1
                end
                self.steer = self.turningRight + self.turningLeft
            end
            
            -- Call this from a function bound to Renderstep with Input Priority
            function VehicleController:Update(moveVector, cameraRelative, usingGamepad)
                if self.vehicleSeat then
                    if cameraRelative then
                        -- This is the default steering mode
                        moveVector = moveVector + Vector3.new(self.steer, 0, self.throttle)
                        if usingGamepad and onlyTriggersForThrottle and useTriggersForThrottle then
                            self.vehicleSeat.ThrottleFloat = -self.throttle
                        else
                            self.vehicleSeat.ThrottleFloat = -moveVector.Z
                        end
                        self.vehicleSeat.SteerFloat = moveVector.X
            
                        return moveVector, true
                    else
                        -- This is the path following mode
                        local localMoveVector = self.vehicleSeat.Occupant.RootPart.CFrame:VectorToObjectSpace(moveVector)
            
                        self.vehicleSeat.ThrottleFloat = self:ComputeThrottle(localMoveVector)
                        self.vehicleSeat.SteerFloat = self:ComputeSteer(localMoveVector)
            
                        return ZERO_VECTOR3, true
                    end
                end
                return moveVector, false
            end
            
            function VehicleController:ComputeThrottle(localMoveVector)
                if localMoveVector ~= ZERO_VECTOR3 then
                    local throttle = -localMoveVector.Z
                    return throttle
                else
                    return 0.0
                end
            end
            
            function VehicleController:ComputeSteer(localMoveVector)
                if localMoveVector ~= ZERO_VECTOR3 then
                    local steerAngle = -math.atan2(-localMoveVector.x, -localMoveVector.z) * (180 / math.pi)
                    return steerAngle / self.autoPilot.MaxSteeringAngle
                else
                    return 0.0
                end
            end
            
            function VehicleController:SetupAutoPilot()
                -- Setup default
                self.autoPilot.MaxSpeed = self.vehicleSeat.MaxSpeed
                self.autoPilot.MaxSteeringAngle = AUTO_PILOT_DEFAULT_MAX_STEERING_ANGLE
            
                -- VehicleSeat should have a MaxSteeringAngle as well.
                -- Or we could look for a child "AutoPilotConfigModule" to find these values
                -- Or allow developer to set them through the API as like the CLickToMove customization API
            end
            
            return VehicleController
        end
        
        function _TouchJump()
            
            local Players = game:GetService("Players")
            local GuiService = game:GetService("GuiService")
            
            --[[ Constants ]]--
            local TOUCH_CONTROL_SHEET = "rbxasset://textures/ui/Input/TouchControlsSheetV2.png"
            
            --[[ The Module ]]--
            local BaseCharacterController = _BaseCharacterController()
            local TouchJump = setmetatable({}, BaseCharacterController)
            TouchJump.__index = TouchJump
            
            function TouchJump.new()
                local self = setmetatable(BaseCharacterController.new(), TouchJump)
            
                self.parentUIFrame = nil
                self.jumpButton = nil
                self.characterAddedConn = nil
                self.humanoidStateEnabledChangedConn = nil
                self.humanoidJumpPowerConn = nil
                self.humanoidParentConn = nil
                self.externallyEnabled = false
                self.jumpPower = 0
                self.jumpStateEnabled = true
                self.isJumping = false
                self.humanoid = nil -- saved reference because property change connections are made using it
            
                return self
            end
            
            function TouchJump:EnableButton(enable)
                if enable then
                    if not self.jumpButton then
                        self:Create()
                    end
                    local humanoid = Players.LocalPlayer.Character and Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
                    if humanoid and self.externallyEnabled then
                        if self.externallyEnabled then
                            if humanoid.JumpPower > 0 then
                                self.jumpButton.Visible = true
                            end
                        end
                    end
                else
                    self.jumpButton.Visible = false
                    self.isJumping = false
                    self.jumpButton.ImageRectOffset = Vector2.new(1, 146)
                end
            end
            
            function TouchJump:UpdateEnabled()
                if self.jumpPower > 0 and self.jumpStateEnabled then
                    self:EnableButton(true)
                else
                    self:EnableButton(false)
                end
            end
            
            function TouchJump:HumanoidChanged(prop)
                local humanoid = Players.LocalPlayer.Character and Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    if prop == "JumpPower" then
                        self.jumpPower =  humanoid.JumpPower
                        self:UpdateEnabled()
                    elseif prop == "Parent" then
                        if not humanoid.Parent then
                            self.humanoidChangeConn:Disconnect()
                        end
                    end
                end
            end
            
            function TouchJump:HumanoidStateEnabledChanged(state, isEnabled)
                if state == Enum.HumanoidStateType.Jumping then
                    self.jumpStateEnabled = isEnabled
                    self:UpdateEnabled()
                end
            end
            
            function TouchJump:CharacterAdded(char)
                if self.humanoidChangeConn then
                    self.humanoidChangeConn:Disconnect()
                    self.humanoidChangeConn = nil
                end
            
                self.humanoid = char:FindFirstChildOfClass("Humanoid")
                while not self.humanoid do
                    char.ChildAdded:wait()
                    self.humanoid = char:FindFirstChildOfClass("Humanoid")
                end
            
                self.humanoidJumpPowerConn = self.humanoid:GetPropertyChangedSignal("JumpPower"):Connect(function()
                    self.jumpPower =  self.humanoid.JumpPower
                    self:UpdateEnabled()
                end)
            
                self.humanoidParentConn = self.humanoid:GetPropertyChangedSignal("Parent"):Connect(function()
                    if not self.humanoid.Parent then
                        self.humanoidJumpPowerConn:Disconnect()
                        self.humanoidJumpPowerConn = nil
                        self.humanoidParentConn:Disconnect()
                        self.humanoidParentConn = nil
                    end
                end)
            
                self.humanoidStateEnabledChangedConn = self.humanoid.StateEnabledChanged:Connect(function(state, enabled)
                    self:HumanoidStateEnabledChanged(state, enabled)
                end)
            
                self.jumpPower = self.humanoid.JumpPower
                self.jumpStateEnabled = self.humanoid:GetStateEnabled(Enum.HumanoidStateType.Jumping)
                self:UpdateEnabled()
            end
            
            function TouchJump:SetupCharacterAddedFunction()
                self.characterAddedConn = Players.LocalPlayer.CharacterAdded:Connect(function(char)
                    self:CharacterAdded(char)
                end)
                if Players.LocalPlayer.Character then
                    self:CharacterAdded(Players.LocalPlayer.Character)
                end
            end
            
            function TouchJump:Enable(enable, parentFrame)
                if parentFrame then
                    self.parentUIFrame = parentFrame
                end
                self.externallyEnabled = enable
                self:EnableButton(enable)
            end
            
            function TouchJump:Create()
                if not self.parentUIFrame then
                    return
                end
            
                if self.jumpButton then
                    self.jumpButton:Destroy()
                    self.jumpButton = nil
                end
            
                local minAxis = math.min(self.parentUIFrame.AbsoluteSize.x, self.parentUIFrame.AbsoluteSize.y)
                local isSmallScreen = minAxis <= 500
                local jumpButtonSize = isSmallScreen and 70 or 120
            
                self.jumpButton = Instance.new("ImageButton")
                self.jumpButton.Name = "JumpButton"
                self.jumpButton.Visible = false
                self.jumpButton.BackgroundTransparency = 1
                self.jumpButton.Image = TOUCH_CONTROL_SHEET
                self.jumpButton.ImageRectOffset = Vector2.new(1, 146)
                self.jumpButton.ImageRectSize = Vector2.new(144, 144)
                self.jumpButton.Size = UDim2.new(0, jumpButtonSize, 0, jumpButtonSize)
            
                self.jumpButton.Position = isSmallScreen and UDim2.new(1, -(jumpButtonSize*1.5-10), 1, -jumpButtonSize - 20) or
                    UDim2.new(1, -(jumpButtonSize*1.5-10), 1, -jumpButtonSize * 1.75)
            
                local touchObject = nil
                self.jumpButton.InputBegan:connect(function(inputObject)
                    --A touch that starts elsewhere on the screen will be sent to a frame's InputBegan event
                    --if it moves over the frame. So we check that this is actually a new touch (inputObject.UserInputState ~= Enum.UserInputState.Begin)
                    if touchObject or inputObject.UserInputType ~= Enum.UserInputType.Touch
                        or inputObject.UserInputState ~= Enum.UserInputState.Begin then
                        return
                    end
            
                    touchObject = inputObject
                    self.jumpButton.ImageRectOffset = Vector2.new(146, 146)
                    self.isJumping = true
                end)
            
                local OnInputEnded = function()
                    touchObject = nil
                    self.isJumping = false
                    self.jumpButton.ImageRectOffset = Vector2.new(1, 146)
                end
            
                self.jumpButton.InputEnded:connect(function(inputObject)
                    if inputObject == touchObject then
                        OnInputEnded()
                    end
                end)
            
                GuiService.MenuOpened:connect(function()
                    if touchObject then
                        OnInputEnded()
                    end
                end)
            
                if not self.characterAddedConn then
                    self:SetupCharacterAddedFunction()
                end
            
                self.jumpButton.Parent = self.parentUIFrame
            end
            
            return TouchJump
        end
        
        function _ClickToMoveController()
            --[[ Roblox Services ]]--
            local UserInputService = game:GetService("UserInputService")
            local PathfindingService = game:GetService("PathfindingService")
            local Players = game:GetService("Players")
            local DebrisService = game:GetService('Debris')
            local StarterGui = game:GetService("StarterGui")
            local Workspace = game:GetService("Workspace")
            local CollectionService = game:GetService("CollectionService")
            local GuiService = game:GetService("GuiService")
            
            --[[ Configuration ]]
            local ShowPath = true
            local PlayFailureAnimation = true
            local UseDirectPath = false
            local UseDirectPathForVehicle = true
            local AgentSizeIncreaseFactor = 1.0
            local UnreachableWaypointTimeout = 8
            
            --[[ Constants ]]--
            local movementKeys = {
                [Enum.KeyCode.W] = true;
                [Enum.KeyCode.A] = true;
                [Enum.KeyCode.S] = true;
                [Enum.KeyCode.D] = true;
                [Enum.KeyCode.Up] = true;
                [Enum.KeyCode.Down] = true;
            }
            
            local FFlagUserNavigationClickToMoveSkipPassedWaypointsSuccess, FFlagUserNavigationClickToMoveSkipPassedWaypointsResult = pcall(function() return UserSettings():IsUserFeatureEnabled("UserNavigationClickToMoveSkipPassedWaypoints") end)
            local FFlagUserNavigationClickToMoveSkipPassedWaypoints = FFlagUserNavigationClickToMoveSkipPassedWaypointsSuccess and FFlagUserNavigationClickToMoveSkipPassedWaypointsResult
            
            local Player = Players.LocalPlayer
            
            local ClickToMoveDisplay = _ClickToMoveDisplay()
            
            local ZERO_VECTOR3 = Vector3.new(0,0,0)
            local ALMOST_ZERO = 0.000001
            
            
            --------------------------UTIL LIBRARY-------------------------------
            local Utility = {}
            do
                local function FindCharacterAncestor(part)
                    if part then
                        local humanoid = part:FindFirstChildOfClass("Humanoid")
                        if humanoid then
                            return part, humanoid
                        else
                            return FindCharacterAncestor(part.Parent)
                        end
                    end
                end
                Utility.FindCharacterAncestor = FindCharacterAncestor
            
                local function Raycast(ray, ignoreNonCollidable, ignoreList)
                    ignoreList = ignoreList or {}
                    local hitPart, hitPos, hitNorm, hitMat = Workspace:FindPartOnRayWithIgnoreList(ray, ignoreList)
                    if hitPart then
                        if ignoreNonCollidable and hitPart.CanCollide == false then
                            -- We always include character parts so a user can click on another character
                            -- to walk to them.
                            local _, humanoid = FindCharacterAncestor(hitPart)
                            if humanoid == nil then
                                table.insert(ignoreList, hitPart)
                                return Raycast(ray, ignoreNonCollidable, ignoreList)
                            end
                        end
                        return hitPart, hitPos, hitNorm, hitMat
                    end
                    return nil, nil
                end
                Utility.Raycast = Raycast
            end
            
            local humanoidCache = {}
            local function findPlayerHumanoid(player)
                local character = player and player.Character
                if character then
                    local resultHumanoid = humanoidCache[player]
                    if resultHumanoid and resultHumanoid.Parent == character then
                        return resultHumanoid
                    else
                        humanoidCache[player] = nil -- Bust Old Cache
                        local humanoid = character:FindFirstChildOfClass("Humanoid")
                        if humanoid then
                            humanoidCache[player] = humanoid
                        end
                        return humanoid
                    end
                end
            end
            
            --------------------------CHARACTER CONTROL-------------------------------
            local CurrentIgnoreList
            local CurrentIgnoreTag = nil
            
            local TaggedInstanceAddedConnection = nil
            local TaggedInstanceRemovedConnection = nil
            
            local function GetCharacter()
                return Player and Player.Character
            end
            
            local function UpdateIgnoreTag(newIgnoreTag)
                if newIgnoreTag == CurrentIgnoreTag then
                    return
                end
                if TaggedInstanceAddedConnection then
                    TaggedInstanceAddedConnection:Disconnect()
                    TaggedInstanceAddedConnection = nil
                end
                if TaggedInstanceRemovedConnection then
                    TaggedInstanceRemovedConnection:Disconnect()
                    TaggedInstanceRemovedConnection = nil
                end
                CurrentIgnoreTag = newIgnoreTag
                CurrentIgnoreList = {GetCharacter()}
                if CurrentIgnoreTag ~= nil then
                    local ignoreParts = CollectionService:GetTagged(CurrentIgnoreTag)
                    for _, ignorePart in ipairs(ignoreParts) do
                        table.insert(CurrentIgnoreList, ignorePart)
                    end
                    TaggedInstanceAddedConnection = CollectionService:GetInstanceAddedSignal(
                        CurrentIgnoreTag):Connect(function(ignorePart)
                        table.insert(CurrentIgnoreList, ignorePart)
                    end)
                    TaggedInstanceRemovedConnection = CollectionService:GetInstanceRemovedSignal(
                        CurrentIgnoreTag):Connect(function(ignorePart)
                        for i = 1, #CurrentIgnoreList do
                            if CurrentIgnoreList[i] == ignorePart then
                                CurrentIgnoreList[i] = CurrentIgnoreList[#CurrentIgnoreList]
                                table.remove(CurrentIgnoreList)
                                break
                            end
                        end
                    end)
                end
            end
            
            local function getIgnoreList()
                if CurrentIgnoreList then
                    return CurrentIgnoreList
                end
                CurrentIgnoreList = {}
                table.insert(CurrentIgnoreList, GetCharacter())
                return CurrentIgnoreList
            end
            
            -----------------------------------PATHER--------------------------------------
            
            local function Pather(endPoint, surfaceNormal, overrideUseDirectPath)
                local this = {}
            
                local directPathForHumanoid
                local directPathForVehicle
                if overrideUseDirectPath ~= nil then
                    directPathForHumanoid = overrideUseDirectPath
                    directPathForVehicle = overrideUseDirectPath
                else
                    directPathForHumanoid = UseDirectPath
                    directPathForVehicle = UseDirectPathForVehicle
                end
            
                this.Cancelled = false
                this.Started = false
            
                this.Finished = Instance.new("BindableEvent")
                this.PathFailed = Instance.new("BindableEvent")
            
                this.PathComputing = false
                this.PathComputed = false
            
                this.OriginalTargetPoint = endPoint
                this.TargetPoint = endPoint
                this.TargetSurfaceNormal = surfaceNormal
            
                this.DiedConn = nil
                this.SeatedConn = nil
                this.BlockedConn = nil
                this.TeleportedConn = nil
            
                this.CurrentPoint = 0
            
                this.HumanoidOffsetFromPath = ZERO_VECTOR3
            
                this.CurrentWaypointPosition = nil
                this.CurrentWaypointPlaneNormal = ZERO_VECTOR3
                this.CurrentWaypointPlaneDistance = 0
                this.CurrentWaypointNeedsJump = false;
            
                this.CurrentHumanoidPosition = ZERO_VECTOR3
                this.CurrentHumanoidVelocity = 0
            
                this.NextActionMoveDirection = ZERO_VECTOR3
                this.NextActionJump = false
            
                this.Timeout = 0
            
                this.Humanoid = findPlayerHumanoid(Player)
                this.OriginPoint = nil
                this.AgentCanFollowPath = false
                this.DirectPath = false
                this.DirectPathRiseFirst = false
            
                local rootPart = this.Humanoid and this.Humanoid.RootPart
                if rootPart then
                    -- Setup origin
                    this.OriginPoint = rootPart.CFrame.p
            
                    -- Setup agent
                    local agentRadius = 2
                    local agentHeight = 5
                    local agentCanJump = true
            
                    local seat = this.Humanoid.SeatPart
                    if seat and seat:IsA("VehicleSeat") then
                        -- Humanoid is seated on a vehicle
                        local vehicle = seat:FindFirstAncestorOfClass("Model")
                        if vehicle then
                            -- Make sure the PrimaryPart is set to the vehicle seat while we compute the extends.
                            local tempPrimaryPart = vehicle.PrimaryPart
                            vehicle.PrimaryPart = seat
            
                            -- For now, only direct path
                            if directPathForVehicle then
                                local extents = vehicle:GetExtentsSize()
                                agentRadius = AgentSizeIncreaseFactor * 0.5 * math.sqrt(extents.X * extents.X + extents.Z * extents.Z)
                                agentHeight = AgentSizeIncreaseFactor * extents.Y
                                agentCanJump = false
                                this.AgentCanFollowPath = true
                                this.DirectPath = directPathForVehicle
                            end
            
                            -- Reset PrimaryPart
                            vehicle.PrimaryPart = tempPrimaryPart
                        end
                    else
                        local extents = GetCharacter():GetExtentsSize()
                        agentRadius = AgentSizeIncreaseFactor * 0.5 * math.sqrt(extents.X * extents.X + extents.Z * extents.Z)
                        agentHeight = AgentSizeIncreaseFactor * extents.Y
                        agentCanJump = (this.Humanoid.JumpPower > 0)
                        this.AgentCanFollowPath = true
                        this.DirectPath = directPathForHumanoid
                        this.DirectPathRiseFirst = this.Humanoid.Sit
                    end
            
                    -- Build path object
                    this.pathResult = PathfindingService:CreatePath({AgentRadius = agentRadius, AgentHeight = agentHeight, AgentCanJump = agentCanJump})
                end
            
                function this:Cleanup()
                    if this.stopTraverseFunc then
                        this.stopTraverseFunc()
                        this.stopTraverseFunc = nil
                    end
            
                    if this.MoveToConn then
                        this.MoveToConn:Disconnect()
                        this.MoveToConn = nil
                    end
            
                    if this.BlockedConn then
                        this.BlockedConn:Disconnect()
                        this.BlockedConn = nil
                    end
            
                    if this.DiedConn then
                        this.DiedConn:Disconnect()
                        this.DiedConn = nil
                    end
            
                    if this.SeatedConn then
                        this.SeatedConn:Disconnect()
                        this.SeatedConn = nil
                    end
            
                    if this.TeleportedConn then
                        this.TeleportedConn:Disconnect()
                        this.TeleportedConn = nil
                    end
            
                    this.Started = false
                end
            
                function this:Cancel()
                    this.Cancelled = true
                    this:Cleanup()
                end
            
                function this:IsActive()
                    return this.AgentCanFollowPath and this.Started and not this.Cancelled
                end
            
                function this:OnPathInterrupted()
                    -- Stop moving
                    this.Cancelled = true
                    this:OnPointReached(false)
                end
            
                function this:ComputePath()
                    if this.OriginPoint then
                        if this.PathComputed or this.PathComputing then return end
                        this.PathComputing = true
                        if this.AgentCanFollowPath then
                            if this.DirectPath then
                                this.pointList = {
                                    PathWaypoint.new(this.OriginPoint, Enum.PathWaypointAction.Walk),
                                    PathWaypoint.new(this.TargetPoint, this.DirectPathRiseFirst and Enum.PathWaypointAction.Jump or Enum.PathWaypointAction.Walk)
                                }
                                this.PathComputed = true
                            else
                                this.pathResult:ComputeAsync(this.OriginPoint, this.TargetPoint)
                                this.pointList = this.pathResult:GetWaypoints()
                                this.BlockedConn = this.pathResult.Blocked:Connect(function(blockedIdx) this:OnPathBlocked(blockedIdx) end)
                                this.PathComputed = this.pathResult.Status == Enum.PathStatus.Success
                            end
                        end
                        this.PathComputing = false
                    end
                end
            
                function this:IsValidPath()
                    this:ComputePath()
                    return this.PathComputed and this.AgentCanFollowPath
                end
            
                this.Recomputing = false
                function this:OnPathBlocked(blockedWaypointIdx)
                    local pathBlocked = blockedWaypointIdx >= this.CurrentPoint
                    if not pathBlocked or this.Recomputing then
                        return
                    end
            
                    this.Recomputing = true
            
                    if this.stopTraverseFunc then
                        this.stopTraverseFunc()
                        this.stopTraverseFunc = nil
                    end
            
                    this.OriginPoint = this.Humanoid.RootPart.CFrame.p
            
                    this.pathResult:ComputeAsync(this.OriginPoint, this.TargetPoint)
                    this.pointList = this.pathResult:GetWaypoints()
                    if #this.pointList > 0 then
                        this.HumanoidOffsetFromPath = this.pointList[1].Position - this.OriginPoint
                    end
                    this.PathComputed = this.pathResult.Status == Enum.PathStatus.Success
            
                    if ShowPath then
                        this.stopTraverseFunc, this.setPointFunc = ClickToMoveDisplay.CreatePathDisplay(this.pointList)
                    end
                    if this.PathComputed then
                        this.CurrentPoint = 1 -- The first waypoint is always the start location. Skip it.
                        this:OnPointReached(true) -- Move to first point
                    else
                        this.PathFailed:Fire()
                        this:Cleanup()
                    end
            
                    this.Recomputing = false
                end
            
                function this:OnRenderStepped(dt)
                    if this.Started and not this.Cancelled then
                        -- Check for Timeout (if a waypoint is not reached within the delay, we fail)
                        this.Timeout = this.Timeout + dt
                        if this.Timeout > UnreachableWaypointTimeout then
                            this:OnPointReached(false)
                            return
                        end
            
                        -- Get Humanoid position and velocity
                        this.CurrentHumanoidPosition = this.Humanoid.RootPart.Position + this.HumanoidOffsetFromPath
                        this.CurrentHumanoidVelocity = this.Humanoid.RootPart.Velocity
            
                        -- Check if it has reached some waypoints
                        while this.Started and this:IsCurrentWaypointReached() do
                            this:OnPointReached(true)
                        end
            
                        -- If still started, update actions
                        if this.Started then
                            -- Move action
                            this.NextActionMoveDirection = this.CurrentWaypointPosition - this.CurrentHumanoidPosition
                            if this.NextActionMoveDirection.Magnitude > ALMOST_ZERO then
                                this.NextActionMoveDirection = this.NextActionMoveDirection.Unit
                            else
                                this.NextActionMoveDirection = ZERO_VECTOR3
                            end
                            -- Jump action
                            if this.CurrentWaypointNeedsJump then
                                this.NextActionJump = true
                                this.CurrentWaypointNeedsJump = false	-- Request jump only once
                            else
                                this.NextActionJump = false
                            end
                        end
                    end
                end
            
                function this:IsCurrentWaypointReached()
                    local reached = false
            
                    -- Check we do have a plane, if not, we consider the waypoint reached
                    if this.CurrentWaypointPlaneNormal ~= ZERO_VECTOR3 then
                        -- Compute distance of Humanoid from destination plane
                        local dist = this.CurrentWaypointPlaneNormal:Dot(this.CurrentHumanoidPosition) - this.CurrentWaypointPlaneDistance
                        -- Compute the component of the Humanoid velocity that is towards the plane
                        local velocity = -this.CurrentWaypointPlaneNormal:Dot(this.CurrentHumanoidVelocity)
                        -- Compute the threshold from the destination plane based on Humanoid velocity
                        local threshold = math.max(1.0, 0.0625 * velocity)
                        -- If we are less then threshold in front of the plane (between 0 and threshold) or if we are behing the plane (less then 0), we consider we reached it
                        reached = dist < threshold
                    else
                        reached = true
                    end
            
                    if reached then
                        this.CurrentWaypointPosition = nil
                        this.CurrentWaypointPlaneNormal	= ZERO_VECTOR3
                        this.CurrentWaypointPlaneDistance = 0
                    end
            
                    return reached
                end
            
                function this:OnPointReached(reached)
            
                    if reached and not this.Cancelled then
                        -- First, destroyed the current displayed waypoint
                        if this.setPointFunc then
                            this.setPointFunc(this.CurrentPoint)
                        end
            
                        local nextWaypointIdx = this.CurrentPoint + 1
            
                        if nextWaypointIdx > #this.pointList then
                            -- End of path reached
                            if this.stopTraverseFunc then
                                this.stopTraverseFunc()
                            end
                            this.Finished:Fire()
                            this:Cleanup()
                        else
                            local currentWaypoint = this.pointList[this.CurrentPoint]
                            local nextWaypoint = this.pointList[nextWaypointIdx]
            
                            -- If airborne, only allow to keep moving
                            -- if nextWaypoint.Action ~= Jump, or path mantains a direction
                            -- Otherwise, wait until the humanoid gets to the ground
                            local currentState = this.Humanoid:GetState()
                            local isInAir = currentState == Enum.HumanoidStateType.FallingDown
                                or currentState == Enum.HumanoidStateType.Freefall
                                or currentState == Enum.HumanoidStateType.Jumping
            
                            if isInAir then
                                local shouldWaitForGround = nextWaypoint.Action == Enum.PathWaypointAction.Jump
                                if not shouldWaitForGround and this.CurrentPoint > 1 then
                                    local prevWaypoint = this.pointList[this.CurrentPoint - 1]
            
                                    local prevDir = currentWaypoint.Position - prevWaypoint.Position
                                    local currDir = nextWaypoint.Position - currentWaypoint.Position
            
                                    local prevDirXZ = Vector2.new(prevDir.x, prevDir.z).Unit
                                    local currDirXZ = Vector2.new(currDir.x, currDir.z).Unit
            
                                    local THRESHOLD_COS = 0.996 -- ~cos(5 degrees)
                                    shouldWaitForGround = prevDirXZ:Dot(currDirXZ) < THRESHOLD_COS
                                end
            
                                if shouldWaitForGround then
                                    this.Humanoid.FreeFalling:Wait()
            
                                    -- Give time to the humanoid's state to change
                                    -- Otherwise, the jump flag in Humanoid
                                    -- will be reset by the state change
                                    wait(0.1)
                                end
                            end
            
                            -- Move to the next point
                            if FFlagUserNavigationClickToMoveSkipPassedWaypoints then
                                this:MoveToNextWayPoint(currentWaypoint, nextWaypoint, nextWaypointIdx)
                            else
                                if this.setPointFunc then
                                    this.setPointFunc(nextWaypointIdx)
                                end
                                if nextWaypoint.Action == Enum.PathWaypointAction.Jump then
                                    this.Humanoid.Jump = true
                                end
                                this.Humanoid:MoveTo(nextWaypoint.Position)
            
                                this.CurrentPoint = nextWaypointIdx
                            end
                        end
                    else
                        this.PathFailed:Fire()
                        this:Cleanup()
                    end
                end
            
                function this:MoveToNextWayPoint(currentWaypoint, nextWaypoint, nextWaypointIdx)
                    -- Build next destination plane
                    -- (plane normal is perpendicular to the y plane and is from next waypoint towards current one (provided the two waypoints are not at the same location))
                    -- (plane location is at next waypoint)
                    this.CurrentWaypointPlaneNormal = currentWaypoint.Position - nextWaypoint.Position
                    this.CurrentWaypointPlaneNormal = Vector3.new(this.CurrentWaypointPlaneNormal.X, 0, this.CurrentWaypointPlaneNormal.Z)
                    if this.CurrentWaypointPlaneNormal.Magnitude > ALMOST_ZERO then
                        this.CurrentWaypointPlaneNormal	= this.CurrentWaypointPlaneNormal.Unit
                        this.CurrentWaypointPlaneDistance = this.CurrentWaypointPlaneNormal:Dot(nextWaypoint.Position)
                    else
                        -- Next waypoint is the same as current waypoint so no plane
                        this.CurrentWaypointPlaneNormal	= ZERO_VECTOR3
                        this.CurrentWaypointPlaneDistance = 0
                    end
            
                    -- Should we jump
                    this.CurrentWaypointNeedsJump = nextWaypoint.Action == Enum.PathWaypointAction.Jump;
            
                    -- Remember next waypoint position
                    this.CurrentWaypointPosition = nextWaypoint.Position
            
                    -- Move to next point
                    this.CurrentPoint = nextWaypointIdx
            
                    -- Finally reset Timeout
                    this.Timeout = 0
                end
            
                function this:Start(overrideShowPath)
                    if not this.AgentCanFollowPath then
                        this.PathFailed:Fire()
                        return
                    end
            
                    if this.Started then return end
                    this.Started = true
            
                    ClickToMoveDisplay.CancelFailureAnimation()
            
                    if ShowPath then
                        if overrideShowPath == nil or overrideShowPath then
                            this.stopTraverseFunc, this.setPointFunc = ClickToMoveDisplay.CreatePathDisplay(this.pointList, this.OriginalTargetPoint)
                        end
                    end
            
                    if #this.pointList > 0 then
                        -- Determine the humanoid offset from the path's first point
                        -- Offset of the first waypoint from the path's origin point
                        this.HumanoidOffsetFromPath = Vector3.new(0, this.pointList[1].Position.Y - this.OriginPoint.Y, 0)
            
                        -- As well as its current position and velocity
                        this.CurrentHumanoidPosition = this.Humanoid.RootPart.Position + this.HumanoidOffsetFromPath
                        this.CurrentHumanoidVelocity = this.Humanoid.RootPart.Velocity
            
                        -- Connect to events
                        this.SeatedConn = this.Humanoid.Seated:Connect(function(isSeated, seat) this:OnPathInterrupted() end)
                        this.DiedConn = this.Humanoid.Died:Connect(function() this:OnPathInterrupted() end)
                        this.TeleportedConn = this.Humanoid.RootPart:GetPropertyChangedSignal("CFrame"):Connect(function() this:OnPathInterrupted() end)
            
                        -- Actually start
                        this.CurrentPoint = 1 -- The first waypoint is always the start location. Skip it.
                        this:OnPointReached(true) -- Move to first point
                    else
                        this.PathFailed:Fire()
                        if this.stopTraverseFunc then
                            this.stopTraverseFunc()
                        end
                    end
                end
            
                --We always raycast to the ground in the case that the user clicked a wall.
                local offsetPoint = this.TargetPoint + this.TargetSurfaceNormal*1.5
                local ray = Ray.new(offsetPoint, Vector3.new(0,-1,0)*50)
                local newHitPart, newHitPos = Workspace:FindPartOnRayWithIgnoreList(ray, getIgnoreList())
                if newHitPart then
                    this.TargetPoint = newHitPos
                end
                this:ComputePath()
            
                return this
            end
            
            -------------------------------------------------------------------------
            
            local function CheckAlive()
                local humanoid = findPlayerHumanoid(Player)
                return humanoid ~= nil and humanoid.Health > 0
            end
            
            local function GetEquippedTool(character)
                if character ~= nil then
                    for _, child in pairs(character:GetChildren()) do
                        if child:IsA('Tool') then
                            return child
                        end
                    end
                end
            end
            
            local ExistingPather = nil
            local ExistingIndicator = nil
            local PathCompleteListener = nil
            local PathFailedListener = nil
            
            local function CleanupPath()
                if ExistingPather then
                    ExistingPather:Cancel()
                    ExistingPather = nil
                end
                if PathCompleteListener then
                    PathCompleteListener:Disconnect()
                    PathCompleteListener = nil
                end
                if PathFailedListener then
                    PathFailedListener:Disconnect()
                    PathFailedListener = nil
                end
                if ExistingIndicator then
                    ExistingIndicator:Destroy()
                end
            end
            
            local function HandleMoveTo(thisPather, hitPt, hitChar, character, overrideShowPath)
                if ExistingPather then
                    CleanupPath()
                end
                ExistingPather = thisPather
                thisPather:Start(overrideShowPath)
            
                PathCompleteListener = thisPather.Finished.Event:Connect(function()
                    CleanupPath()
                    if hitChar then
                        local currentWeapon = GetEquippedTool(character)
                        if currentWeapon then
                            currentWeapon:Activate()
                        end
                    end
                end)
                PathFailedListener = thisPather.PathFailed.Event:Connect(function()
                    CleanupPath()
                    if overrideShowPath == nil or overrideShowPath then
                        local shouldPlayFailureAnim = PlayFailureAnimation and not (ExistingPather and ExistingPather:IsActive())
                        if shouldPlayFailureAnim then
                            ClickToMoveDisplay.PlayFailureAnimation()
                        end
                        ClickToMoveDisplay.DisplayFailureWaypoint(hitPt)
                    end
                end)
            end
            
            local function ShowPathFailedFeedback(hitPt)
                if ExistingPather and ExistingPather:IsActive() then
                    ExistingPather:Cancel()
                end
                if PlayFailureAnimation then
                    ClickToMoveDisplay.PlayFailureAnimation()
                end
                ClickToMoveDisplay.DisplayFailureWaypoint(hitPt)
            end
            
            function OnTap(tapPositions, goToPoint, wasTouchTap)
                -- Good to remember if this is the latest tap event
                local camera = Workspace.CurrentCamera
                local character = Player.Character
            
                if not CheckAlive() then return end
            
                -- This is a path tap position
                if #tapPositions == 1 or goToPoint then
                    if camera then
                        local unitRay = camera:ScreenPointToRay(tapPositions[1].x, tapPositions[1].y)
                        local ray = Ray.new(unitRay.Origin, unitRay.Direction*1000)
            
                        local myHumanoid = findPlayerHumanoid(Player)
                        local hitPart, hitPt, hitNormal = Utility.Raycast(ray, true, getIgnoreList())
            
                        local hitChar, hitHumanoid = Utility.FindCharacterAncestor(hitPart)
                        if wasTouchTap and hitHumanoid and StarterGui:GetCore("AvatarContextMenuEnabled") then
                            local clickedPlayer = Players:GetPlayerFromCharacter(hitHumanoid.Parent)
                            if clickedPlayer then
                                CleanupPath()
                                return
                            end
                        end
                        if goToPoint then
                            hitPt = goToPoint
                            hitChar = nil
                        end
                        if hitPt and character then
                            -- Clean up current path
                            CleanupPath()
                            local thisPather = Pather(hitPt, hitNormal)
                            if thisPather:IsValidPath() then
                                HandleMoveTo(thisPather, hitPt, hitChar, character)
                            else
                                -- Clean up
                                thisPather:Cleanup()
                                -- Feedback here for when we don't have a good path
                                ShowPathFailedFeedback(hitPt)
                            end
                        end
                    end
                elseif #tapPositions >= 2 then
                    if camera then
                        -- Do shoot
                        local currentWeapon = GetEquippedTool(character)
                        if currentWeapon then
                            currentWeapon:Activate()
                        end
                    end
                end
            end
            
            local function DisconnectEvent(event)
                if event then
                    event:Disconnect()
                end
            end
            
            --[[ The ClickToMove Controller Class ]]--
            local KeyboardController = _Keyboard()
            local ClickToMove = setmetatable({}, KeyboardController)
            ClickToMove.__index = ClickToMove
            
            function ClickToMove.new(CONTROL_ACTION_PRIORITY)
                local self = setmetatable(KeyboardController.new(CONTROL_ACTION_PRIORITY), ClickToMove)
            
                self.fingerTouches = {}
                self.numUnsunkTouches = 0
                -- PC simulation
                self.mouse1Down = tick()
                self.mouse1DownPos = Vector2.new()
                self.mouse2DownTime = tick()
                self.mouse2DownPos = Vector2.new()
                self.mouse2UpTime = tick()
            
                self.keyboardMoveVector = ZERO_VECTOR3
            
                self.tapConn = nil
                self.inputBeganConn = nil
                self.inputChangedConn = nil
                self.inputEndedConn = nil
                self.humanoidDiedConn = nil
                self.characterChildAddedConn = nil
                self.onCharacterAddedConn = nil
                self.characterChildRemovedConn = nil
                self.renderSteppedConn = nil
                self.menuOpenedConnection = nil
            
                self.running = false
            
                self.wasdEnabled = false
            
                return self
            end
            
            function ClickToMove:DisconnectEvents()
                DisconnectEvent(self.tapConn)
                DisconnectEvent(self.inputBeganConn)
                DisconnectEvent(self.inputChangedConn)
                DisconnectEvent(self.inputEndedConn)
                DisconnectEvent(self.humanoidDiedConn)
                DisconnectEvent(self.characterChildAddedConn)
                DisconnectEvent(self.onCharacterAddedConn)
                DisconnectEvent(self.renderSteppedConn)
                DisconnectEvent(self.characterChildRemovedConn)
                DisconnectEvent(self.menuOpenedConnection)
            end
            
            function ClickToMove:OnTouchBegan(input, processed)
                if self.fingerTouches[input] == nil and not processed then
                    self.numUnsunkTouches = self.numUnsunkTouches + 1
                end
                self.fingerTouches[input] = processed
            end
            
            function ClickToMove:OnTouchChanged(input, processed)
                if self.fingerTouches[input] == nil then
                    self.fingerTouches[input] = processed
                    if not processed then
                        self.numUnsunkTouches = self.numUnsunkTouches + 1
                    end
                end
            end
            
            function ClickToMove:OnTouchEnded(input, processed)
                if self.fingerTouches[input] ~= nil and self.fingerTouches[input] == false then
                    self.numUnsunkTouches = self.numUnsunkTouches - 1
                end
                self.fingerTouches[input] = nil
            end
            
            
            function ClickToMove:OnCharacterAdded(character)
                self:DisconnectEvents()
            
                self.inputBeganConn = UserInputService.InputBegan:Connect(function(input, processed)
                    if input.UserInputType == Enum.UserInputType.Touch then
                        self:OnTouchBegan(input, processed)
                    end
            
                    -- Cancel path when you use the keyboard controls if wasd is enabled.
                    if self.wasdEnabled and processed == false and input.UserInputType == Enum.UserInputType.Keyboard
                        and movementKeys[input.KeyCode] then
                        CleanupPath()
                        ClickToMoveDisplay.CancelFailureAnimation()
                    end
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        self.mouse1DownTime = tick()
                        self.mouse1DownPos = input.Position
                    end
                    if input.UserInputType == Enum.UserInputType.MouseButton2 then
                        self.mouse2DownTime = tick()
                        self.mouse2DownPos = input.Position
                    end
                end)
            
                self.inputChangedConn = UserInputService.InputChanged:Connect(function(input, processed)
                    if input.UserInputType == Enum.UserInputType.Touch then
                        self:OnTouchChanged(input, processed)
                    end
                end)
            
                self.inputEndedConn = UserInputService.InputEnded:Connect(function(input, processed)
                    if input.UserInputType == Enum.UserInputType.Touch then
                        self:OnTouchEnded(input, processed)
                    end
            
                    if input.UserInputType == Enum.UserInputType.MouseButton2 then
                        self.mouse2UpTime = tick()
                        local currPos = input.Position
                        -- We allow click to move during path following or if there is no keyboard movement
                        local allowed = ExistingPather or self.keyboardMoveVector.Magnitude <= 0
                        if self.mouse2UpTime - self.mouse2DownTime < 0.25 and (currPos - self.mouse2DownPos).magnitude < 5 and allowed then
                            local positions = {currPos}
                            OnTap(positions)
                        end
                    end
                end)
            
                self.tapConn = UserInputService.TouchTap:Connect(function(touchPositions, processed)
                    if not processed then
                        OnTap(touchPositions, nil, true)
                    end
                end)
            
                self.menuOpenedConnection = GuiService.MenuOpened:Connect(function()
                    CleanupPath()
                end)
            
                local function OnCharacterChildAdded(child)
                    if UserInputService.TouchEnabled then
                        if child:IsA('Tool') then
                            child.ManualActivationOnly = true
                        end
                    end
                    if child:IsA('Humanoid') then
                        DisconnectEvent(self.humanoidDiedConn)
                        self.humanoidDiedConn = child.Died:Connect(function()
                            if ExistingIndicator then
                                DebrisService:AddItem(ExistingIndicator.Model, 1)
                            end
                        end)
                    end
                end
            
                self.characterChildAddedConn = character.ChildAdded:Connect(function(child)
                    OnCharacterChildAdded(child)
                end)
                self.characterChildRemovedConn = character.ChildRemoved:Connect(function(child)
                    if UserInputService.TouchEnabled then
                        if child:IsA('Tool') then
                            child.ManualActivationOnly = false
                        end
                    end
                end)
                for _, child in pairs(character:GetChildren()) do
                    OnCharacterChildAdded(child)
                end
            end
            
            function ClickToMove:Start()
                self:Enable(true)
            end
            
            function ClickToMove:Stop()
                self:Enable(false)
            end
            
            function ClickToMove:CleanupPath()
                CleanupPath()
            end
            
            function ClickToMove:Enable(enable, enableWASD, touchJumpController)
                if enable then
                    if not self.running then
                        if Player.Character then -- retro-listen
                            self:OnCharacterAdded(Player.Character)
                        end
                        self.onCharacterAddedConn = Player.CharacterAdded:Connect(function(char)
                            self:OnCharacterAdded(char)
                        end)
                        self.running = true
                    end
                    self.touchJumpController = touchJumpController
                    if self.touchJumpController then
                        self.touchJumpController:Enable(self.jumpEnabled)
                    end
                else
                    if self.running then
                        self:DisconnectEvents()
                        CleanupPath()
                        -- Restore tool activation on shutdown
                        if UserInputService.TouchEnabled then
                            local character = Player.Character
                            if character then
                                for _, child in pairs(character:GetChildren()) do
                                    if child:IsA('Tool') then
                                        child.ManualActivationOnly = false
                                    end
                                end
                            end
                        end
                        self.running = false
                    end
                    if self.touchJumpController and not self.jumpEnabled then
                        self.touchJumpController:Enable(true)
                    end
                    self.touchJumpController = nil
                end
            
                -- Extension for initializing Keyboard input as this class now derives from Keyboard
                if UserInputService.KeyboardEnabled and enable ~= self.enabled then
            
                    self.forwardValue  = 0
                    self.backwardValue = 0
                    self.leftValue = 0
                    self.rightValue = 0
            
                    self.moveVector = ZERO_VECTOR3
            
                    if enable then
                        self:BindContextActions()
                        self:ConnectFocusEventListeners()
                    else
                        self:UnbindContextActions()
                        self:DisconnectFocusEventListeners()
                    end
                end
            
                self.wasdEnabled = enable and enableWASD or false
                self.enabled = enable
            end
            
            function ClickToMove:OnRenderStepped(dt)
                -- Reset jump
                self.isJumping = false
            
                -- Handle Pather
                if ExistingPather then
                    -- Let the Pather update
                    ExistingPather:OnRenderStepped(dt)
            
                    -- If we still have a Pather, set the resulting actions
                    if ExistingPather then
                        -- Setup move (NOT relative to camera)
                        self.moveVector = ExistingPather.NextActionMoveDirection
                        self.moveVectorIsCameraRelative = false
            
                        -- Setup jump (but do NOT prevent the base Keayboard class from requesting jumps as well)
                        if ExistingPather.NextActionJump then
                            self.isJumping = true
                        end
                    else
                        self.moveVector = self.keyboardMoveVector
                        self.moveVectorIsCameraRelative = true
                    end
                else
                    self.moveVector = self.keyboardMoveVector
                    self.moveVectorIsCameraRelative = true
                end
            
                -- Handle Keyboard's jump
                if self.jumpRequested then
                    self.isJumping = true
                end
            end
            
            -- Overrides Keyboard:UpdateMovement(inputState) to conditionally consider self.wasdEnabled and let OnRenderStepped handle the movement
            function ClickToMove:UpdateMovement(inputState)
                if inputState == Enum.UserInputState.Cancel then
                    self.keyboardMoveVector = ZERO_VECTOR3
                elseif self.wasdEnabled then
                    self.keyboardMoveVector = Vector3.new(self.leftValue + self.rightValue, 0, self.forwardValue + self.backwardValue)
                end
            end
            
            -- Overrides Keyboard:UpdateJump() because jump is handled in OnRenderStepped
            function ClickToMove:UpdateJump()
                -- Nothing to do (handled in OnRenderStepped)
            end
            
            --Public developer facing functions
            function ClickToMove:SetShowPath(value)
                ShowPath = value
            end
            
            function ClickToMove:GetShowPath()
                return ShowPath
            end
            
            function ClickToMove:SetWaypointTexture(texture)
                ClickToMoveDisplay.SetWaypointTexture(texture)
            end
            
            function ClickToMove:GetWaypointTexture()
                return ClickToMoveDisplay.GetWaypointTexture()
            end
            
            function ClickToMove:SetWaypointRadius(radius)
                ClickToMoveDisplay.SetWaypointRadius(radius)
            end
            
            function ClickToMove:GetWaypointRadius()
                return ClickToMoveDisplay.GetWaypointRadius()
            end
            
            function ClickToMove:SetEndWaypointTexture(texture)
                ClickToMoveDisplay.SetEndWaypointTexture(texture)
            end
            
            function ClickToMove:GetEndWaypointTexture()
                return ClickToMoveDisplay.GetEndWaypointTexture()
            end
            
            function ClickToMove:SetWaypointsAlwaysOnTop(alwaysOnTop)
                ClickToMoveDisplay.SetWaypointsAlwaysOnTop(alwaysOnTop)
            end
            
            function ClickToMove:GetWaypointsAlwaysOnTop()
                return ClickToMoveDisplay.GetWaypointsAlwaysOnTop()
            end
            
            function ClickToMove:SetFailureAnimationEnabled(enabled)
                PlayFailureAnimation = enabled
            end
            
            function ClickToMove:GetFailureAnimationEnabled()
                return PlayFailureAnimation
            end
            
            function ClickToMove:SetIgnoredPartsTag(tag)
                UpdateIgnoreTag(tag)
            end
            
            function ClickToMove:GetIgnoredPartsTag()
                return CurrentIgnoreTag
            end
            
            function ClickToMove:SetUseDirectPath(directPath)
                UseDirectPath = directPath
            end
            
            function ClickToMove:GetUseDirectPath()
                return UseDirectPath
            end
            
            function ClickToMove:SetAgentSizeIncreaseFactor(increaseFactorPercent)
                AgentSizeIncreaseFactor = 1.0 + (increaseFactorPercent / 100.0)
            end
            
            function ClickToMove:GetAgentSizeIncreaseFactor()
                return (AgentSizeIncreaseFactor - 1.0) * 100.0
            end
            
            function ClickToMove:SetUnreachableWaypointTimeout(timeoutInSec)
                UnreachableWaypointTimeout = timeoutInSec
            end
            
            function ClickToMove:GetUnreachableWaypointTimeout()
                return UnreachableWaypointTimeout
            end
            
            function ClickToMove:SetUserJumpEnabled(jumpEnabled)
                self.jumpEnabled = jumpEnabled
                if self.touchJumpController then
                    self.touchJumpController:Enable(jumpEnabled)
                end
            end
            
            function ClickToMove:GetUserJumpEnabled()
                return self.jumpEnabled
            end
            
            function ClickToMove:MoveTo(position, showPath, useDirectPath)
                local character = Player.Character
                if character == nil then
                    return false
                end
                local thisPather = Pather(position, Vector3.new(0, 1, 0), useDirectPath)
                if thisPather and thisPather:IsValidPath() then
                    HandleMoveTo(thisPather, position, nil, character, showPath)
                    return true
                end
                return false
            end
            
            return ClickToMove
        end
        
        function _TouchThumbstick()
            local Players = game:GetService("Players")
            local GuiService = game:GetService("GuiService")
            local UserInputService = game:GetService("UserInputService")
            --[[ Constants ]]--
            local ZERO_VECTOR3 = Vector3.new(0,0,0)
            local TOUCH_CONTROL_SHEET = "rbxasset://textures/ui/TouchControlsSheet.png"
            --[[ The Module ]]--
            local BaseCharacterController = _BaseCharacterController()
            local TouchThumbstick = setmetatable({}, BaseCharacterController)
            TouchThumbstick.__index = TouchThumbstick
            function TouchThumbstick.new()
                local self = setmetatable(BaseCharacterController.new(), TouchThumbstick)
                
                self.isFollowStick = false
                
                self.thumbstickFrame = nil
                self.moveTouchObject = nil
                self.onTouchMovedConn = nil
                self.onTouchEndedConn = nil
                self.screenPos = nil
                self.stickImage = nil
                self.thumbstickSize = nil -- Float
                
                return self
            end
            function TouchThumbstick:Enable(enable, uiParentFrame)
                if enable == nil then return false end			-- If nil, return false (invalid argument)
                enable = enable and true or false				-- Force anything non-nil to boolean before comparison
                if self.enabled == enable then return true end	-- If no state change, return true indicating already in requested state
                
                self.moveVector = ZERO_VECTOR3
                self.isJumping = false
                
                if enable then
                    -- Enable
                    if not self.thumbstickFrame then
                        self:Create(uiParentFrame)
                    end
                    self.thumbstickFrame.Visible = true
                else 
                    -- Disable
                    self.thumbstickFrame.Visible = false
                    self:OnInputEnded()
                end
                self.enabled = enable
            end
            function TouchThumbstick:OnInputEnded()
                self.thumbstickFrame.Position = self.screenPos
                self.stickImage.Position = UDim2.new(0, self.thumbstickFrame.Size.X.Offset/2 - self.thumbstickSize/4, 0, self.thumbstickFrame.Size.Y.Offset/2 - self.thumbstickSize/4)
                
                self.moveVector = ZERO_VECTOR3
                self.isJumping = false
                self.thumbstickFrame.Position = self.screenPos
                self.moveTouchObject = nil
            end
            function TouchThumbstick:Create(parentFrame)
                
                if self.thumbstickFrame then
                    self.thumbstickFrame:Destroy()
                    self.thumbstickFrame = nil
                    if self.onTouchMovedConn then
                        self.onTouchMovedConn:Disconnect()
                        self.onTouchMovedConn = nil
                    end
                    if self.onTouchEndedConn then
                        self.onTouchEndedConn:Disconnect()
                        self.onTouchEndedConn = nil
                    end
                end
                
                local minAxis = math.min(parentFrame.AbsoluteSize.x, parentFrame.AbsoluteSize.y)
                local isSmallScreen = minAxis <= 500
                self.thumbstickSize = isSmallScreen and 70 or 120
                self.screenPos = isSmallScreen and UDim2.new(0, (self.thumbstickSize/2) - 10, 1, -self.thumbstickSize - 20) or
                    UDim2.new(0, self.thumbstickSize/2, 1, -self.thumbstickSize * 1.75)
                    
                self.thumbstickFrame = Instance.new("Frame")
                self.thumbstickFrame.Name = "ThumbstickFrame"
                self.thumbstickFrame.Active = true
                self.thumbstickFrame.Visible = false
                self.thumbstickFrame.Size = UDim2.new(0, self.thumbstickSize, 0, self.thumbstickSize)
                self.thumbstickFrame.Position = self.screenPos
                self.thumbstickFrame.BackgroundTransparency = 1
                
                local outerImage = Instance.new("ImageLabel")
                outerImage.Name = "OuterImage"
                outerImage.Image = TOUCH_CONTROL_SHEET
                outerImage.ImageRectOffset = Vector2.new()
                outerImage.ImageRectSize = Vector2.new(220, 220)
                outerImage.BackgroundTransparency = 1
                outerImage.Size = UDim2.new(0, self.thumbstickSize, 0, self.thumbstickSize)
                outerImage.Position = UDim2.new(0, 0, 0, 0)
                outerImage.Parent = self.thumbstickFrame
                
                self.stickImage = Instance.new("ImageLabel")
                self.stickImage.Name = "StickImage"
                self.stickImage.Image = TOUCH_CONTROL_SHEET
                self.stickImage.ImageRectOffset = Vector2.new(220, 0)
                self.stickImage.ImageRectSize = Vector2.new(111, 111)
                self.stickImage.BackgroundTransparency = 1
                self.stickImage.Size = UDim2.new(0, self.thumbstickSize/2, 0, self.thumbstickSize/2)
                self.stickImage.Position = UDim2.new(0, self.thumbstickSize/2 - self.thumbstickSize/4, 0, self.thumbstickSize/2 - self.thumbstickSize/4)
                self.stickImage.ZIndex = 2
                self.stickImage.Parent = self.thumbstickFrame
                
                local centerPosition = nil
                local deadZone = 0.05
                
                local function DoMove(direction)
                    
                    local currentMoveVector = direction / (self.thumbstickSize/2)
                    
                    -- Scaled Radial Dead Zone
                    local inputAxisMagnitude = currentMoveVector.magnitude
                    if inputAxisMagnitude < deadZone then
                        currentMoveVector = Vector3.new()
                    else
                        currentMoveVector = currentMoveVector.unit * ((inputAxisMagnitude - deadZone) / (1 - deadZone))
                        -- NOTE: Making currentMoveVector a unit vector will cause the player to instantly go max speed
                        -- must check for zero length vector is using unit
                        currentMoveVector = Vector3.new(currentMoveVector.x, 0, currentMoveVector.y)
                    end
                    
                    self.moveVector = currentMoveVector
                end
                
                local function MoveStick(pos)
                    local relativePosition = Vector2.new(pos.x - centerPosition.x, pos.y - centerPosition.y)
                    local length = relativePosition.magnitude
                    local maxLength = self.thumbstickFrame.AbsoluteSize.x/2
                    if self.isFollowStick and length > maxLength then
                        local offset = relativePosition.unit * maxLength
                        self.thumbstickFrame.Position = UDim2.new(
                            0, pos.x - self.thumbstickFrame.AbsoluteSize.x/2 - offset.x,
                            0, pos.y - self.thumbstickFrame.AbsoluteSize.y/2 - offset.y)
                    else
                        length = math.min(length, maxLength)
                        relativePosition = relativePosition.unit * length
                    end
                    self.stickImage.Position = UDim2.new(0, relativePosition.x + self.stickImage.AbsoluteSize.x/2, 0, relativePosition.y + self.stickImage.AbsoluteSize.y/2)
                end
                
                -- input connections
                self.thumbstickFrame.InputBegan:Connect(function(inputObject)
                    --A touch that starts elsewhere on the screen will be sent to a frame's InputBegan event
                    --if it moves over the frame. So we check that this is actually a new touch (inputObject.UserInputState ~= Enum.UserInputState.Begin)
                    if self.moveTouchObject or inputObject.UserInputType ~= Enum.UserInputType.Touch
                        or inputObject.UserInputState ~= Enum.UserInputState.Begin then
                        return
                    end
                    
                    self.moveTouchObject = inputObject
                    self.thumbstickFrame.Position = UDim2.new(0, inputObject.Position.x - self.thumbstickFrame.Size.X.Offset/2, 0, inputObject.Position.y - self.thumbstickFrame.Size.Y.Offset/2)
                    centerPosition = Vector2.new(self.thumbstickFrame.AbsolutePosition.x + self.thumbstickFrame.AbsoluteSize.x/2,
                        self.thumbstickFrame.AbsolutePosition.y + self.thumbstickFrame.AbsoluteSize.y/2)
                    local direction = Vector2.new(inputObject.Position.x - centerPosition.x, inputObject.Position.y - centerPosition.y)
                end)
                
                self.onTouchMovedConn = UserInputService.TouchMoved:Connect(function(inputObject, isProcessed)
                    if inputObject == self.moveTouchObject then
                        centerPosition = Vector2.new(self.thumbstickFrame.AbsolutePosition.x + self.thumbstickFrame.AbsoluteSize.x/2,
                            self.thumbstickFrame.AbsolutePosition.y + self.thumbstickFrame.AbsoluteSize.y/2)
                        local direction = Vector2.new(inputObject.Position.x - centerPosition.x, inputObject.Position.y - centerPosition.y)
                        DoMove(direction)
                        MoveStick(inputObject.Position)
                    end
                end)
                
                self.onTouchEndedConn = UserInputService.TouchEnded:Connect(function(inputObject, isProcessed)
                    if inputObject == self.moveTouchObject then
                        self:OnInputEnded()
                    end
                end)
                
                GuiService.MenuOpened:Connect(function()
                    if self.moveTouchObject then
                        self:OnInputEnded()
                    end
                end)	
                
                self.thumbstickFrame.Parent = parentFrame
            end
            return TouchThumbstick
        end
        
        function _DynamicThumbstick()
            local ZERO_VECTOR3 = Vector3.new(0,0,0)
            local TOUCH_CONTROLS_SHEET = "rbxasset://textures/ui/Input/TouchControlsSheetV2.png"
            
            local DYNAMIC_THUMBSTICK_ACTION_NAME = "DynamicThumbstickAction"
            local DYNAMIC_THUMBSTICK_ACTION_PRIORITY = Enum.ContextActionPriority.High.Value
            
            local MIDDLE_TRANSPARENCIES = {
                1 - 0.89,
                1 - 0.70,
                1 - 0.60,
                1 - 0.50,
                1 - 0.40,
                1 - 0.30,
                1 - 0.25
            }
            local NUM_MIDDLE_IMAGES = #MIDDLE_TRANSPARENCIES
            
            local FADE_IN_OUT_BACKGROUND = true
            local FADE_IN_OUT_MAX_ALPHA = 0.35
            
            local FADE_IN_OUT_HALF_DURATION_DEFAULT = 0.3
            local FADE_IN_OUT_BALANCE_DEFAULT = 0.5
            local ThumbstickFadeTweenInfo = TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut)
            
            local Players = game:GetService("Players")
            local GuiService = game:GetService("GuiService")
            local UserInputService = game:GetService("UserInputService")
            local ContextActionService = game:GetService("ContextActionService")
            local RunService = game:GetService("RunService")
            local TweenService = game:GetService("TweenService")
            
            local LocalPlayer = Players.LocalPlayer
            if not LocalPlayer then
                Players:GetPropertyChangedSignal("LocalPlayer"):Wait()
                LocalPlayer = Players.LocalPlayer
            end
            
            --[[ The Module ]]--
            local BaseCharacterController = _BaseCharacterController()
            local DynamicThumbstick = setmetatable({}, BaseCharacterController)
            DynamicThumbstick.__index = DynamicThumbstick
            
            function DynamicThumbstick.new()
                local self = setmetatable(BaseCharacterController.new(), DynamicThumbstick)
            
                self.moveTouchObject = nil
                self.moveTouchLockedIn = false
                self.moveTouchFirstChanged = false
                self.moveTouchStartPosition = nil
            
                self.startImage = nil
                self.endImage = nil
                self.middleImages = {}
            
                self.startImageFadeTween = nil
                self.endImageFadeTween = nil
                self.middleImageFadeTweens = {}
            
                self.isFirstTouch = true
            
                self.thumbstickFrame = nil
            
                self.onRenderSteppedConn = nil
            
                self.fadeInAndOutBalance = FADE_IN_OUT_BALANCE_DEFAULT
                self.fadeInAndOutHalfDuration = FADE_IN_OUT_HALF_DURATION_DEFAULT
                self.hasFadedBackgroundInPortrait = false
                self.hasFadedBackgroundInLandscape = false
            
                self.tweenInAlphaStart = nil
                self.tweenOutAlphaStart = nil
            
                return self
            end
            
            -- Note: Overrides base class GetIsJumping with get-and-clear behavior to do a single jump
            -- rather than sustained jumping. This is only to preserve the current behavior through the refactor.
            function DynamicThumbstick:GetIsJumping()
                local wasJumping = self.isJumping
                self.isJumping = false
                return wasJumping
            end
            
            function DynamicThumbstick:Enable(enable, uiParentFrame)
                if enable == nil then return false end			-- If nil, return false (invalid argument)
                enable = enable and true or false				-- Force anything non-nil to boolean before comparison
                if self.enabled == enable then return true end	-- If no state change, return true indicating already in requested state
            
                if enable then
                    -- Enable
                    if not self.thumbstickFrame then
                        self:Create(uiParentFrame)
                    end
            
                    self:BindContextActions()
                else
                    ContextActionService:UnbindAction(DYNAMIC_THUMBSTICK_ACTION_NAME)
                    -- Disable
                    self:OnInputEnded() -- Cleanup
                end
            
                self.enabled = enable
                self.thumbstickFrame.Visible = enable
            end
            
            -- Was called OnMoveTouchEnded in previous version
            function DynamicThumbstick:OnInputEnded()
                self.moveTouchObject = nil
                self.moveVector = ZERO_VECTOR3
                self:FadeThumbstick(false)
            end
            
            function DynamicThumbstick:FadeThumbstick(visible)
                if not visible and self.moveTouchObject then
                    return
                end
                if self.isFirstTouch then return end
            
                if self.startImageFadeTween then
                    self.startImageFadeTween:Cancel()
                end
                if self.endImageFadeTween then
                    self.endImageFadeTween:Cancel()
                end
                for i = 1, #self.middleImages do
                    if self.middleImageFadeTweens[i] then
                        self.middleImageFadeTweens[i]:Cancel()
                    end
                end
            
                if visible then
                    self.startImageFadeTween = TweenService:Create(self.startImage, ThumbstickFadeTweenInfo, { ImageTransparency = 0 })
                    self.startImageFadeTween:Play()
            
                    self.endImageFadeTween = TweenService:Create(self.endImage, ThumbstickFadeTweenInfo, { ImageTransparency = 0.2 })
                    self.endImageFadeTween:Play()
            
                    for i = 1, #self.middleImages do
                        self.middleImageFadeTweens[i] = TweenService:Create(self.middleImages[i], ThumbstickFadeTweenInfo, { ImageTransparency = MIDDLE_TRANSPARENCIES[i] })
                        self.middleImageFadeTweens[i]:Play()
                    end
                else
                    self.startImageFadeTween = TweenService:Create(self.startImage, ThumbstickFadeTweenInfo, { ImageTransparency = 1 })
                    self.startImageFadeTween:Play()
            
                    self.endImageFadeTween = TweenService:Create(self.endImage, ThumbstickFadeTweenInfo, { ImageTransparency = 1 })
                    self.endImageFadeTween:Play()
            
                    for i = 1, #self.middleImages do
                        self.middleImageFadeTweens[i] = TweenService:Create(self.middleImages[i], ThumbstickFadeTweenInfo, { ImageTransparency = 1 })
                        self.middleImageFadeTweens[i]:Play()
                    end
                end
            end
            
            function DynamicThumbstick:FadeThumbstickFrame(fadeDuration, fadeRatio)
                self.fadeInAndOutHalfDuration = fadeDuration * 0.5
                self.fadeInAndOutBalance = fadeRatio
                self.tweenInAlphaStart = tick()
            end
            
            function DynamicThumbstick:InputInFrame(inputObject)
                local frameCornerTopLeft = self.thumbstickFrame.AbsolutePosition
                local frameCornerBottomRight = frameCornerTopLeft + self.thumbstickFrame.AbsoluteSize
                local inputPosition = inputObject.Position
                if inputPosition.X >= frameCornerTopLeft.X and inputPosition.Y >= frameCornerTopLeft.Y then
                    if inputPosition.X <= frameCornerBottomRight.X and inputPosition.Y <= frameCornerBottomRight.Y then
                        return true
                    end
                end
                return false
            end
            
            function DynamicThumbstick:DoFadeInBackground()
                local playerGui = LocalPlayer:FindFirstChildOfClass("PlayerGui")
                local hasFadedBackgroundInOrientation = false
            
                -- only fade in/out the background once per orientation
                if playerGui then
                    if playerGui.CurrentScreenOrientation == Enum.ScreenOrientation.LandscapeLeft or
                        playerGui.CurrentScreenOrientation == Enum.ScreenOrientation.LandscapeRight then
                            hasFadedBackgroundInOrientation = self.hasFadedBackgroundInLandscape
                            self.hasFadedBackgroundInLandscape = true
                    elseif playerGui.CurrentScreenOrientation == Enum.ScreenOrientation.Portrait then
                            hasFadedBackgroundInOrientation = self.hasFadedBackgroundInPortrait
                            self.hasFadedBackgroundInPortrait = true
                    end
                end
            
                if not hasFadedBackgroundInOrientation then
                    self.fadeInAndOutHalfDuration = FADE_IN_OUT_HALF_DURATION_DEFAULT
                    self.fadeInAndOutBalance = FADE_IN_OUT_BALANCE_DEFAULT
                    self.tweenInAlphaStart = tick()
                end
            end
            
            function DynamicThumbstick:DoMove(direction)
                local currentMoveVector = direction
            
                -- Scaled Radial Dead Zone
                local inputAxisMagnitude = currentMoveVector.magnitude
                if inputAxisMagnitude < self.radiusOfDeadZone then
                    currentMoveVector = ZERO_VECTOR3
                else
                    currentMoveVector = currentMoveVector.unit*(
                        1 - math.max(0, (self.radiusOfMaxSpeed - currentMoveVector.magnitude)/self.radiusOfMaxSpeed)
                    )
                    currentMoveVector = Vector3.new(currentMoveVector.x, 0, currentMoveVector.y)
                end
            
                self.moveVector = currentMoveVector
            end
            
            
            function DynamicThumbstick:LayoutMiddleImages(startPos, endPos)
                local startDist = (self.thumbstickSize / 2) + self.middleSize
                local vector = endPos - startPos
                local distAvailable = vector.magnitude - (self.thumbstickRingSize / 2) - self.middleSize
                local direction = vector.unit
            
                local distNeeded = self.middleSpacing * NUM_MIDDLE_IMAGES
                local spacing = self.middleSpacing
            
                if distNeeded < distAvailable then
                    spacing = distAvailable / NUM_MIDDLE_IMAGES
                end
            
                for i = 1, NUM_MIDDLE_IMAGES do
                    local image = self.middleImages[i]
                    local distWithout = startDist + (spacing * (i - 2))
                    local currentDist = startDist + (spacing * (i - 1))
            
                    if distWithout < distAvailable then
                        local pos = endPos - direction * currentDist
                        local exposedFraction = math.clamp(1 - ((currentDist - distAvailable) / spacing), 0, 1)
            
                        image.Visible = true
                        image.Position = UDim2.new(0, pos.X, 0, pos.Y)
                        image.Size = UDim2.new(0, self.middleSize * exposedFraction, 0, self.middleSize * exposedFraction)
                    else
                        image.Visible = false
                    end
                end
            end
            
            function DynamicThumbstick:MoveStick(pos)
                local vector2StartPosition = Vector2.new(self.moveTouchStartPosition.X, self.moveTouchStartPosition.Y)
                local startPos = vector2StartPosition - self.thumbstickFrame.AbsolutePosition
                local endPos = Vector2.new(pos.X, pos.Y) - self.thumbstickFrame.AbsolutePosition
                self.endImage.Position = UDim2.new(0, endPos.X, 0, endPos.Y)
                self:LayoutMiddleImages(startPos, endPos)
            end
            
            function DynamicThumbstick:BindContextActions()
                local function inputBegan(inputObject)
                    if self.moveTouchObject then
                        return Enum.ContextActionResult.Pass
                    end
            
                    if not self:InputInFrame(inputObject) then
                        return Enum.ContextActionResult.Pass
                    end
            
                    if self.isFirstTouch then
                        self.isFirstTouch = false
                        local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out,0,false,0)
                        TweenService:Create(self.startImage, tweenInfo, {Size = UDim2.new(0, 0, 0, 0)}):Play()
                        TweenService:Create(
                            self.endImage,
                            tweenInfo,
                            {Size = UDim2.new(0, self.thumbstickSize, 0, self.thumbstickSize), ImageColor3 = Color3.new(0,0,0)}
                        ):Play()
                    end
            
                    self.moveTouchLockedIn = false
                    self.moveTouchObject = inputObject
                    self.moveTouchStartPosition = inputObject.Position
                    self.moveTouchFirstChanged = true
            
                    if FADE_IN_OUT_BACKGROUND then
                        self:DoFadeInBackground()
                    end
            
                    return Enum.ContextActionResult.Pass
                end
            
                local function inputChanged(inputObject)
                    if inputObject == self.moveTouchObject then
                        if self.moveTouchFirstChanged then
                            self.moveTouchFirstChanged = false
            
                            local startPosVec2 = Vector2.new(
                                inputObject.Position.X - self.thumbstickFrame.AbsolutePosition.X,
                                inputObject.Position.Y - self.thumbstickFrame.AbsolutePosition.Y
                            )
                            self.startImage.Visible = true
                            self.startImage.Position = UDim2.new(0, startPosVec2.X, 0, startPosVec2.Y)
                            self.endImage.Visible = true
                            self.endImage.Position = self.startImage.Position
            
                            self:FadeThumbstick(true)
                            self:MoveStick(inputObject.Position)
                        end
            
                        self.moveTouchLockedIn = true
            
                        local direction = Vector2.new(
                            inputObject.Position.x - self.moveTouchStartPosition.x,
                            inputObject.Position.y - self.moveTouchStartPosition.y
                        )
                        if math.abs(direction.x) > 0 or math.abs(direction.y) > 0 then
                            self:DoMove(direction)
                            self:MoveStick(inputObject.Position)
                        end
                        return Enum.ContextActionResult.Sink
                    end
                    return Enum.ContextActionResult.Pass
                end
            
                local function inputEnded(inputObject)
                    if inputObject == self.moveTouchObject then
                        self:OnInputEnded()
                        if self.moveTouchLockedIn then
                            return Enum.ContextActionResult.Sink
                        end
                    end
                    return Enum.ContextActionResult.Pass
                end
            
                local function handleInput(actionName, inputState, inputObject)
                    if inputState == Enum.UserInputState.Begin then
                        return inputBegan(inputObject)
                    elseif inputState == Enum.UserInputState.Change then
                        return inputChanged(inputObject)
                    elseif inputState == Enum.UserInputState.End then
                        return inputEnded(inputObject)
                    elseif inputState == Enum.UserInputState.Cancel then
                        self:OnInputEnded()
                    end
                end
            
                ContextActionService:BindActionAtPriority(
                    DYNAMIC_THUMBSTICK_ACTION_NAME,
                    handleInput,
                    false,
                    DYNAMIC_THUMBSTICK_ACTION_PRIORITY,
                    Enum.UserInputType.Touch)
            end
            
            function DynamicThumbstick:Create(parentFrame)
                if self.thumbstickFrame then
                    self.thumbstickFrame:Destroy()
                    self.thumbstickFrame = nil
                    if self.onRenderSteppedConn then
                        self.onRenderSteppedConn:Disconnect()
                        self.onRenderSteppedConn = nil
                    end
                end
            
                self.thumbstickSize = 45
                self.thumbstickRingSize = 20
                self.middleSize = 10
                self.middleSpacing = self.middleSize + 4
                self.radiusOfDeadZone = 2
                self.radiusOfMaxSpeed = 20
            
                local screenSize = parentFrame.AbsoluteSize
                local isBigScreen = math.min(screenSize.x, screenSize.y) > 500
                if isBigScreen then
                    self.thumbstickSize = self.thumbstickSize * 2
                    self.thumbstickRingSize = self.thumbstickRingSize * 2
                    self.middleSize = self.middleSize * 2
                    self.middleSpacing = self.middleSpacing * 2
                    self.radiusOfDeadZone = self.radiusOfDeadZone * 2
                    self.radiusOfMaxSpeed = self.radiusOfMaxSpeed * 2
                end
            
                local function layoutThumbstickFrame(portraitMode)
                    if portraitMode then
                        self.thumbstickFrame.Size = UDim2.new(1, 0, 0.4, 0)
                        self.thumbstickFrame.Position = UDim2.new(0, 0, 0.6, 0)
                    else
                        self.thumbstickFrame.Size = UDim2.new(0.4, 0, 2/3, 0)
                        self.thumbstickFrame.Position = UDim2.new(0, 0, 1/3, 0)
                    end
                end
            
                self.thumbstickFrame = Instance.new("Frame")
                self.thumbstickFrame.BorderSizePixel = 0
                self.thumbstickFrame.Name = "DynamicThumbstickFrame"
                self.thumbstickFrame.Visible = false
                self.thumbstickFrame.BackgroundTransparency = 1.0
                self.thumbstickFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
                self.thumbstickFrame.Active = false
                layoutThumbstickFrame(false)
            
                self.startImage = Instance.new("ImageLabel")
                self.startImage.Name = "ThumbstickStart"
                self.startImage.Visible = true
                self.startImage.BackgroundTransparency = 1
                self.startImage.Image = TOUCH_CONTROLS_SHEET
                self.startImage.ImageRectOffset = Vector2.new(1,1)
                self.startImage.ImageRectSize = Vector2.new(144, 144)
                self.startImage.ImageColor3 = Color3.new(0, 0, 0)
                self.startImage.AnchorPoint = Vector2.new(0.5, 0.5)
                self.startImage.Position = UDim2.new(0, self.thumbstickRingSize * 3.3, 1, -self.thumbstickRingSize  * 2.8)
                self.startImage.Size = UDim2.new(0, self.thumbstickRingSize  * 3.7, 0, self.thumbstickRingSize  * 3.7)
                self.startImage.ZIndex = 10
                self.startImage.Parent = self.thumbstickFrame
            
                self.endImage = Instance.new("ImageLabel")
                self.endImage.Name = "ThumbstickEnd"
                self.endImage.Visible = true
                self.endImage.BackgroundTransparency = 1
                self.endImage.Image = TOUCH_CONTROLS_SHEET
                self.endImage.ImageRectOffset = Vector2.new(1,1)
                self.endImage.ImageRectSize =  Vector2.new(144, 144)
                self.endImage.AnchorPoint = Vector2.new(0.5, 0.5)
                self.endImage.Position = self.startImage.Position
                self.endImage.Size = UDim2.new(0, self.thumbstickSize * 0.8, 0, self.thumbstickSize * 0.8)
                self.endImage.ZIndex = 10
                self.endImage.Parent = self.thumbstickFrame
            
                for i = 1, NUM_MIDDLE_IMAGES do
                    self.middleImages[i] = Instance.new("ImageLabel")
                    self.middleImages[i].Name = "ThumbstickMiddle"
                    self.middleImages[i].Visible = false
                    self.middleImages[i].BackgroundTransparency = 1
                    self.middleImages[i].Image = TOUCH_CONTROLS_SHEET
                    self.middleImages[i].ImageRectOffset = Vector2.new(1,1)
                    self.middleImages[i].ImageRectSize = Vector2.new(144, 144)
                    self.middleImages[i].ImageTransparency = MIDDLE_TRANSPARENCIES[i]
                    self.middleImages[i].AnchorPoint = Vector2.new(0.5, 0.5)
                    self.middleImages[i].ZIndex = 9
                    self.middleImages[i].Parent = self.thumbstickFrame
                end
            
                local CameraChangedConn = nil
                local function onCurrentCameraChanged()
                    if CameraChangedConn then
                        CameraChangedConn:Disconnect()
                        CameraChangedConn = nil
                    end
                    local newCamera = workspace.CurrentCamera
                    if newCamera then
                        local function onViewportSizeChanged()
                            local size = newCamera.ViewportSize
                            local portraitMode = size.X < size.Y
                            layoutThumbstickFrame(portraitMode)
                        end
                        CameraChangedConn = newCamera:GetPropertyChangedSignal("ViewportSize"):Connect(onViewportSizeChanged)
                        onViewportSizeChanged()
                    end
                end
                workspace:GetPropertyChangedSignal("CurrentCamera"):Connect(onCurrentCameraChanged)
                if workspace.CurrentCamera then
                    onCurrentCameraChanged()
                end
            
                self.moveTouchStartPosition = nil
            
                self.startImageFadeTween = nil
                self.endImageFadeTween = nil
                self.middleImageFadeTweens = {}
            
                self.onRenderSteppedConn = RunService.RenderStepped:Connect(function()
                    if self.tweenInAlphaStart ~= nil then
                        local delta = tick() - self.tweenInAlphaStart
                        local fadeInTime = (self.fadeInAndOutHalfDuration * 2 * self.fadeInAndOutBalance)
                        self.thumbstickFrame.BackgroundTransparency = 1 - FADE_IN_OUT_MAX_ALPHA*math.min(delta/fadeInTime, 1)
                        if delta > fadeInTime then
                            self.tweenOutAlphaStart = tick()
                            self.tweenInAlphaStart = nil
                        end
                    elseif self.tweenOutAlphaStart ~= nil then
                        local delta = tick() - self.tweenOutAlphaStart
                        local fadeOutTime = (self.fadeInAndOutHalfDuration * 2) - (self.fadeInAndOutHalfDuration * 2 * self.fadeInAndOutBalance)
                        self.thumbstickFrame.BackgroundTransparency = 1 - FADE_IN_OUT_MAX_ALPHA + FADE_IN_OUT_MAX_ALPHA*math.min(delta/fadeOutTime, 1)
                        if delta > fadeOutTime  then
                            self.tweenOutAlphaStart = nil
                        end
                    end
                end)
            
                self.onTouchEndedConn = UserInputService.TouchEnded:connect(function(inputObject)
                    if inputObject == self.moveTouchObject then
                        self:OnInputEnded()
                    end
                end)
            
                GuiService.MenuOpened:connect(function()
                    if self.moveTouchObject then
                        self:OnInputEnded()
                    end
                end)
            
                local playerGui = LocalPlayer:FindFirstChildOfClass("PlayerGui")
                while not playerGui do
                    LocalPlayer.ChildAdded:wait()
                    playerGui = LocalPlayer:FindFirstChildOfClass("PlayerGui")
                end
            
                local playerGuiChangedConn = nil
                local originalScreenOrientationWasLandscape =	playerGui.CurrentScreenOrientation == Enum.ScreenOrientation.LandscapeLeft or
                                                                playerGui.CurrentScreenOrientation == Enum.ScreenOrientation.LandscapeRight
            
                local function longShowBackground()
                    self.fadeInAndOutHalfDuration = 2.5
                    self.fadeInAndOutBalance = 0.05
                    self.tweenInAlphaStart = tick()
                end
            
                playerGuiChangedConn = playerGui:GetPropertyChangedSignal("CurrentScreenOrientation"):Connect(function()
                    if (originalScreenOrientationWasLandscape and playerGui.CurrentScreenOrientation == Enum.ScreenOrientation.Portrait) or
                        (not originalScreenOrientationWasLandscape and playerGui.CurrentScreenOrientation ~= Enum.ScreenOrientation.Portrait) then
            
                        playerGuiChangedConn:disconnect()
                        longShowBackground()
            
                        if originalScreenOrientationWasLandscape then
                            self.hasFadedBackgroundInPortrait = true
                        else
                            self.hasFadedBackgroundInLandscape = true
                        end
                    end
                end)
            
                self.thumbstickFrame.Parent = parentFrame
            
                if game:IsLoaded() then
                    longShowBackground()
                else
                    coroutine.wrap(function()
                        game.Loaded:Wait()
                        longShowBackground()
                    end)()
                end
            end
            
            return DynamicThumbstick
        end
        
        function _Gamepad()
            local UserInputService = game:GetService("UserInputService")
            local ContextActionService = game:GetService("ContextActionService")
            
            --[[ Constants ]]--
            local ZERO_VECTOR3 = Vector3.new(0,0,0)
            local NONE = Enum.UserInputType.None
            local thumbstickDeadzone = 0.2
            
            --[[ The Module ]]--
            local BaseCharacterController = _BaseCharacterController()
            local Gamepad = setmetatable({}, BaseCharacterController)
            Gamepad.__index = Gamepad
            
            function Gamepad.new(CONTROL_ACTION_PRIORITY)
                local self = setmetatable(BaseCharacterController.new(), Gamepad)
            
                self.CONTROL_ACTION_PRIORITY = CONTROL_ACTION_PRIORITY
            
                self.forwardValue  = 0
                self.backwardValue = 0
                self.leftValue = 0
                self.rightValue = 0
            
                self.activeGamepad = NONE	-- Enum.UserInputType.Gamepad1, 2, 3...
                self.gamepadConnectedConn = nil
                self.gamepadDisconnectedConn = nil
                return self
            end
            
            function Gamepad:Enable(enable)
                if not UserInputService.GamepadEnabled then
                    return false
                end
            
                if enable == self.enabled then
                    -- Module is already in the state being requested. True is returned here since the module will be in the state
                    -- expected by the code that follows the Enable() call. This makes more sense than returning false to indicate
                    -- no action was necessary. False indicates failure to be in requested/expected state.
                    return true
                end
            
                self.forwardValue  = 0
                self.backwardValue = 0
                self.leftValue = 0
                self.rightValue = 0
                self.moveVector = ZERO_VECTOR3
                self.isJumping = false
            
                if enable then
                    self.activeGamepad = self:GetHighestPriorityGamepad()
                    if self.activeGamepad ~= NONE then
                        self:BindContextActions()
                        self:ConnectGamepadConnectionListeners()
                    else
                        -- No connected gamepads, failure to enable
                        return false
                    end
                else
                    self:UnbindContextActions()
                    self:DisconnectGamepadConnectionListeners()
                    self.activeGamepad = NONE
                end
            
                self.enabled = enable
                return true
            end
            
            -- This function selects the lowest number gamepad from the currently-connected gamepad
            -- and sets it as the active gamepad
            function Gamepad:GetHighestPriorityGamepad()
                local connectedGamepads = UserInputService:GetConnectedGamepads()
                local bestGamepad = NONE -- Note that this value is higher than all valid gamepad values
                for _, gamepad in pairs(connectedGamepads) do
                    if gamepad.Value < bestGamepad.Value then
                        bestGamepad = gamepad
                    end
                end
                return bestGamepad
            end
            
            function Gamepad:BindContextActions()
            
                if self.activeGamepad == NONE then
                    -- There must be an active gamepad to set up bindings
                    return false
                end
            
                local handleJumpAction = function(actionName, inputState, inputObject)
                    self.isJumping = (inputState == Enum.UserInputState.Begin)
                    return Enum.ContextActionResult.Sink
                end
            
                local handleThumbstickInput = function(actionName, inputState, inputObject)
            
                    if inputState == Enum.UserInputState.Cancel then
                        self.moveVector = ZERO_VECTOR3
                        return Enum.ContextActionResult.Sink
                    end
            
                    if self.activeGamepad ~= inputObject.UserInputType then
                        return Enum.ContextActionResult.Pass
                    end
                    if inputObject.KeyCode ~= Enum.KeyCode.Thumbstick1 then return end
            
                    if inputObject.Position.magnitude > thumbstickDeadzone then
                        self.moveVector  =  Vector3.new(inputObject.Position.X, 0, -inputObject.Position.Y)
                    else
                        self.moveVector = ZERO_VECTOR3
                    end
                    return Enum.ContextActionResult.Sink
                end
            
                ContextActionService:BindActivate(self.activeGamepad, Enum.KeyCode.ButtonR2)
                ContextActionService:BindActionAtPriority("jumpAction", handleJumpAction, false,
                    self.CONTROL_ACTION_PRIORITY, Enum.KeyCode.ButtonA)
                ContextActionService:BindActionAtPriority("moveThumbstick", handleThumbstickInput, false,
                    self.CONTROL_ACTION_PRIORITY, Enum.KeyCode.Thumbstick1)
            
                return true
            end
            
            function Gamepad:UnbindContextActions()
                if self.activeGamepad ~= NONE then
                    ContextActionService:UnbindActivate(self.activeGamepad, Enum.KeyCode.ButtonR2)
                end
                ContextActionService:UnbindAction("moveThumbstick")
                ContextActionService:UnbindAction("jumpAction")
            end
            
            function Gamepad:OnNewGamepadConnected()
                -- A new gamepad has been connected.
                local bestGamepad = self:GetHighestPriorityGamepad()
            
                if bestGamepad == self.activeGamepad then
                    -- A new gamepad was connected, but our active gamepad is not changing
                    return
                end
            
                if bestGamepad == NONE then
                    -- There should be an active gamepad when GamepadConnected fires, so this should not
                    -- normally be hit. If there is no active gamepad, unbind actions but leave
                    -- the module enabled and continue to listen for a new gamepad connection.
                    warn("Gamepad:OnNewGamepadConnected found no connected gamepads")
                    self:UnbindContextActions()
                    return
                end
            
                if self.activeGamepad ~= NONE then
                    -- Switching from one active gamepad to another
                    self:UnbindContextActions()
                end
            
                self.activeGamepad = bestGamepad
                self:BindContextActions()
            end
            
            function Gamepad:OnCurrentGamepadDisconnected()
                if self.activeGamepad ~= NONE then
                    ContextActionService:UnbindActivate(self.activeGamepad, Enum.KeyCode.ButtonR2)
                end
            
                local bestGamepad = self:GetHighestPriorityGamepad()
            
                if self.activeGamepad ~= NONE and bestGamepad == self.activeGamepad then
                    warn("Gamepad:OnCurrentGamepadDisconnected found the supposedly disconnected gamepad in connectedGamepads.")
                    self:UnbindContextActions()
                    self.activeGamepad = NONE
                    return
                end
            
                if bestGamepad == NONE then
                    -- No active gamepad, unbinding actions but leaving gamepad connection listener active
                    self:UnbindContextActions()
                    self.activeGamepad = NONE
                else
                    -- Set new gamepad as active and bind to tool activation
                    self.activeGamepad = bestGamepad
                    ContextActionService:BindActivate(self.activeGamepad, Enum.KeyCode.ButtonR2)
                end
            end
            
            function Gamepad:ConnectGamepadConnectionListeners()
                self.gamepadConnectedConn = UserInputService.GamepadConnected:Connect(function(gamepadEnum)
                    self:OnNewGamepadConnected()
                end)
            
                self.gamepadDisconnectedConn = UserInputService.GamepadDisconnected:Connect(function(gamepadEnum)
                    if self.activeGamepad == gamepadEnum then
                        self:OnCurrentGamepadDisconnected()
                    end
                end)
            
            end
            
            function Gamepad:DisconnectGamepadConnectionListeners()
                if self.gamepadConnectedConn then
                    self.gamepadConnectedConn:Disconnect()
                    self.gamepadConnectedConn = nil
                end
            
                if self.gamepadDisconnectedConn then
                    self.gamepadDisconnectedConn:Disconnect()
                    self.gamepadDisconnectedConn = nil
                end
            end
            
            return Gamepad
        end
        
        function _Keyboard()
            
            --[[ Roblox Services ]]--
            local UserInputService = game:GetService("UserInputService")
            local ContextActionService = game:GetService("ContextActionService")
            
            --[[ Constants ]]--
            local ZERO_VECTOR3 = Vector3.new(0,0,0)
            
            --[[ The Module ]]--
            local BaseCharacterController = _BaseCharacterController()
            local Keyboard = setmetatable({}, BaseCharacterController)
            Keyboard.__index = Keyboard
            
            function Keyboard.new(CONTROL_ACTION_PRIORITY)
                local self = setmetatable(BaseCharacterController.new(), Keyboard)
            
                self.CONTROL_ACTION_PRIORITY = CONTROL_ACTION_PRIORITY
            
                self.textFocusReleasedConn = nil
                self.textFocusGainedConn = nil
                self.windowFocusReleasedConn = nil
            
                self.forwardValue  = 0
                self.backwardValue = 0
                self.leftValue = 0
                self.rightValue = 0
            
                self.jumpEnabled = true
            
                return self
            end
            
            function Keyboard:Enable(enable)
                if not UserInputService.KeyboardEnabled then
                    return false
                end
            
                if enable == self.enabled then
                    -- Module is already in the state being requested. True is returned here since the module will be in the state
                    -- expected by the code that follows the Enable() call. This makes more sense than returning false to indicate
                    -- no action was necessary. False indicates failure to be in requested/expected state.
                    return true
                end
            
                self.forwardValue  = 0
                self.backwardValue = 0
                self.leftValue = 0
                self.rightValue = 0
                self.moveVector = ZERO_VECTOR3
                self.jumpRequested = false
                self:UpdateJump()
            
                if enable then
                    self:BindContextActions()
                    self:ConnectFocusEventListeners()
                else
                    self:UnbindContextActions()
                    self:DisconnectFocusEventListeners()
                end
            
                self.enabled = enable
                return true
            end
            
            function Keyboard:UpdateMovement(inputState)
                if inputState == Enum.UserInputState.Cancel then
                    self.moveVector = ZERO_VECTOR3
                else
                    self.moveVector = Vector3.new(self.leftValue + self.rightValue, 0, self.forwardValue + self.backwardValue)
                end
            end
            
            function Keyboard:UpdateJump()
                self.isJumping = self.jumpRequested
            end
            
            function Keyboard:BindContextActions()
            
                -- Note: In the previous version of this code, the movement values were not zeroed-out on UserInputState. Cancel, now they are,
                -- which fixes them from getting stuck on.
                -- We return ContextActionResult.Pass here for legacy reasons.
                -- Many games rely on gameProcessedEvent being false on UserInputService.InputBegan for these control actions.
                local handleMoveForward = function(actionName, inputState, inputObject)
                    self.forwardValue = (inputState == Enum.UserInputState.Begin) and -1 or 0
                    self:UpdateMovement(inputState)
                    return Enum.ContextActionResult.Pass
                end
            
                local handleMoveBackward = function(actionName, inputState, inputObject)
                    self.backwardValue = (inputState == Enum.UserInputState.Begin) and 1 or 0
                    self:UpdateMovement(inputState)
                    return Enum.ContextActionResult.Pass
                end
            
                local handleMoveLeft = function(actionName, inputState, inputObject)
                    self.leftValue = (inputState == Enum.UserInputState.Begin) and -1 or 0
                    self:UpdateMovement(inputState)
                    return Enum.ContextActionResult.Pass
                end
            
                local handleMoveRight = function(actionName, inputState, inputObject)
                    self.rightValue = (inputState == Enum.UserInputState.Begin) and 1 or 0
                    self:UpdateMovement(inputState)
                    return Enum.ContextActionResult.Pass
                end
            
                local handleJumpAction = function(actionName, inputState, inputObject)
                    self.jumpRequested = self.jumpEnabled and (inputState == Enum.UserInputState.Begin)
                    self:UpdateJump()
                    return Enum.ContextActionResult.Pass
                end
            
                -- TODO: Revert to KeyCode bindings so that in the future the abstraction layer from actual keys to
                -- movement direction is done in Lua
                ContextActionService:BindActionAtPriority("moveForwardAction", handleMoveForward, false,
                    self.CONTROL_ACTION_PRIORITY, Enum.PlayerActions.CharacterForward)
                ContextActionService:BindActionAtPriority("moveBackwardAction", handleMoveBackward, false,
                    self.CONTROL_ACTION_PRIORITY, Enum.PlayerActions.CharacterBackward)
                ContextActionService:BindActionAtPriority("moveLeftAction", handleMoveLeft, false,
                    self.CONTROL_ACTION_PRIORITY, Enum.PlayerActions.CharacterLeft)
                ContextActionService:BindActionAtPriority("moveRightAction", handleMoveRight, false,
                    self.CONTROL_ACTION_PRIORITY, Enum.PlayerActions.CharacterRight)
                ContextActionService:BindActionAtPriority("jumpAction", handleJumpAction, false,
                    self.CONTROL_ACTION_PRIORITY, Enum.PlayerActions.CharacterJump)
            end
            
            function Keyboard:UnbindContextActions()
                ContextActionService:UnbindAction("moveForwardAction")
                ContextActionService:UnbindAction("moveBackwardAction")
                ContextActionService:UnbindAction("moveLeftAction")
                ContextActionService:UnbindAction("moveRightAction")
                ContextActionService:UnbindAction("jumpAction")
            end
            
            function Keyboard:ConnectFocusEventListeners()
                local function onFocusReleased()
                    self.moveVector = ZERO_VECTOR3
                    self.forwardValue  = 0
                    self.backwardValue = 0
                    self.leftValue = 0
                    self.rightValue = 0
                    self.jumpRequested = false
                    self:UpdateJump()
                end
            
                local function onTextFocusGained(textboxFocused)
                    self.jumpRequested = false
                    self:UpdateJump()
                end
            
                self.textFocusReleasedConn = UserInputService.TextBoxFocusReleased:Connect(onFocusReleased)
                self.textFocusGainedConn = UserInputService.TextBoxFocused:Connect(onTextFocusGained)
                self.windowFocusReleasedConn = UserInputService.WindowFocused:Connect(onFocusReleased)
            end
            
            function Keyboard:DisconnectFocusEventListeners()
                if self.textFocusReleasedCon then
                    self.textFocusReleasedCon:Disconnect()
                    self.textFocusReleasedCon = nil
                end
                if self.textFocusGainedConn then
                    self.textFocusGainedConn:Disconnect()
                    self.textFocusGainedConn = nil
                end
                if self.windowFocusReleasedConn then
                    self.windowFocusReleasedConn:Disconnect()
                    self.windowFocusReleasedConn = nil
                end
            end
            
            return Keyboard
        end
        
        function _ControlModule()
            local ControlModule = {}
            ControlModule.__index = ControlModule
            
            --[[ Roblox Services ]]--
            local Players = game:GetService("Players")
            local RunService = game:GetService("RunService")
            local UserInputService = game:GetService("UserInputService")
            local Workspace = game:GetService("Workspace")
            local UserGameSettings = UserSettings():GetService("UserGameSettings")
            
            -- Roblox User Input Control Modules - each returns a new() constructor function used to create controllers as needed
            local Keyboard = _Keyboard()
            local Gamepad = _Gamepad()
            local DynamicThumbstick = _DynamicThumbstick()
            
            local FFlagUserMakeThumbstickDynamic do
                local success, value = pcall(function()
                    return UserSettings():IsUserFeatureEnabled("UserMakeThumbstickDynamic")
                end)
                FFlagUserMakeThumbstickDynamic = success and value
            end
            
            local TouchThumbstick = FFlagUserMakeThumbstickDynamic and DynamicThumbstick or _TouchThumbstick()
            
            -- These controllers handle only walk/run movement, jumping is handled by the
            -- TouchJump controller if any of these are active
            local ClickToMove = _ClickToMoveController()
            local TouchJump = _TouchJump()
            
            local VehicleController = _VehicleController()
            
            local CONTROL_ACTION_PRIORITY = Enum.ContextActionPriority.Default.Value
            
            -- Mapping from movement mode and lastInputType enum values to control modules to avoid huge if elseif switching
            local movementEnumToModuleMap = {
                [Enum.TouchMovementMode.DPad] = DynamicThumbstick,
                [Enum.DevTouchMovementMode.DPad] = DynamicThumbstick,
                [Enum.TouchMovementMode.Thumbpad] = DynamicThumbstick,
                [Enum.DevTouchMovementMode.Thumbpad] = DynamicThumbstick,
                [Enum.TouchMovementMode.Thumbstick] = TouchThumbstick,
                [Enum.DevTouchMovementMode.Thumbstick] = TouchThumbstick,
                [Enum.TouchMovementMode.DynamicThumbstick] = DynamicThumbstick,
                [Enum.DevTouchMovementMode.DynamicThumbstick] = DynamicThumbstick,
                [Enum.TouchMovementMode.ClickToMove] = ClickToMove,
                [Enum.DevTouchMovementMode.ClickToMove] = ClickToMove,
            
                -- Current default
                [Enum.TouchMovementMode.Default] = DynamicThumbstick,
            
                [Enum.ComputerMovementMode.Default] = Keyboard,
                [Enum.ComputerMovementMode.KeyboardMouse] = Keyboard,
                [Enum.DevComputerMovementMode.KeyboardMouse] = Keyboard,
                [Enum.DevComputerMovementMode.Scriptable] = nil,
                [Enum.ComputerMovementMode.ClickToMove] = ClickToMove,
                [Enum.DevComputerMovementMode.ClickToMove] = ClickToMove,
            }
            
            -- Keyboard controller is really keyboard and mouse controller
            local computerInputTypeToModuleMap = {
                [Enum.UserInputType.Keyboard] = Keyboard,
                [Enum.UserInputType.MouseButton1] = Keyboard,
                [Enum.UserInputType.MouseButton2] = Keyboard,
                [Enum.UserInputType.MouseButton3] = Keyboard,
                [Enum.UserInputType.MouseWheel] = Keyboard,
                [Enum.UserInputType.MouseMovement] = Keyboard,
                [Enum.UserInputType.Gamepad1] = Gamepad,
                [Enum.UserInputType.Gamepad2] = Gamepad,
                [Enum.UserInputType.Gamepad3] = Gamepad,
                [Enum.UserInputType.Gamepad4] = Gamepad,
            }
            
            local lastInputType
            
            function ControlModule.new()
                local self = setmetatable({},ControlModule)
            
                -- The Modules above are used to construct controller instances as-needed, and this
                -- table is a map from Module to the instance created from it
                self.controllers = {}
            
                self.activeControlModule = nil	-- Used to prevent unnecessarily expensive checks on each input event
                self.activeController = nil
                self.touchJumpController = nil
                self.moveFunction = Players.LocalPlayer.Move
                self.humanoid = nil
                self.lastInputType = Enum.UserInputType.None
            
                -- For Roblox self.vehicleController
                self.humanoidSeatedConn = nil
                self.vehicleController = nil
            
                self.touchControlFrame = nil
            
                self.vehicleController = VehicleController.new(CONTROL_ACTION_PRIORITY)
            
                Players.LocalPlayer.CharacterAdded:Connect(function(char) self:OnCharacterAdded(char) end)
                Players.LocalPlayer.CharacterRemoving:Connect(function(char) self:OnCharacterRemoving(char) end)
                if Players.LocalPlayer.Character then
                    self:OnCharacterAdded(Players.LocalPlayer.Character)
                end
            
                RunService:BindToRenderStep("ControlScriptRenderstep", Enum.RenderPriority.Input.Value, function(dt)
                    self:OnRenderStepped(dt)
                end)
            
                UserInputService.LastInputTypeChanged:Connect(function(newLastInputType)
                    self:OnLastInputTypeChanged(newLastInputType)
                end)
            
            
                UserGameSettings:GetPropertyChangedSignal("TouchMovementMode"):Connect(function()
                    self:OnTouchMovementModeChange()
                end)
                Players.LocalPlayer:GetPropertyChangedSignal("DevTouchMovementMode"):Connect(function()
                    self:OnTouchMovementModeChange()
                end)
            
                UserGameSettings:GetPropertyChangedSignal("ComputerMovementMode"):Connect(function()
                    self:OnComputerMovementModeChange()
                end)
                Players.LocalPlayer:GetPropertyChangedSignal("DevComputerMovementMode"):Connect(function()
                    self:OnComputerMovementModeChange()
                end)
            
                --[[ Touch Device UI ]]--
                self.playerGui = nil
                self.touchGui = nil
                self.playerGuiAddedConn = nil
            
                if UserInputService.TouchEnabled then
                    self.playerGui = Players.LocalPlayer:FindFirstChildOfClass("PlayerGui")
                    if self.playerGui then
                        self:CreateTouchGuiContainer()
                        self:OnLastInputTypeChanged(UserInputService:GetLastInputType())
                    else
                        self.playerGuiAddedConn = Players.LocalPlayer.ChildAdded:Connect(function(child)
                            if child:IsA("PlayerGui") then
                                self.playerGui = child
                                self:CreateTouchGuiContainer()
                                self.playerGuiAddedConn:Disconnect()
                                self.playerGuiAddedConn = nil
                                self:OnLastInputTypeChanged(UserInputService:GetLastInputType())
                            end
                        end)
                    end
                else
                    self:OnLastInputTypeChanged(UserInputService:GetLastInputType())
                end
            
                return self
            end
            
            -- Convenience function so that calling code does not have to first get the activeController
            -- and then call GetMoveVector on it. When there is no active controller, this function returns
            -- nil so that this case can be distinguished from no current movement (which returns zero vector).
            function ControlModule:GetMoveVector()
                if self.activeController then
                    return self.activeController:GetMoveVector()
                end
                return Vector3.new(0,0,0)
            end
            
            function ControlModule:GetActiveController()
                return self.activeController
            end
            
            function ControlModule:EnableActiveControlModule()
                if self.activeControlModule == ClickToMove then
                    -- For ClickToMove, when it is the player's choice, we also enable the full keyboard controls.
                    -- When the developer is forcing click to move, the most keyboard controls (WASD) are not available, only jump.
                    self.activeController:Enable(
                        true,
                        Players.LocalPlayer.DevComputerMovementMode == Enum.DevComputerMovementMode.UserChoice,
                        self.touchJumpController
                    )
                elseif self.touchControlFrame then
                    self.activeController:Enable(true, self.touchControlFrame)
                else
                    self.activeController:Enable(true)
                end
            end
            
            function ControlModule:Enable(enable)
                if not self.activeController then
                    return
                end
            
                if enable == nil then
                    enable = true
                end
                if enable then
                    self:EnableActiveControlModule()
                else
                    self:Disable()
                end
            end
            
            -- For those who prefer distinct functions
            function ControlModule:Disable()
                if self.activeController then
                    self.activeController:Enable(false)
            
                    if self.moveFunction then
                        self.moveFunction(Players.LocalPlayer, Vector3.new(0,0,0), true)
                    end
                end
            end
            
            
            -- Returns module (possibly nil) and success code to differentiate returning nil due to error vs Scriptable
            function ControlModule:SelectComputerMovementModule()
                if not (UserInputService.KeyboardEnabled or UserInputService.GamepadEnabled) then
                    return nil, false
                end
            
                local computerModule
                local DevMovementMode = Players.LocalPlayer.DevComputerMovementMode
            
                if DevMovementMode == Enum.DevComputerMovementMode.UserChoice then
                    computerModule = computerInputTypeToModuleMap[lastInputType]
                    if UserGameSettings.ComputerMovementMode == Enum.ComputerMovementMode.ClickToMove and computerModule == Keyboard then
                        -- User has ClickToMove set in Settings, prefer ClickToMove controller for keyboard and mouse lastInputTypes
                        computerModule = ClickToMove
                    end
                else
                    -- Developer has selected a mode that must be used.
                    computerModule = movementEnumToModuleMap[DevMovementMode]
            
                    -- computerModule is expected to be nil here only when developer has selected Scriptable
                    if (not computerModule) and DevMovementMode ~= Enum.DevComputerMovementMode.Scriptable then
                        warn("No character control module is associated with DevComputerMovementMode ", DevMovementMode)
                    end
                end
            
                if computerModule then
                    return computerModule, true
                elseif DevMovementMode == Enum.DevComputerMovementMode.Scriptable then
                    -- Special case where nil is returned and we actually want to set self.activeController to nil for Scriptable
                    return nil, true
                else
                    -- This case is for when computerModule is nil because of an error and no suitable control module could
                    -- be found.
                    return nil, false
                end
            end
            
            -- Choose current Touch control module based on settings (user, dev)
            -- Returns module (possibly nil) and success code to differentiate returning nil due to error vs Scriptable
            function ControlModule:SelectTouchModule()
                if not UserInputService.TouchEnabled then
                    return nil, false
                end
                local touchModule
                local DevMovementMode = Players.LocalPlayer.DevTouchMovementMode
                if DevMovementMode == Enum.DevTouchMovementMode.UserChoice then
                    touchModule = movementEnumToModuleMap[UserGameSettings.TouchMovementMode]
                elseif DevMovementMode == Enum.DevTouchMovementMode.Scriptable then
                    return nil, true
                else
                    touchModule = movementEnumToModuleMap[DevMovementMode]
                end
                return touchModule, true
            end
            
            local function calculateRawMoveVector(humanoid, cameraRelativeMoveVector)
                local camera = Workspace.CurrentCamera
                if not camera then
                    return cameraRelativeMoveVector
                end
            
                if humanoid:GetState() == Enum.HumanoidStateType.Swimming then
                    return camera.CFrame:VectorToWorldSpace(cameraRelativeMoveVector)
                end
            
                local c, s
                local _, _, _, R00, R01, R02, _, _, R12, _, _, R22 = camera.CFrame:GetComponents()
                if R12 < 1 and R12 > -1 then
                    -- X and Z components from back vector.
                    c = R22
                    s = R02
                else
                    -- In this case the camera is looking straight up or straight down.
                    -- Use X components from right and up vectors.
                    c = R00
                    s = -R01*math.sign(R12)
                end
                local norm = math.sqrt(c*c + s*s)
                return Vector3.new(
                    (c*cameraRelativeMoveVector.x + s*cameraRelativeMoveVector.z)/norm,
                    0,
                    (c*cameraRelativeMoveVector.z - s*cameraRelativeMoveVector.x)/norm
                )
            end
            
            function ControlModule:OnRenderStepped(dt)
                if self.activeController and self.activeController.enabled and self.humanoid then
                    -- Give the controller a chance to adjust its state
                    self.activeController:OnRenderStepped(dt)
            
                    -- Now retrieve info from the controller
                    local moveVector = self.activeController:GetMoveVector()
                    local cameraRelative = self.activeController:IsMoveVectorCameraRelative()
            
                    local clickToMoveController = self:GetClickToMoveController()
                    if self.activeController ~= clickToMoveController then
                        if moveVector.magnitude > 0 then
                            -- Clean up any developer started MoveTo path
                            clickToMoveController:CleanupPath()
                        else
                            -- Get move vector for developer started MoveTo
                            clickToMoveController:OnRenderStepped(dt)
                            moveVector = clickToMoveController:GetMoveVector()
                            cameraRelative = clickToMoveController:IsMoveVectorCameraRelative()
                        end
                    end
            
                    -- Are we driving a vehicle ?
                    local vehicleConsumedInput = false
                    if self.vehicleController then
                        moveVector, vehicleConsumedInput = self.vehicleController:Update(moveVector, cameraRelative, self.activeControlModule==Gamepad)
                    end
            
                    -- If not, move the player
                    -- Verification of vehicleConsumedInput is commented out to preserve legacy behavior,
                    -- in case some game relies on Humanoid.MoveDirection still being set while in a VehicleSeat
                    --if not vehicleConsumedInput then
                        if cameraRelative then
                            moveVector = calculateRawMoveVector(self.humanoid, moveVector)
                        end
                        self.moveFunction(Players.LocalPlayer, moveVector, false)
                    --end
            
                    -- And make them jump if needed
                    self.humanoid.Jump = self.activeController:GetIsJumping() or (self.touchJumpController and self.touchJumpController:GetIsJumping())
                end
            end
            
            function ControlModule:OnHumanoidSeated(active, currentSeatPart)
                if active then
                    if currentSeatPart and currentSeatPart:IsA("VehicleSeat") then
                        if not self.vehicleController then
                            self.vehicleController = self.vehicleController.new(CONTROL_ACTION_PRIORITY)
                        end
                        self.vehicleController:Enable(true, currentSeatPart)
                    end
                else
                    if self.vehicleController then
                        self.vehicleController:Enable(false, currentSeatPart)
                    end
                end
            end
            
            function ControlModule:OnCharacterAdded(char)
                self.humanoid = char:FindFirstChildOfClass("Humanoid")
                while not self.humanoid do
                    char.ChildAdded:wait()
                    self.humanoid = char:FindFirstChildOfClass("Humanoid")
                end
            
                if self.touchGui then
                    self.touchGui.Enabled = true
                end
            
                if self.humanoidSeatedConn then
                    self.humanoidSeatedConn:Disconnect()
                    self.humanoidSeatedConn = nil
                end
                self.humanoidSeatedConn = self.humanoid.Seated:Connect(function(active, currentSeatPart)
                    self:OnHumanoidSeated(active, currentSeatPart)
                end)
            end
            
            function ControlModule:OnCharacterRemoving(char)
                self.humanoid = nil
            
                if self.touchGui then
                    self.touchGui.Enabled = false
                end
            end
            
            -- Helper function to lazily instantiate a controller if it does not yet exist,
            -- disable the active controller if it is different from the on being switched to,
            -- and then enable the requested controller. The argument to this function must be
            -- a reference to one of the control modules, i.e. Keyboard, Gamepad, etc.
            function ControlModule:SwitchToController(controlModule)
                if not controlModule then
                    if self.activeController then
                        self.activeController:Enable(false)
                    end
                    self.activeController = nil
                    self.activeControlModule = nil
                else
                    if not self.controllers[controlModule] then
                        self.controllers[controlModule] = controlModule.new(CONTROL_ACTION_PRIORITY)
                    end
            
                    if self.activeController ~= self.controllers[controlModule] then
                        if self.activeController then
                            self.activeController:Enable(false)
                        end
                        self.activeController = self.controllers[controlModule]
                        self.activeControlModule = controlModule -- Only used to check if controller switch is necessary
            
                        if self.touchControlFrame and (self.activeControlModule == ClickToMove
                                    or self.activeControlModule == TouchThumbstick
                                    or self.activeControlModule == DynamicThumbstick) then
                            if not self.controllers[TouchJump] then
                                self.controllers[TouchJump] = TouchJump.new()
                            end
                            self.touchJumpController = self.controllers[TouchJump]
                            self.touchJumpController:Enable(true, self.touchControlFrame)
                        else
                            if self.touchJumpController then
                                self.touchJumpController:Enable(false)
                            end
                        end
            
                        self:EnableActiveControlModule()
                    end
                end
            end
            
            function ControlModule:OnLastInputTypeChanged(newLastInputType)
                if lastInputType == newLastInputType then
                    warn("LastInputType Change listener called with current type.")
                end
                lastInputType = newLastInputType
            
                if lastInputType == Enum.UserInputType.Touch then
                    -- TODO: Check if touch module already active
                    local touchModule, success = self:SelectTouchModule()
                    if success then
                        while not self.touchControlFrame do
                            wait()
                        end
                        self:SwitchToController(touchModule)
                    end
                elseif computerInputTypeToModuleMap[lastInputType] ~= nil then
                    local computerModule = self:SelectComputerMovementModule()
                    if computerModule then
                        self:SwitchToController(computerModule)
                    end
                end
            end
            
            -- Called when any relevant values of GameSettings or LocalPlayer change, forcing re-evalulation of
            -- current control scheme
            function ControlModule:OnComputerMovementModeChange()
                local controlModule, success =  self:SelectComputerMovementModule()
                if success then
                    self:SwitchToController(controlModule)
                end
            end
            
            function ControlModule:OnTouchMovementModeChange()
                local touchModule, success = self:SelectTouchModule()
                if success then
                    while not self.touchControlFrame do
                        wait()
                    end
                    self:SwitchToController(touchModule)
                end
            end
            
            function ControlModule:CreateTouchGuiContainer()
                if self.touchGui then self.touchGui:Destroy() end
            
                -- Container for all touch device guis
                self.touchGui = Instance.new("ScreenGui")
                self.touchGui.Name = "TouchGui"
                self.touchGui.ResetOnSpawn = false
                self.touchGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
                self.touchGui.Enabled = self.humanoid ~= nil
            
                self.touchControlFrame = Instance.new("Frame")
                self.touchControlFrame.Name = "TouchControlFrame"
                self.touchControlFrame.Size = UDim2.new(1, 0, 1, 0)
                self.touchControlFrame.BackgroundTransparency = 1
                self.touchControlFrame.Parent = self.touchGui
            
                self.touchGui.Parent = self.playerGui
            end
            
            function ControlModule:GetClickToMoveController()
                if not self.controllers[ClickToMove] then
                    self.controllers[ClickToMove] = ClickToMove.new(CONTROL_ACTION_PRIORITY)
                end
                return self.controllers[ClickToMove]
            end
            
            function ControlModule:IsJumping()
                if self.activeController then
                    return self.activeController:GetIsJumping() or (self.touchJumpController and self.touchJumpController:GetIsJumping())
                end
                return false
            end
            
            return ControlModule.new()
        end
        
        function _PlayerModule()
            local PlayerModule = {}
            PlayerModule.__index = PlayerModule
            function PlayerModule.new()
                local self = setmetatable({},PlayerModule)
                self.cameras = _CameraModule()
                self.controls = _ControlModule()
                return self
            end
            function PlayerModule:GetCameras()
                return self.cameras
            end
            function PlayerModule:GetControls()
                return self.controls
            end
            function PlayerModule:GetClickToMoveController()
                return self.controls:GetClickToMoveController()
            end
            return PlayerModule.new()
        end
        
        function _sounds()
            
            local SetState = Instance.new("BindableEvent",script)
            
            local Players = game:GetService("Players")
            local RunService = game:GetService("RunService")
            
            local SOUND_DATA = {
                Climbing = {
                    SoundId = "rbxasset://sounds/action_footsteps_plastic.mp3",
                    Looped = true,
                },
                Died = {
                    SoundId = "rbxasset://sounds/uuhhh.mp3",
                },
                FreeFalling = {
                    SoundId = "rbxasset://sounds/action_falling.mp3",
                    Looped = true,
                },
                GettingUp = {
                    SoundId = "rbxasset://sounds/action_get_up.mp3",
                },
                Jumping = {
                    SoundId = "rbxasset://sounds/action_jump.mp3",
                },
                Landing = {
                    SoundId = "rbxasset://sounds/action_jump_land.mp3",
                },
                Running = {
                    SoundId = "rbxasset://sounds/action_footsteps_plastic.mp3",
                    Looped = true,
                    Pitch = 1.85,
                },
                Splash = {
                    SoundId = "rbxasset://sounds/impact_water.mp3",
                },
                Swimming = {
                    SoundId = "rbxasset://sounds/action_swim.mp3",
                    Looped = true,
                    Pitch = 1.6,
                },
            }
            
             -- wait for the first of the passed signals to fire
            local function waitForFirst(...)
                local shunt = Instance.new("BindableEvent")
                local slots = {...}
            
                local function fire(...)
                    for i = 1, #slots do
                        slots[i]:Disconnect()
                    end
            
                    return shunt:Fire(...)
                end
            
                for i = 1, #slots do
                    slots[i] = slots[i]:Connect(fire)
                end
            
                return shunt.Event:Wait()
            end
            
            -- map a value from one range to another
            local function map(x, inMin, inMax, outMin, outMax)
                return (x - inMin)*(outMax - outMin)/(inMax - inMin) + outMin
            end
            
            local function playSound(sound)
                sound.TimePosition = 0
                sound.Playing = true
            end
            
            local function stopSound(sound)
                sound.Playing = false
                sound.TimePosition = 0
            end
            
            local function shallowCopy(t)
                local out = {}
                for k, v in pairs(t) do
                    out[k] = v
                end
                return out
            end
            
            local function initializeSoundSystem(player, humanoid, rootPart)
                local sounds = {}
            
                -- initialize sounds
                for name, props in pairs(SOUND_DATA) do
                    local sound = Instance.new("Sound")
                    sound.Name = name
            
                    -- set default values
                    sound.Archivable = false
                    sound.EmitterSize = 5
                    sound.MaxDistance = 150
                    sound.Volume = 0.65
            
                    for propName, propValue in pairs(props) do
                        sound[propName] = propValue
                    end
            
                    sound.Parent = rootPart
                    sounds[name] = sound
                end
            
                local playingLoopedSounds = {}
            
                local function stopPlayingLoopedSounds(except)
                    for sound in pairs(shallowCopy(playingLoopedSounds)) do
                        if sound ~= except then
                            sound.Playing = false
                            playingLoopedSounds[sound] = nil
                        end
                    end
                end
            
                -- state transition callbacks
                local stateTransitions = {
                    [Enum.HumanoidStateType.FallingDown] = function()
                        stopPlayingLoopedSounds()
                    end,
            
                    [Enum.HumanoidStateType.GettingUp] = function()
                        stopPlayingLoopedSounds()
                        playSound(sounds.GettingUp)
                    end,
            
                    [Enum.HumanoidStateType.Jumping] = function()
                        stopPlayingLoopedSounds()
                        playSound(sounds.Jumping)
                    end,
            
                    [Enum.HumanoidStateType.Swimming] = function()
                        local verticalSpeed = math.abs(rootPart.Velocity.Y)
                        if verticalSpeed > 0.1 then
                            sounds.Splash.Volume = math.clamp(map(verticalSpeed, 100, 350, 0.28, 1), 0, 1)
                            playSound(sounds.Splash)
                        end
                        stopPlayingLoopedSounds(sounds.Swimming)
                        sounds.Swimming.Playing = true
                        playingLoopedSounds[sounds.Swimming] = true
                    end,
            
                    [Enum.HumanoidStateType.Freefall] = function()
                        sounds.FreeFalling.Volume = 0
                        stopPlayingLoopedSounds(sounds.FreeFalling)
                        playingLoopedSounds[sounds.FreeFalling] = true
                    end,
            
                    [Enum.HumanoidStateType.Landed] = function()
                        stopPlayingLoopedSounds()
                        local verticalSpeed = math.abs(rootPart.Velocity.Y)
                        if verticalSpeed > 75 then
                            sounds.Landing.Volume = math.clamp(map(verticalSpeed, 50, 100, 0, 1), 0, 1)
                            playSound(sounds.Landing)
                        end
                    end,
            
                    [Enum.HumanoidStateType.Running] = function()
                        stopPlayingLoopedSounds(sounds.Running)
                        sounds.Running.Playing = true
                        playingLoopedSounds[sounds.Running] = true
                    end,
            
                    [Enum.HumanoidStateType.Climbing] = function()
                        local sound = sounds.Climbing
                        if math.abs(rootPart.Velocity.Y) > 0.1 then
                            sound.Playing = true
                            stopPlayingLoopedSounds(sound)
                        else
                            stopPlayingLoopedSounds()
                        end
                        playingLoopedSounds[sound] = true
                    end,
            
                    [Enum.HumanoidStateType.Seated] = function()
                        stopPlayingLoopedSounds()
                    end,
            
                    [Enum.HumanoidStateType.Dead] = function()
                        stopPlayingLoopedSounds()
                        playSound(sounds.Died)
                    end,
                }
            
                -- updaters for looped sounds
                local loopedSoundUpdaters = {
                    [sounds.Climbing] = function(dt, sound, vel)
                        sound.Playing = vel.Magnitude > 0.1
                    end,
            
                    [sounds.FreeFalling] = function(dt, sound, vel)
                        if vel.Magnitude > 75 then
                            sound.Volume = math.clamp(sound.Volume + 0.9*dt, 0, 1)
                        else
                            sound.Volume = 0
                        end
                    end,
            
                    [sounds.Running] = function(dt, sound, vel)
                        sound.Playing = vel.Magnitude > 0.5 and humanoid.MoveDirection.Magnitude > 0.5
                    end,
                }
            
                -- state substitutions to avoid duplicating entries in the state table
                local stateRemap = {
                    [Enum.HumanoidStateType.RunningNoPhysics] = Enum.HumanoidStateType.Running,
                }
            
                local activeState = stateRemap[humanoid:GetState()] or humanoid:GetState()
                local activeConnections = {}
            
                local stateChangedConn = humanoid.StateChanged:Connect(function(_, state)
                    state = stateRemap[state] or state
            
                    if state ~= activeState then
                        local transitionFunc = stateTransitions[state]
            
                        if transitionFunc then
                            transitionFunc()
                        end
            
                        activeState = state
                    end
                end)
                
                local customStateChangedConn = SetState.Event:Connect(function(state)
                    state = stateRemap[state] or state
            
                    if state ~= activeState then
                        local transitionFunc = stateTransitions[state]
            
                        if transitionFunc then
                            transitionFunc()
                        end
            
                        activeState = state
                    end
                end)
            
                local steppedConn = RunService.Stepped:Connect(function(_, worldDt)
                    -- update looped sounds on stepped
                    for sound in pairs(playingLoopedSounds) do
                        local updater = loopedSoundUpdaters[sound]
            
                        if updater then
                            updater(worldDt, sound, rootPart.Velocity)
                        end
                    end
                end)
            
                local humanoidAncestryChangedConn
                local rootPartAncestryChangedConn
                local characterAddedConn
            
                local function terminate()
                    stateChangedConn:Disconnect()
                    customStateChangedConn:Disconnect()
                    steppedConn:Disconnect()
                    humanoidAncestryChangedConn:Disconnect()
                    rootPartAncestryChangedConn:Disconnect()
                    characterAddedConn:Disconnect()
                end
            
                humanoidAncestryChangedConn = humanoid.AncestryChanged:Connect(function(_, parent)
                    if not parent then
                        terminate()
                    end
                end)
            
                rootPartAncestryChangedConn = rootPart.AncestryChanged:Connect(function(_, parent)
                    if not parent then
                        terminate()
                    end
                end)
            
                characterAddedConn = player.CharacterAdded:Connect(terminate)
            end
            
            local function playerAdded(player)
                local function characterAdded(character)
                    -- Avoiding memory leaks in the face of Character/Humanoid/RootPart lifetime has a few complications:
                    -- * character deparenting is a Remove instead of a Destroy, so signals are not cleaned up automatically.
                    -- ** must use a waitForFirst on everything and listen for hierarchy changes.
                    -- * the character might not be in the dm by the time CharacterAdded fires
                    -- ** constantly check consistency with player.Character and abort if CharacterAdded is fired again
                    -- * Humanoid may not exist immediately, and by the time it's inserted the character might be deparented.
                    -- * RootPart probably won't exist immediately.
                    -- ** by the time RootPart is inserted and Humanoid.RootPart is set, the character or the humanoid might be deparented.
            
                    if not character.Parent then
                        waitForFirst(character.AncestryChanged, player.CharacterAdded)
                    end
            
                    if player.Character ~= character or not character.Parent then
                        return
                    end
            
                    local humanoid = character:FindFirstChildOfClass("Humanoid")
                    while character:IsDescendantOf(game) and not humanoid do
                        waitForFirst(character.ChildAdded, character.AncestryChanged, player.CharacterAdded)
                        humanoid = character:FindFirstChildOfClass("Humanoid")
                    end
            
                    if player.Character ~= character or not character:IsDescendantOf(game) then
                        return
                    end
            
                    -- must rely on HumanoidRootPart naming because Humanoid.RootPart does not fire changed signals
                    local rootPart = character:FindFirstChild("HumanoidRootPart")
                    while character:IsDescendantOf(game) and not rootPart do
                        waitForFirst(character.ChildAdded, character.AncestryChanged, humanoid.AncestryChanged, player.CharacterAdded)
                        rootPart = character:FindFirstChild("HumanoidRootPart")
                    end
            
                    if rootPart and humanoid:IsDescendantOf(game) and character:IsDescendantOf(game) and player.Character == character then
                        initializeSoundSystem(player, humanoid, rootPart)
                    end
                end
            
                if player.Character then
                    characterAdded(player.Character)
                end
                player.CharacterAdded:Connect(characterAdded)
            end
            
            Players.PlayerAdded:Connect(playerAdded)
            for _, player in ipairs(Players:GetPlayers()) do
                playerAdded(player)
            end
            return SetState
        end
        
        function _StateTracker()
            local EPSILON = 0.1
            
            local SPEED = {
                ["onRunning"] = true,
                ["onClimbing"] = true 
            }
            
            local INAIR = {
                ["onFreeFall"] = true,
                ["onJumping"] = true
            }
            
            local STATEMAP = {
                ["onRunning"] = Enum.HumanoidStateType.Running,
                ["onJumping"] = Enum.HumanoidStateType.Jumping,
                ["onFreeFall"] = Enum.HumanoidStateType.Freefall
            }
            
            local StateTracker = {}
            StateTracker.__index = StateTracker
            
            function StateTracker.new(humanoid, soundState)
                local self = setmetatable({}, StateTracker)
                
                self.Humanoid = humanoid
                self.HRP = humanoid.RootPart
                
                self.Speed = 0
                self.State = "onRunning"
                self.Jumped = false
                self.JumpTick = tick()
                
                self.SoundState = soundState
                
                self._ChangedEvent = Instance.new("BindableEvent")
                self.Changed = self._ChangedEvent.Event
                
                return self
            end
            
            function StateTracker:Destroy()
                self._ChangedEvent:Destroy()
            end
            
            function StateTracker:RequestedJump()
                self.Jumped = true
                self.JumpTick = tick()
            end
            
            function StateTracker:OnStep(gravityUp, grounded, isMoving)
                local cVelocity = self.HRP.Velocity
                local gVelocity = cVelocity:Dot(gravityUp)
                
                local oldState, oldSpeed = self.State, self.Speed
                
                local newState
                local newSpeed = cVelocity.Magnitude
            
                if (not grounded) then
                    if (gVelocity > 0) then
                        if (self.Jumped) then
                            newState = "onJumping"
                        else
                            newState = "onFreeFall"
                        end
                    else
                        if (self.Jumped) then
                            self.Jumped = false
                        end
                        newState = "onFreeFall"
                    end
                else
                    if (self.Jumped and tick() - self.JumpTick > 0.1) then
                        self.Jumped = false
                    end
                    newSpeed = (cVelocity - gVelocity*gravityUp).Magnitude
                    newState = "onRunning"
                end
                
                newSpeed = isMoving and newSpeed or 0
                
                if (oldState ~= newState or (SPEED[newState] and math.abs(oldSpeed - newSpeed) > EPSILON)) then
                    self.State = newState
                    self.Speed = newSpeed
                    self.SoundState:Fire(STATEMAP[newState])
                    self._ChangedEvent:Fire(self.State, self.Speed)
                end
            end
            
            return StateTracker
        end
        function _InitObjects()
            local model = workspace:FindFirstChild("objects") or game:GetObjects("rbxassetid://5045408489")[1]
            local SPHERE = model:WaitForChild("Sphere")
            local FLOOR = model:WaitForChild("Floor")
            local VFORCE = model:WaitForChild("VectorForce")
            local BGYRO = model:WaitForChild("BodyGyro")
            local function initObjects(self)
                local hrp = self.HRP
                local humanoid = self.Humanoid
                local sphere = SPHERE:Clone()
                sphere.Parent = self.Character
                local floor = FLOOR:Clone()
                floor.Parent = self.Character
                local isR15 = (humanoid.RigType == Enum.HumanoidRigType.R15)
                local height = isR15 and (humanoid.HipHeight + 0.05) or 2
                local weld = Instance.new("Weld")
                weld.C0 = CFrame.new(0, -height, 0.1)
                weld.Part0 = hrp
                weld.Part1 = sphere
                weld.Parent = sphere
                local weld2 = Instance.new("Weld")
                weld2.C0 = CFrame.new(0, -(height + 1.5), 0)
                weld2.Part0 = hrp
                weld2.Part1 = floor
                weld2.Parent = floor
                local gyro = BGYRO:Clone()
                gyro.CFrame = hrp.CFrame
                gyro.Parent = hrp
                local vForce = VFORCE:Clone()
                vForce.Attachment0 = isR15 and hrp:WaitForChild("RootRigAttachment") or hrp:WaitForChild("RootAttachment")
                vForce.Parent = hrp
                return sphere, gyro, vForce, floor
            end
            return initObjects
        end
        local plr = game.Players.LocalPlayer
        local ms = plr:GetMouse()
        local char
        plr.CharacterAdded:Connect(function(c)
            char = c
        end)
        function _R6()
            function r6()
            local Figure = char
            local Torso = Figure:WaitForChild("Torso")
            local RightShoulder = Torso:WaitForChild("Right Shoulder")
            local LeftShoulder = Torso:WaitForChild("Left Shoulder")
            local RightHip = Torso:WaitForChild("Right Hip")
            local LeftHip = Torso:WaitForChild("Left Hip")
            local Neck = Torso:WaitForChild("Neck")
            local Humanoid = Figure:WaitForChild("Humanoid")
            local pose = "Standing"
            local currentAnim = ""
            local currentAnimInstance = nil
            local currentAnimTrack = nil
            local currentAnimKeyframeHandler = nil
            local currentAnimSpeed = 1.0
            local animTable = {}
            local animNames = { 
                idle = 	{	
                            { id = "http://www.roblox.com/asset/?id=180435571", weight = 9 },
                            { id = "http://www.roblox.com/asset/?id=180435792", weight = 1 }
                        },
                walk = 	{ 	
                            { id = "http://www.roblox.com/asset/?id=180426354", weight = 10 } 
                        }, 
                run = 	{
                            { id = "run.xml", weight = 10 } 
                        }, 
                jump = 	{
                            { id = "http://www.roblox.com/asset/?id=125750702", weight = 10 } 
                        }, 
                fall = 	{
                            { id = "http://www.roblox.com/asset/?id=180436148", weight = 10 } 
                        }, 
                climb = {
                            { id = "http://www.roblox.com/asset/?id=180436334", weight = 10 } 
                        }, 
                sit = 	{
                            { id = "http://www.roblox.com/asset/?id=178130996", weight = 10 } 
                        },	
                toolnone = {
                            { id = "http://www.roblox.com/asset/?id=182393478", weight = 10 } 
                        },
                toolslash = {
                            { id = "http://www.roblox.com/asset/?id=129967390", weight = 10 } 
            --				{ id = "slash.xml", weight = 10 } 
                        },
                toollunge = {
                            { id = "http://www.roblox.com/asset/?id=129967478", weight = 10 } 
                        },
                wave = {
                            { id = "http://www.roblox.com/asset/?id=128777973", weight = 10 } 
                        },
                point = {
                            { id = "http://www.roblox.com/asset/?id=128853357", weight = 10 } 
                        },
                dance1 = {
                            { id = "http://www.roblox.com/asset/?id=182435998", weight = 10 }, 
                            { id = "http://www.roblox.com/asset/?id=182491037", weight = 10 }, 
                            { id = "http://www.roblox.com/asset/?id=182491065", weight = 10 } 
                        },
                dance2 = {
                            { id = "http://www.roblox.com/asset/?id=182436842", weight = 10 }, 
                            { id = "http://www.roblox.com/asset/?id=182491248", weight = 10 }, 
                            { id = "http://www.roblox.com/asset/?id=182491277", weight = 10 } 
                        },
                dance3 = {
                            { id = "http://www.roblox.com/asset/?id=182436935", weight = 10 }, 
                            { id = "http://www.roblox.com/asset/?id=182491368", weight = 10 }, 
                            { id = "http://www.roblox.com/asset/?id=182491423", weight = 10 } 
                        },
                laugh = {
                            { id = "http://www.roblox.com/asset/?id=129423131", weight = 10 } 
                        },
                cheer = {
                            { id = "http://www.roblox.com/asset/?id=129423030", weight = 10 } 
                        },
            }
            local dances = {"dance1", "dance2", "dance3"}
            -- Existance in this list signifies that it is an emote, the value indicates if it is a looping emote
            local emoteNames = { wave = false, point = false, dance1 = true, dance2 = true, dance3 = true, laugh = false, cheer = false}
            function configureAnimationSet(name, fileList)
                if (animTable[name] ~= nil) then
                    for _, connection in pairs(animTable[name].connections) do
                        connection:disconnect()
                    end
                end
                animTable[name] = {}
                animTable[name].count = 0
                animTable[name].totalWeight = 0	
                animTable[name].connections = {}
                -- check for config values
                local config = script:FindFirstChild(name)
                if (config ~= nil) then
            --		print("Loading anims " .. name)
                    table.insert(animTable[name].connections, config.ChildAdded:connect(function(child) configureAnimationSet(name, fileList) end))
                    table.insert(animTable[name].connections, config.ChildRemoved:connect(function(child) configureAnimationSet(name, fileList) end))
                    local idx = 1
                    for _, childPart in pairs(config:GetChildren()) do
                        if (childPart:IsA("Animation")) then
                            table.insert(animTable[name].connections, childPart.Changed:connect(function(property) configureAnimationSet(name, fileList) end))
                            animTable[name][idx] = {}
                            animTable[name][idx].anim = childPart
                            local weightObject = childPart:FindFirstChild("Weight")
                            if (weightObject == nil) then
                                animTable[name][idx].weight = 1
                            else
                                animTable[name][idx].weight = weightObject.Value
                            end
                            animTable[name].count = animTable[name].count + 1
                            animTable[name].totalWeight = animTable[name].totalWeight + animTable[name][idx].weight
                --			print(name .. " [" .. idx .. "] " .. animTable[name][idx].anim.AnimationId .. " (" .. animTable[name][idx].weight .. ")")
                            idx = idx + 1
                        end
                    end
                end
                -- fallback to defaults
                if (animTable[name].count <= 0) then
                    for idx, anim in pairs(fileList) do
                        animTable[name][idx] = {}
                        animTable[name][idx].anim = Instance.new("Animation")
                        animTable[name][idx].anim.Name = name
                        animTable[name][idx].anim.AnimationId = anim.id
                        animTable[name][idx].weight = anim.weight
                        animTable[name].count = animTable[name].count + 1
                        animTable[name].totalWeight = animTable[name].totalWeight + anim.weight
            --			print(name .. " [" .. idx .. "] " .. anim.id .. " (" .. anim.weight .. ")")
                    end
                end
            end
            -- Setup animation objects
            function scriptChildModified(child)
                local fileList = animNames[child.Name]
                if (fileList ~= nil) then
                    configureAnimationSet(child.Name, fileList)
                end	
            end
            
            script.ChildAdded:connect(scriptChildModified)
            script.ChildRemoved:connect(scriptChildModified)
            
            
            for name, fileList in pairs(animNames) do 
                configureAnimationSet(name, fileList)
            end	
            
            -- ANIMATION
            
            -- declarations
            local toolAnim = "None"
            local toolAnimTime = 0
            
            local jumpAnimTime = 0
            local jumpAnimDuration = 0.3
            
            local toolTransitionTime = 0.1
            local fallTransitionTime = 0.3
            local jumpMaxLimbVelocity = 0.75
            
            -- functions
            
            function stopAllAnimations()
                local oldAnim = currentAnim
            
                -- return to idle if finishing an emote
                if (emoteNames[oldAnim] ~= nil and emoteNames[oldAnim] == false) then
                    oldAnim = "idle"
                end
            
                currentAnim = ""
                currentAnimInstance = nil
                if (currentAnimKeyframeHandler ~= nil) then
                    currentAnimKeyframeHandler:disconnect()
                end
            
                if (currentAnimTrack ~= nil) then
                    currentAnimTrack:Stop()
                    currentAnimTrack:Destroy()
                    currentAnimTrack = nil
                end
                return oldAnim
            end
            
            function setAnimationSpeed(speed)
                if speed ~= currentAnimSpeed then
                    currentAnimSpeed = speed
                    currentAnimTrack:AdjustSpeed(currentAnimSpeed)
                end
            end
            
            function keyFrameReachedFunc(frameName)
                if (frameName == "End") then
            
                    local repeatAnim = currentAnim
                    -- return to idle if finishing an emote
                    if (emoteNames[repeatAnim] ~= nil and emoteNames[repeatAnim] == false) then
                        repeatAnim = "idle"
                    end
                    
                    local animSpeed = currentAnimSpeed
                    playAnimation(repeatAnim, 0.0, Humanoid)
                    setAnimationSpeed(animSpeed)
                end
            end
            
            -- Preload animations
            function playAnimation(animName, transitionTime, humanoid) 
                    
                local roll = math.random(1, animTable[animName].totalWeight) 
                local origRoll = roll
                local idx = 1
                while (roll > animTable[animName][idx].weight) do
                    roll = roll - animTable[animName][idx].weight
                    idx = idx + 1
                end
            --		print(animName .. " " .. idx .. " [" .. origRoll .. "]")
                local anim = animTable[animName][idx].anim
            
                -- switch animation		
                if (anim ~= currentAnimInstance) then
                    
                    if (currentAnimTrack ~= nil) then
                        currentAnimTrack:Stop(transitionTime)
                        currentAnimTrack:Destroy()
                    end
            
                    currentAnimSpeed = 1.0
                
                    -- load it to the humanoid; get AnimationTrack
                    currentAnimTrack = humanoid:LoadAnimation(anim)
                    currentAnimTrack.Priority = Enum.AnimationPriority.Core
                     
                    -- play the animation
                    currentAnimTrack:Play(transitionTime)
                    currentAnim = animName
                    currentAnimInstance = anim
            
                    -- set up keyframe name triggers
                    if (currentAnimKeyframeHandler ~= nil) then
                        currentAnimKeyframeHandler:disconnect()
                    end
                    currentAnimKeyframeHandler = currentAnimTrack.KeyframeReached:connect(keyFrameReachedFunc)
                    
                end
            
            end
            
            -------------------------------------------------------------------------------------------
            -------------------------------------------------------------------------------------------
            
            local toolAnimName = ""
            local toolAnimTrack = nil
            local toolAnimInstance = nil
            local currentToolAnimKeyframeHandler = nil
            
            function toolKeyFrameReachedFunc(frameName)
                if (frameName == "End") then
            --		print("Keyframe : ".. frameName)	
                    playToolAnimation(toolAnimName, 0.0, Humanoid)
                end
            end
            
            
            function playToolAnimation(animName, transitionTime, humanoid, priority)	 
                    
                    local roll = math.random(1, animTable[animName].totalWeight) 
                    local origRoll = roll
                    local idx = 1
                    while (roll > animTable[animName][idx].weight) do
                        roll = roll - animTable[animName][idx].weight
                        idx = idx + 1
                    end
            --		print(animName .. " * " .. idx .. " [" .. origRoll .. "]")
                    local anim = animTable[animName][idx].anim
            
                    if (toolAnimInstance ~= anim) then
                        
                        if (toolAnimTrack ~= nil) then
                            toolAnimTrack:Stop()
                            toolAnimTrack:Destroy()
                            transitionTime = 0
                        end
                                
                        -- load it to the humanoid; get AnimationTrack
                        toolAnimTrack = humanoid:LoadAnimation(anim)
                        if priority then
                            toolAnimTrack.Priority = priority
                        end
                         
                        -- play the animation
                        toolAnimTrack:Play(transitionTime)
                        toolAnimName = animName
                        toolAnimInstance = anim
            
                        currentToolAnimKeyframeHandler = toolAnimTrack.KeyframeReached:connect(toolKeyFrameReachedFunc)
                    end
            end
            
            function stopToolAnimations()
                local oldAnim = toolAnimName
            
                if (currentToolAnimKeyframeHandler ~= nil) then
                    currentToolAnimKeyframeHandler:disconnect()
                end
            
                toolAnimName = ""
                toolAnimInstance = nil
                if (toolAnimTrack ~= nil) then
                    toolAnimTrack:Stop()
                    toolAnimTrack:Destroy()
                    toolAnimTrack = nil
                end
            
            
                return oldAnim
            end
            
            -------------------------------------------------------------------------------------------
            -------------------------------------------------------------------------------------------
            
            
            function onRunning(speed)
                if speed > 0.01 then
                    playAnimation("walk", 0.1, Humanoid)
                    if currentAnimInstance and currentAnimInstance.AnimationId == "http://www.roblox.com/asset/?id=180426354" then
                        setAnimationSpeed(speed / 14.5)
                    end
                    pose = "Running"
                else
                    if emoteNames[currentAnim] == nil then
                        playAnimation("idle", 0.1, Humanoid)
                        pose = "Standing"
                    end
                end
            end
            
            function onDied()
                pose = "Dead"
            end
            
            function onJumping()
                playAnimation("jump", 0.1, Humanoid)
                jumpAnimTime = jumpAnimDuration
                pose = "Jumping"
            end
            
            function onClimbing(speed)
                playAnimation("climb", 0.1, Humanoid)
                setAnimationSpeed(speed / 12.0)
                pose = "Climbing"
            end
            
            function onGettingUp()
                pose = "GettingUp"
            end
            
            function onFreeFall()
                if (jumpAnimTime <= 0) then
                    playAnimation("fall", fallTransitionTime, Humanoid)
                end
                pose = "FreeFall"
            end
            
            function onFallingDown()
                pose = "FallingDown"
            end
            
            function onSeated()
                pose = "Seated"
            end
            
            function onPlatformStanding()
                pose = "PlatformStanding"
            end
            
            function onSwimming(speed)
                if speed > 0 then
                    pose = "Running"
                else
                    pose = "Standing"
                end
            end
            
            function getTool()	
                for _, kid in ipairs(Figure:GetChildren()) do
                    if kid.className == "Tool" then return kid end
                end
                return nil
            end
            
            function getToolAnim(tool)
                for _, c in ipairs(tool:GetChildren()) do
                    if c.Name == "toolanim" and c.className == "StringValue" then
                        return c
                    end
                end
                return nil
            end
            
            function animateTool()
                
                if (toolAnim == "None") then
                    playToolAnimation("toolnone", toolTransitionTime, Humanoid, Enum.AnimationPriority.Idle)
                    return
                end
            
                if (toolAnim == "Slash") then
                    playToolAnimation("toolslash", 0, Humanoid, Enum.AnimationPriority.Action)
                    return
                end
            
                if (toolAnim == "Lunge") then
                    playToolAnimation("toollunge", 0, Humanoid, Enum.AnimationPriority.Action)
                    return
                end
            end
            
            function moveSit()
                RightShoulder.MaxVelocity = 0.15
                LeftShoulder.MaxVelocity = 0.15
                RightShoulder:SetDesiredAngle(3.14 /2)
                LeftShoulder:SetDesiredAngle(-3.14 /2)
                RightHip:SetDesiredAngle(3.14 /2)
                LeftHip:SetDesiredAngle(-3.14 /2)
            end
            
            local lastTick = 0
            
            function move(time)
                local amplitude = 1
                local frequency = 1
                  local deltaTime = time - lastTick
                  lastTick = time
            
                local climbFudge = 0
                local setAngles = false
            
                  if (jumpAnimTime > 0) then
                      jumpAnimTime = jumpAnimTime - deltaTime
                  end
            
                if (pose == "FreeFall" and jumpAnimTime <= 0) then
                    playAnimation("fall", fallTransitionTime, Humanoid)
                elseif (pose == "Seated") then
                    playAnimation("sit", 0.5, Humanoid)
                    return
                elseif (pose == "Running") then
                    playAnimation("walk", 0.1, Humanoid)
                elseif (pose == "Dead" or pose == "GettingUp" or pose == "FallingDown" or pose == "Seated" or pose == "PlatformStanding") then
            --		print("Wha " .. pose)
                    stopAllAnimations()
                    amplitude = 0.1
                    frequency = 1
                    setAngles = true
                end
            
                if (setAngles) then
                    local desiredAngle = amplitude * math.sin(time * frequency)
            
                    RightShoulder:SetDesiredAngle(desiredAngle + climbFudge)
                    LeftShoulder:SetDesiredAngle(desiredAngle - climbFudge)
                    RightHip:SetDesiredAngle(-desiredAngle)
                    LeftHip:SetDesiredAngle(-desiredAngle)
                end
            
                -- Tool Animation handling
                local tool = getTool()
                if tool and tool:FindFirstChild("Handle") then
                
                    local animStringValueObject = getToolAnim(tool)
            
                    if animStringValueObject then
                        toolAnim = animStringValueObject.Value
                        -- message recieved, delete StringValue
                        animStringValueObject.Parent = nil
                        toolAnimTime = time + .3
                    end
            
                    if time > toolAnimTime then
                        toolAnimTime = 0
                        toolAnim = "None"
                    end
            
                    animateTool()		
                else
                    stopToolAnimations()
                    toolAnim = "None"
                    toolAnimInstance = nil
                    toolAnimTime = 0
                end
            end
            
            
            local events = {}
            local eventHum = Humanoid
            
            local function onUnhook()
                for i = 1, #events do
                    events[i]:Disconnect()
                end
                events = {}
            end
            
            local function onHook()
                onUnhook()
                
                pose = eventHum.Sit and "Seated" or "Standing"
                
                events = {
                    eventHum.Died:connect(onDied),
                    eventHum.Running:connect(onRunning),
                    eventHum.Jumping:connect(onJumping),
                    eventHum.Climbing:connect(onClimbing),
                    eventHum.GettingUp:connect(onGettingUp),
                    eventHum.FreeFalling:connect(onFreeFall),
                    eventHum.FallingDown:connect(onFallingDown),
                    eventHum.Seated:connect(onSeated),
                    eventHum.PlatformStanding:connect(onPlatformStanding),
                    eventHum.Swimming:connect(onSwimming)
                }
            end
            
            
            onHook()
            
            -- setup emote chat hook
            game:GetService("Players").LocalPlayer.Chatted:connect(function(msg)
                local emote = ""
                if msg == "/e dance" then
                    emote = dances[math.random(1, #dances)]
                elseif (string.sub(msg, 1, 3) == "/e ") then
                    emote = string.sub(msg, 4)
                elseif (string.sub(msg, 1, 7) == "/emote ") then
                    emote = string.sub(msg, 8)
                end
                
                if (pose == "Standing" and emoteNames[emote] ~= nil) then
                    playAnimation(emote, 0.1, Humanoid)
                end
            
            end)
            
            
            -- main program
            
            -- initialize to idle
            playAnimation("idle", 0.1, Humanoid)
            pose = "Standing"
            
            spawn(function()
                while Figure.Parent ~= nil do
                    local _, time = wait(0.1)
                    move(time)
                end
            end)
            
            return {
                onRunning = onRunning, 
                onDied = onDied, 
                onJumping = onJumping, 
                onClimbing = onClimbing, 
                onGettingUp = onGettingUp, 
                onFreeFall = onFreeFall, 
                onFallingDown = onFallingDown, 
                onSeated = onSeated, 
                onPlatformStanding = onPlatformStanding,
                onHook = onHook,
                onUnhook = onUnhook
            }
            
            end
            return r6()
        end
        
        function _R15()
            local function r15()
                
            local Character = char
            local Humanoid = Character:WaitForChild("Humanoid")
            local pose = "Standing"
            
            local userNoUpdateOnLoopSuccess, userNoUpdateOnLoopValue = pcall(function() return UserSettings():IsUserFeatureEnabled("UserNoUpdateOnLoop") end)
            local userNoUpdateOnLoop = userNoUpdateOnLoopSuccess and userNoUpdateOnLoopValue
            local userAnimationSpeedDampeningSuccess, userAnimationSpeedDampeningValue = pcall(function() return UserSettings():IsUserFeatureEnabled("UserAnimationSpeedDampening") end)
            local userAnimationSpeedDampening = userAnimationSpeedDampeningSuccess and userAnimationSpeedDampeningValue
            
            local animateScriptEmoteHookFlagExists, animateScriptEmoteHookFlagEnabled = pcall(function()
                return UserSettings():IsUserFeatureEnabled("UserAnimateScriptEmoteHook")
            end)
            local FFlagAnimateScriptEmoteHook = animateScriptEmoteHookFlagExists and animateScriptEmoteHookFlagEnabled
            
            local AnimationSpeedDampeningObject = script:FindFirstChild("ScaleDampeningPercent")
            local HumanoidHipHeight = 2
            
            local EMOTE_TRANSITION_TIME = 0.1
            
            local currentAnim = ""
            local currentAnimInstance = nil
            local currentAnimTrack = nil
            local currentAnimKeyframeHandler = nil
            local currentAnimSpeed = 1.0
            
            local runAnimTrack = nil
            local runAnimKeyframeHandler = nil
            
            local animTable = {}
            local animNames = { 
                idle = 	{	
                            { id = "http://www.roblox.com/asset/?id=507766666", weight = 1 },
                            { id = "http://www.roblox.com/asset/?id=507766951", weight = 1 },
                            { id = "http://www.roblox.com/asset/?id=507766388", weight = 9 }
                        },
                walk = 	{ 	
                            { id = "http://www.roblox.com/asset/?id=507777826", weight = 10 } 
                        }, 
                run = 	{
                            { id = "http://www.roblox.com/asset/?id=507767714", weight = 10 } 
                        }, 
                swim = 	{
                            { id = "http://www.roblox.com/asset/?id=507784897", weight = 10 } 
                        }, 
                swimidle = 	{
                            { id = "http://www.roblox.com/asset/?id=507785072", weight = 10 } 
                        }, 
                jump = 	{
                            { id = "http://www.roblox.com/asset/?id=507765000", weight = 10 } 
                        }, 
                fall = 	{
                            { id = "http://www.roblox.com/asset/?id=507767968", weight = 10 } 
                        }, 
                climb = {
                            { id = "http://www.roblox.com/asset/?id=507765644", weight = 10 } 
                        }, 
                sit = 	{
                            { id = "http://www.roblox.com/asset/?id=2506281703", weight = 10 } 
                        },	
                toolnone = {
                            { id = "http://www.roblox.com/asset/?id=507768375", weight = 10 } 
                        },
                toolslash = {
                            { id = "http://www.roblox.com/asset/?id=522635514", weight = 10 } 
                        },
                toollunge = {
                            { id = "http://www.roblox.com/asset/?id=522638767", weight = 10 } 
                        },
                wave = {
                            { id = "http://www.roblox.com/asset/?id=507770239", weight = 10 } 
                        },
                point = {
                            { id = "http://www.roblox.com/asset/?id=507770453", weight = 10 } 
                        },
                dance = {
                            { id = "http://www.roblox.com/asset/?id=507771019", weight = 10 }, 
                            { id = "http://www.roblox.com/asset/?id=507771955", weight = 10 }, 
                            { id = "http://www.roblox.com/asset/?id=507772104", weight = 10 } 
                        },
                dance2 = {
                            { id = "http://www.roblox.com/asset/?id=507776043", weight = 10 }, 
                            { id = "http://www.roblox.com/asset/?id=507776720", weight = 10 }, 
                            { id = "http://www.roblox.com/asset/?id=507776879", weight = 10 } 
                        },
                dance3 = {
                            { id = "http://www.roblox.com/asset/?id=507777268", weight = 10 }, 
                            { id = "http://www.roblox.com/asset/?id=507777451", weight = 10 }, 
                            { id = "http://www.roblox.com/asset/?id=507777623", weight = 10 } 
                        },
                laugh = {
                            { id = "http://www.roblox.com/asset/?id=507770818", weight = 10 } 
                        },
                cheer = {
                            { id = "http://www.roblox.com/asset/?id=507770677", weight = 10 } 
                        },
            }
            
            -- Existance in this list signifies that it is an emote, the value indicates if it is a looping emote
            local emoteNames = { wave = false, point = false, dance = true, dance2 = true, dance3 = true, laugh = false, cheer = false}
            
            local PreloadAnimsUserFlag = false
            local PreloadedAnims = {}
            local successPreloadAnim, msgPreloadAnim = pcall(function()
                PreloadAnimsUserFlag = UserSettings():IsUserFeatureEnabled("UserPreloadAnimations")
            end)
            if not successPreloadAnim then
                PreloadAnimsUserFlag = false
            end
            
            math.randomseed(tick())
            
            function findExistingAnimationInSet(set, anim)
                if set == nil or anim == nil then
                    return 0
                end
                
                for idx = 1, set.count, 1 do 
                    if set[idx].anim.AnimationId == anim.AnimationId then
                        return idx
                    end
                end
                
                return 0
            end
            
            function configureAnimationSet(name, fileList)
                if (animTable[name] ~= nil) then
                    for _, connection in pairs(animTable[name].connections) do
                        connection:disconnect()
                    end
                end
                animTable[name] = {}
                animTable[name].count = 0
                animTable[name].totalWeight = 0	
                animTable[name].connections = {}
            
                local allowCustomAnimations = true
            
                local success, msg = pcall(function() allowCustomAnimations = game:GetService("StarterPlayer").AllowCustomAnimations end)
                if not success then
                    allowCustomAnimations = true
                end
            
                -- check for config values
                local config = script:FindFirstChild(name)
                if (allowCustomAnimations and config ~= nil) then
                    table.insert(animTable[name].connections, config.ChildAdded:connect(function(child) configureAnimationSet(name, fileList) end))
                    table.insert(animTable[name].connections, config.ChildRemoved:connect(function(child) configureAnimationSet(name, fileList) end))
                    
                    local idx = 0
                    for _, childPart in pairs(config:GetChildren()) do
                        if (childPart:IsA("Animation")) then
                            local newWeight = 1
                            local weightObject = childPart:FindFirstChild("Weight")
                            if (weightObject ~= nil) then
                                newWeight = weightObject.Value
                            end
                            animTable[name].count = animTable[name].count + 1
                            idx = animTable[name].count
                            animTable[name][idx] = {}
                            animTable[name][idx].anim = childPart
                            animTable[name][idx].weight = newWeight
                            animTable[name].totalWeight = animTable[name].totalWeight + animTable[name][idx].weight
                            table.insert(animTable[name].connections, childPart.Changed:connect(function(property) configureAnimationSet(name, fileList) end))
                            table.insert(animTable[name].connections, childPart.ChildAdded:connect(function(property) configureAnimationSet(name, fileList) end))
                            table.insert(animTable[name].connections, childPart.ChildRemoved:connect(function(property) configureAnimationSet(name, fileList) end))
                        end
                    end
                end
                
                -- fallback to defaults
                if (animTable[name].count <= 0) then
                    for idx, anim in pairs(fileList) do
                        animTable[name][idx] = {}
                        animTable[name][idx].anim = Instance.new("Animation")
                        animTable[name][idx].anim.Name = name
                        animTable[name][idx].anim.AnimationId = anim.id
                        animTable[name][idx].weight = anim.weight
                        animTable[name].count = animTable[name].count + 1
                        animTable[name].totalWeight = animTable[name].totalWeight + anim.weight
                    end
                end
                
                -- preload anims
                if PreloadAnimsUserFlag then
                    for i, animType in pairs(animTable) do
                        for idx = 1, animType.count, 1 do
                            if PreloadedAnims[animType[idx].anim.AnimationId] == nil then
                                Humanoid:LoadAnimation(animType[idx].anim)
                                PreloadedAnims[animType[idx].anim.AnimationId] = true
                            end				
                        end
                    end
                end
            end
            
            ------------------------------------------------------------------------------------------------------------
            
            function configureAnimationSetOld(name, fileList)
                if (animTable[name] ~= nil) then
                    for _, connection in pairs(animTable[name].connections) do
                        connection:disconnect()
                    end
                end
                animTable[name] = {}
                animTable[name].count = 0
                animTable[name].totalWeight = 0	
                animTable[name].connections = {}
            
                local allowCustomAnimations = true
            
                local success, msg = pcall(function() allowCustomAnimations = game:GetService("StarterPlayer").AllowCustomAnimations end)
                if not success then
                    allowCustomAnimations = true
                end
            
                -- check for config values
                local config = script:FindFirstChild(name)
                if (allowCustomAnimations and config ~= nil) then
                    table.insert(animTable[name].connections, config.ChildAdded:connect(function(child) configureAnimationSet(name, fileList) end))
                    table.insert(animTable[name].connections, config.ChildRemoved:connect(function(child) configureAnimationSet(name, fileList) end))
                    local idx = 1
                    for _, childPart in pairs(config:GetChildren()) do
                        if (childPart:IsA("Animation")) then
                            table.insert(animTable[name].connections, childPart.Changed:connect(function(property) configureAnimationSet(name, fileList) end))
                            animTable[name][idx] = {}
                            animTable[name][idx].anim = childPart
                            local weightObject = childPart:FindFirstChild("Weight")
                            if (weightObject == nil) then
                                animTable[name][idx].weight = 1
                            else
                                animTable[name][idx].weight = weightObject.Value
                            end
                            animTable[name].count = animTable[name].count + 1
                            animTable[name].totalWeight = animTable[name].totalWeight + animTable[name][idx].weight
                            idx = idx + 1
                        end
                    end
                end
            
                -- fallback to defaults
                if (animTable[name].count <= 0) then
                    for idx, anim in pairs(fileList) do
                        animTable[name][idx] = {}
                        animTable[name][idx].anim = Instance.new("Animation")
                        animTable[name][idx].anim.Name = name
                        animTable[name][idx].anim.AnimationId = anim.id
                        animTable[name][idx].weight = anim.weight
                        animTable[name].count = animTable[name].count + 1
                        animTable[name].totalWeight = animTable[name].totalWeight + anim.weight
                        -- print(name .. " [" .. idx .. "] " .. anim.id .. " (" .. anim.weight .. ")")
                    end
                end
                
                -- preload anims
                if PreloadAnimsUserFlag then
                    for i, animType in pairs(animTable) do
                        for idx = 1, animType.count, 1 do 
                            Humanoid:LoadAnimation(animType[idx].anim)
                        end
                    end
                end
            end
            
            -- Setup animation objects
            function scriptChildModified(child)
                local fileList = animNames[child.Name]
                if (fileList ~= nil) then
                    configureAnimationSet(child.Name, fileList)
                end	
            end
            
            script.ChildAdded:connect(scriptChildModified)
            script.ChildRemoved:connect(scriptChildModified)
            
            
            for name, fileList in pairs(animNames) do 
                configureAnimationSet(name, fileList)
            end	
            
            -- ANIMATION
            
            -- declarations
            local toolAnim = "None"
            local toolAnimTime = 0
            
            local jumpAnimTime = 0
            local jumpAnimDuration = 0.31
            
            local toolTransitionTime = 0.1
            local fallTransitionTime = 0.2
            
            local currentlyPlayingEmote = false
            
            -- functions
            
            function stopAllAnimations()
                local oldAnim = currentAnim
            
                -- return to idle if finishing an emote
                if (emoteNames[oldAnim] ~= nil and emoteNames[oldAnim] == false) then
                    oldAnim = "idle"
                end
                
                if FFlagAnimateScriptEmoteHook and currentlyPlayingEmote then
                    oldAnim = "idle"
                    currentlyPlayingEmote = false
                end
            
                currentAnim = ""
                currentAnimInstance = nil
                if (currentAnimKeyframeHandler ~= nil) then
                    currentAnimKeyframeHandler:disconnect()
                end
            
                if (currentAnimTrack ~= nil) then
                    currentAnimTrack:Stop()
                    currentAnimTrack:Destroy()
                    currentAnimTrack = nil
                end
            
                -- clean up walk if there is one
                if (runAnimKeyframeHandler ~= nil) then
                    runAnimKeyframeHandler:disconnect()
                end
                
                if (runAnimTrack ~= nil) then
                    runAnimTrack:Stop()
                    runAnimTrack:Destroy()
                    runAnimTrack = nil
                end
                
                return oldAnim
            end
            
            function getHeightScale()
                if Humanoid then
                    if not Humanoid.AutomaticScalingEnabled then
                        return 1
                    end
                    
                    local scale = Humanoid.HipHeight / HumanoidHipHeight
                    if userAnimationSpeedDampening then
                        if AnimationSpeedDampeningObject == nil then
                            AnimationSpeedDampeningObject = script:FindFirstChild("ScaleDampeningPercent")
                        end
                        if AnimationSpeedDampeningObject ~= nil then
                            scale = 1 + (Humanoid.HipHeight - HumanoidHipHeight) * AnimationSpeedDampeningObject.Value / HumanoidHipHeight
                        end
                    end
                    return scale
                end	
                return 1
            end
            
            local smallButNotZero = 0.0001
            function setRunSpeed(speed)
                local speedScaled = speed * 1.25
                local heightScale = getHeightScale()
                local runSpeed = speedScaled / heightScale
            
                if runSpeed ~= currentAnimSpeed then
                    if runSpeed < 0.33 then
                        currentAnimTrack:AdjustWeight(1.0)		
                        runAnimTrack:AdjustWeight(smallButNotZero)
                    elseif runSpeed < 0.66 then
                        local weight = ((runSpeed - 0.33) / 0.33)
                        currentAnimTrack:AdjustWeight(1.0 - weight + smallButNotZero)
                        runAnimTrack:AdjustWeight(weight + smallButNotZero)
                    else
                        currentAnimTrack:AdjustWeight(smallButNotZero)
                        runAnimTrack:AdjustWeight(1.0)
                    end
                    currentAnimSpeed = runSpeed
                    runAnimTrack:AdjustSpeed(runSpeed)
                    currentAnimTrack:AdjustSpeed(runSpeed)
                end	
            end
            
            function setAnimationSpeed(speed)
                if currentAnim == "walk" then
                        setRunSpeed(speed)
                else
                    if speed ~= currentAnimSpeed then
                        currentAnimSpeed = speed
                        currentAnimTrack:AdjustSpeed(currentAnimSpeed)
                    end
                end
            end
            
            function keyFrameReachedFunc(frameName)
                if (frameName == "End") then
                    if currentAnim == "walk" then
                        if userNoUpdateOnLoop == true then
                            if runAnimTrack.Looped ~= true then
                                runAnimTrack.TimePosition = 0.0
                            end
                            if currentAnimTrack.Looped ~= true then
                                currentAnimTrack.TimePosition = 0.0
                            end
                        else
                            runAnimTrack.TimePosition = 0.0
                            currentAnimTrack.TimePosition = 0.0
                        end
                    else
                        local repeatAnim = currentAnim
                        -- return to idle if finishing an emote
                        if (emoteNames[repeatAnim] ~= nil and emoteNames[repeatAnim] == false) then
                            repeatAnim = "idle"
                        end
                        
                        if FFlagAnimateScriptEmoteHook and currentlyPlayingEmote then
                            if currentAnimTrack.Looped then
                                -- Allow the emote to loop
                                return
                            end
                            
                            repeatAnim = "idle"
                            currentlyPlayingEmote = false
                        end
                        
                        local animSpeed = currentAnimSpeed
                        playAnimation(repeatAnim, 0.15, Humanoid)
                        setAnimationSpeed(animSpeed)
                    end
                end
            end
            
            function rollAnimation(animName)
                local roll = math.random(1, animTable[animName].totalWeight) 
                local origRoll = roll
                local idx = 1
                while (roll > animTable[animName][idx].weight) do
                    roll = roll - animTable[animName][idx].weight
                    idx = idx + 1
                end
                return idx
            end
            
            local function switchToAnim(anim, animName, transitionTime, humanoid)
                -- switch animation		
                if (anim ~= currentAnimInstance) then
                    
                    if (currentAnimTrack ~= nil) then
                        currentAnimTrack:Stop(transitionTime)
                        currentAnimTrack:Destroy()
                    end
            
                    if (runAnimTrack ~= nil) then
                        runAnimTrack:Stop(transitionTime)
                        runAnimTrack:Destroy()
                        if userNoUpdateOnLoop == true then
                            runAnimTrack = nil
                        end
                    end
            
                    currentAnimSpeed = 1.0
                
                    -- load it to the humanoid; get AnimationTrack
                    currentAnimTrack = humanoid:LoadAnimation(anim)
                    currentAnimTrack.Priority = Enum.AnimationPriority.Core
                     
                    -- play the animation
                    currentAnimTrack:Play(transitionTime)
                    currentAnim = animName
                    currentAnimInstance = anim
            
                    -- set up keyframe name triggers
                    if (currentAnimKeyframeHandler ~= nil) then
                        currentAnimKeyframeHandler:disconnect()
                    end
                    currentAnimKeyframeHandler = currentAnimTrack.KeyframeReached:connect(keyFrameReachedFunc)
                    
                    -- check to see if we need to blend a walk/run animation
                    if animName == "walk" then
                        local runAnimName = "run"
                        local runIdx = rollAnimation(runAnimName)
            
                        runAnimTrack = humanoid:LoadAnimation(animTable[runAnimName][runIdx].anim)
                        runAnimTrack.Priority = Enum.AnimationPriority.Core
                        runAnimTrack:Play(transitionTime)		
                        
                        if (runAnimKeyframeHandler ~= nil) then
                            runAnimKeyframeHandler:disconnect()
                        end
                        runAnimKeyframeHandler = runAnimTrack.KeyframeReached:connect(keyFrameReachedFunc)	
                    end
                end
            end
            
            function playAnimation(animName, transitionTime, humanoid) 	
                local idx = rollAnimation(animName)
                local anim = animTable[animName][idx].anim
            
                switchToAnim(anim, animName, transitionTime, humanoid)
                currentlyPlayingEmote = false
            end
            
            function playEmote(emoteAnim, transitionTime, humanoid)
                switchToAnim(emoteAnim, emoteAnim.Name, transitionTime, humanoid)
                currentlyPlayingEmote = true
            end
            
            -------------------------------------------------------------------------------------------
            -------------------------------------------------------------------------------------------
            
            local toolAnimName = ""
            local toolAnimTrack = nil
            local toolAnimInstance = nil
            local currentToolAnimKeyframeHandler = nil
            
            function toolKeyFrameReachedFunc(frameName)
                if (frameName == "End") then
                    playToolAnimation(toolAnimName, 0.0, Humanoid)
                end
            end
            
            
            function playToolAnimation(animName, transitionTime, humanoid, priority)	 		
                    local idx = rollAnimation(animName)
                    local anim = animTable[animName][idx].anim
            
                    if (toolAnimInstance ~= anim) then
                        
                        if (toolAnimTrack ~= nil) then
                            toolAnimTrack:Stop()
                            toolAnimTrack:Destroy()
                            transitionTime = 0
                        end
                                
                        -- load it to the humanoid; get AnimationTrack
                        toolAnimTrack = humanoid:LoadAnimation(anim)
                        if priority then
                            toolAnimTrack.Priority = priority
                        end
                         
                        -- play the animation
                        toolAnimTrack:Play(transitionTime)
                        toolAnimName = animName
                        toolAnimInstance = anim
            
                        currentToolAnimKeyframeHandler = toolAnimTrack.KeyframeReached:connect(toolKeyFrameReachedFunc)
                    end
            end
            
            function stopToolAnimations()
                local oldAnim = toolAnimName
            
                if (currentToolAnimKeyframeHandler ~= nil) then
                    currentToolAnimKeyframeHandler:disconnect()
                end
            
                toolAnimName = ""
                toolAnimInstance = nil
                if (toolAnimTrack ~= nil) then
                    toolAnimTrack:Stop()
                    toolAnimTrack:Destroy()
                    toolAnimTrack = nil
                end
            
                return oldAnim
            end
            
            -------------------------------------------------------------------------------------------
            -------------------------------------------------------------------------------------------
            -- STATE CHANGE HANDLERS
            
            function onRunning(speed)
                if speed > 0.75 then
                    local scale = 16.0
                    playAnimation("walk", 0.2, Humanoid)
                    setAnimationSpeed(speed / scale)
                    pose = "Running"
                else
                    if emoteNames[currentAnim] == nil and not currentlyPlayingEmote then
                        playAnimation("idle", 0.2, Humanoid)
                        pose = "Standing"
                    end
                end
            end
            
            function onDied()
                pose = "Dead"
            end
            
            function onJumping()
                playAnimation("jump", 0.1, Humanoid)
                jumpAnimTime = jumpAnimDuration
                pose = "Jumping"
            end
            
            function onClimbing(speed)
                local scale = 5.0
                playAnimation("climb", 0.1, Humanoid)
                setAnimationSpeed(speed / scale)
                pose = "Climbing"
            end
            
            function onGettingUp()
                pose = "GettingUp"
            end
            
            function onFreeFall()
                if (jumpAnimTime <= 0) then
                    playAnimation("fall", fallTransitionTime, Humanoid)
                end
                pose = "FreeFall"
            end
            
            function onFallingDown()
                pose = "FallingDown"
            end
            
            function onSeated()
                pose = "Seated"
            end
            
            function onPlatformStanding()
                pose = "PlatformStanding"
            end
            
            -------------------------------------------------------------------------------------------
            -------------------------------------------------------------------------------------------
            
            function onSwimming(speed)
                if speed > 1.00 then
                    local scale = 10.0
                    playAnimation("swim", 0.4, Humanoid)
                    setAnimationSpeed(speed / scale)
                    pose = "Swimming"
                else
                    playAnimation("swimidle", 0.4, Humanoid)
                    pose = "Standing"
                end
            end
            
            function animateTool()
                if (toolAnim == "None") then
                    playToolAnimation("toolnone", toolTransitionTime, Humanoid, Enum.AnimationPriority.Idle)
                    return
                end
            
                if (toolAnim == "Slash") then
                    playToolAnimation("toolslash", 0, Humanoid, Enum.AnimationPriority.Action)
                    return
                end
            
                if (toolAnim == "Lunge") then
                    playToolAnimation("toollunge", 0, Humanoid, Enum.AnimationPriority.Action)
                    return
                end
            end
            
            function getToolAnim(tool)
                for _, c in ipairs(tool:GetChildren()) do
                    if c.Name == "toolanim" and c.className == "StringValue" then
                        return c
                    end
                end
                return nil
            end
            
            local lastTick = 0
            
            function stepAnimate(currentTime)
                local amplitude = 1
                local frequency = 1
                  local deltaTime = currentTime - lastTick
                  lastTick = currentTime
            
                local climbFudge = 0
                local setAngles = false
            
                  if (jumpAnimTime > 0) then
                      jumpAnimTime = jumpAnimTime - deltaTime
                  end
            
                if (pose == "FreeFall" and jumpAnimTime <= 0) then
                    playAnimation("fall", fallTransitionTime, Humanoid)
                elseif (pose == "Seated") then
                    playAnimation("sit", 0.5, Humanoid)
                    return
                elseif (pose == "Running") then
                    playAnimation("walk", 0.2, Humanoid)
                elseif (pose == "Dead" or pose == "GettingUp" or pose == "FallingDown" or pose == "Seated" or pose == "PlatformStanding") then
                    stopAllAnimations()
                    amplitude = 0.1
                    frequency = 1
                    setAngles = true
                end
            
                -- Tool Animation handling
                local tool = Character:FindFirstChildOfClass("Tool")
                if tool and tool:FindFirstChild("Handle") then
                    local animStringValueObject = getToolAnim(tool)
            
                    if animStringValueObject then
                        toolAnim = animStringValueObject.Value
                        -- message recieved, delete StringValue
                        animStringValueObject.Parent = nil
                        toolAnimTime = currentTime + .3
                    end
            
                    if currentTime > toolAnimTime then
                        toolAnimTime = 0
                        toolAnim = "None"
                    end
            
                    animateTool()		
                else
                    stopToolAnimations()
                    toolAnim = "None"
                    toolAnimInstance = nil
                    toolAnimTime = 0
                end
            end
            
            -- connect events
            
            local events = {}
            local eventHum = Humanoid
            
            local function onUnhook()
                for i = 1, #events do
                    events[i]:Disconnect()
                end
                events = {}
            end
            
            local function onHook()
                onUnhook()
                
                pose = eventHum.Sit and "Seated" or "Standing"
                
                events = {
                    eventHum.Died:connect(onDied),
                    eventHum.Running:connect(onRunning),
                    eventHum.Jumping:connect(onJumping),
                    eventHum.Climbing:connect(onClimbing),
                    eventHum.GettingUp:connect(onGettingUp),
                    eventHum.FreeFalling:connect(onFreeFall),
                    eventHum.FallingDown:connect(onFallingDown),
                    eventHum.Seated:connect(onSeated),
                    eventHum.PlatformStanding:connect(onPlatformStanding),
                    eventHum.Swimming:connect(onSwimming)
                }
            end
            
            
            onHook()
            
            -- setup emote chat hook
            game:GetService("Players").LocalPlayer.Chatted:connect(function(msg)
                local emote = ""
                if (string.sub(msg, 1, 3) == "/e ") then
                    emote = string.sub(msg, 4)
                elseif (string.sub(msg, 1, 7) == "/emote ") then
                    emote = string.sub(msg, 8)
                end
                
                if (pose == "Standing" and emoteNames[emote] ~= nil) then
                    playAnimation(emote, EMOTE_TRANSITION_TIME, Humanoid)
                end
            end)
            
            --[[ emote bindable hook
            if FFlagAnimateScriptEmoteHook then
                script:WaitForChild("PlayEmote").OnInvoke = function(emote)
                    -- Only play emotes when idling
                    if pose ~= "Standing" then
                        return
                    end
                    if emoteNames[emote] ~= nil then
                        -- Default emotes
                        playAnimation(emote, EMOTE_TRANSITION_TIME, Humanoid)
                        return true
                    elseif typeof(emote) == "Instance" and emote:IsA("Animation") then
                        -- Non-default emotes
                        playEmote(emote, EMOTE_TRANSITION_TIME, Humanoid)
                        return true
                    end
                    -- Return false to indicate that the emote could not be played
                    return false
                end
            end
            ]]
            -- initialize to idle
            playAnimation("idle", 0.1, Humanoid)
            pose = "Standing"
            -- loop to handle timed state transitions and tool animations
            spawn(function()
                while Character.Parent ~= nil do
                    local _, currentGameTime = wait(0.1)
                    stepAnimate(currentGameTime)
                end
            end)
            return {
                onRunning = onRunning, 
                onDied = onDied, 
                onJumping = onJumping, 
                onClimbing = onClimbing, 
                onGettingUp = onGettingUp, 
                onFreeFall = onFreeFall, 
                onFallingDown = onFallingDown, 
                onSeated = onSeated, 
                onPlatformStanding = onPlatformStanding,
                onHook = onHook,
                onUnhook = onUnhook
            }
            end
            return r15()
        end
        while true do
            wait(.1)
            if plr.Character ~= nil then
                char = plr.Character
                break
            end
        end
        function _Controller()
            local humanoid = char:WaitForChild("Humanoid")
            local animFuncs = {}
            if (humanoid.RigType == Enum.HumanoidRigType.R6) then
                animFuncs = _R6()
            else
                animFuncs = _R15()
            end
            print("Animation succes")
            return animFuncs
        end
        function _AnimationHandler()
        local AnimationHandler = {}
        AnimationHandler.__index = AnimationHandler
        
        function AnimationHandler.new(humanoid, animate)
            local self = setmetatable({}, AnimationHandler)
            
            self._AnimFuncs = _Controller()
            self.Humanoid = humanoid
            
            return self
        end
        
        function AnimationHandler:EnableDefault(bool)
            if (bool) then
                self._AnimFuncs.onHook()
            else
                self._AnimFuncs.onUnhook()
            end
        end
        
        function AnimationHandler:Run(name, ...)
            self._AnimFuncs[name](...)
        end
        
        return AnimationHandler
        end
        
        function _GravityController()
        
        local ZERO = Vector3.new(0, 0, 0)
        local UNIT_X = Vector3.new(1, 0, 0)
        local UNIT_Y = Vector3.new(0, 1, 0)
        local UNIT_Z = Vector3.new(0, 0, 1)
        local VEC_XY = Vector3.new(1, 0, 1)
        
        local IDENTITYCF = CFrame.new()
        
        local JUMPMODIFIER = 1.2
        local TRANSITION = 0.15
        local WALKF = 200 / 3
        
        local UIS = game:GetService("UserInputService")
        local RUNSERVICE = game:GetService("RunService")
        
        local InitObjects = _InitObjects()
        local AnimationHandler = _AnimationHandler()
        local StateTracker = _StateTracker()
        
        -- Class
        
        local GravityController = {}
        GravityController.__index = GravityController
        
        -- Private Functions
        
        local function getRotationBetween(u, v, axis)
            local dot, uxv = u:Dot(v), u:Cross(v)
            if (dot < -0.99999) then return CFrame.fromAxisAngle(axis, math.pi) end
            return CFrame.new(0, 0, 0, uxv.x, uxv.y, uxv.z, 1 + dot)
        end
        
        local function lookAt(pos, forward, up)
            local r = forward:Cross(up)
            local u = r:Cross(forward)
            return CFrame.fromMatrix(pos, r.Unit, u.Unit)
        end
        
        local function getMass(array)
            local mass = 0
            for _, part in next, array do
                if (part:IsA("BasePart")) then
                    mass = mass + part:GetMass()
                end
            end
            return mass
        end
        
        -- Public Constructor
        local ExecutedPlayerModule = _PlayerModule()
        local ExecutedSounds = _sounds()
        function GravityController.new(player)
            local self = setmetatable({}, GravityController)
        
            --[[ Camera
            local loaded = player.PlayerScripts:WaitForChild("PlayerScriptsLoader"):WaitForChild("Loaded")
            if (not loaded.Value) then
                --loaded.Changed:Wait()
            end
            ]]
            local playerModule = ExecutedPlayerModule
            self.Controls = playerModule:GetControls()
            self.Camera = playerModule:GetCameras()
            
            -- Player and character
            self.Player = player
            self.Character = player.Character
            self.Humanoid = player.Character:WaitForChild("Humanoid")
            self.HRP = player.Character:WaitForChild("HumanoidRootPart")
            
            -- Animation
            self.AnimationHandler = AnimationHandler.new(self.Humanoid, self.Character:WaitForChild("Animate"))
            self.AnimationHandler:EnableDefault(false)
            local ssss = game:GetService("Players").LocalPlayer.PlayerScripts:FindFirstChild("SetState") or Instance.new("BindableEvent",game:GetService("Players").LocalPlayer.PlayerScripts)
            local soundState = ExecutedSounds
            ssss.Name = "SetState"
            
            self.StateTracker = StateTracker.new(self.Humanoid, soundState)
            self.StateTracker.Changed:Connect(function(name, speed)
                self.AnimationHandler:Run(name, speed)
            end)
            
            -- Collider and forces
            local collider, gyro, vForce, floor = InitObjects(self)
            
            floor.Touched:Connect(function() end)
            collider.Touched:Connect(function() end)
            
            self.Collider = collider
            self.VForce = vForce
            self.Gyro = gyro
            self.Floor = floor
            
            -- Attachment to parts
            self.LastPart = workspace.Terrain
            self.LastPartCFrame = IDENTITYCF
            
            -- Gravity properties
            self.GravityUp = UNIT_Y
            self.Ignores = {self.Character}
            
            function self.Camera.GetUpVector(this, oldUpVector)
                return self.GravityUp
            end
            
            -- Events etc
            self.Humanoid.PlatformStand = true
            
            self.CharacterMass = getMass(self.Character:GetDescendants())
            self.Character.AncestryChanged:Connect(function() self.CharacterMass = getMass(self.Character:GetDescendants()) end)
            
            self.JumpCon = RUNSERVICE.RenderStepped:Connect(function(dt) 
                if (self.Controls:IsJumping()) then
                    self:OnJumpRequest()
                end
            end)
            
            self.DeathCon = self.Humanoid.Died:Connect(function() self:Destroy() end)
            self.SeatCon = self.Humanoid.Seated:Connect(function(active) if (active) then self:Destroy() end end)
            self.HeartCon = RUNSERVICE.Heartbeat:Connect(function(dt) self:OnHeartbeatStep(dt) end)
            RUNSERVICE:BindToRenderStep("GravityStep", Enum.RenderPriority.Input.Value + 1, function(dt) self:OnGravityStep(dt) end)
            
            
            return self
        end
        
        -- Public Methods
        
        function GravityController:Destroy()
            self.JumpCon:Disconnect()
            self.DeathCon:Disconnect()
            self.SeatCon:Disconnect()
            self.HeartCon:Disconnect()
            
            RUNSERVICE:UnbindFromRenderStep("GravityStep")
            
            self.Collider:Destroy()
            self.VForce:Destroy()
            self.Gyro:Destroy()
            self.StateTracker:Destroy()
            
            self.Humanoid.PlatformStand = false
            self.AnimationHandler:EnableDefault(true)
            
            self.GravityUp = UNIT_Y
        end
        
        function GravityController:GetGravityUp(oldGravity)
            return oldGravity
        end
        
        function GravityController:IsGrounded(isJumpCheck)
            if (not isJumpCheck) then
                local parts = self.Floor:GetTouchingParts()
                for _, part in next, parts do
                    if (not part:IsDescendantOf(self.Character)) then
                        return true
                    end
                end
            else
                if (self.StateTracker.Jumped) then
                    return false
                end
            
                -- 1. check we are touching something with the collider
                local valid = {}
                local parts = self.Collider:GetTouchingParts()
                for _, part in next, parts do
                    if (not part:IsDescendantOf(self.Character)) then
                        table.insert(valid, part)
                    end
                end
                
                if (#valid > 0) then
                    -- 2. do a decently long downwards raycast
                    local max = math.cos(self.Humanoid.MaxSlopeAngle)
                    local ray = Ray.new(self.Collider.Position, -10 * self.GravityUp)
                    local hit, pos, normal = workspace:FindPartOnRayWithWhitelist(ray, valid, true)
                    
                    -- 3. use slope to decide on jump
                    if (hit and max <= self.GravityUp:Dot(normal)) then
                        return true
                    end
                end
            end
            return false
        end
        
        function GravityController:OnJumpRequest()
            if (not self.StateTracker.Jumped and self:IsGrounded(true)) then
                local hrpVel = self.HRP.Velocity
                self.HRP.Velocity = hrpVel + self.GravityUp*self.Humanoid.JumpPower*JUMPMODIFIER
                self.StateTracker:RequestedJump()
            end
        end
        
        function GravityController:GetMoveVector()
            return self.Controls:GetMoveVector()
        end
        
        function GravityController:OnHeartbeatStep(dt)
            local ray = Ray.new(self.Collider.Position, -1.1*self.GravityUp)
            local hit, pos, normal = workspace:FindPartOnRayWithIgnoreList(ray, self.Ignores)
            local lastPart = self.LastPart
            
            if (hit and lastPart and lastPart == hit) then
                local offset = self.LastPartCFrame:ToObjectSpace(self.HRP.CFrame)
                self.HRP.CFrame = hit.CFrame:ToWorldSpace(offset)
            end
            
            self.LastPart = hit
            self.LastPartCFrame = hit and hit.CFrame
        end
        
        function GravityController:OnGravityStep(dt)
            -- update gravity up vector
            local oldGravity = self.GravityUp
            local newGravity = self:GetGravityUp(oldGravity)
            
            local rotation = getRotationBetween(oldGravity, newGravity, workspace.CurrentCamera.CFrame.RightVector)
            rotation = IDENTITYCF:Lerp(rotation, TRANSITION)
            
            self.GravityUp = rotation * oldGravity
            
            -- get world move vector
            local camCF = workspace.CurrentCamera.CFrame
            local fDot = camCF.LookVector:Dot(newGravity)
            local cForward = math.abs(fDot) > 0.5 and -math.sign(fDot)*camCF.UpVector or camCF.LookVector
            
            local left = cForward:Cross(-newGravity).Unit
            local forward = -left:Cross(newGravity).Unit
            
            local move = self:GetMoveVector()
            local worldMove = forward*move.z - left*move.x
            worldMove = worldMove:Dot(worldMove) > 1 and worldMove.Unit or worldMove
            
            local isInputMoving = worldMove:Dot(worldMove) > 0
            
            -- get the desired character cframe
            local hrpCFLook = self.HRP.CFrame.LookVector
            local charF = hrpCFLook:Dot(forward)*forward + hrpCFLook:Dot(left)*left
            local charR = charF:Cross(newGravity).Unit
            local newCharCF = CFrame.fromMatrix(ZERO, charR, newGravity, -charF)
            
            local newCharRotation = IDENTITYCF
            if (isInputMoving) then
                newCharRotation = IDENTITYCF:Lerp(getRotationBetween(charF, worldMove, newGravity), 0.7)	
            end
            
            -- calculate forces
            local g = workspace.Gravity
            local gForce = g * self.CharacterMass * (UNIT_Y - newGravity)
            
            local cVelocity = self.HRP.Velocity
            local tVelocity = self.Humanoid.WalkSpeed * worldMove
            local gVelocity = cVelocity:Dot(newGravity)*newGravity
            local hVelocity = cVelocity - gVelocity
            
            if (hVelocity:Dot(hVelocity) < 1) then
                hVelocity = ZERO
            end
            
            local dVelocity = tVelocity - hVelocity
            local walkForceM = math.min(10000, WALKF * self.CharacterMass * dVelocity.Magnitude / (dt*60))
            local walkForce = walkForceM > 0 and dVelocity.Unit*walkForceM or ZERO
            
            -- mouse lock
            local charRotation = newCharRotation * newCharCF
            
            if (self.Camera:IsCamRelative()) then
                local lv = workspace.CurrentCamera.CFrame.LookVector
                local hlv = lv - charRotation.UpVector:Dot(lv)*charRotation.UpVector
                charRotation = lookAt(ZERO, hlv, charRotation.UpVector)
            end
            
            -- get state
            self.StateTracker:OnStep(self.GravityUp, self:IsGrounded(), isInputMoving)
        
            -- update values
            self.VForce.Force = walkForce + gForce
            self.Gyro.CFrame = charRotation
        end
        return GravityController
        end
        function _Draw3D()
            local module = {}
            
            -- Style Guide
            
            module.StyleGuide = {
                Point = {
                    Thickness = 0.5;
                    Color = Color3.new(0, 1, 0);
                },
                
                Line = {
                    Thickness = 0.1;
                    Color = Color3.new(1, 1, 0);
                },
                
                Ray = {
                    Thickness = 0.1;
                    Color = Color3.new(1, 0, 1);
                },
                
                Triangle = {
                    Thickness = 0.05;
                };
                
                CFrame = {
                    Thickness = 0.1;
                    RightColor3 = Color3.new(1, 0, 0);
                    UpColor3 = Color3.new(0, 1, 0);
                    BackColor3 = Color3.new(0, 0, 1);
                    PartProperties = {
                        Material = Enum.Material.SmoothPlastic;
                    };
                }
            }
            
            -- CONSTANTS
            
            local WEDGE = Instance.new("WedgePart")
            WEDGE.Material = Enum.Material.SmoothPlastic
            WEDGE.Anchored = true
            WEDGE.CanCollide = false
            
            local PART = Instance.new("Part")
            PART.Size = Vector3.new(0.1, 0.1, 0.1)
            PART.Anchored = true
            PART.CanCollide = false
            PART.TopSurface = Enum.SurfaceType.Smooth
            PART.BottomSurface = Enum.SurfaceType.Smooth
            PART.Material = Enum.Material.SmoothPlastic
            
            -- Functions
            
            local function draw(properties, style)
                local part = PART:Clone()
                for k, v in next, properties do
                    part[k] = v
                end
                if (style) then
                    for k, v in next, style do
                        if (k ~= "Thickness") then
                            part[k] = v
                        end
                    end
                end
                return part
            end
            
            function module.Draw(parent, properties)
                properties.Parent = parent
                return draw(properties, nil)
            end
            
            function module.Point(parent, cf_v3)
                local thickness = module.StyleGuide.Point.Thickness
                return draw({
                    Size = Vector3.new(thickness, thickness, thickness);
                    CFrame = (typeof(cf_v3) == "CFrame" and cf_v3 or CFrame.new(cf_v3));
                    Parent = parent;
                }, module.StyleGuide.Point)
            end
            
            function module.Line(parent, a, b)
                local thickness = module.StyleGuide.Line.Thickness
                return draw({
                    CFrame = CFrame.new((a + b)/2, b);
                    Size = Vector3.new(thickness, thickness, (b - a).Magnitude);
                    Parent = parent;
                }, module.StyleGuide.Line)
            end
            
            function module.Ray(parent, origin, direction)
                local thickness = module.StyleGuide.Ray.Thickness
                return draw({
                    CFrame = CFrame.new(origin + direction/2, origin + direction);
                    Size = Vector3.new(thickness, thickness, direction.Magnitude);
                    Parent = parent;
                }, module.StyleGuide.Ray)
            end
            
            function module.Triangle(parent, a, b, c)
                local ab, ac, bc = b - a, c - a, c - b
                local abd, acd, bcd = ab:Dot(ab), ac:Dot(ac), bc:Dot(bc)
                
                if (abd > acd and abd > bcd) then
                    c, a = a, c
                elseif (acd > bcd and acd > abd) then
                    a, b = b, a
                end
                
                ab, ac, bc = b - a, c - a, c - b
                
                local right = ac:Cross(ab).Unit
                local up = bc:Cross(right).Unit
                local back = bc.Unit
                
                local height = math.abs(ab:Dot(up))
                local width1 = math.abs(ab:Dot(back))
                local width2 = math.abs(ac:Dot(back))
                
                local thickness = module.StyleGuide.Triangle.Thickness
                
                local w1 = WEDGE:Clone()
                w1.Size = Vector3.new(thickness, height, width1)
                w1.CFrame = CFrame.fromMatrix((a + b)/2, right, up, back)
                w1.Parent = parent
                
                local w2 = WEDGE:Clone()
                w2.Size = Vector3.new(thickness, height, width2)
                w2.CFrame = CFrame.fromMatrix((a + c)/2, -right, up, -back)
                w2.Parent = parent
                
                for k, v in next, module.StyleGuide.Triangle do
                    if (k ~= "Thickness") then
                        w1[k] = v
                        w2[k] = v
                    end
                end
                
                return w1, w2
            end
            
            function module.CFrame(parent, cf)
                local origin = cf.Position
                local r = cf.RightVector
                local u = cf.UpVector
                local b = -cf.LookVector
                
                local thickness = module.StyleGuide.CFrame.Thickness
                
                local right = draw({
                    CFrame = CFrame.new(origin + r/2, origin + r);
                    Size = Vector3.new(thickness, thickness, r.Magnitude);
                    Color = module.StyleGuide.CFrame.RightColor3;
                    Parent = parent;
                }, module.StyleGuide.CFrame.PartProperties)
                
                local up = draw({
                    CFrame = CFrame.new(origin + u/2, origin + u);
                    Size = Vector3.new(thickness, thickness, r.Magnitude);
                    Color = module.StyleGuide.CFrame.UpColor3;
                    Parent = parent;
                }, module.StyleGuide.CFrame.PartProperties)
                
                local back = draw({
                    CFrame = CFrame.new(origin + b/2, origin + b);
                    Size = Vector3.new(thickness, thickness, u.Magnitude);
                    Color = module.StyleGuide.CFrame.BackColor3;
                    Parent = parent;
                }, module.StyleGuide.CFrame.PartProperties)
                
                return right, up, back
            end
            
            -- Return
            
            return module
        end
        function _Draw2D()
            local module = {}
            
            -- Style Guide
            
            module.StyleGuide = {
                Point = {
                    BorderSizePixel = 0;
                    Size = UDim2.new(0, 4, 0, 4);
                    BorderColor3 = Color3.new(0, 0, 0);
                    BackgroundColor3 = Color3.new(0, 1, 0);
                },
                
                Line = {
                    Thickness = 1;
                    BorderSizePixel = 0;
                    BorderColor3 = Color3.new(0, 0, 0);
                    BackgroundColor3 = Color3.new(0, 1, 0);
                },
                
                Ray = {
                    Thickness = 1;
                    BorderSizePixel = 0;
                    BorderColor3 = Color3.new(0, 0, 0);
                    BackgroundColor3 = Color3.new(0, 1, 0);
                },
                
                Triangle = {
                    ImageTransparency = 0;
                    ImageColor3 = Color3.new(0, 1, 0);
                }
            }
            
            -- CONSTANTS
            
            local HALF = Vector2.new(0.5, 0.5)
            
            local RIGHT = "rbxassetid://2798177521"
            local LEFT = "rbxassetid://2798177955"
            
            local IMG = Instance.new("ImageLabel")
            IMG.BackgroundTransparency = 1
            IMG.AnchorPoint = HALF
            IMG.BorderSizePixel = 0
            
            local FRAME = Instance.new("Frame")
            FRAME.BorderSizePixel = 0
            FRAME.Size = UDim2.new(0, 0, 0, 0)
            FRAME.BackgroundColor3 = Color3.new(1, 1, 1)
            
            -- Functions
            
            function draw(properties, style)
                local frame = FRAME:Clone()
                for k, v in next, properties do
                    frame[k] = v
                end
                if (style) then
                    for k, v in next, style do
                        if (k ~= "Thickness") then
                            frame[k] = v
                        end
                    end
                end
                return frame
            end
            
            function module.Draw(parent, properties)
                properties.Parent = parent
                return draw(properties, nil)
            end
            
            function module.Point(parent, v2)
                return draw({
                    AnchorPoint = HALF;
                    Position = UDim2.new(0, v2.x, 0, v2.y);
                    Parent = parent;
                }, module.StyleGuide.Point)
            end
            
            function module.Line(parent, a, b)
                local v = (b - a)
                local m = (a + b)/2
                
                return draw({
                    AnchorPoint = HALF;
                    Position = UDim2.new(0, m.x, 0, m.y);
                    Size = UDim2.new(0, module.StyleGuide.Line.Thickness, 0, v.magnitude);
                    Rotation = math.deg(math.atan2(v.y, v.x)) - 90;
                    BackgroundColor3 = Color3.new(1, 1, 0);
                    Parent = parent;
                }, module.StyleGuide.Line)
            end
            
            function module.Ray(parent, origin, direction)
                local a, b = origin, origin + direction
                local v = (b - a)
                local m = (a + b)/2
                
                return draw({
                    AnchorPoint = HALF;
                    Position = UDim2.new(0, m.x, 0, m.y);
                    Size = UDim2.new(0, module.StyleGuide.Ray.Thickness, 0, v.magnitude);
                    Rotation = math.deg(math.atan2(v.y, v.x)) - 90;
                    Parent = parent;
                }, module.StyleGuide.Ray)
            end
            
            function module.Triangle(parent, a, b, c)
                local ab, ac, bc = b - a, c - a, c - b
                local abd, acd, bcd = ab:Dot(ab), ac:Dot(ac), bc:Dot(bc)
                
                if (abd > acd and abd > bcd) then
                    c, a = a, c
                elseif (acd > bcd and acd > abd) then
                    a, b = b, a
                end
                
                ab, ac, bc = b - a, c - a, c - b
                
                local unit = bc.unit
                local height = unit:Cross(ab)
                local flip = (height >= 0)
                local theta = math.deg(math.atan2(unit.y, unit.x)) + (flip and 0 or 180)
                
                local m1 = (a + b)/2
                local m2 = (a + c)/2
                
                local w1 = IMG:Clone()
                w1.Image = flip and RIGHT or LEFT
                w1.AnchorPoint = HALF
                w1.Size = UDim2.new(0, math.abs(unit:Dot(ab)), 0, height)
                w1.Position = UDim2.new(0, m1.x, 0, m1.y)
                w1.Rotation = theta
                w1.Parent = parent
                
                local w2 = IMG:Clone()
                w2.Image = flip and LEFT or RIGHT
                w2.AnchorPoint = HALF
                w2.Size = UDim2.new(0, math.abs(unit:Dot(ac)), 0, height)
                w2.Position = UDim2.new(0, m2.x, 0, m2.y)
                w2.Rotation = theta
                w2.Parent = parent
                
                for k, v in next, module.StyleGuide.Triangle do
                    w1[k] = v
                    w2[k] = v
                end
                
                return w1, w2
            end
            
            -- Return
            
            return module
        end
        function _DrawClass()
            local Draw2DModule = _Draw2D()
            local Draw3DModule = _Draw3D()
            
            --
            
            local DrawClass = {}
            local DrawClassStorage = setmetatable({}, {__mode = "k"})
            DrawClass.__index = DrawClass
            
            function DrawClass.new(parent)
                local self = setmetatable({}, DrawClass)
                
                self.Parent = parent
                DrawClassStorage[self] = {}
                
                self.Draw3D = {}
                for key, func in next, Draw3DModule do
                    self.Draw3D[key] = function(...)
                        local returns = {func(self.Parent, ...)}
                        for i = 1, #returns do
                            table.insert(DrawClassStorage[self], returns[i])
                        end
                        return unpack(returns)
                    end
                end
                
                self.Draw2D = {}
                for key, func in next, Draw2DModule do
                    self.Draw2D[key] = function(...)
                        local returns = {func(self.Parent, ...)}
                        for i = 1, #returns do
                            table.insert(DrawClassStorage[self], returns[i])
                        end
                        return unpack(returns)
                    end
                end
                
                return self
            end
            
            --
            
            function DrawClass:Clear()
                local t = DrawClassStorage[self]
                while (#t > 0) do
                    local part = table.remove(t)
                    if (part) then
                        part:Destroy()
                    end
                end
                DrawClassStorage[self] = {}
            end
            
            --
            
            return DrawClass
        end
        
        
        --END TEST
        
        local PLAYERS = game:GetService("Players")
        
        local GravityController = _GravityController()
        local Controller = GravityController.new(PLAYERS.LocalPlayer)
        
        local DrawClass = _DrawClass()
        
        local PI2 = math.pi*2
        local ZERO = Vector3.new(0, 0, 0)
        
        local LOWER_RADIUS_OFFSET = 3 
        local NUM_DOWN_RAYS = 24
        local ODD_DOWN_RAY_START_RADIUS = 3	
        local EVEN_DOWN_RAY_START_RADIUS = 2
        local ODD_DOWN_RAY_END_RADIUS = 1.66666
        local EVEN_DOWN_RAY_END_RADIUS = 1
        
        local NUM_FEELER_RAYS = 9
        local FEELER_LENGTH = 2
        local FEELER_START_OFFSET = 2
        local FEELER_RADIUS = 3.5
        local FEELER_APEX_OFFSET = 1
        local FEELER_WEIGHTING = 8
        
        function GetGravityUp(self, oldGravityUp)
            local ignoreList = {}
            for i, player in next, PLAYERS:GetPlayers() do
                ignoreList[i] = player.Character
            end
            
            -- get the normal
            
            local hrpCF = self.HRP.CFrame
            local isR15 = (self.Humanoid.RigType == Enum.HumanoidRigType.R15)
            
            local origin = isR15 and hrpCF.p or hrpCF.p + 0.35*oldGravityUp
            local radialVector = math.abs(hrpCF.LookVector:Dot(oldGravityUp)) < 0.999 and hrpCF.LookVector:Cross(oldGravityUp) or hrpCF.RightVector:Cross(oldGravityUp)
            
            local centerRayLength = 25
            local centerRay = Ray.new(origin, -centerRayLength * oldGravityUp)
            local centerHit, centerHitPoint, centerHitNormal = workspace:FindPartOnRayWithIgnoreList(centerRay, ignoreList)
            
            --[[disable
            DrawClass:Clear()
            DrawClass.Draw3D.Ray(centerRay.Origin, centerRay.Direction)
            ]]
            local downHitCount = 0
            local totalHitCount = 0
            local centerRayHitCount = 0
            local evenRayHitCount = 0
            local oddRayHitCount = 0
            
            local mainDownNormal = ZERO
            if (centerHit) then
                mainDownNormal = centerHitNormal
                centerRayHitCount = 0
            end
            
            local downRaySum = ZERO
            for i = 1, NUM_DOWN_RAYS do
                local dtheta = PI2 * ((i-1)/NUM_DOWN_RAYS)
                
                local angleWeight = 0.25 + 0.75 * math.abs(math.cos(dtheta))
                local isEvenRay = (i%2 == 0)
                local startRadius = isEvenRay and EVEN_DOWN_RAY_START_RADIUS or ODD_DOWN_RAY_START_RADIUS	
                local endRadius = isEvenRay and EVEN_DOWN_RAY_END_RADIUS or ODD_DOWN_RAY_END_RADIUS
                local downRayLength = centerRayLength
                
                local offset = CFrame.fromAxisAngle(oldGravityUp, dtheta) * radialVector
                local dir = (LOWER_RADIUS_OFFSET * -oldGravityUp + (endRadius - startRadius) * offset)
                local ray = Ray.new(origin + startRadius * offset, downRayLength * dir.unit)
                local hit, hitPoint, hitNormal = workspace:FindPartOnRayWithIgnoreList(ray, ignoreList)
                --[[disable
                DrawClass.Draw3D.Ray(ray.Origin, ray.Direction)
                ]]
                if (hit) then
                    downRaySum = downRaySum + angleWeight * hitNormal
                    downHitCount = downHitCount + 1
                    if isEvenRay then
                        evenRayHitCount = evenRayHitCount + 1					
                    else
                        oddRayHitCount = oddRayHitCount + 1
                    end
                end
            end
            
            local feelerHitCount = 0	
            local feelerNormalSum = ZERO
            
            for i = 1, NUM_FEELER_RAYS do
                local dtheta = 2 * math.pi * ((i-1)/NUM_FEELER_RAYS)
                local angleWeight =  0.25 + 0.75 * math.abs(math.cos(dtheta))	
                local offset = CFrame.fromAxisAngle(oldGravityUp, dtheta) * radialVector
                local dir = (FEELER_RADIUS * offset + LOWER_RADIUS_OFFSET * -oldGravityUp).unit
                local feelerOrigin = origin - FEELER_APEX_OFFSET * -oldGravityUp + FEELER_START_OFFSET * dir
                local ray = Ray.new(feelerOrigin, FEELER_LENGTH * dir)
                local hit, hitPoint, hitNormal = workspace:FindPartOnRayWithIgnoreList(ray, ignoreList)
                --[[disable
                DrawClass.Draw3D.Ray(ray.Origin, ray.Direction)
                ]]
                if (hit) then
                    feelerNormalSum = feelerNormalSum + FEELER_WEIGHTING * angleWeight * hitNormal --* hitDistSqInv
                    feelerHitCount = feelerHitCount + 1
                end
            end
            
            if (centerRayHitCount + downHitCount + feelerHitCount > 0) then
                local normalSum = mainDownNormal + downRaySum + feelerNormalSum
                if (normalSum ~= ZERO) then
                    return normalSum.unit
                end
            end
            
            return oldGravityUp
        end
        
        Controller.GetGravityUp = GetGravityUp
        
        -- E is toggle
        game:GetService("ContextActionService"):BindAction("Toggle", function(action, state, input)
            if not (state == Enum.UserInputState.Begin) then
                return
            end
            
            if (Controller) then
                Controller:Destroy()
                Controller = nil
            else
                Controller = GravityController.new(PLAYERS.LocalPlayer)
                Controller.GetGravityUp = GetGravityUp
            end
        end, false, Enum.KeyCode.Z)
        print("end")
end)

Section5:NewButton("Reviz admin", "Kinda like infinite yield", function()
-- Creator: illremember#3799

-- Credits to infinite yield, harkinian, dex creators

prefix = ";"
wait(0.3)
Commands = {
	'[-] cmdbar is shown when ; is pressed.',
	'[1] kill [plr] -- You need a tool! Will kill the player, use rkill to kill you and player',
	'[2] bring [plr] -- You need a tool! Will bring player to you',
	'[3] spin [plr] -- You need a tool! Makes you and the player spin crazy',
	'[4] unspin -- Use after using spin cmd and dying, so you stop loop teleporting',
	'[5] attach [plr] -- You need a tool! Attaches you to player',
	'[6] unattach [plr] -- Attempts to unattach you from a player',
	'[7] follow [plr] -- Makes you follow behind the player',
	'[8] unfollow',
	'[9] freefall [plr] -- You need a tool! Teleports you and the player up into the air',
	'[10] trail [plr] -- The opposite of follow, you stay infront of player',
	'[11] untrail',
	'[12] orbit [plr] -- Makes you orbit the player',
	'[13] unorbit',
	'[14] fling [plr] -- Makes you fling the player',
	'[15] unfling',
	'[16] fecheck -- Checks if the game is FE or not',
	'[17] void [plr] -- Teleports player to the void',
	'[18] noclip -- Gives you noclip to walk through walls',
	'[19] clip -- Removes noclip',
	'[20] speed [num]/ws [num] -- Changes how fast you walk 16 is default',
	'[21] jumppower [num]/jp [num] -- Changes how high you jump 50 is default',
	'[22] hipheight [num]/hh [num] -- Changes how high you float 0 is default',
	'[23] default -- Changes your speed, jumppower and hipheight to default values',
	'[24] annoy [plr] -- Loop teleports you to the player',
	'[25] unannoy',
	'[26] headwalk [plr] -- Loop teleports you to the player head',
	'[27] unheadwalk',
	'[28] nolimbs -- Removes your arms and legs',
	'[29] god -- Gives you FE Godmode',
	'[30] drophats -- Drops your accessories',
	'[31] droptool -- Drops any tool you have equipped',
	'[32] loopdhats -- Loop drops your accessories',
	'[33] unloopdhats',
	'[34] loopdtool -- Loop drops any tools you have equipped',
	'[35] unloopdtool',
	'[36] invisible -- Gives you invisibility CREDIT TO TIMELESS',
	'[37] view [plr] -- Changes your camera to the player character',
	'[38] unview',
	'[39] goto [plr] -- Teleports you to player',
	'[40] fly -- Allows you to fly, credit to Infinite Yield',
	'[41] unfly',
	'[42] chat [msg] -- Makes you chat a message',
	'[43] spam [msg] -- Spams a message',
	'[44] unspam',
	'[45] spamwait [num] -- Changes delay of chatting a message for the spam command in seconds default is 1 second',
	'[46] pmspam [plr] -- Spams a player in private message',
	'[47] unpmspam',
	'[48] cfreeze [plr] -- Freezes a player on your client, they will only be frozen for you',
	'[49] uncfreeze [plr]',
	'[50] unlockws -- Unlocks the workspace',
	'[51] lockws -- Locks the workspace',
	'[52] btools -- Gives you btools that will only show to you useful for deleting certain blocks only for you',
	'[53] pstand -- Enables platform stand',
	'[54] unpstand -- Disables platform stand',
	'[55] blockhead -- Removes your head mesh',
	'[56] sit',
	'[57] bringobj [obj] -- Only shows on client, brings an object/part to you constantly, can be used to bring healing parts, weapons, money etc, type in exact name',
	'[58] wsvis [num] -- Changes visibility of workspace parts, num should be between 0 and 1, only shows client sided',
	'[59] hypertotal -- Loads in my FE GUI Hypertotal',
	'[60] cmds -- Prints all commands',
	'[61] rmeshhats/blockhats -- Removes the meshes of all your accessories aka block hats',
	'[62] rmeshtool/blocktool -- Removes the mesh of the tool you have equipped aka block tool',
	'[63] spinner -- Makes you spin',
	'[64] nospinner',
	'[65] reach [num] -- Gives you reach, mostly used for swords, say ;reachd for default and enter number after for custom',
	'[66] noreach -- Removes reach, must have tool equipped',
	'[67] rkill [plr] -- Kills you and the player, use kill to just kill the player without dying',
	'[68] tp me [plr] -- Alternative to goto',
	'[69] cbring [plr] -- Brings player infront of you, shows only on client, allows you to do damage to player',
	'[70] uncbring',
	'[71] swap [plr] -- You need a tool! Swaps players position with yours and your position with players',
	'[72] givetool [plr] -- Gives the tool you have equipped to the player',
	'[73] glitch [plr] -- Glitches you and the player, looks very cool',
	'[74] unglitch -- Unglitches you',
	'[75] grespawn -- Alternative to normal respawn and usually works best for when you want to reset with FE Godmode',
	'[76] explorer -- Loads up DEX',
	'[77] reset -- Resets your character.',
	'[78] anim [id] -- Applies an animation on you, must be created by ROBLOX',
	'[79] animgui -- Loads up Energize animations GUI',
	'[80] savepos -- Saves your current position',
	'[81] loadpos -- Teleports you to your saved position',
	'[82] bang [plr] -- 18+ will not work if you have FE Godmode on',
	'[83] unbang',
	'[84] delcmdbar -- Removes the command bar completely',
	'[85] bringmod [obj] -- Brings all the parts in a model, client only, comes from ;bringobj enter exact name of model',
	'[86] shutdown -- Uses harkinians script to shutdown server',
	'[87] respawn -- If grespawn doesnt work you can use respawn',
	'[88] delobj [obj] -- Deletes a certain brick in workspace, client sided',
	'[89] getplrs -- Prints all players in game',
	'[90] deldecal -- Deletes all decals client sided',
	'[91] opfinality -- Loads in my FE GUI Opfinality',
	'[92] remotes -- Prints all remotes in the game in the console when added',
	'[93] noremotes -- Stops printing remotes',
	'[94] tpdefault -- Stops all loop teleports to a player',
	'[95] stopsit -- Will not allow you to sit',
	'[96] gosit -- Allows you to sit',
	'[97] clicktp -- Enables click tp',
	'[98] noclicktp -- Disables click tp',
	'[99] toolson -- If any tools are dropped in the workspace you will automatically get them',
	'[100] toolsoff -- Stops ;toolson',
	'[101] version -- Gets the admin version',
	'[102] state [num] -- Changes your humanoid state, ;unstate to stop.',
	'[103] gravity [num] -- Changes workspace gravity default is 196.2',
	'[104] pgs -- Checks if the game has PGSPhysicsSolverEnabled enabled',
	'[105] clickdel -- Delete any block you press q on, client sided',
	'[106] noclickdel -- Stops clickdel',
	'[107] looprhats -- Loop removes mesh of your hats/loop block hats',
	'[108] unlooprhats -- Stops loop removing mesh',
	'[109] looprtool -- Loop removes mesh of your tool/loop block tools',
	'[110] unlooprtool -- Stops loop removing mesh',
	'[111] givealltools [plr] -- Gives all the tools you have in your backpack to the player',
	'[112] age [plr] -- Makes you chat the account age of the player',
	'[113] id [plr] -- Makes you chat the account ID of the player',
	'[114] .age [plr] -- Privately shows you the account age of the player',
	'[115] .id [plr] -- Privately shows you the account ID of the player',
	'[116] gameid -- Shows the game ID',
	'[117] removeinvis -- Removes all invisible walls/parts, client sided',
	'[118] removefog -- Removes fog, client sided',
	'[119] disable -- Disables your character by removing humanoid',
	'[120] enable -- Enables your character by adding humanoid',
	'[121] prefix [key] -- Changes the prefix used, default is ;',
	'[122] ;resetprefix -- Resets the prefix to ; incase you change it to an unusable prefix. Say exactly ";resetprefix" to do this command, no matter what your prefix is set to.',
	'[123] flyspeed [num] -- Change your fly speed, default is 1',
	'[124] carpet [plr] -- Makes you a carpet for a player, will not work if FE Godmode is on',
	'[125] uncarpet -- Stops carpet player',
	'[126] stare [plr] -- Turns your character to stare at another player',
	'[127] unstare -- Stops stare player',
	'[128] logchat -- Logs all chat (including /e and whispers) of all players',
	'[129] unlogchat -- Disables logchat',
	'[130] fixcam -- Fixes/resets your camera',
	'[131] unstate -- Stops changing state',
}
speedget = 1

lplayer = game:GetService("Players").LocalPlayer

lplayer.CharacterAdded:Connect(function(character)
	spin = false
	flying = false
	staring = false
	banpl = false
end)

function change()
	prefix = prefix
	speedfly = speedfly
end

function GetPlayer(String) -- Credit to Timeless/xFunnieuss
    local Found = {}
    local strl = String:lower()
    if strl == "all" then
        for i,v in pairs(game:GetService("Players"):GetPlayers()) do
            table.insert(Found,v)
        end
    elseif strl == "others" then
        for i,v in pairs(game:GetService("Players"):GetPlayers()) do
            if v.Name ~= lplayer.Name then
                table.insert(Found,v)
            end
        end   
	elseif strl == "me" then
        for i,v in pairs(game:GetService("Players"):GetPlayers()) do
            if v.Name == lplayer.Name then
                table.insert(Found,v)
            end
        end  
    else
        for i,v in pairs(game:GetService("Players"):GetPlayers()) do
            if v.Name:lower():sub(1, #String) == String:lower() then
                table.insert(Found,v)
            end
        end    
    end
    return Found    
end

local Mouse = lplayer:GetMouse()

spin = false
followed = false
traill = false
noclip = false
annoying = false
hwalk = false
droppinghats = false
droppingtools = false
flying = false
spamdelay = 1
spamming = false
spammingpm = false
cbringing = false
remotes = true
added = true
binds = false
stopsitting = false
clickgoto = false
gettingtools = false
removingmeshhats = false
removingmeshtool = false
clickdel = false
staring = false
chatlogs = false
banpl = false
changingstate = false
statechosen = 0

adminversion = "Reviz Admin by illremember, Version 2.0"

flying = false
speedfly = 1

function plrchat(plr, chat)
print(plr.Name..": "..tick().."\n"..chat)
end

for i,v in pairs(game:GetService("Players"):GetPlayers()) do
v.Chatted:connect(function(chat)
if chatlogs then
plrchat(v, chat)
end
end)
end
game:GetService("Players").PlayerAdded:connect(function(plr)
plr.Chatted:connect(function(chat)
if chatlogs then
plrchat(plr, chat)
end
end)
end)


local ScreenGui = Instance.new("ScreenGui")
local Frame = Instance.new("Frame")
local CMDBAR = Instance.new("TextBox")
ScreenGui.Parent = game:GetService("CoreGui")
Frame.Parent = ScreenGui
Frame.BackgroundColor3 = Color3.new(0.3, 0.1, 0.1)
Frame.BackgroundTransparency = 0.3
Frame.Position = UDim2.new(0.5, 0, 0, 10)
Frame.Size = UDim2.new(0, 200, 0, 40)
Frame.Active = true
Frame.Draggable = true
CMDBAR.Name = "CMDBAR"
CMDBAR.Parent = Frame
CMDBAR.BackgroundColor3 = Color3.new(0.105882, 0.164706, 0.207843)
CMDBAR.BackgroundTransparency = 0.20000000298023
CMDBAR.Size = UDim2.new(0, 180, 0, 20)
CMDBAR.Position = UDim2.new(0.05, 0, 0.25, 0)
CMDBAR.Font = Enum.Font.SourceSansLight
CMDBAR.FontSize = Enum.FontSize.Size14
CMDBAR.TextColor3 = Color3.new(0.945098, 0.945098, 0.945098)
CMDBAR.TextScaled = true
CMDBAR.TextSize = 14
CMDBAR.TextWrapped = true
CMDBAR.Text = "Press ; to type, Enter to execute"

local CMDS = Instance.new("ScreenGui")
local CMDSFRAME = Instance.new("Frame")
local ScrollingFrame = Instance.new("ScrollingFrame")
local TextLabel = Instance.new("TextLabel")
local closegui = Instance.new("TextButton")
CMDS.Name = "CMDS"
CMDS.Parent = game:GetService("CoreGui")
CMDSFRAME.Name = "CMDSFRAME"
CMDSFRAME.Parent = CMDS
CMDSFRAME.Active = true
CMDSFRAME.BackgroundColor3 = Color3.new(0.223529, 0.231373, 0.309804)
CMDSFRAME.BorderSizePixel = 0
CMDSFRAME.Draggable = true
CMDSFRAME.Position = UDim2.new(0, 315, 0, 100)
CMDSFRAME.Size = UDim2.new(0, 275, 0, 275)
CMDSFRAME.Visible = false
ScrollingFrame.Parent = CMDSFRAME
ScrollingFrame.BackgroundColor3 = Color3.new(0.160784, 0.160784, 0.203922)
ScrollingFrame.BorderSizePixel = 0
ScrollingFrame.Position = UDim2.new(0, 0, 0.0729999989, 0)
ScrollingFrame.Size = UDim2.new(1.04999995, 0, 0.92900002, 0)
ScrollingFrame.CanvasSize = UDim2.new(0, 0, 10, 0)
TextLabel.Parent = ScrollingFrame
TextLabel.BackgroundColor3 = Color3.new(1, 1, 1)
TextLabel.BackgroundTransparency = 1
TextLabel.Size = UDim2.new(0.930000007, 0, 1, 0)
TextLabel.Font = Enum.Font.SourceSans
TextLabel.FontSize = Enum.FontSize.Size18
TextLabel.Text = "[-] cmdbar is shown when ; is pressed.,\n[1] kill [plr] -- You need a tool! Will kill the player, use rkill to kill you and player,\n[2] bring [plr] -- You need a tool! Will bring player to you,\n[3] spin [plr] -- You need a tool! Makes you and the player spin crazy,\n[4] unspin -- Use after using spin cmd and dying, so you stop loop teleporting,\n[5] attach [plr] -- You need a tool! Attaches you to player,\n[6] unattach [plr] -- Attempts to unattach you from a player,\n[7] follow [plr] -- Makes you follow behind the player,\n[8] unfollow,\n[9] freefall [plr] -- You need a tool! Teleports you and the player up into the air,\n[10] trail [plr] -- The opposite of follow, you stay infront of player,\n[11] untrail,\n[12] orbit [plr] -- Makes you orbit the player,\n[13] unorbit,\n[14] fling [plr] -- Makes you fling the player,\n[15] unfling,\n[16] fecheck -- Checks if the game is FE or not,\n[17] void [plr] -- Teleports player to the void,\n[18] noclip -- Gives you noclip to walk through walls,\n[19] clip -- Removes noclip,\n[20] speed [num]/ws [num] -- Changes how fast you walk 16 is default,\n[21] jumppower [num]/jp [num] -- Changes how high you jump 50 is default,\n[22] hipheight [num]/hh [num] -- Changes how high you float 0 is default,\n[23] default -- Changes your speed, jumppower and hipheight to default values,\n[24] annoy [plr] -- Loop teleports you to the player,\n[25] unannoy,\n[26] headwalk [plr] -- Loop teleports you to the player head,\n[27] unheadwalk,\n[28] nolimbs -- Removes your arms and legs,\n[29] god -- Gives you FE Godmode,\n[30] drophats -- Drops your accessories,\n[31] droptool -- Drops any tool you have equipped,\n[32] loopdhats -- Loop drops your accessories,\n[33] unloopdhats,\n[34] loopdtool -- Loop drops any tools you have equipped,\n[35] unloopdtool,\n[36] invisible -- Gives you invisibility CREDIT TO TIMELESS,\n[37] view [plr] -- Changes your camera to the player character,\n[38] unview,\n[39] goto [plr] -- Teleports you to player,\n[40] fly -- Allows you to fly,\n[41] unfly,\n[42] chat [msg] -- Makes you chat a message,\n[43] spam [msg] -- Spams a message,\n[44] unspam,\n[45] spamwait [num] -- Changes delay of chatting a message for the spam command in seconds default is 1 second,\n[46] pmspam [plr] -- Spams a player in private message,\n[47] unpmspam,\n[48] cfreeze [plr] -- Freezes a player on your client, they will only be frozen for you,\n[49] uncfreeze [plr],\n[50] unlockws -- Unlocks the workspace,\n[51] lockws -- Locks the workspace,\n[52] btools -- Gives you btools that will only show to you useful for deleting certain blocks only for you,\n[53] pstand -- Enables platform stand,\n[54] unpstand -- Disables platform stand,\n[55] blockhead -- Removes your head mesh,\n[56] sit,\n[57] bringobj [obj] -- Only shows on client, brings an object/part to you constantly, can be used to bring healing parts, weapons, money etc, type in exact name,\n[58] wsvis [num] -- Changes visibility of workspace parts, num should be between 0 and 1, only shows client sided,\n[59] hypertotal -- Loads in my FE GUI Hypertotal,\n[60] cmds -- Prints all commands,\n[61] rmeshhats/blockhats -- Removes the meshes of all your accessories aka block hats,\n[62] rmeshtool/blocktool -- Removes the mesh of the tool you have equipped aka block tool,\n[63] spinner -- Makes you spin,\n[64] nospinner,\n[65] reach [num] -- Gives you reach, mostly used for swords, say ;reachd for default and enter number after for custom,\n[66] noreach -- Removes reach, must have tool equipped,\n[67] rkill [plr] -- Kills you and the player, use kill to just kill the player without dying,\n[68] tp me [plr] -- Alternative to goto,\n[69] cbring [plr] -- Brings player infront of you, shows only on client, allows you to do damage to player,\n[70] uncbring,\n[71] swap [plr] -- You need a tool! Swaps players position with yours and your position with players,\n[72] givetool [plr] -- Gives the tool you have equipped to the player,\n[73] glitch [plr] -- Glitches you and the player, looks very cool,\n[74] unglitch -- Unglitches you,\n[75] grespawn -- Alternative to normal respawn and usually works best for when you want to reset with FE Godmode,\n[76] explorer -- Loads up DEX,\n[77] reset -- Resets your character.,\n[78] anim [id] -- Applies an animation on you, must be created by ROBLOX,\n[79] animgui -- Loads up Energize animations GUI,\n[80] savepos -- Saves your current position,\n[81] loadpos -- Teleports you to your saved position,\n[82] bang [plr] -- 18+,\n[83] unbang,\n[84] delcmdbar -- Removes the command bar completely,\n[85] bringmod [obj] -- Brings all the parts in a model, client only, comes from ;bringobj enter exact name of model,\n[86] shutdown -- Uses harkinians script to shutdown server,\n[87] respawn -- If grespawn doesnt work you can use respawn,\n[88] delobj [obj] -- Deletes a certain brick in workspace, client sided,\n[89] getplrs -- Prints all players in game,\n[90] deldecal -- Deletes all decals client sided,\n[91] opfinality -- Loads in my FE GUI Opfinality,\n[92] remotes -- Prints all remotes in the game in the console when added,\n[93] noremotes -- Stops printing remotes,\n[94] tpdefault -- Stops all loop teleports to a player,\n[95] stopsit -- Will not allow you to sit,\n[96] gosit -- Allows you to sit,\n[97] clicktp -- Enables click tp,\n[98] noclicktp -- Disables click tp,\n[99] toolson -- If any tools are dropped in the workspace you will automatically get them,\n[100] toolsoff -- Stops ;toolson,\n[101] version -- Gets the admin version, \n This list of commands is NOT showing everything, go to my thread in the pastebin link to see ALL commands."
TextLabel.TextColor3 = Color3.new(1, 1, 1)
TextLabel.TextSize = 15
TextLabel.TextWrapped = true
TextLabel.TextXAlignment = Enum.TextXAlignment.Left
TextLabel.TextYAlignment = Enum.TextYAlignment.Top
closegui.Name = "closegui"
closegui.Parent = CMDSFRAME
closegui.BackgroundColor3 = Color3.new(0.890196, 0.223529, 0.0588235)
closegui.BorderSizePixel = 0
closegui.Position = UDim2.new(0.995000005, 0, 0, 0)
closegui.Size = UDim2.new(0.0545952693, 0, 0.0728644878, 0)
closegui.Font = Enum.Font.SourceSansBold
closegui.FontSize = Enum.FontSize.Size24
closegui.Text = "X"
closegui.TextColor3 = Color3.new(1, 1, 1)
closegui.TextSize = 20

closegui.MouseButton1Click:connect(function()
	CMDSFRAME.Visible = false
end)

game:GetService('RunService').Stepped:connect(function()
	if spin then
		lplayer.Character.HumanoidRootPart.CFrame = game:GetService("Players")[spinplr.Name].Character.HumanoidRootPart.CFrame
	end
	if followed then
		lplayer.Character.HumanoidRootPart.CFrame = game:GetService("Players")[flwplr.Name].Character.HumanoidRootPart.CFrame + game:GetService("Players")[flwplr.Name].Character.HumanoidRootPart.CFrame.lookVector * -5
	end
	if traill then
		lplayer.Character.HumanoidRootPart.CFrame = game:GetService("Players")[trlplr.Name].Character.HumanoidRootPart.CFrame + game:GetService("Players")[trlplr.Name].Character.HumanoidRootPart.CFrame.lookVector * 5
	end
	if annoying then
		lplayer.Character.HumanoidRootPart.CFrame = game:GetService("Players")[annplr.Name].Character.HumanoidRootPart.CFrame
	end
	if hwalk then
		lplayer.Character.HumanoidRootPart.CFrame = game:GetService("Players")[hdwplr.Name].Character.HumanoidRootPart.CFrame + Vector3.new(0, 4, 0)
	end
	if staring then
		lplayer.Character.HumanoidRootPart.CFrame = CFrame.new(lplayer.Character.Torso.Position, game:GetService("Players")[stareplr.Name].Character.Torso.Position)
	end
end)
game:GetService('RunService').Stepped:connect(function()
	if noclip then
		if lplayer.Character.Humanoid.RigType == Enum.HumanoidRigType.R6 then
			lplayer.Character.Head.CanCollide = false
			lplayer.Character.Torso.CanCollide = false
			lplayer.Character["Left Leg"].CanCollide = false
			lplayer.Character["Right Leg"].CanCollide = false
		else
			lplayer.Character.Humanoid:ChangeState(11)
		end
	end
	if changingstate then
		lplayer.Character.Humanoid:ChangeState(statechosen)
	end
end)
game:GetService('RunService').Stepped:connect(function()
	if droppinghats then
		for i,v in pairs(lplayer.Character:GetChildren()) do
			if (v:IsA("Accessory")) or (v:IsA("Hat")) then
				v.Parent = workspace
			end
		end
	end
	if droppingtools then
		for i,v in pairs(lplayer.Character:GetChildren()) do
			if (v:IsA("Tool")) then
				v.Parent = workspace
			end
		end
	end
	if removingmeshhats then
		for i,v in pairs(lplayer.Character:GetChildren()) do
			if (v:IsA("Accessory")) or (v:IsA("Hat")) then
				v.Handle.Mesh:Destroy()
			end
		end
	end
	if removingmeshtool then
		for i,v in pairs(lplayer.Character:GetChildren()) do
			if (v:IsA("Tool")) then
				v.Handle.Mesh:Destroy()
			end
		end
	end
end)
game:GetService('RunService').Stepped:connect(function()
	if banpl then
		lplayer.Character.HumanoidRootPart.CFrame = game:GetService("Players")[bplrr].Character.HumanoidRootPart.CFrame
	end
end)
game:GetService('RunService').Stepped:connect(function()
	if stopsitting then
		lplayer.Character.Humanoid.Sit = false
	end
end)

plr = lplayer 
hum = plr.Character.HumanoidRootPart
mouse = plr:GetMouse() 
mouse.KeyDown:connect(function(key) 
	if key == "e" then 
		if mouse.Target then 
			if clickgoto then
				hum.CFrame = CFrame.new(mouse.Hit.x, mouse.Hit.y + 5, mouse.Hit.z)
			elseif clickdel then
				mouse.Target:Destroy()
			end
		end 
	end
end)

game:GetService("Workspace").ChildAdded:connect(function(part)
	if gettingtools then
		if part:IsA("Tool") then
			part.Handle.CFrame = lplayer.Character.HumanoidRootPart.CFrame
		end
	end
end)

lplayer.Chatted:Connect(function(msg)
	if string.sub(msg, 1, 6) == (prefix.."kill ") then
		if string.sub(msg, 7) == "me" then
			lplayer.Character.HumanoidRootPart.CFrame = CFrame.new(100000,0,100000)
		else
			for i,v in pairs(GetPlayer(string.sub(msg, 7)))do
				local NOW = lplayer.Character.HumanoidRootPart.CFrame
				lplayer.Character.Humanoid.Name = 1
				local l = lplayer.Character["1"]:Clone()
				l.Parent = lplayer.Character
				l.Name = "Humanoid"
				wait(0.1)
				lplayer.Character["1"]:Destroy()
				game:GetService("Workspace").CurrentCamera.CameraSubject = lplayer.Character
				lplayer.Character.Animate.Disabled = true
				wait(0.1)
				lplayer.Character.Animate.Disabled = false
				lplayer.Character.Humanoid.DisplayDistanceType = "None"
				for i,v in pairs(game:GetService'Players'.LocalPlayer.Backpack:GetChildren())do
				lplayer.Character.Humanoid:EquipTool(v)
				end
				local function tp(player,player2)
				local char1,char2=player.Character,player2.Character
				if char1 and char2 then
				char1:MoveTo(char2.Head.Position)
				end
				end
				wait(0.1)
				lplayer.Character.HumanoidRootPart.CFrame = game:GetService("Players")[v.Name].Character.HumanoidRootPart.CFrame
				wait(0.2)
				lplayer.Character.HumanoidRootPart.CFrame = game:GetService("Players")[v.Name].Character.HumanoidRootPart.CFrame
				wait(0.5)
				lplayer.Character.HumanoidRootPart.CFrame = CFrame.new(Vector3.new(-100000,10,-100000))
				wait(0.7)
				tp(lplayer,game:GetService("Players")[v.Name])
				wait(0.7)
				lplayer.Character.HumanoidRootPart.CFrame = NOW
				game:GetService("StarterGui"):SetCore("SendNotification", {
				Title = "Tools needed!";
				Text = "You need a tool in your backpack for this command!";
				})
			end
		end
	end
	if string.sub(msg, 1, 7) == (prefix.."bring ") then
		for i,v in pairs(GetPlayer(string.sub(msg, 8)))do
			local NOW = lplayer.Character.HumanoidRootPart.CFrame
			lplayer.Character.Humanoid.Name = 1
			local l = lplayer.Character["1"]:Clone()
			l.Parent = lplayer.Character
			l.Name = "Humanoid"
			wait(0.1)
			lplayer.Character["1"]:Destroy()
			game:GetService("Workspace").CurrentCamera.CameraSubject = lplayer.Character
			lplayer.Character.Animate.Disabled = true
			wait(0.1)
			lplayer.Character.Animate.Disabled = false
			lplayer.Character.Humanoid.DisplayDistanceType = "None"
			for i,v in pairs(game:GetService'Players'.LocalPlayer.Backpack:GetChildren())do
			lplayer.Character.Humanoid:EquipTool(v)
			end
			local function tp(player,player2)
			local char1,char2=player.Character,player2.Character
			if char1 and char2 then
			char1.HumanoidRootPart.CFrame = char2.HumanoidRootPart.CFrame
			end
			end
			local function getout(player,player2)
			local char1,char2=player.Character,player2.Character
			if char1 and char2 then
			char1:MoveTo(char2.Head.Position)
			end
			end
			tp(game:GetService("Players")[v.Name], lplayer)
			wait(0.2)
			tp(game:GetService("Players")[v.Name], lplayer)
			wait(0.5)
			lplayer.Character.HumanoidRootPart.CFrame = NOW
			wait(0.5)
			getout(lplayer, game:GetService("Players")[v.Name])
			wait(0.3)
			lplayer.Character.HumanoidRootPart.CFrame = NOW
			game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Tools needed!";
			Text = "You need a tool in your backpack for this command!";
			})
		end
	end
	if string.sub(msg, 1, 6) == (prefix.."spin ") then
		for i,v in pairs(GetPlayer(string.sub(msg, 7))) do
			lplayer.Character.Humanoid.Name = 1
			local l = lplayer.Character["1"]:Clone()
			l.Parent = lplayer.Character
			l.Name = "Humanoid"
			wait(0.1)
			lplayer.Character["1"]:Destroy()
			game:GetService("Workspace").CurrentCamera.CameraSubject = lplayer.Character
			lplayer.Character.Animate.Disabled = true
			wait(0.1)
			lplayer.Character.Animate.Disabled = false
			lplayer.Character.Humanoid.DisplayDistanceType = "None"
			lplayer.Character.Animate.Disabled = false
			for i,v in pairs(game:GetService'Players'.LocalPlayer.Backpack:GetChildren())do
			lplayer.Character.Humanoid:EquipTool(v)
			end
			lplayer.Character.HumanoidRootPart.CFrame = game:GetService("Players")[v.Name].Character["Left Arm"].CFrame
			spinplr = v
			wait(0.5)
			spin = true
			game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Tools needed!";
			Text = "You need a tool in your backpack for this command!";
			})
		end
	end
	if string.sub(msg, 1, 7) == (prefix.."unspin") then
		spin = false
	end
	if string.sub(msg, 1, 8) == (prefix.."attach ") then
		for i,v in pairs(GetPlayer(string.sub(msg, 9))) do
			lplayer.Character.Humanoid.Name = 1
			local l = lplayer.Character["1"]:Clone()
			l.Parent = lplayer.Character
			l.Name = "Humanoid"
			wait(0.1)
			lplayer.Character["1"]:Destroy()
			game:GetService("Workspace").CurrentCamera.CameraSubject = lplayer.Character
			lplayer.Character.Animate.Disabled = true
			wait(0.1)
			lplayer.Character.Animate.Disabled = false
			lplayer.Character.Humanoid.DisplayDistanceType = "None"
			for i,v in pairs(game:GetService'Players'.LocalPlayer.Backpack:GetChildren())do
			lplayer.Character.Humanoid:EquipTool(v)
			end
			lplayer.Character.HumanoidRootPart.CFrame = game:GetService("Players")[v.Name].Character["Left Arm"].CFrame
			wait(0.3)
			lplayer.Character.HumanoidRootPart.CFrame = game:GetService("Players")[v.Name].Character["Left Arm"].CFrame
			attplr = v
			game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Tools needed!";
			Text = "You need a tool in your backpack for this command!";
			})
		end
	end
	if string.sub(msg, 1, 10) == (prefix.."unattach ") then
		for i,v in pairs(GetPlayer(string.sub(msg, 11))) do
			local function getout(player,player2)
			local char1,char2=player.Character,player2.Character
			if char1 and char2 then
			char1:MoveTo(char2.Head.Position)
			end
			end
			getout(lplayer, game:GetService("Players")[v.Name])
		end
	end
	if string.sub(msg, 1, 8) == (prefix.."follow ") then
		for i,v in pairs(GetPlayer(string.sub(msg, 9))) do
			followed = true
			flwplr = v
		end
	end
	if string.sub(msg, 1, 9) == (prefix.."unfollow") then
		followed = false
	end
	if string.sub(msg, 1, 10) == (prefix.."freefall ") then
		for i,v in pairs(GetPlayer(string.sub(msg, 11))) do
			local NOW = lplayer.Character.HumanoidRootPart.CFrame
			lplayer.Character.Humanoid.Name = 1
			local l = lplayer.Character["1"]:Clone()
			l.Parent = lplayer.Character
			l.Name = "Humanoid"
			wait(0.1)
			lplayer.Character["1"]:Destroy()
			game:GetService("Workspace").CurrentCamera.CameraSubject = lplayer.Character
			lplayer.Character.Animate.Disabled = true
			wait(0.1)
			lplayer.Character.Animate.Disabled = false
			lplayer.Character.Humanoid.DisplayDistanceType = "None"
			for i,v in pairs(game:GetService'Players'.LocalPlayer.Backpack:GetChildren())do
			lplayer.Character.Humanoid:EquipTool(v)
			end
			lplayer.Character.HumanoidRootPart.CFrame = game:GetService("Players")[v.Name].Character.HumanoidRootPart.CFrame
			wait(0.2)
			lplayer.Character.HumanoidRootPart.CFrame = game:GetService("Players")[v.Name].Character.HumanoidRootPart.CFrame
			wait(0.6)
			lplayer.Character.HumanoidRootPart.CFrame = NOW
			wait(0.6)
			lplayer.Character.HumanoidRootPart.CFrame = CFrame.new(0,50000,0)
			game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Tools needed!";
			Text = "You need a tool in your backpack for this command!";
			})
		end
	end
	if string.sub(msg, 1, 7) == (prefix.."trail ") then
		for i,v in pairs(GetPlayer(string.sub(msg, 8))) do
			traill = true
			trlplr = v
		end
	end
	if string.sub(msg, 1, 8) == (prefix.."untrail") then
		traill = false
	end
	if string.sub(msg, 1, 7) == (prefix.."orbit ") then
		if string.sub(msg, 8) == "all" or string.sub(msg, 8) == "others" or string.sub(msg, 8) == "me" then
			lplayer.Character.HumanoidRootPart.CFrame = lplayer.Character.HumanoidRootPart.CFrame
		else
			for i,v in pairs(GetPlayer(string.sub(msg, 8))) do
				local o = Instance.new("RocketPropulsion")
				o.Parent = lplayer.Character.HumanoidRootPart
				o.Name = "Orbit"
				o.Target = game:GetService("Players")[v.Name].Character.HumanoidRootPart
				o:Fire()
				noclip = true
			end
		end
	end
	if string.sub(msg, 1, 8) == (prefix.."unorbit") then
		lplayer.Character.HumanoidRootPart.Orbit:Destroy()
		noclip = false
	end
	if string.sub(msg, 1, 7) == (prefix.."fling ") then
		if string.sub(msg, 8) == "all" or string.sub(msg, 8) == "others" or string.sub(msg, 8) == "me" then
			lplayer.Character.HumanoidRootPart.CFrame = lplayer.Character.HumanoidRootPart.CFrame
		else
			for i,v in pairs(GetPlayer(string.sub(msg, 8))) do
				local y = Instance.new("RocketPropulsion")
				y.Parent = lplayer.Character.HumanoidRootPart
				y.CartoonFactor = 1
				y.MaxThrust = 800000
				y.MaxSpeed = 1000
				y.ThrustP = 200000
				y.Name = "Fling"
				game:GetService("Workspace").CurrentCamera.CameraSubject = game:GetService("Players")[v.Name].Character.Head
				y.Target = game:GetService("Players")[v.Name].Character.HumanoidRootPart
				y:Fire()
				noclip = true
			end
		end
	end
	if string.sub(msg, 1, 8) == (prefix.."unfling") then
		noclip = false
		lplayer.Character.HumanoidRootPart.Fling:Destroy()
		game:GetService("Workspace").CurrentCamera.CameraSubject = lplayer.Character.Head
		wait(0.4)
		lplayer.Character.HumanoidRootPart.Fling:Destroy()
	end
	if string.sub(msg, 1, 8) == (prefix.."fecheck") then
		if game:GetService("Workspace").FilteringEnabled == true then
			warn("FE is Enabled (Filtering Enabled)")
			game:GetService("StarterGui"):SetCore("SendNotification", {
				Title = "FE is Enabled";
				Text = "Filtering Enabled. Enjoy using Reviz Admin!";
			})
		else
			warn("FE is Disabled (Filtering Disabled) Consider using a different admin script.")
			game:GetService("StarterGui"):SetCore("SendNotification", {
				Title = "FE is Disabled";
				Text = "Filtering Disabled. Consider using a different admin script.";
			})
		end
	end
	if string.sub(msg, 1, 6) == (prefix.."void ") then
		for i,v in pairs(GetPlayer(string.sub(msg, 7))) do
			lplayer.Character.Humanoid.Name = 1
			local l = lplayer.Character["1"]:Clone()
			l.Parent = lplayer.Character
			l.Name = "Humanoid"
			wait(0.1)
			lplayer.Character["1"]:Destroy()
			game:GetService("Workspace").CurrentCamera.CameraSubject = lplayer.Character
			lplayer.Character.Animate.Disabled = true
			wait(0.1)
			lplayer.Character.Animate.Disabled = false
			lplayer.Character.Humanoid.DisplayDistanceType = "None"
			for i,v in pairs(game:GetService'Players'.LocalPlayer.Backpack:GetChildren())do
			lplayer.Character.Humanoid:EquipTool(v)
			end
			lplayer.Character.HumanoidRootPart.CFrame = game:GetService("Players")[v.Name].Character.HumanoidRootPart.CFrame
			wait(0.2)
			lplayer.Character.HumanoidRootPart.CFrame = game:GetService("Players")[v.Name].Character.HumanoidRootPart.CFrame
			wait(0.6)
			lplayer.Character.HumanoidRootPart.CFrame = CFrame.new(999999999999999,0,999999999999999)
			game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Tools needed!";
			Text = "You need a tool in your backpack for this command!";
			})
		end
	end
	if string.sub(msg, 1, 7) == (prefix.."noclip") then
		noclip = true
		game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Noclip enabled";
		Text = "Type ;clip to disable";
		})
	end
	if string.sub(msg, 1, 5) == (prefix.."clip") then
		noclip = false
		game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Noclip disabled";
		Text = "Type ;noclip to enable";
		})
	end
	if string.sub(msg, 1, 7) == (prefix.."speed ") then
		lplayer.Character.Humanoid.WalkSpeed = (string.sub(msg, 8))
	end
	if string.sub(msg, 1, 4) == (prefix.."ws ") then
		lplayer.Character.Humanoid.WalkSpeed = (string.sub(msg, 5))
	end
	if string.sub(msg, 1, 11) == (prefix.."hipheight ") then
		lplayer.Character.Humanoid.HipHeight = (string.sub(msg, 12))
	end
	if string.sub(msg, 1, 4) == (prefix.."hh ") then
		lplayer.Character.Humanoid.HipHeight = (string.sub(msg, 5))
	end
	if string.sub(msg, 1, 11) == (prefix.."jumppower ") then
		lplayer.Character.Humanoid.JumpPower = (string.sub(msg, 12))
	end
	if string.sub(msg, 1, 4) == (prefix.."jp ") then
		lplayer.Character.Humanoid.JumpPower = (string.sub(msg, 5))
	end
	if string.sub(msg, 1, 8) == (prefix.."default") then
		lplayer.Character.Humanoid.JumpPower = 50
		lplayer.Character.Humanoid.WalkSpeed = 16
		lplayer.Character.Humanoid.HipHeight = 0
	end
	if string.sub(msg, 1, 7) == (prefix.."annoy ") then
		for i,v in pairs(GetPlayer(string.sub(msg, 8))) do
			annoying = true
			annplr = v
		end
	end
	if string.sub(msg, 1, 8) == (prefix.."unannoy") then
		annoying = false
	end
	if string.sub(msg, 1, 10) == (prefix.."headwalk ") then
		for i,v in pairs(GetPlayer(string.sub(msg, 11))) do
			hwalk = true
			hdwplr = v
		end
	end
	if string.sub(msg, 1, 11) == (prefix.."unheadwalk") then
		hwalk = false
	end
	if string.sub(msg, 1, 8) == (prefix.."nolimbs") then
		lplayer.Character["Left Leg"]:Destroy()
		lplayer.Character["Left Arm"]:Destroy()
		lplayer.Character["Right Leg"]:Destroy()
		lplayer.Character["Right Arm"]:Destroy()
	end
	if string.sub(msg, 1, 4) == (prefix.."god") then
		lplayer.Character.Humanoid.Name = 1
		local l = lplayer.Character["1"]:Clone()
		l.Parent = lplayer.Character
		l.Name = "Humanoid"
		wait(0.1)
		lplayer.Character["1"]:Destroy()
		game:GetService("Workspace").CurrentCamera.CameraSubject = lplayer.Character
		lplayer.Character.Animate.Disabled = true
		wait(0.1)
		lplayer.Character.Animate.Disabled = false
		lplayer.Character.Humanoid.DisplayDistanceType = "None"
		game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "FE Godmode enabled";
		Text = "Use ;grespawn or ;respawn to remove";
		})
	end
	if string.sub(msg, 1, 9) == (prefix.."drophats") then
		for i,v in pairs(lplayer.Character:GetChildren()) do
			if (v:IsA("Accessory")) or (v:IsA("Hat")) then
				v.Parent = workspace
			end
		end
	end
	if string.sub(msg, 1, 9) == (prefix.."droptool") then
		for i,v in pairs(lplayer.Character:GetChildren()) do
			if (v:IsA("Tool")) then
				v.Parent = workspace
			end
		end
	end
	if string.sub(msg, 1, 10) == (prefix.."loopdhats") then
		droppinghats = true
		game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Loop Drop Enabled";
		Text = "Type ;unloopdhats to disable";
		})
	end
	if string.sub(msg, 1, 12) == (prefix.."unloopdhats") then
		droppinghats = false
		game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Loop Drop Disabled";
		Text = "Type ;loopdhats to enable.";
		})
	end
	if string.sub(msg, 1, 10) == (prefix.."loopdtool") then
		droppingtools = true
		game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Loop Drop Enabled";
		Text = "Type ;unloopdtool to disable";
		})
	end
	if string.sub(msg, 1, 12) == (prefix.."unloopdtool") then
		droppingtools = false
		game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Loop Drop Disabled";
		Text = "Type ;loopdtool to enable.";
		})
	end
	if string.sub(msg, 1, 10) == (prefix.."invisible") then -- Credit to Timeless
		Local = game:GetService('Players').LocalPlayer
		Char  = Local.Character
		touched,tpdback = false, false
		box = Instance.new('Part',workspace)
		box.Anchored = true
		box.CanCollide = true
		box.Size = Vector3.new(10,1,10)
		box.Position = Vector3.new(0,10000,0)
		box.Touched:connect(function(part)
		    if (part.Parent.Name == Local.Name) then
		        if touched == false then
		            touched = true
		            function apply()
		                if script.Disabled ~= true then
		                    no = Char.HumanoidRootPart:Clone()
		                    wait(.25)
		                    Char.HumanoidRootPart:Destroy()
		                    no.Parent = Char
		                    Char:MoveTo(loc)
		                    touched = false
		                end end
		            if Char then
		                apply()
		            end
		        end
		    end
		end)
		repeat wait() until Char
		loc = Char.HumanoidRootPart.Position
		Char:MoveTo(box.Position + Vector3.new(0,.5,0))
		game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Invisibility enabled!";
		Text = "Reset or use ;respawn to remove.";
		})
	end
	if string.sub(msg, 1, 6) == (prefix.."view ") then
		for i,v in pairs(GetPlayer(string.sub(msg, 7))) do
			if game:GetService("Players")[v.Name].Character.Humanoid then
				game:GetService("Workspace").CurrentCamera.CameraSubject = game:GetService("Players")[v.Name].Character.Humanoid
			else
				game:GetService("Workspace").CurrentCamera.CameraSubject = game:GetService("Players")[v.Name].Character.Head
			end
		end
	end
	if string.sub(msg, 1, 7) == (prefix.."unview") then
		if lplayer.Character.Humanoid then
			game:GetService("Workspace").CurrentCamera.CameraSubject = lplayer.Character.Humanoid
		else
			game:GetService("Workspace").CurrentCamera.CameraSubject = lplayer.Character.Head
		end
	end
	if string.sub(msg, 1, 6) == (prefix.."goto ") then
		for i,v in pairs(GetPlayer(string.sub(msg, 7))) do
			lplayer.Character.HumanoidRootPart.CFrame = game:GetService("Players")[v.Name].Character.HumanoidRootPart.CFrame
		end
	end
	if string.sub(msg, 1, 4) == (prefix.."fly") then
	repeat wait() until lplayer and lplayer.Character and lplayer.Character:FindFirstChild('HumanoidRootPart') and lplayer.Character:FindFirstChild('Humanoid')
	repeat wait() until Mouse
	
	local T = lplayer.Character.HumanoidRootPart
	local CONTROL = {F = 0, B = 0, L = 0, R = 0}
	local lCONTROL = {F = 0, B = 0, L = 0, R = 0}
	local SPEED = speedget
	
	local function fly()
		flying = true
		local BG = Instance.new('BodyGyro', T)
		local BV = Instance.new('BodyVelocity', T)
		BG.P = 9e4
		BG.maxTorque = Vector3.new(9e9, 9e9, 9e9)
		BG.cframe = T.CFrame
		BV.velocity = Vector3.new(0, 0.1, 0)
		BV.maxForce = Vector3.new(9e9, 9e9, 9e9)
		spawn(function()
		repeat wait()
		lplayer.Character.Humanoid.PlatformStand = true
		if CONTROL.L + CONTROL.R ~= 0 or CONTROL.F + CONTROL.B ~= 0 then
		SPEED = 50
		elseif not (CONTROL.L + CONTROL.R ~= 0 or CONTROL.F + CONTROL.B ~= 0) and SPEED ~= 0 then
		SPEED = 0
		end
		if (CONTROL.L + CONTROL.R) ~= 0 or (CONTROL.F + CONTROL.B) ~= 0 then
		BV.velocity = ((workspace.CurrentCamera.CoordinateFrame.lookVector * (CONTROL.F + CONTROL.B)) + ((workspace.CurrentCamera.CoordinateFrame * CFrame.new(CONTROL.L + CONTROL.R, (CONTROL.F + CONTROL.B) * 0.2, 0).p) - workspace.CurrentCamera.CoordinateFrame.p)) * SPEED
		lCONTROL = {F = CONTROL.F, B = CONTROL.B, L = CONTROL.L, R = CONTROL.R}
		elseif (CONTROL.L + CONTROL.R) == 0 and (CONTROL.F + CONTROL.B) == 0 and SPEED ~= 0 then
		BV.velocity = ((workspace.CurrentCamera.CoordinateFrame.lookVector * (lCONTROL.F + lCONTROL.B)) + ((workspace.CurrentCamera.CoordinateFrame * CFrame.new(lCONTROL.L + lCONTROL.R, (lCONTROL.F + lCONTROL.B) * 0.2, 0).p) - workspace.CurrentCamera.CoordinateFrame.p)) * SPEED
		else
		BV.velocity = Vector3.new(0, 0.1, 0)
		end
		BG.cframe = workspace.CurrentCamera.CoordinateFrame
				until not flying
				CONTROL = {F = 0, B = 0, L = 0, R = 0}
				lCONTROL = {F = 0, B = 0, L = 0, R = 0}
				SPEED = 0
				BG:destroy()
				BV:destroy()
				lplayer.Character.Humanoid.PlatformStand = false
			end)
		end
	Mouse.KeyDown:connect(function(KEY)
		if KEY:lower() == 'w' then
			CONTROL.F = speedfly
		elseif KEY:lower() == 's' then
			CONTROL.B = -speedfly
		elseif KEY:lower() == 'a' then
			CONTROL.L = -speedfly 
		elseif KEY:lower() == 'd' then 
			CONTROL.R = speedfly
		end
	end)
	Mouse.KeyUp:connect(function(KEY)
		if KEY:lower() == 'w' then
			CONTROL.F = 0
		elseif KEY:lower() == 's' then
			CONTROL.B = 0
		elseif KEY:lower() == 'a' then
			CONTROL.L = 0
		elseif KEY:lower() == 'd' then
			CONTROL.R = 0
		end
	end)
	fly()
	end
	if string.sub(msg, 1, 6) == (prefix.."unfly") then
		flying = false
		lplayer.Character.Humanoid.PlatformStand = false
	end
	if string.sub(msg, 1, 6) == (prefix.."chat ") then
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer((string.sub(msg, 7)), "All")
	end
	if string.sub(msg, 1, 6) == (prefix.."spam ") then
		spamtext = (string.sub(msg, 7))
		spamming = true
	end
	if string.sub(msg, 1, 7) == (prefix.."unspam") then
		spamming = false
	end
	if string.sub(msg, 1, 10) == (prefix.."spamwait ") then
		spamdelay = (string.sub(msg, 11))
	end
	if string.sub(msg, 1, 8) == (prefix.."pmspam ") then
		for i,v in pairs(GetPlayer(string.sub(msg, 9))) do
			pmspammed = v.Name
			spammingpm = true
		end
	end
	if string.sub(msg, 1, 9) == (prefix.."unpmspam") then
		spammingpm = false
	end
	if string.sub(msg, 1, 9) == (prefix.."cfreeze ") then
		for i,v in pairs(GetPlayer(string.sub(msg, 10))) do
			v.Character["Left Leg"].Anchored = true
			v.Character["Left Arm"].Anchored = true
			v.Character["Right Leg"].Anchored = true
			v.Character["Right Arm"].Anchored = true
			v.Character.Torso.Anchored = true
			v.Character.Head.Anchored = true
		end
	end
	if string.sub(msg, 1, 11) == (prefix.."uncfreeze ") then
		for i,v in pairs(GetPlayer(string.sub(msg, 12))) do
			v.Character["Left Leg"].Anchored = false
			v.Character["Left Arm"].Anchored = false
			v.Character["Right Leg"].Anchored = false
			v.Character["Right Arm"].Anchored = false
			v.Character.Torso.Anchored = false
			v.Character.Head.Anchored = false
		end
	end
	if string.sub(msg, 1, 9) == (prefix.."unlockws") then
		local a = game:GetService("Workspace"):getChildren()
		for i = 1, #a do
			if a[i].className == "Part" then
				a[i].Locked = false
			elseif a[i].className == "Model" then
				local r = a[i]:getChildren()
				for i = 1, #r do
					if r[i].className == "Part" then
					r[i].Locked = false
					end
				end
			end
		end
		game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Success!";
		Text = "Workspace unlocked. Use ;lockws to lock.";
		})
	end
	if string.sub(msg, 1, 7) == (prefix.."lockws") then
		local a = game:GetService("Workspace"):getChildren()
		for i = 1, #a do
			if a[i].className == "Part" then
				a[i].Locked = true
			elseif a[i].className == "Model" then
				local r = a[i]:getChildren()
				for i = 1, #r do
					if r[i].className == "Part" then
					r[i].Locked = true
					end
				end
			end
		end
	end
	if string.sub(msg, 1, 7) == (prefix.."btools") then
		local Clone_T = Instance.new("HopperBin",lplayer.Backpack)
		Clone_T.BinType = "Clone"
		local Destruct = Instance.new("HopperBin",lplayer.Backpack)
		Destruct.BinType = "Hammer"
		local Hold_T = Instance.new("HopperBin",lplayer.Backpack)
		Hold_T.BinType = "Grab"
	end
	if string.sub(msg, 1, 7) == (prefix.."pstand") then
		lplayer.Character.Humanoid.PlatformStand = true
	end
	if string.sub(msg, 1, 9) == (prefix.."unpstand") then
		lplayer.Character.Humanoid.PlatformStand = false
	end
	if string.sub(msg, 1, 10) == (prefix.."blockhead") then
		lplayer.Character.Head.Mesh:Destroy()
	end
	if string.sub(msg, 1, 4) == (prefix.."sit") then
		lplayer.Character.Humanoid.Sit = true
	end
	if string.sub(msg, 1, 10) == (prefix.."bringobj ") then
		local function bringobjw()
		for i,obj in ipairs(game:GetService("Workspace"):GetDescendants()) do
		if obj.Name == (string.sub(msg, 11)) then
		obj.CFrame = lplayer.Character.HumanoidRootPart.CFrame
		obj.CanCollide = false
		obj.Transparency = 0.7
		wait()
		obj.CFrame = lplayer.Character["Left Leg"].CFrame
		wait()
		obj.CFrame = lplayer.Character["Right Leg"].CFrame
		wait()
		obj.CFrame = lplayer.Character["Head"].CFrame
		end
		end
		end
		while wait() do
			bringobjw()
		end
		game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "BringObj";
		Text = "BringObj enabled.";
		})
	end
	if string.sub(msg, 1, 7) == (prefix.."wsvis ") then
		vis = (string.sub(msg, 8))
		local a = game:GetService("Workspace"):GetDescendants()
		for i = 1, #a do
			if a[i].className == "Part" then
				a[i].Transparency = vis
			elseif a[i].className == "Model" then
				local r = a[i]:getChildren()
				for i = 1, #r do
					if r[i].className == "Part" then
					r[i].Transparency = vis
					end
				end
			end
		end
	end
	if string.sub(msg, 1, 11) == (prefix.."hypertotal") then
		loadstring(game:GetObjects("rbxassetid://1255063809")[1].Source)()
		game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Success!";
		Text = "HyperTotal GUI Loaded!";
		})
	end
	if string.sub(msg, 1, 5) == (prefix.."cmds") then
		CMDSFRAME.Visible = true
	end
	if string.sub(msg, 1, 10) == (prefix.."rmeshhats") then
		for i,v in pairs(lplayer.Character:GetChildren()) do
			if (v:IsA("Accessory")) or (v:IsA("Hat")) then
				v.Handle.Mesh:Destroy()
			end
		end
	end
	if string.sub(msg, 1, 10) == (prefix.."blockhats") then
		for i,v in pairs(lplayer.Character:GetChildren()) do
			if (v:IsA("Accessory")) or (v:IsA("Hat")) then
				v.Handle.Mesh:Destroy()
			end
		end
	end
	if string.sub(msg, 1, 10) == (prefix.."rmeshtool") then
		for i,v in pairs(lplayer.Character:GetChildren()) do
			if (v:IsA("Tool")) then
				v.Handle.Mesh:Destroy()
			end
		end
	end
	if string.sub(msg, 1, 10) == (prefix.."blocktool") then
		for i,v in pairs(lplayer.Character:GetChildren()) do
			if (v:IsA("Tool")) then
				v.Handle.Mesh:Destroy()
			end
		end
	end
	if string.sub(msg, 1, 8) == (prefix.."spinner") then
		local p = Instance.new("RocketPropulsion")
		p.Parent = lplayer.Character.HumanoidRootPart
		p.Name = "Spinner"
		p.Target = lplayer.Character["Left Arm"]
		p:Fire()
		game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Spinner enabled";
		Text = "Type ;nospinner to disable.";
		})
	end
	if string.sub(msg, 1, 10) == (prefix.."nospinner") then
		lplayer.Character.HumanoidRootPart.Spinner:Destroy()
	end
	if string.sub(msg, 1, 7) == (prefix.."reachd") then
		for i,v in pairs(game:GetService'Players'.LocalPlayer.Character:GetChildren())do
			if v:isA("Tool") then
				local a = Instance.new("SelectionBox",v.Handle)
				a.Adornee = v.Handle
				v.Handle.Size = Vector3.new(0.5,0.5,60)
				v.GripPos = Vector3.new(0,0,0)
				lplayer.Character.Humanoid:UnequipTools()
			end
		end
		game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Reach applied!";
		Text = "Applied to equipped sword. Use ;noreach to disable.";
		})
	end
	if string.sub(msg, 1, 7) == (prefix.."reach ") then
		for i,v in pairs(game:GetService'Players'.LocalPlayer.Character:GetChildren())do
			if v:isA("Tool") then
				handleSize = v.Handle.Size
				wait()
				local a = Instance.new("SelectionBox",v.Handle)
				a.Name = "a"
				a.Adornee = v.Handle
				v.Handle.Size = Vector3.new(0.5,0.5,(string.sub(msg, 8)))
				v.GripPos = Vector3.new(0,0,0)
				lplayer.Character.Humanoid:UnequipTools()
			end
		end
		game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Reach applied!";
		Text = "Applied to equipped sword. Use ;noreach to disable.";
		})
	end
	if string.sub(msg, 1, 8) == (prefix.."noreach") then
		for i,v in pairs(game:GetService'Players'.LocalPlayer.Character:GetChildren())do
			if v:isA("Tool") then
				v.Handle.a:Destroy()
				v.Handle.Size = handleSize
			end
		end
		game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Reach removed!";
		Text = "Removed reach from equipped sword.";
		})
	end
	if string.sub(msg, 1, 7) == (prefix.."rkill ") then
		for i,v in pairs(GetPlayer(string.sub(msg, 8)))do
			lplayer.Character.Humanoid.Name = 1
			local l = lplayer.Character["1"]:Clone()
			l.Parent = lplayer.Character
			l.Name = "Humanoid"
			wait(0.1)
			lplayer.Character["1"]:Destroy()
			game:GetService("Workspace").CurrentCamera.CameraSubject = lplayer.Character
			lplayer.Character.Animate.Disabled = true
			wait(0.1)
			lplayer.Character.Animate.Disabled = false
			lplayer.Character.Humanoid.DisplayDistanceType = "None"
			for i,v in pairs(game:GetService'Players'.LocalPlayer.Backpack:GetChildren())do
			lplayer.Character.Humanoid:EquipTool(v)
			end
			wait(0.1)
			lplayer.Character.HumanoidRootPart.CFrame = game:GetService("Players")[v.Name].Character.HumanoidRootPart.CFrame
			wait(0.2)
			lplayer.Character.HumanoidRootPart.CFrame = game:GetService("Players")[v.Name].Character.HumanoidRootPart.CFrame
			wait(0.5)
			lplayer.Character.HumanoidRootPart.CFrame = CFrame.new(Vector3.new(-100000,10,-100000))
			game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Tools needed!";
			Text = "You need a tool in your backpack for this command!";
			})
		end
	end
	if string.sub(msg, 1, 7) == (prefix.."tp me ") then
		for i,v in pairs(GetPlayer(string.sub(msg, 8))) do
			lplayer.Character.HumanoidRootPart.CFrame = game:GetService("Players")[v.Name].Character.HumanoidRootPart.CFrame
		end
	end
	if string.sub(msg, 1, 8) == (prefix.."cbring ") then
		if (string.sub(msg, 9)) == "all" or (string.sub(msg, 9)) == "All" or (string.sub(msg, 9)) == "ALL" then
			cbringall = true
		else
			for i,v in pairs(GetPlayer(string.sub(msg, 9))) do
				brplr = v.Name
			end
		end
		cbring = true
	end
	if string.sub(msg, 1, 9) == (prefix.."uncbring") then
		cbring = false
		cbringall = false
	end
	if string.sub(msg, 1, 6) == (prefix.."swap ") then
		for i,v in pairs(GetPlayer(string.sub(msg, 7))) do
			local NOWPLR = game:GetService("Players")[v.Name].Character.HumanoidRootPart.CFrame
			local NOW = lplayer.Character.HumanoidRootPart.CFrame
			lplayer.Character.Humanoid.Name = 1
			local l = lplayer.Character["1"]:Clone()
			l.Parent = lplayer.Character
			l.Name = "Humanoid"
			wait(0.1)
			lplayer.Character["1"]:Destroy()
			game:GetService("Workspace").CurrentCamera.CameraSubject = lplayer.Character
			lplayer.Character.Animate.Disabled = true
			wait(0.1)
			lplayer.Character.Animate.Disabled = false
			lplayer.Character.Humanoid.DisplayDistanceType = "None"
			for i,v in pairs(game:GetService'Players'.LocalPlayer.Backpack:GetChildren())do
			lplayer.Character.Humanoid:EquipTool(v)
			end
			local function tp(player,player2)
			local char1,char2=player.Character,player2.Character
			if char1 and char2 then
			char1:MoveTo(char2.Head.Position)
			end
			end
			wait(0.1)
			lplayer.Character.HumanoidRootPart.CFrame = game:GetService("Players")[v.Name].Character.HumanoidRootPart.CFrame
			wait(0.2)
			lplayer.Character.HumanoidRootPart.CFrame = game:GetService("Players")[v.Name].Character.HumanoidRootPart.CFrame
			wait(0.5)
			lplayer.Character.HumanoidRootPart.CFrame = NOW
			wait(0.6)
			tp(lplayer, game:GetService("Players")[v.Name])
			wait(0.4)
			lplayer.Character.HumanoidRootPart.CFrame = NOWPLR
			game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Tools needed!";
			Text = "You need a tool in your backpack for this command!";
			})
		end
	end
	if string.sub(msg, 1, 8) == (prefix.."glitch ") then
		for i,v in pairs(GetPlayer(string.sub(msg, 9))) do
			lplayer.Character.Humanoid.Name = 1
			local l = lplayer.Character["1"]:Clone()
			l.Parent = lplayer.Character
			l.Name = "Humanoid"
			wait(0.1)
			lplayer.Character["1"]:Destroy()
			game:GetService("Workspace").CurrentCamera.CameraSubject = lplayer.Character
			lplayer.Character.Animate.Disabled = true
			wait(0.1)
			lplayer.Character.Animate.Disabled = false
			lplayer.Character.Humanoid.DisplayDistanceType = "None"
			for i,v in pairs(game:GetService'Players'.LocalPlayer.Backpack:GetChildren())do
			lplayer.Character.Humanoid:EquipTool(v)
			end
			lplayer.Character.HumanoidRootPart.CFrame = game:GetService("Players")[v.Name].Character["Left Arm"].CFrame
			wait(0.3)
			lplayer.Character.HumanoidRootPart.CFrame = game:GetService("Players")[v.Name].Character["Left Arm"].CFrame
			wait(0.4)
			b = Instance.new("BodyForce")
			b.Parent = lplayer.Character.HumanoidRootPart
			b.Name = "Glitch"
			b.Force = Vector3.new(100000000,5000,0)
			game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Tools needed!";
			Text = "You need a tool in your backpack for this command!";
			})
		end
	end
	if string.sub(msg, 1, 9) == (prefix.."unglitch") then
		lplayer.Character.HumanoidRootPart.Glitch:Destroy()
		lplayer.Character.HumanoidRootPart.CFrame = CFrame.new(10000,0,10000)
		b = Instance.new("BodyForce")
		b.Parent = lplayer.Character.HumanoidRootPart
		b.Name = "unGlitch"
		b.Force = Vector3.new(0,-5000000,0)
		wait(2)
		lplayer.Character.HumanoidRootPart.unGlitch:Destroy()
	end
	if string.sub(msg, 1, 9) == (prefix.."grespawn") then
		lplayer.Character.Humanoid.Health = 0
		wait(1)
		lplayer.Character.Head.CFrame = CFrame.new(1000000,0,1000000)
		lplayer.Character.Torso.CFrame = CFrame.new(1000000,0,1000000)
	end
	if string.sub(msg, 1, 9) == (prefix.."explorer") then
		loadstring(game:GetObjects("rbxassetid://492005721")[1].Source)()
		game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Success!";
		Text = "DEX Explorer has loaded.";
		})
	end
	if string.sub(msg, 1, 6) == (prefix.."anim ") then
		local Anim = Instance.new("Animation")
		Anim.AnimationId = "rbxassetid://"..(string.sub(msg, 7))
		local track = lplayer.Character.Humanoid:LoadAnimation(Anim)
		track:Play(.1, 1, 1)
	end
	if string.sub(msg, 1, 8) == (prefix.."animgui") then
		loadstring(game:GetObjects("rbxassetid://1202558084")[1].Source)()
		game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Success!";
		Text = "Energize Animations GUI has loaded.";
		})
	end
	if string.sub(msg, 1, 8) == (prefix.."savepos") then
		saved = lplayer.Character.HumanoidRootPart.CFrame
		game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Position Saved";
		Text = "Use ;loadpos to return to saved position.";
		})
	end
	if string.sub(msg, 1, 8) == (prefix.."loadpos") then
		lplayer.Character.HumanoidRootPart.CFrame = saved
	end
	if string.sub(msg, 1, 6) == (prefix.."bang ") then
		for i,v in pairs(GetPlayer(string.sub(msg, 7))) do
			local Anim2 = Instance.new("Animation")
			Anim2.AnimationId = "rbxassetid://148840371"
			local track2 = lplayer.Character.Humanoid:LoadAnimation(Anim2)
			track2:Play(.1, 1, 1)
			bplrr = v.Name
			banpl = true
		end
	end
	if string.sub(msg, 1, 7) == (prefix.."unbang") then
		banpl = false
	end
	if string.sub(msg, 1, 10) == (prefix.."bringmod ") then
		local function bringmodw()
		for i,obj in ipairs(game:GetService("Workspace"):GetDescendants()) do
		if obj.Name == (string.sub(msg, 11)) then
		for i,ch in pairs(obj:GetDescendants()) do
		if (ch:IsA("BasePart")) then
		ch.CFrame = lplayer.Character.HumanoidRootPart.CFrame
		ch.CanCollide = false
		ch.Transparency = 0.7
		wait()
		ch.CFrame = lplayer.Character["Left Leg"].CFrame
		wait()
		ch.CFrame = lplayer.Character["Right Leg"].CFrame
		wait()
		ch.CFrame = lplayer.Character["Head"].CFrame
		end
		end
		end
		end
		end
		while wait() do
			bringmodw()
		end
		game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "BringMod";
		Text = "BringMod enabled.";
		})
	end
	if string.sub(msg, 1, 8) == (prefix.."respawn") then
		local mod = Instance.new('Model', workspace) mod.Name = 're '..lplayer.Name
		local hum = Instance.new('Humanoid', mod)
		local ins = Instance.new('Part', mod) ins.Name = 'Torso' ins.CanCollide = false ins.Transparency = 1
		lplayer.Character = mod
	end
	if string.sub(msg, 1, 9) == (prefix.."shutdown") then
		game:GetService'RunService'.Stepped:Connect(function()
		pcall(function()
		    for i,v in pairs(game:GetService'Players':GetPlayers()) do
		        if v.Character ~= nil and v.Character:FindFirstChild'Head' then
		            for _,x in pairs(v.Character.Head:GetChildren()) do
		                if x:IsA'Sound' then x.Playing = true x.CharacterSoundEvent:FireServer(true, true) end
		            end
		        end
		    end
		end)
		end)
		game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Attempting Shutdown";
		Text = "Shutdown Attempt has begun.";
		})
	end
	if string.sub(msg, 1, 8) == (prefix.."delobj ") then
		objtodel = (string.sub(msg, 9))
		for i,v in pairs(game:GetService("Workspace"):GetDescendants()) do
			if v.Name == objtodel then
				v:Destroy()
			end
		end
	end
	if string.sub(msg, 1, 8) == (prefix.."getplrs") then
		for i,v in pairs(game:GetService("Players"):GetPlayers())do
			print(v)
		end
		game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Printed";
		Text = "Players have been printed to console. (F9)";
		})
	end
	if string.sub(msg, 1, 9) == (prefix.."deldecal") then
		for i,v in pairs(game:GetService("Workspace"):GetDescendants())do
			if (v:IsA("Decal")) then
				v:Destroy()
			end
		end
	end
	if string.sub(msg, 1, 11) == (prefix.."opfinality") then
		loadstring(game:GetObjects("rbxassetid://1294358929")[1].Source)()
		game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Success!";
		Text = "OpFinality GUI has loaded.";
		})
	end
	if string.sub(msg, 1, 8) == (prefix.."remotes") then
		remotes = true
		added = true
		game.DescendantAdded:connect(function(rmt)
		if added == true then
		if remotes == true then 
		if rmt:IsA("RemoteEvent") then
		print("A RemoteEvent was added!")
		print(" game." .. rmt:GetFullName() .. " | RemoteEvent")
		print(" game." .. rmt:GetFullName() .. " | RemoteEvent", 247, 0, 0, true)
		end end end
		end)
		game.DescendantAdded:connect(function(rmtfnctn)
		if added == true then
		if remotes == true then 
		if rmtfnctn:IsA("RemoteFunction") then
		warn("A RemoteFunction was added!")
		warn(" game." .. rmtfnctn:GetFullName() .. " | RemoteFunction")
		print(" game." .. rmtfnctn:GetFullName() .. " | RemoteFunction", 5, 102, 198, true)
		end end end
		end)
		
		game.DescendantAdded:connect(function(bndfnctn)
		if added == true then
		if binds == true then 
		if bndfnctn:IsA("BindableFunction") then
		print("A BindableFunction was added!")
		print(" game." .. bndfnctn:GetFullName() .. " | BindableFunction")
		print(" game." .. bndfnctn:GetFullName() .. " | BindableFunction", 239, 247, 4, true)
		end end end
		end)
		
		game.DescendantAdded:connect(function(bnd)
		if added == true then
		if binds == true then 
		if bnd:IsA("BindableEvent") then
		warn("A BindableEvent was added!")
		warn(" game." .. bnd:GetFullName() .. " | BindableEvent")
		print(" game." .. bnd:GetFullName() .. " | BindableEvent", 13, 193, 22, true)
		end end end
		end)
		
		
		if binds == true then
		for i,v in pairs(game:GetDescendants()) do
		if v:IsA("BindableFunction") then
		print(" game." .. v:GetFullName() .. " | BindableFunction")
		print(" game." .. v:GetFullName() .. " | BindableFunction", 239, 247, 4, true)
		end end
		for i,v in pairs(game:GetDescendants()) do
		if v:IsA("BindableEvent") then
		warn(" game." .. v:GetFullName() .. " | BindableEvent")
		print(" game." .. v:GetFullName() .. " | BindableEvent", 13, 193, 22, true)
		end end
		else
		print("Off")
		end
		if remotes == true then
		for i,v in pairs(game:GetDescendants()) do
		if v:IsA("RemoteFunction") then
		warn(" game." .. v:GetFullName() .. " | RemoteFunction")
		print(" game." .. v:GetFullName() .. " | RemoteFunction", 5, 102, 198, true)
		end end
		wait()
		for i,v in pairs(game:GetDescendants()) do
		if v:IsA("RemoteEvent") then
		print(" game." .. v:GetFullName() .. " | RemoteEvent")
		print(" game." .. v:GetFullName() .. " | RemoteEvent", 247, 0, 0, true)
		end end
		else
		print("Off")
		end
		game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Printing Remotes";
		Text = "Type ;noremotes to disable.";
		})
	end
	if string.sub(msg, 1, 10) == (prefix.."noremotes") then
		remotes = false
		added = false
		game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Printing Remotes Disabled";
		Text = "Type ;remotes to enable.";
		})
	end
	if string.sub(msg, 1, 10) == (prefix.."tpdefault") then
		spin = false
		followed = false
		traill = false
		noclip = false
		annoying = false
		hwalk = false
		cbringing = false
	end
	if string.sub(msg, 1, 8) == (prefix.."stopsit") then
		stopsitting = true
	end
	if string.sub(msg, 1, 6) == (prefix.."gosit") then
		stopsitting = false
	end
	if string.sub(msg, 1, 8) == (prefix.."version") then
		print(adminversion)
		game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Version";
		Text = adminversion;
		})
	end
	if string.sub(msg, 1, 8) == (prefix.."clicktp") then
		clickgoto = true
		game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Click TP";
		Text = "Press E to teleport to mouse position, ;noclicktp to stop";
		})
	end
	if string.sub(msg, 1, 9) == (prefix.."clickdel") then
		clickdel = true
		game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Click Delete";
		Text = "Press E to delete part at mouse, ;noclickdel to stop";
		})
	end
	if string.sub(msg, 1, 11) == (prefix.."noclickdel") then
		clickdel = false
		game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Click Delete";
		Text = "Click delete has been disabled.";
		})
	end
	if string.sub(msg, 1, 10) == (prefix.."noclicktp") then
		clickgoto = false
		game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Click TP";
		Text = "Click TP has been disabled.";
		})
	end
	if string.sub(msg, 1, 8) == (prefix.."toolson") then
		gettingtools = true
		game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Tools Enabled";
		Text = "Automatically colleting tools dropped.";
		})
	end
	if string.sub(msg, 1, 9) == (prefix.."toolsoff") then
		gettingtools = false
		game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Tools Disabled";
		Text = "Click TP has been disabled.";
		})
	end
	if string.sub(msg, 1, 10) == (prefix.."delcmdbar") then
		ScreenGui:Destroy()
	end
	if string.sub(msg, 1, 6) == (prefix.."reset") then
		lplayer.Character.Head:Destroy()
	end
	if string.sub(msg, 1, 7) == (prefix.."state ") then
		statechosen = string.sub(msg, 8)
		changingstate = true
	end
	if string.sub(msg, 1, 9) == (prefix.."gravity ") then
		game:GetService("Workspace").Gravity = string.sub(msg, 10)
	end
	if string.sub(msg, 1, 10) == (prefix.."looprhats") then
		removingmeshhats = true
	end
	if string.sub(msg, 1, 12) == (prefix.."unlooprhats") then
		removingmeshhats = false
	end
	if string.sub(msg, 1, 10) == (prefix.."looprtool") then
		removingmeshtool = true
	end
	if string.sub(msg, 1, 12) == (prefix.."unlooprtool") then
		removingmeshtool = false
	end
	if string.sub(msg, 1, 10) == (prefix.."givetool ") then
		for i,v in pairs(game:GetService("Players").LocalPlayer.Character:GetDescendants()) do
			if v:IsA("Tool") then
				for i,player in pairs(GetPlayer(string.sub(msg, 11))) do
					v.Parent = player.Character
				end
			end
		end
	end
	if string.sub(msg, 1, 14) == (prefix.."givealltools ") then
		for i,v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetDescendants()) do
			if v:IsA("Tool") then
				v.Parent = lplayer.Character
				wait()
				for i,player in pairs(GetPlayer(string.sub(msg, 15))) do
					v.Parent = player.Character
				end
			end
		end
	end
	if string.sub(msg, 1, 5) == (prefix.."age ") then
		for i,player in pairs(GetPlayer(string.sub(msg, 6))) do
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(player.Name.." Account Age: "..player.AccountAge.." days!", "All")
		end
	end
	if string.sub(msg, 1, 4) == (prefix.."id ") then
		for i,player in pairs(GetPlayer(string.sub(msg, 5))) do
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(player.Name.." Account ID: "..player.UserId, "All")
		end
	end
	if string.sub(msg, 1, 6) == (prefix..".age ") then
		for i,player in pairs(GetPlayer(string.sub(msg, 7))) do
			game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = player.AccountAge.." Days";
			Text = "Account age of "..player.Name;
			})
		end
	end
	if string.sub(msg, 1, 5) == (prefix..".id ") then
		for i,player in pairs(GetPlayer(string.sub(msg, 6))) do
			game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = player.UserId.." ID";
			Text = "Account ID of "..player.Name;
			})
		end
	end
	if string.sub(msg, 1, 7) == (prefix.."gameid") then
		game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Game ID";
		Text = "Game ID: ".. game.GameId;
		})
	end
	if string.sub(msg, 1, 4) == (prefix.."pgs") then
		local pgscheck = game:GetService("Workspace"):PGSIsEnabled()
		if pgscheck == true then
			game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "PGSPhysicsSolverEnabled";
			Text = "PGS is Enabled!";
			})
		else
			game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "PGSPhysicsSolverEnabled";
			Text = "PGS is Disabled!";
			})
		end
	end
	if string.sub(msg, 1, 12) == (prefix.."removeinvis") then
		for i,v in pairs(game:GetService("Workspace"):GetDescendants()) do
			if v:IsA("Part") then
				if v.Transparency == 1 then
					if v.Name ~= "HumanoidRootPart" then
						v:Destroy()
					end
				end
			end
		end
	end
	if string.sub(msg, 1, 10) == (prefix.."removefog") then
		game:GetService("Lighting").FogStart = 0
		game:GetService("Lighting").FogEnd = 9999999999999
	end
	if string.sub(msg, 1, 8) == (prefix.."disable") then
		lplayer.Character.Humanoid.Parent = lplayer
	end
	if string.sub(msg, 1, 7) == (prefix.."enable") then
		lplayer.Humanoid.Parent = lplayer.Character
	end
	if string.sub(msg, 1, 8) == (prefix.."prefix ") then
		prefix = (string.sub(msg, 9, 9))
		wait(0.1)
		change()
		wait(0.1)
		game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Prefix changed!";
		Text = "Prefix is now "..prefix..". Use ;resetprefix to reset to ;";
		})
	end
	if string.sub(msg, 1, 12) == (";resetprefix") then
		prefix = ";"
		wait(0.1)
		change()
		wait(0.1)
		game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Prefix changed!";
		Text = "Prefix is now "..prefix..". Make sure it's one key!";
		})
	end
	if string.sub(msg, 1, 10) == (prefix.."flyspeed ") then
		speedfly = string.sub(msg, 11)
		wait()
		change()
	end
	if string.sub(msg, 1, 8) == (prefix.."carpet ") then
		for i,v in pairs(GetPlayer(string.sub(msg, 9))) do
			local Anim3 = Instance.new("Animation")
			Anim3.AnimationId = "rbxassetid://282574440"
			local track3 = lplayer.Character.Humanoid:LoadAnimation(Anim3)
			track3:Play(.1, 1, 1)
			bplrr = v.Name
			banpl = true
		end
	end
	if string.sub(msg, 1, 9) == (prefix.."uncarpet") then
		banpl = false
	end
	if string.sub(msg, 1, 7) == (prefix.."stare ") then
		for i,v in pairs(GetPlayer(string.sub(msg, 8))) do
			staring = true
			stareplr = v
		end
	end
	if string.sub(msg, 1, 8) == (prefix.."unstare") then
		staring = false
	end
	if string.sub(msg, 1, 8) == (prefix.."logchat") then
		chatlogs = true
		game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "LogChat enabled";
		Text = "Now logging all player chat.";
		})
	end
	if string.sub(msg, 1, 10) == (prefix.."unlogchat") then
		chatlogs = false
		game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "LogChat disabled";
		Text = "Stopped logging all player chat.";
		})
	end
	if string.sub(msg, 1, 7) == (prefix.."fixcam") then
		game:GetService("Workspace").CurrentCamera:Destroy()
		wait(0.1)
		game:GetService("Workspace").CurrentCamera.CameraSubject = lplayer.Character.Humanoid
		game:GetService("Workspace").CurrentCamera.CameraType = "Custom"
		lplayer.CameraMinZoomDistance = 0.5
		lplayer.CameraMaxZoomDistance = 400
		lplayer.CameraMode = "Classic"
	end
	if string.sub(msg, 1, 8) == (prefix.."unstate") then
		changingstate = false
	end
end)

local function tp()
	for i, player in ipairs(game:GetService("Players"):GetPlayers()) do
		if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
			if player.Name == brplr then
				player.Character.HumanoidRootPart.CFrame = lplayer.Character.HumanoidRootPart.CFrame + lplayer.Character.HumanoidRootPart.CFrame.lookVector * 2
			end
		end
	end
end
local function tpall()
	for i, player in ipairs(game:GetService("Players"):GetPlayers()) do
		if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
			player.Character.HumanoidRootPart.CFrame = lplayer.Character.HumanoidRootPart.CFrame + lplayer.Character.HumanoidRootPart.CFrame.lookVector * 3
		end
	end
end
spawn(function()
	while wait(spamdelay) do
		if spamming == true then
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(spamtext, "All")
		end
	end
end)
spawn(function()
	while wait(spamdelay) do
		if spammingpm == true then
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("/w "..pmspammed.." @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@", "All")
		end
	end
end)
spawn(function()
	while wait() do
		if cbring == true then
			tp()
		end
	end
end)
spawn(function()
	while wait() do
		if cbringall == true then
			tpall()
		end
	end
end)

Mouse.KeyDown:connect(function(Key)
	if Key == prefix then
		CMDBAR:CaptureFocus()
	end
end)

CMDBAR.FocusLost:connect(function(enterPressed)
	if enterPressed then
		if string.sub(CMDBAR.Text, 1, 5) == ("kill ") then
			if string.sub(CMDBAR.Text, 6) == "me" then
				lplayer.Character.HumanoidRootPart.CFrame = CFrame.new(100000,0,100000)
			else
				for i,v in pairs(GetPlayer(string.sub(CMDBAR.Text, 6)))do
					local NOW = lplayer.Character.HumanoidRootPart.CFrame
					lplayer.Character.Humanoid.Name = 1
					local l = lplayer.Character["1"]:Clone()
					l.Parent = lplayer.Character
					l.Name = "Humanoid"
					wait(0.1)
					lplayer.Character["1"]:Destroy()
					game:GetService("Workspace").CurrentCamera.CameraSubject = lplayer.Character
					lplayer.Character.Animate.Disabled = true
					wait(0.1)
					lplayer.Character.Animate.Disabled = false
					lplayer.Character.Humanoid.DisplayDistanceType = "None"
					for i,v in pairs(game:GetService'Players'.LocalPlayer.Backpack:GetChildren())do
					lplayer.Character.Humanoid:EquipTool(v)
					end
					local function tp(player,player2)
					local char1,char2=player.Character,player2.Character
					if char1 and char2 then
					char1:MoveTo(char2.Head.Position)
					end
					end
					wait(0.1)
					lplayer.Character.HumanoidRootPart.CFrame = game:GetService("Players")[v.Name].Character.HumanoidRootPart.CFrame
					wait(0.2)
					lplayer.Character.HumanoidRootPart.CFrame = game:GetService("Players")[v.Name].Character.HumanoidRootPart.CFrame
					wait(0.5)
					lplayer.Character.HumanoidRootPart.CFrame = CFrame.new(Vector3.new(-100000,10,-100000))
					wait(0.7)
					tp(lplayer,game:GetService("Players")[v.Name])
					wait(0.7)
					lplayer.Character.HumanoidRootPart.CFrame = NOW
					game:GetService("StarterGui"):SetCore("SendNotification", {
					Title = "Tools needed!";
					Text = "You need a tool in your backpack for this command!";
					})
				end
			end
		end
		if string.sub(CMDBAR.Text, 1, 6) == ("bring ") then
			for i,v in pairs(GetPlayer(string.sub(CMDBAR.Text, 7)))do
				local NOW = lplayer.Character.HumanoidRootPart.CFrame
				lplayer.Character.Humanoid.Name = 1
				local l = lplayer.Character["1"]:Clone()
				l.Parent = lplayer.Character
				l.Name = "Humanoid"
				wait(0.1)
				lplayer.Character["1"]:Destroy()
				game:GetService("Workspace").CurrentCamera.CameraSubject = lplayer.Character
				lplayer.Character.Animate.Disabled = true
				wait(0.1)
				lplayer.Character.Animate.Disabled = false
				lplayer.Character.Humanoid.DisplayDistanceType = "None"
				for i,v in pairs(game:GetService'Players'.LocalPlayer.Backpack:GetChildren())do
				lplayer.Character.Humanoid:EquipTool(v)
				end
				local function tp(player,player2)
				local char1,char2=player.Character,player2.Character
				if char1 and char2 then
				char1.HumanoidRootPart.CFrame = char2.HumanoidRootPart.CFrame
				end
				end
				local function getout(player,player2)
				local char1,char2=player.Character,player2.Character
				if char1 and char2 then
				char1:MoveTo(char2.Head.Position)
				end
				end
				tp(game:GetService("Players")[v.Name], lplayer)
				wait(0.2)
				tp(game:GetService("Players")[v.Name], lplayer)
				wait(0.5)
				lplayer.Character.HumanoidRootPart.CFrame = NOW
				wait(0.5)
				getout(lplayer, game:GetService("Players")[v.Name])
				wait(0.3)
				lplayer.Character.HumanoidRootPart.CFrame = NOW
				game:GetService("StarterGui"):SetCore("SendNotification", {
				Title = "Tools needed!";
				Text = "You need a tool in your backpack for this command!";
				})
			end
		end
		if string.sub(CMDBAR.Text, 1, 5) == ("spin ") then
			for i,v in pairs(GetPlayer(string.sub(CMDBAR.Text, 6))) do
				lplayer.Character.Humanoid.Name = 1
				local l = lplayer.Character["1"]:Clone()
				l.Parent = lplayer.Character
				l.Name = "Humanoid"
				wait(0.1)
				lplayer.Character["1"]:Destroy()
				game:GetService("Workspace").CurrentCamera.CameraSubject = lplayer.Character
				lplayer.Character.Animate.Disabled = true
				wait(0.1)
				lplayer.Character.Animate.Disabled = false
				lplayer.Character.Humanoid.DisplayDistanceType = "None"
				for i,v in pairs(game:GetService'Players'.LocalPlayer.Backpack:GetChildren())do
				lplayer.Character.Humanoid:EquipTool(v)
				end
				lplayer.Character.HumanoidRootPart.CFrame = game:GetService("Players")[v.Name].Character["Left Arm"].CFrame
				spinplr = v
				wait(0.5)
				spin = true
				game:GetService("StarterGui"):SetCore("SendNotification", {
				Title = "Tools needed!";
				Text = "You need a tool in your backpack for this command!";
				})
			end
		end
		if string.sub(CMDBAR.Text, 1, 6) == ("unspin") then
			spin = false
		end
		if string.sub(CMDBAR.Text, 1, 7) == ("attach ") then
			for i,v in pairs(GetPlayer(string.sub(CMDBAR.Text, 8))) do
				lplayer.Character.Humanoid.Name = 1
				local l = lplayer.Character["1"]:Clone()
				l.Parent = lplayer.Character
				l.Name = "Humanoid"
				wait(0.1)
				lplayer.Character["1"]:Destroy()
				game:GetService("Workspace").CurrentCamera.CameraSubject = lplayer.Character
				lplayer.Character.Animate.Disabled = true
				wait(0.1)
				lplayer.Character.Animate.Disabled = false
				lplayer.Character.Humanoid.DisplayDistanceType = "None"
				for i,v in pairs(game:GetService'Players'.LocalPlayer.Backpack:GetChildren())do
				lplayer.Character.Humanoid:EquipTool(v)
				end
				lplayer.Character.HumanoidRootPart.CFrame = game:GetService("Players")[v.Name].Character["Left Arm"].CFrame
				wait(0.3)
				lplayer.Character.HumanoidRootPart.CFrame = game:GetService("Players")[v.Name].Character["Left Arm"].CFrame
				attplr = v
				game:GetService("StarterGui"):SetCore("SendNotification", {
				Title = "Tools needed!";
				Text = "You need a tool in your backpack for this command!";
				})
			end
		end
		if string.sub(CMDBAR.Text, 1, 9) == ("unattach ") then
			for i,v in pairs(GetPlayer(string.sub(CMDBAR.Text, 10))) do
				local function getout(player,player2)
				local char1,char2=player.Character,player2.Character
				if char1 and char2 then
				char1:MoveTo(char2.Head.Position)
				end
				end
				getout(lplayer, game:GetService("Players")[v.Name])
			end
		end
		if string.sub(CMDBAR.Text, 1, 7) == ("follow ") then
			for i,v in pairs(GetPlayer(string.sub(CMDBAR.Text, 8))) do
				followed = true
				flwplr = v
			end
		end
		if string.sub(CMDBAR.Text, 1, 8) == ("unfollow") then
			followed = false
		end
		if string.sub(CMDBAR.Text, 1, 9) == ("freefall ") then
			for i,v in pairs(GetPlayer(string.sub(CMDBAR.Text, 10))) do
				local NOW = lplayer.Character.HumanoidRootPart.CFrame
				lplayer.Character.Humanoid.Name = 1
				local l = lplayer.Character["1"]:Clone()
				l.Parent = lplayer.Character
				l.Name = "Humanoid"
				wait(0.1)
				lplayer.Character["1"]:Destroy()
				game:GetService("Workspace").CurrentCamera.CameraSubject = lplayer.Character
				lplayer.Character.Animate.Disabled = true
				wait(0.1)
				lplayer.Character.Animate.Disabled = false
				lplayer.Character.Humanoid.DisplayDistanceType = "None"
				for i,v in pairs(game:GetService'Players'.LocalPlayer.Backpack:GetChildren())do
				lplayer.Character.Humanoid:EquipTool(v)
				end
				lplayer.Character.HumanoidRootPart.CFrame = game:GetService("Players")[v.Name].Character.HumanoidRootPart.CFrame
				wait(0.2)
				lplayer.Character.HumanoidRootPart.CFrame = game:GetService("Players")[v.Name].Character.HumanoidRootPart.CFrame
				wait(0.6)
				lplayer.Character.HumanoidRootPart.CFrame = NOW
				wait(0.6)
				lplayer.Character.HumanoidRootPart.CFrame = CFrame.new(0,50000,0)
				game:GetService("StarterGui"):SetCore("SendNotification", {
				Title = "Tools needed!";
				Text = "You need a tool in your backpack for this command!";
				})
			end
		end
		if string.sub(CMDBAR.Text, 1, 6) == ("trail ") then
			for i,v in pairs(GetPlayer(string.sub(CMDBAR.Text, 7))) do
				traill = true
				trlplr = v
			end
		end
		if string.sub(CMDBAR.Text, 1, 7) == ("untrail") then
			traill = false
		end
		if string.sub(CMDBAR.Text, 1, 6) == ("orbit ") then
			if string.sub(CMDBAR.Text, 7) == "all" or string.sub(CMDBAR.Text, 7) == "others" or string.sub(CMDBAR.Text, 7) == "me" then
				lplayer.Character.HumanoidRootPart.CFrame = lplayer.Character.HumanoidRootPart.CFrame
			else
				for i,v in pairs(GetPlayer(string.sub(CMDBAR.Text, 7))) do
					local o = Instance.new("RocketPropulsion")
					o.Parent = lplayer.Character.HumanoidRootPart
					o.Name = "Orbit"
					o.Target = game:GetService("Players")[v.Name].Character.HumanoidRootPart
					o:Fire()
					noclip = true
				end
			end
		end
		if string.sub(CMDBAR.Text, 1, 7) == ("unorbit") then
			lplayer.Character.HumanoidRootPart.Orbit:Destroy()
			noclip = false
		end
		if string.sub(CMDBAR.Text, 1, 6) == ("fling ") then
			if string.sub(CMDBAR.Text, 7) == "all" or string.sub(CMDBAR.Text, 7) == "others" or string.sub(CMDBAR.Text, 7) == "me" then
				lplayer.Character.HumanoidRootPart.CFrame = lplayer.Character.HumanoidRootPart.CFrame
			else
				for i,v in pairs(GetPlayer(string.sub(CMDBAR.Text, 7))) do
					local y = Instance.new("RocketPropulsion")
					y.Parent = lplayer.Character.HumanoidRootPart
					y.CartoonFactor = 1
					y.MaxThrust = 800000
					y.MaxSpeed = 1000
					y.ThrustP = 200000
					y.Name = "Fling"
					game:GetService("Workspace").CurrentCamera.CameraSubject = game:GetService("Players")[v.Name].Character.Head
					y.Target = game:GetService("Players")[v.Name].Character.HumanoidRootPart
					y:Fire()
					noclip = true
				end
			end
		end
		if string.sub(CMDBAR.Text, 1, 7) == ("unfling") then
			noclip = false
			lplayer.Character.HumanoidRootPart.Fling:Destroy()
			game:GetService("Workspace").CurrentCamera.CameraSubject = lplayer.Character.Head
			wait(0.4)
			lplayer.Character.HumanoidRootPart.Fling:Destroy()
		end
		if string.sub(CMDBAR.Text, 1, 7) == ("fecheck") then
			if game:GetService("Workspace").FilteringEnabled == true then
				warn("FE is Enabled (Filtering Enabled)")
				game:GetService("StarterGui"):SetCore("SendNotification", {
					Title = "FE is Enabled";
					Text = "Filtering Enabled. Enjoy using Reviz Admin!";
				})
			else
				warn("FE is Disabled (Filtering Disabled) Consider using a different admin script.")
				game:GetService("StarterGui"):SetCore("SendNotification", {
					Title = "FE is Disabled";
					Text = "Filtering Disabled. Consider using a different admin script.";
				})
			end
		end
		if string.sub(CMDBAR.Text, 1, 5) == ("void ") then
			for i,v in pairs(GetPlayer(string.sub(CMDBAR.Text, 6))) do
				lplayer.Character.Humanoid.Name = 1
				local l = lplayer.Character["1"]:Clone()
				l.Parent = lplayer.Character
				l.Name = "Humanoid"
				wait(0.1)
				lplayer.Character["1"]:Destroy()
				game:GetService("Workspace").CurrentCamera.CameraSubject = lplayer.Character
				lplayer.Character.Animate.Disabled = true
				wait(0.1)
				lplayer.Character.Animate.Disabled = false
				lplayer.Character.Humanoid.DisplayDistanceType = "None"
				for i,v in pairs(game:GetService'Players'.LocalPlayer.Backpack:GetChildren())do
				lplayer.Character.Humanoid:EquipTool(v)
				end
				lplayer.Character.HumanoidRootPart.CFrame = game:GetService("Players")[v.Name].Character.HumanoidRootPart.CFrame
				wait(0.2)
				lplayer.Character.HumanoidRootPart.CFrame = game:GetService("Players")[v.Name].Character.HumanoidRootPart.CFrame
				wait(0.6)
				lplayer.Character.HumanoidRootPart.CFrame = CFrame.new(999999999999999,0,999999999999999)
				game:GetService("StarterGui"):SetCore("SendNotification", {
				Title = "Tools needed!";
				Text = "You need a tool in your backpack for this command!";
				})
			end
		end
		if string.sub(CMDBAR.Text, 1, 6) == ("noclip") then
			noclip = true
			game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Noclip enabled";
			Text = "Type ;clip to disable";
			})
		end
		if string.sub(CMDBAR.Text, 1, 4) == ("clip") then
			noclip = false
			game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Noclip disabled";
			Text = "Type ;noclip to enable";
			})
		end
		if string.sub(CMDBAR.Text, 1, 6) == ("speed ") then
			lplayer.Character.Humanoid.WalkSpeed = (string.sub(CMDBAR.Text, 7))
		end
		if string.sub(CMDBAR.Text, 1, 3) == ("ws ") then
			lplayer.Character.Humanoid.WalkSpeed = (string.sub(CMDBAR.Text, 4))
		end
		if string.sub(CMDBAR.Text, 1, 10) == ("hipheight ") then
			lplayer.Character.Humanoid.HipHeight = (string.sub(CMDBAR.Text, 11))
		end
		if string.sub(CMDBAR.Text, 1, 3) == ("hh ") then
			lplayer.Character.Humanoid.HipHeight = (string.sub(CMDBAR.Text, 4))
		end
		if string.sub(CMDBAR.Text, 1, 10) == ("jumppower ") then
			lplayer.Character.Humanoid.JumpPower = (string.sub(CMDBAR.Text, 11))
		end
		if string.sub(CMDBAR.Text, 1, 3) == ("jp ") then
			lplayer.Character.Humanoid.JumpPower = (string.sub(CMDBAR.Text, 4))
		end
		if string.sub(CMDBAR.Text, 1, 7) == ("default") then
			lplayer.Character.Humanoid.JumpPower = 50
			lplayer.Character.Humanoid.WalkSpeed = 16
			lplayer.Character.Humanoid.HipHeight = 0
		end
		if string.sub(CMDBAR.Text, 1, 6) == ("annoy ") then
			for i,v in pairs(GetPlayer(string.sub(CMDBAR.Text, 7))) do
				annoying = true
				annplr = v
			end
		end
		if string.sub(CMDBAR.Text, 1, 7) == ("unannoy") then
			annoying = false
		end
		if string.sub(CMDBAR.Text, 1, 9) == ("headwalk ") then
			for i,v in pairs(GetPlayer(string.sub(CMDBAR.Text, 10))) do
				hwalk = true
				hdwplr = v
			end
		end
		if string.sub(CMDBAR.Text, 1, 10) == ("unheadwalk") then
			hwalk = false
		end
		if string.sub(CMDBAR.Text, 1, 7) == ("nolimbs") then
			lplayer.Character["Left Leg"]:Destroy()
			lplayer.Character["Left Arm"]:Destroy()
			lplayer.Character["Right Leg"]:Destroy()
			lplayer.Character["Right Arm"]:Destroy()
		end
		if string.sub(CMDBAR.Text, 1, 3) == ("god") then
			lplayer.Character.Humanoid.Name = 1
			local l = lplayer.Character["1"]:Clone()
			l.Parent = lplayer.Character
			l.Name = "Humanoid"
			wait(0.1)
			lplayer.Character["1"]:Destroy()
			game:GetService("Workspace").CurrentCamera.CameraSubject = lplayer.Character
			lplayer.Character.Animate.Disabled = true
			wait(0.1)
			lplayer.Character.Animate.Disabled = false
			lplayer.Character.Humanoid.DisplayDistanceType = "None"
			game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "FE Godmode enabled";
			Text = "Use ;grespawn or ;respawn to remove.";
			})
		end
		if string.sub(CMDBAR.Text, 1, 8) == ("drophats") then
			for i,v in pairs(lplayer.Character:GetChildren()) do
				if (v:IsA("Accessory")) or (v:IsA("Hat")) then
					v.Parent = workspace
				end
			end
		end
		if string.sub(CMDBAR.Text, 1, 8) == ("droptool") then
			for i,v in pairs(lplayer.Character:GetChildren()) do
				if (v:IsA("Tool")) then
					v.Parent = workspace
				end
			end
		end
		if string.sub(CMDBAR.Text, 1, 9) == ("loopdhats") then
			droppinghats = true
			game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Loop Drop Enabled";
			Text = "Type ;unloopdhats to disable";
			})
		end
		if string.sub(CMDBAR.Text, 1, 11) == ("unloopdhats") then
			droppinghats = false
			game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Loop Drop Disabled";
			Text = "Type ;loopdhats to enable.";
			})
		end
		if string.sub(CMDBAR.Text, 1, 9) == ("loopdtool") then
			droppingtools = true
			game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Loop Drop Enabled";
			Text = "Type ;unloopdtool to disable";
			})
		end
		if string.sub(CMDBAR.Text, 1, 11) == ("unloopdtool") then
			droppingtools = false
			game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Loop Drop Disabled";
			Text = "Type ;loopdtool to enable.";
			})
		end
		if string.sub(CMDBAR.Text, 1, 9) == ("invisible") then -- Credit to Timeless
			Local = game:GetService('Players').LocalPlayer
			Char  = Local.Character
			touched,tpdback = false, false
			box = Instance.new('Part',workspace)
			box.Anchored = true
			box.CanCollide = true
			box.Size = Vector3.new(10,1,10)
			box.Position = Vector3.new(0,10000,0)
			box.Touched:connect(function(part)
			    if (part.Parent.Name == Local.Name) then
			        if touched == false then
			            touched = true
			            function apply()
			                if script.Disabled ~= true then
			                    no = Char.HumanoidRootPart:Clone()
			                    wait(.25)
			                    Char.HumanoidRootPart:Destroy()
			                    no.Parent = Char
			                    Char:MoveTo(loc)
			                    touched = false
			                end end
			            if Char then
			                apply()
			            end
			        end
			    end
			end)
			repeat wait() until Char
			loc = Char.HumanoidRootPart.Position
			Char:MoveTo(box.Position + Vector3.new(0,.5,0))
			game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Invisibility enabled!";
			Text = "Reset or use ;respawn to remove.";
			})
		end
		if string.sub(CMDBAR.Text, 1, 5) == ("view ") then
			for i,v in pairs(GetPlayer(string.sub(CMDBAR.Text, 6))) do
				if game:GetService("Players")[v.Name].Character.Humanoid then
					game:GetService("Workspace").CurrentCamera.CameraSubject = game:GetService("Players")[v.Name].Character.Humanoid
				else
					game:GetService("Workspace").CurrentCamera.CameraSubject = game:GetService("Players")[v.Name].Character.Head
				end
			end
		end
		if string.sub(CMDBAR.Text, 1, 6) == ("unview") then
			if lplayer.Character.Humanoid then
				game:GetService("Workspace").CurrentCamera.CameraSubject = lplayer.Character.Humanoid
			else
				game:GetService("Workspace").CurrentCamera.CameraSubject = lplayer.Character.Head
			end
		end
		if string.sub(CMDBAR.Text, 1, 5) == ("goto ") then
			for i,v in pairs(GetPlayer(string.sub(CMDBAR.Text, 6))) do
				lplayer.Character.HumanoidRootPart.CFrame = game:GetService("Players")[v.Name].Character.HumanoidRootPart.CFrame
			end
		end
		if string.sub(CMDBAR.Text, 1, 3) == ("fly") then
		repeat wait() until lplayer and lplayer.Character and lplayer.Character:FindFirstChild('HumanoidRootPart') and lplayer.Character:FindFirstChild('Humanoid')
		repeat wait() until Mouse
		
		local T = lplayer.Character.HumanoidRootPart
		local CONTROL = {F = 0, B = 0, L = 0, R = 0}
		local lCONTROL = {F = 0, B = 0, L = 0, R = 0}
		local SPEED = speedget
		
		local function fly()
			flying = true
			local BG = Instance.new('BodyGyro', T)
			local BV = Instance.new('BodyVelocity', T)
			BG.P = 9e4
			BG.maxTorque = Vector3.new(9e9, 9e9, 9e9)
			BG.cframe = T.CFrame
			BV.velocity = Vector3.new(0, 0.1, 0)
			BV.maxForce = Vector3.new(9e9, 9e9, 9e9)
			spawn(function()
			repeat wait()
			lplayer.Character.Humanoid.PlatformStand = true
			if CONTROL.L + CONTROL.R ~= 0 or CONTROL.F + CONTROL.B ~= 0 then
			SPEED = 50
			elseif not (CONTROL.L + CONTROL.R ~= 0 or CONTROL.F + CONTROL.B ~= 0) and SPEED ~= 0 then
			SPEED = 0
			end
			if (CONTROL.L + CONTROL.R) ~= 0 or (CONTROL.F + CONTROL.B) ~= 0 then
			BV.velocity = ((workspace.CurrentCamera.CoordinateFrame.lookVector * (CONTROL.F + CONTROL.B)) + ((workspace.CurrentCamera.CoordinateFrame * CFrame.new(CONTROL.L + CONTROL.R, (CONTROL.F + CONTROL.B) * 0.2, 0).p) - workspace.CurrentCamera.CoordinateFrame.p)) * SPEED
			lCONTROL = {F = CONTROL.F, B = CONTROL.B, L = CONTROL.L, R = CONTROL.R}
			elseif (CONTROL.L + CONTROL.R) == 0 and (CONTROL.F + CONTROL.B) == 0 and SPEED ~= 0 then
			BV.velocity = ((workspace.CurrentCamera.CoordinateFrame.lookVector * (lCONTROL.F + lCONTROL.B)) + ((workspace.CurrentCamera.CoordinateFrame * CFrame.new(lCONTROL.L + lCONTROL.R, (lCONTROL.F + lCONTROL.B) * 0.2, 0).p) - workspace.CurrentCamera.CoordinateFrame.p)) * SPEED
			else
			BV.velocity = Vector3.new(0, 0.1, 0)
			end
			BG.cframe = workspace.CurrentCamera.CoordinateFrame
					until not flying
					CONTROL = {F = 0, B = 0, L = 0, R = 0}
					lCONTROL = {F = 0, B = 0, L = 0, R = 0}
					SPEED = 0
					BG:destroy()
					BV:destroy()
					lplayer.Character.Humanoid.PlatformStand = false
				end)
			end
		Mouse.KeyDown:connect(function(KEY)
			if KEY:lower() == 'w' then
				CONTROL.F = speedfly
			elseif KEY:lower() == 's' then
				CONTROL.B = -speedfly
			elseif KEY:lower() == 'a' then
				CONTROL.L = -speedfly 
			elseif KEY:lower() == 'd' then 
				CONTROL.R = speedfly
			end
		end)
		Mouse.KeyUp:connect(function(KEY)
			if KEY:lower() == 'w' then
				CONTROL.F = 0
			elseif KEY:lower() == 's' then
				CONTROL.B = 0
			elseif KEY:lower() == 'a' then
				CONTROL.L = 0
			elseif KEY:lower() == 'd' then
				CONTROL.R = 0
			end
		end)
		fly()
		end
		if string.sub(CMDBAR.Text, 1, 5) == ("unfly") then
			flying = false
			lplayer.Character.Humanoid.PlatformStand = false
		end
		if string.sub(CMDBAR.Text, 1, 5) == ("chat ") then
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer((string.sub(CMDBAR.Text, 6)), "All")
		end
		if string.sub(CMDBAR.Text, 1, 5) == ("spam ") then
			spamtext = (string.sub(CMDBAR.Text, 6))
			spamming = true
		end
		if string.sub(CMDBAR.Text, 1, 6) == ("unspam") then
			spamming = false
		end
		if string.sub(CMDBAR.Text, 1, 9) == ("spamwait ") then
			spamdelay = (string.sub(CMDBAR.Text, 10))
		end
		if string.sub(CMDBAR.Text, 1, 7) == ("pmspam ") then
			for i,v in pairs(GetPlayer(string.sub(CMDBAR.Text, 8))) do
				pmspammed = v.Name
				spammingpm = true
			end
		end
		if string.sub(CMDBAR.Text, 1, 8) == ("unpmspam") then
			spammingpm = false
		end
		if string.sub(CMDBAR.Text, 1, 8) == ("cfreeze ") then
			for i,v in pairs(GetPlayer(string.sub(CMDBAR.Text, 9))) do
				v.Character["Left Leg"].Anchored = true
				v.Character["Left Arm"].Anchored = true
				v.Character["Right Leg"].Anchored = true
				v.Character["Right Arm"].Anchored = true
				v.Character.Torso.Anchored = true
				v.Character.Head.Anchored = true
			end
		end
		if string.sub(CMDBAR.Text, 1, 10) == ("uncfreeze ") then
			for i,v in pairs(GetPlayer(string.sub(CMDBAR.Text, 11))) do
				v.Character["Left Leg"].Anchored = false
				v.Character["Left Arm"].Anchored = false
				v.Character["Right Leg"].Anchored = false
				v.Character["Right Arm"].Anchored = false
				v.Character.Torso.Anchored = false
				v.Character.Head.Anchored = false
			end
		end
		if string.sub(CMDBAR.Text, 1, 8) == ("unlockws") then
			local a = game:GetService("Workspace"):getChildren()
			for i = 1, #a do
				if a[i].className == "Part" then
					a[i].Locked = false
				elseif a[i].className == "Model" then
					local r = a[i]:getChildren()
					for i = 1, #r do
						if r[i].className == "Part" then
						r[i].Locked = false
						end
					end
				end
			end
			game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Success!";
			Text = "Workspace unlocked. Use ;lockws to lock.";
			})
		end
		if string.sub(CMDBAR.Text, 1, 6) == ("lockws") then
			local a = game:GetService("Workspace"):getChildren()
			for i = 1, #a do
				if a[i].className == "Part" then
					a[i].Locked = true
				elseif a[i].className == "Model" then
					local r = a[i]:getChildren()
					for i = 1, #r do
						if r[i].className == "Part" then
						r[i].Locked = true
						end
					end
				end
			end
		end
		if string.sub(CMDBAR.Text, 1, 6) == ("btools") then
			local Clone_T = Instance.new("HopperBin",lplayer.Backpack)
			Clone_T.BinType = "Clone"
			local Destruct = Instance.new("HopperBin",lplayer.Backpack)
			Destruct.BinType = "Hammer"
			local Hold_T = Instance.new("HopperBin",lplayer.Backpack)
			Hold_T.BinType = "Grab"
		end
		if string.sub(CMDBAR.Text, 1, 6) == ("pstand") then
			lplayer.Character.Humanoid.PlatformStand = true
		end
		if string.sub(CMDBAR.Text, 1, 8) == ("unpstand") then
			lplayer.Character.Humanoid.PlatformStand = false
		end
		if string.sub(CMDBAR.Text, 1, 9) == ("blockhead") then
			lplayer.Character.Head.Mesh:Destroy()
		end
		if string.sub(CMDBAR.Text, 1, 3) == ("sit") then
			lplayer.Character.Humanoid.Sit = true
		end
		if string.sub(CMDBAR.Text, 1, 9) == ("bringobj ") then
			local function bringobjw()
			for i,obj in ipairs(game:GetService("Workspace"):GetDescendants()) do
			if obj.Name == (string.sub(CMDBAR.Text, 10)) then
			obj.CFrame = lplayer.Character.HumanoidRootPart.CFrame
			obj.CanCollide = false
			obj.Transparency = 0.7
			wait()
			obj.CFrame = lplayer.Character["Left Leg"].CFrame
			wait()
			obj.CFrame = lplayer.Character["Right Leg"].CFrame
			wait()
			obj.CFrame = lplayer.Character["Head"].CFrame
			end
			end
			end
			while wait() do
				bringobjw()
			end
			game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "BringObj";
			Text = "BringObj enabled.";
			})
		end
		if string.sub(CMDBAR.Text, 1, 6) == ("wsvis ") then
			vis = (string.sub(CMDBAR.Text, 7))
			local a = game:GetService("Workspace"):GetDescendants()
			for i = 1, #a do
				if a[i].className == "Part" then
					a[i].Transparency = vis
				elseif a[i].className == "Model" then
					local r = a[i]:getChildren()
					for i = 1, #r do
						if r[i].className == "Part" then
						r[i].Transparency = vis
						end
					end
				end
			end
		end
		if string.sub(CMDBAR.Text, 1, 10) == ("hypertotal") then
			loadstring(game:GetObjects("rbxassetid://1255063809")[1].Source)()
			game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Success!";
			Text = "HyperTotal GUI Loaded!";
			})
		end
		if string.sub(CMDBAR.Text, 1, 4) == ("cmds") then
			CMDSFRAME.Visible = true
		end
		if string.sub(CMDBAR.Text, 1, 9) == ("rmeshhats") then
			for i,v in pairs(lplayer.Character:GetChildren()) do
				if (v:IsA("Accessory")) or (v:IsA("Hat")) then
					v.Handle.Mesh:Destroy()
				end
			end
		end
		if string.sub(CMDBAR.Text, 1, 9) == ("blockhats") then
			for i,v in pairs(lplayer.Character:GetChildren()) do
				if (v:IsA("Accessory")) or (v:IsA("Hat")) then
					v.Handle.Mesh:Destroy()
				end
			end
		end
		if string.sub(CMDBAR.Text, 1, 9) == ("rmeshtool") then
			for i,v in pairs(lplayer.Character:GetChildren()) do
				if (v:IsA("Tool")) then
					v.Handle.Mesh:Destroy()
				end
			end
		end
		if string.sub(CMDBAR.Text, 1, 9) == ("blocktool") then
			for i,v in pairs(lplayer.Character:GetChildren()) do
				if (v:IsA("Tool")) then
					v.Handle.Mesh:Destroy()
				end
			end
		end
		if string.sub(CMDBAR.Text, 1, 7) == ("spinner") then
			local p = Instance.new("RocketPropulsion")
			p.Parent = lplayer.Character.HumanoidRootPart
			p.Name = "Spinner"
			p.Target = lplayer.Character["Left Arm"]
			p:Fire()
			game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Spinner enabled";
			Text = "Type ;nospinner to disable.";
			})
		end
		if string.sub(CMDBAR.Text, 1, 9) == ("nospinner") then
			lplayer.Character.HumanoidRootPart.Spinner:Destroy()
		end
		if string.sub(CMDBAR.Text, 1, 6) == ("reachd") then
			for i,v in pairs(game:GetService'Players'.LocalPlayer.Character:GetChildren())do
				if v:isA("Tool") then
					local a = Instance.new("SelectionBox",v.Handle)
					a.Adornee = v.Handle
					v.Handle.Size = Vector3.new(0.5,0.5,60)
					v.GripPos = Vector3.new(0,0,0)
					lplayer.Character.Humanoid:UnequipTools()
				end
			end
			game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Reach applied!";
			Text = "Applied to equipped sword. Use ;noreach to disable.";
			})
		end
		if string.sub(CMDBAR.Text, 1, 6) == ("reach ") then
			for i,v in pairs(game:GetService'Players'.LocalPlayer.Character:GetChildren())do
				if v:isA("Tool") then
					local a = Instance.new("SelectionBox",v.Handle)
					a.Name = "Reach"
					a.Adornee = v.Handle
					v.Handle.Size = Vector3.new(0.5,0.5,(string.sub(CMDBAR.Text, 7)))
					v.GripPos = Vector3.new(0,0,0)
					lplayer.Character.Humanoid:UnequipTools()
				end
			end
			game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Reach applied!";
			Text = "Applied to equipped sword. Use ;noreach to disable.";
			})
		end
		if string.sub(CMDBAR.Text, 1, 7) == ("noreach") then
			for i,v in pairs(game:GetService'Players'.LocalPlayer.Character:GetChildren())do
				if v:isA("Tool") then
					v.Handle.Reach:Destroy()
				end
			end
			game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Reach removed!";
			Text = "Removed reach from equipped sword.";
			})
		end
		if string.sub(CMDBAR.Text, 1, 6) == ("rkill ") then
			for i,v in pairs(GetPlayer(string.sub(CMDBAR.Text, 7)))do
				lplayer.Character.Humanoid.Name = 1
				local l = lplayer.Character["1"]:Clone()
				l.Parent = lplayer.Character
				l.Name = "Humanoid"
				wait(0.1)
				lplayer.Character["1"]:Destroy()
				game:GetService("Workspace").CurrentCamera.CameraSubject = lplayer.Character
				lplayer.Character.Animate.Disabled = true
				wait(0.1)
				lplayer.Character.Animate.Disabled = false
				lplayer.Character.Humanoid.DisplayDistanceType = "None"
				for i,v in pairs(game:GetService'Players'.LocalPlayer.Backpack:GetChildren())do
				lplayer.Character.Humanoid:EquipTool(v)
				end
				wait(0.1)
				lplayer.Character.HumanoidRootPart.CFrame = game:GetService("Players")[v.Name].Character.HumanoidRootPart.CFrame
				wait(0.2)
				lplayer.Character.HumanoidRootPart.CFrame = game:GetService("Players")[v.Name].Character.HumanoidRootPart.CFrame
				wait(0.5)
				lplayer.Character.HumanoidRootPart.CFrame = CFrame.new(Vector3.new(-100000,10,-100000))
				game:GetService("StarterGui"):SetCore("SendNotification", {
				Title = "Tools needed!";
				Text = "You need a tool in your backpack for this command!";
				})
			end
		end
		if string.sub(CMDBAR.Text, 1, 6) == ("tp me ") then
			for i,v in pairs(GetPlayer(string.sub(CMDBAR.Text, 7))) do
				lplayer.Character.HumanoidRootPart.CFrame = game:GetService("Players")[v.Name].Character.HumanoidRootPart.CFrame
			end
		end
		if string.sub(CMDBAR.Text, 1, 7) == ("cbring ") then
			if (string.sub(CMDBAR.Text, 8)) == "all" or (string.sub(CMDBAR.Text, 8)) == "All" or (string.sub(CMDBAR.Text, 8)) == "ALL" then
				cbringall = true
			else
				for i,v in pairs(GetPlayer(string.sub(CMDBAR.Text, 8))) do
					brplr = v.Name
				end
			end
			cbring = true
		end
		if string.sub(CMDBAR.Text, 1, 8) == ("uncbring") then
			cbring = false
			cbringall = false
		end
		if string.sub(CMDBAR.Text, 1, 5) == ("swap ") then
			for i,v in pairs(GetPlayer(string.sub(CMDBAR.Text, 6))) do
				local NOWPLR = game:GetService("Players")[v.Name].Character.HumanoidRootPart.CFrame
				local NOW = lplayer.Character.HumanoidRootPart.CFrame
				lplayer.Character.Humanoid.Name = 1
				local l = lplayer.Character["1"]:Clone()
				l.Parent = lplayer.Character
				l.Name = "Humanoid"
				wait(0.1)
				lplayer.Character["1"]:Destroy()
				game:GetService("Workspace").CurrentCamera.CameraSubject = lplayer.Character
				lplayer.Character.Animate.Disabled = true
				wait(0.1)
				lplayer.Character.Animate.Disabled = false
				lplayer.Character.Humanoid.DisplayDistanceType = "None"
				for i,v in pairs(game:GetService'Players'.LocalPlayer.Backpack:GetChildren())do
				lplayer.Character.Humanoid:EquipTool(v)
				end
				local function tp(player,player2)
				local char1,char2=player.Character,player2.Character
				if char1 and char2 then
				char1:MoveTo(char2.Head.Position)
				end
				end
				wait(0.1)
				lplayer.Character.HumanoidRootPart.CFrame = game:GetService("Players")[v.Name].Character.HumanoidRootPart.CFrame
				wait(0.2)
				lplayer.Character.HumanoidRootPart.CFrame = game:GetService("Players")[v.Name].Character.HumanoidRootPart.CFrame
				wait(0.5)
				lplayer.Character.HumanoidRootPart.CFrame = NOW
				wait(0.6)
				tp(lplayer, game:GetService("Players")[v.Name])
				wait(0.4)
				lplayer.Character.HumanoidRootPart.CFrame = NOWPLR
				game:GetService("StarterGui"):SetCore("SendNotification", {
				Title = "Tools needed!";
				Text = "You need a tool in your backpack for this command!";
				})
			end
		end
		if string.sub(CMDBAR.Text, 1, 7) == ("glitch ") then
			for i,v in pairs(GetPlayer(string.sub(CMDBAR.Text, 8))) do
				lplayer.Character.Humanoid.Name = 1
				local l = lplayer.Character["1"]:Clone()
				l.Parent = lplayer.Character
				l.Name = "Humanoid"
				wait(0.1)
				lplayer.Character["1"]:Destroy()
				game:GetService("Workspace").CurrentCamera.CameraSubject = lplayer.Character
				lplayer.Character.Animate.Disabled = true
				wait(0.1)
				lplayer.Character.Animate.Disabled = false
				lplayer.Character.Humanoid.DisplayDistanceType = "None"
				for i,v in pairs(game:GetService'Players'.LocalPlayer.Backpack:GetChildren())do
				lplayer.Character.Humanoid:EquipTool(v)
				end
				lplayer.Character.HumanoidRootPart.CFrame = game:GetService("Players")[v.Name].Character["Left Arm"].CFrame
				wait(0.3)
				lplayer.Character.HumanoidRootPart.CFrame = game:GetService("Players")[v.Name].Character["Left Arm"].CFrame
				wait(0.4)
				b = Instance.new("BodyForce")
				b.Parent = lplayer.Character.HumanoidRootPart
				b.Name = "Glitch"
				b.Force = Vector3.new(100000000,5000,0)
				game:GetService("StarterGui"):SetCore("SendNotification", {
				Title = "Tools needed!";
				Text = "You need a tool in your backpack for this command!";
				})
			end
		end
		if string.sub(CMDBAR.Text, 1, 8) == ("unglitch") then
			lplayer.Character.HumanoidRootPart.Glitch:Destroy()
			lplayer.Character.HumanoidRootPart.CFrame = CFrame.new(10000,0,10000)
			b = Instance.new("BodyForce")
			b.Parent = lplayer.Character.HumanoidRootPart
			b.Name = "unGlitch"
			b.Force = Vector3.new(0,-5000000,0)
			wait(2)
			lplayer.Character.HumanoidRootPart.unGlitch:Destroy()
		end
		if string.sub(CMDBAR.Text, 1, 8) == ("grespawn") then
			lplayer.Character.Humanoid.Health = 0
			wait(1)
			lplayer.Character.Head.CFrame = CFrame.new(1000000,0,1000000)
			lplayer.Character.Torso.CFrame = CFrame.new(1000000,0,1000000)
		end
		if string.sub(CMDBAR.Text, 1, 8) == ("explorer") then
			loadstring(game:GetObjects("rbxassetid://492005721")[1].Source)()
			game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Success!";
			Text = "DEX Explorer has loaded.";
			})
		end
		if string.sub(CMDBAR.Text, 1, 5) == ("anim ") then
			local Anim = Instance.new("Animation")
			Anim.AnimationId = "rbxassetid://"..(string.sub(CMDBAR.Text, 6))
			local track = lplayer.Character.Humanoid:LoadAnimation(Anim)
			track:Play(.1, 1, 1)
		end
		if string.sub(CMDBAR.Text, 1, 7) == ("animgui") then
			loadstring(game:GetObjects("rbxassetid://1202558084")[1].Source)()
			game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Success!";
			Text = "Energize Animations GUI has loaded.";
			})
		end
		if string.sub(CMDBAR.Text, 1, 7) == ("savepos") then
			saved = lplayer.Character.HumanoidRootPart.CFrame
			game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Position Saved";
			Text = "Use ;loadpos to return to saved position.";
			})
		end
		if string.sub(CMDBAR.Text, 1, 7) == ("loadpos") then
			lplayer.Character.HumanoidRootPart.CFrame = saved
		end
		if string.sub(CMDBAR.Text, 1, 5) == ("bang ") then
			for i,v in pairs(GetPlayer(string.sub(CMDBAR.Text, 6))) do
				local Anim2 = Instance.new("Animation")
				Anim2.AnimationId = "rbxassetid://148840371"
				local track2 = lplayer.Character.Humanoid:LoadAnimation(Anim2)
				track2:Play(.1, 1, 1)
				bplrr = v.Name
				banpl = true
			end
		end
		if string.sub(CMDBAR.Text, 1, 6) == ("unbang") then
			banpl = false
		end
		if string.sub(CMDBAR.Text, 1, 9) == ("bringmod ") then
			local function bringmodw()
			for i,obj in ipairs(game:GetService("Workspace"):GetDescendants()) do
			if obj.Name == (string.sub(CMDBAR.Text, 10)) then
			for i,ch in pairs(obj:GetDescendants()) do
			if (ch:IsA("BasePart")) then
			ch.CFrame = lplayer.Character.HumanoidRootPart.CFrame
			ch.CanCollide = false
			ch.Transparency = 0.7
			wait()
			ch.CFrame = lplayer.Character["Left Leg"].CFrame
			wait()
			ch.CFrame = lplayer.Character["Right Leg"].CFrame
			wait()
			ch.CFrame = lplayer.Character["Head"].CFrame
			end
			end
			end
			end
			end
			while wait() do
				bringmodw()
			end
			game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "BringMod";
			Text = "BringMod enabled.";
			})
		end
		if string.sub(CMDBAR.Text, 1, 7) == ("respawn") then
			local mod = Instance.new('Model', workspace) mod.Name = 're '..lplayer.Name
			local hum = Instance.new('Humanoid', mod)
			local ins = Instance.new('Part', mod) ins.Name = 'Torso' ins.CanCollide = false ins.Transparency = 1
			lplayer.Character = mod
		end
		if string.sub(CMDBAR.Text, 1, 8) == ("shutdown") then
			game:GetService'RunService'.Stepped:Connect(function()
			pcall(function()
			    for i,v in pairs(game:GetService'Players':GetPlayers()) do
			        if v.Character ~= nil and v.Character:FindFirstChild'Head' then
			            for _,x in pairs(v.Character.Head:GetChildren()) do
			                if x:IsA'Sound' then x.Playing = true x.CharacterSoundEvent:FireServer(true, true) end
			            end
			        end
			    end
			end)
			end)
			game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Attempting Shutdown";
			Text = "Shutdown Attempt has begun.";
			})
		end
		if string.sub(CMDBAR.Text, 1, 7) == ("delobj ") then
			objtodel = (string.sub(CMDBAR.Text, 8))
			for i,v in pairs(game:GetService("Workspace"):GetDescendants()) do
				if v.Name == objtodel then
					v:Destroy()
				end
			end
		end
		if string.sub(CMDBAR.Text, 1, 7) == ("getplrs") then
			for i,v in pairs(game:GetService("Players"):GetPlayers())do
				print(v)
			end
			game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Printed";
			Text = "Players have been printed to console. (F9)";
			})
		end
		if string.sub(CMDBAR.Text, 1, 8) == ("deldecal") then
			for i,v in pairs(game:GetService("Workspace"):GetDescendants())do
				if (v:IsA("Decal")) then
					v:Destroy()
				end
			end
		end
		if string.sub(CMDBAR.Text, 1, 10) == ("opfinality") then
			loadstring(game:GetObjects("rbxassetid://1294358929")[1].Source)()
			game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Success!";
			Text = "OpFinality GUI has loaded.";
			})
		end
		if string.sub(CMDBAR.Text, 1, 7) == ("remotes") then
			remotes = true
			added = true
			game.DescendantAdded:connect(function(rmt)
			if added == true then
			if remotes == true then 
			if rmt:IsA("RemoteEvent") then
			print("A RemoteEvent was added!")
			print(" game." .. rmt:GetFullName() .. " | RemoteEvent")
			print(" game." .. rmt:GetFullName() .. " | RemoteEvent", 247, 0, 0, true)
			end end end
			end)
			game.DescendantAdded:connect(function(rmtfnctn)
			if added == true then
			if remotes == true then 
			if rmtfnctn:IsA("RemoteFunction") then
			warn("A RemoteFunction was added!")
			warn(" game." .. rmtfnctn:GetFullName() .. " | RemoteFunction")
			print(" game." .. rmtfnctn:GetFullName() .. " | RemoteFunction", 5, 102, 198, true)
			end end end
			end)
			
			game.DescendantAdded:connect(function(bndfnctn)
			if added == true then
			if binds == true then 
			if bndfnctn:IsA("BindableFunction") then
			print("A BindableFunction was added!")
			print(" game." .. bndfnctn:GetFullName() .. " | BindableFunction")
			print(" game." .. bndfnctn:GetFullName() .. " | BindableFunction", 239, 247, 4, true)
			end end end
			end)
			
			game.DescendantAdded:connect(function(bnd)
			if added == true then
			if binds == true then 
			if bnd:IsA("BindableEvent") then
			warn("A BindableEvent was added!")
			warn(" game." .. bnd:GetFullName() .. " | BindableEvent")
			print(" game." .. bnd:GetFullName() .. " | BindableEvent", 13, 193, 22, true)
			end end end
			end)
			
			
			if binds == true then
			for i,v in pairs(game:GetDescendants()) do
			if v:IsA("BindableFunction") then
			print(" game." .. v:GetFullName() .. " | BindableFunction")
			print(" game." .. v:GetFullName() .. " | BindableFunction", 239, 247, 4, true)
			end end
			for i,v in pairs(game:GetDescendants()) do
			if v:IsA("BindableEvent") then
			warn(" game." .. v:GetFullName() .. " | BindableEvent")
			print(" game." .. v:GetFullName() .. " | BindableEvent", 13, 193, 22, true)
			end end
			else
			print("Off")
			end
			if remotes == true then
			for i,v in pairs(game:GetDescendants()) do
			if v:IsA("RemoteFunction") then
			warn(" game." .. v:GetFullName() .. " | RemoteFunction")
			print(" game." .. v:GetFullName() .. " | RemoteFunction", 5, 102, 198, true)
			end end
			wait()
			for i,v in pairs(game:GetDescendants()) do
			if v:IsA("RemoteEvent") then
			print(" game." .. v:GetFullName() .. " | RemoteEvent")
			print(" game." .. v:GetFullName() .. " | RemoteEvent", 247, 0, 0, true)
			end end
			else
			print("Off")
			end
			game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Printing Remotes";
			Text = "Type ;noremotes to disable.";
			})
		end
		if string.sub(CMDBAR.Text, 1, 9) == ("noremotes") then
			remotes = false
			added = false
			game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Printing Remotes Disabled";
			Text = "Type ;remotes to enable.";
			})
		end
		if string.sub(CMDBAR.Text, 1, 9) == ("tpdefault") then
			spin = false
			followed = false
			traill = false
			noclip = false
			annoying = false
			hwalk = false
			cbringing = false
		end
		if string.sub(CMDBAR.Text, 1, 7) == ("stopsit") then
			stopsitting = true
		end
		if string.sub(CMDBAR.Text, 1, 5) == ("gosit") then
			stopsitting = false
		end
		if string.sub(CMDBAR.Text, 1, 7) == ("version") then
			print(adminversion)
			game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Version";
			Text = adminversion;
			})
		end
		if string.sub(CMDBAR.Text, 1, 7) == ("clicktp") then
			clickgoto = true
			game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Click TP";
			Text = "Press E to teleport to mouse position";
			})
		end
		if string.sub(CMDBAR.Text, 1, 9) == ("noclicktp") then
			clickgoto = false
			game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Click TP";
			Text = "Click TP has been disabled.";
			})
		end
		if string.sub(CMDBAR.Text, 1, 7) == ("toolson") then
			gettingtools = true
			game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Tools Enabled";
			Text = "Automatically colleting tools dropped.";
			})
		end
		if string.sub(CMDBAR.Text, 1, 8) == ("toolsoff") then
			gettingtools = false
			game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Tools Disabled";
			Text = "Click TP has been disabled.";
			})
		end
		if string.sub(CMDBAR.Text, 1, 9) == ("delcmdbar") then
			ScreenGui:Destroy()
		end
		if string.sub(CMDBAR.Text, 1, 5) == ("reset") then
			lplayer.Character.Head:Destroy()
		end
		if string.sub(CMDBAR.Text, 1, 6) == ("state ") then
			statechosen = string.sub(CMDBAR.Text, 7)
			changingstate = true
		end
		if string.sub(CMDBAR.Text, 1, 8) == ("gravity ") then
			game:GetService("Workspace").Gravity = string.sub(CMDBAR.Text, 9)
		end
		if string.sub(CMDBAR.Text, 1, 9) == ("looprhats") then
		removingmeshhats = true
		end
		if string.sub(CMDBAR.Text, 1, 11) == ("unlooprhats") then
			removingmeshhats = false
		end
		if string.sub(CMDBAR.Text, 1, 9) == ("looprtool") then
			removingmeshtool = true
		end
		if string.sub(CMDBAR.Text, 1, 11) == ("unlooprtool") then
			removingmeshtool = false
		end
		if string.sub(CMDBAR.Text, 1, 9) == ("givetool ") then
			for i,v in pairs(game:GetService("Players").LocalPlayer.Character:GetDescendants()) do
				if v:IsA("Tool") then
					for i,player in pairs(GetPlayer(string.sub(CMDBAR.Text, 10))) do
						v.Parent = player.Character
					end
				end
			end
		end
		if string.sub(CMDBAR.Text, 1, 4) == ("age ") then
			for i,player in pairs(GetPlayer(string.sub(CMDBAR.Text, 5))) do
				game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(player.Name.." Account Age: "..player.AccountAge.." days!", "All")
			end
		end
		if string.sub(CMDBAR.Text, 1, 3) == ("id ") then
			for i,player in pairs(GetPlayer(string.sub(CMDBAR.Text, 4))) do
				game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(player.Name.." Account ID: "..player.UserId, "All")
			end
		end
		if string.sub(CMDBAR.Text, 1, 5) == (".age ") then
			for i,player in pairs(GetPlayer(string.sub(CMDBAR.Text, 6))) do
				game:GetService("StarterGui"):SetCore("SendNotification", {
				Title = player.AccountAge.." Days";
				Text = "Account age of "..player.Name;
				})
			end
		end
		if string.sub(CMDBAR.Text, 1, 4) == (".id ") then
			for i,player in pairs(GetPlayer(string.sub(CMDBAR.Text, 5))) do
				game:GetService("StarterGui"):SetCore("SendNotification", {
				Title = player.UserId.." ID";
				Text = "Account ID of "..player.Name;
				})
			end
		end
		if string.sub(CMDBAR.Text, 1, 6) == ("gameid") then
			game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Game ID";
			Text = "Game ID: ".. game.GameId;
			})
		end
		if string.sub(CMDBAR.Text, 1, 3) == ("pgs") then
			local pgscheck = game:GetService("Workspace"):PGSIsEnabled()
			if pgscheck == true then
				game:GetService("StarterGui"):SetCore("SendNotification", {
				Title = "PGSPhysicsSolverEnabled";
				Text = "PGS is Enabled!";
				})
			else
				game:GetService("StarterGui"):SetCore("SendNotification", {
				Title = "PGSPhysicsSolverEnabled";
				Text = "PGS is Disabled!";
				})
			end
		end
		if string.sub(CMDBAR.Text, 1, 11) == ("removeinvis") then
			for i,v in pairs(game:GetService("Workspace"):GetDescendants()) do
				if v:IsA("Part") then
					if v.Transparency == 1 then
						if v.Name ~= "HumanoidRootPart" then
							v:Destroy()
						end
					end
				end
			end
		end
		if string.sub(CMDBAR.Text, 1, 9) == ("removefog") then
			game:GetService("Lighting").FogStart = 0
			game:GetService("Lighting").FogEnd = 9999999999999
		end
		if string.sub(CMDBAR.Text, 1, 7) == ("disable") then
			lplayer.Character.Humanoid.Parent = lplayer
		end
		if string.sub(CMDBAR.Text, 1, 6) == ("enable") then
			lplayer.Humanoid.Parent = lplayer.Character
		end
		if string.sub(CMDBAR.Text, 1, 13) == ("givealltools ") then
			for i,v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetDescendants()) do
				if v:IsA("Tool") then
					v.Parent = lplayer.Character
					wait()
					for i,player in pairs(GetPlayer(string.sub(CMDBAR.Text, 14))) do
						v.Parent = player.Character
					end
				end
			end
		end
		if string.sub(CMDBAR.Text, 1, 9) == ("flyspeed ") then
			speedfly = string.sub(CMDBAR.Text, 10)
			wait()
			change()
		end
		if string.sub(CMDBAR.Text, 1, 7) == ("carpet ") then
			for i,v in pairs(GetPlayer(string.sub(CMDBAR.Text, 8))) do
				local Anim3 = Instance.new("Animation")
				Anim3.AnimationId = "rbxassetid://282574440"
				local track3 = lplayer.Character.Humanoid:LoadAnimation(Anim3)
				track3:Play(.1, 1, 1)
				bplrr = v.Name
				banpl = true
			end
		end
		if string.sub(CMDBAR.Text, 1, 8) == ("uncarpet") then
			banpl = false
		end
		if string.sub(CMDBAR.Text, 1, 6) == ("stare ") then
			for i,v in pairs(GetPlayer(string.sub(CMDBAR.Text, 7))) do
				staring = true
				stareplr = v
			end
		end
		if string.sub(CMDBAR.Text, 1, 7) == ("unstare") then
			staring = false
		end
		if string.sub(CMDBAR.Text, 1, 7) == ("logchat") then
			chatlogs = true
			game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "LogChat enabled";
			Text = "Now logging all player chat.";
			})
		end
		if string.sub(CMDBAR.Text, 1, 9) == ("unlogchat") then
			chatlogs = false
			game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "LogChat disabled";
			Text = "Stopped logging all player chat.";
			})
		end
		if string.sub(CMDBAR.Text, 1, 6) == ("fixcam") then
			game:GetService("Workspace").CurrentCamera:Destroy()
			wait(0.1)
			game:GetService("Workspace").CurrentCamera.CameraSubject = lplayer.Character.Humanoid
			game:GetService("Workspace").CurrentCamera.CameraType = "Custom"
			lplayer.CameraMinZoomDistance = 0.5
			lplayer.CameraMaxZoomDistance = 400
			lplayer.CameraMode = "Classic"
		end
		if string.sub(CMDBAR.Text, 1, 7) == ("unstate") then
			changingstate = false
		end
		CMDBAR.Text = ""
	end
end)

wait(0.3)
game:GetService("StarterGui"):SetCore("SendNotification", {
	Title = "Loaded successfully!";
	Text = "Reviz Admin V2 by illremember";
})
wait(0.1)
print("Reviz Admin V2 loaded!")
if game:GetService("Workspace").FilteringEnabled == true then
	warn("FE is Enabled (Filtering Enabled)")
	game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "FE is Enabled";
		Text = "Filtering Enabled. Enjoy using Reviz Admin!";
	})
else
	warn("FE is Disabled (Filtering Disabled) Consider using a different admin script.")
	game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "FE is Disabled";
		Text = "Filtering Disabled. Consider using a different admin script.";
	})
end

local intro = Instance.new("ScreenGui")
local Frame = Instance.new("Frame")
local ImageLabel = Instance.new("ImageLabel")
intro.Parent = game:GetService("CoreGui")
Frame.Parent = intro
Frame.BackgroundColor3 = Color3.new(1, 1, 1)
Frame.BackgroundTransparency = 1
Frame.Size = UDim2.new(1, 0, 0, 300)
Frame.Position = UDim2.new(0, 0, -0.4, 0)
ImageLabel.Parent = Frame
ImageLabel.BackgroundColor3 = Color3.new(1, 1, 1)
ImageLabel.BackgroundTransparency = 1
ImageLabel.Position = UDim2.new(0, 0, 0, 0)
ImageLabel.Size = UDim2.new(1, 0, 1, 0)
ImageLabel.Image = "http://www.roblox.com/asset/?id=1542162618"
Frame:TweenPosition(UDim2.new(0, 0, 0.2, 0), "Out", "Elastic", 3)
wait(3.01)
Frame:TweenPosition(UDim2.new(0, 0, 1.5, 0), "Out", "Elastic", 5)
wait(5.01)
intro:Destroy()
end)

Section5:NewButton("Remote spy", "use this if you're a script dev", function()
--Made By Kurokku/Rebug REX--
--Settings:

local RemoteIgnores = {
	["RemoteFunction"] = false;
	["RemoteEvent"] = false;
	["BindableFunction"] = false;
	["BindableEvent"] = false;
}

------------------------------------------

local MrSpyV2RebugKurokkusGhost = Instance.new("ScreenGui")
local Hub = Instance.new("TextButton")
local Main = Instance.new("Frame")
local BG = Instance.new("ImageLabel")
local ShadowHolder = Instance.new("Frame")
local Shadow = Instance.new("ImageLabel")
local Shadow_2 = Instance.new("ImageLabel")
local Shadow_3 = Instance.new("ImageLabel")
local Animate = Instance.new("Frame")
local Texture = Instance.new("ImageLabel")
local Texture2 = Instance.new("ImageLabel")
local Texture3 = Instance.new("ImageLabel")
local Texture4 = Instance.new("ImageLabel")
local TabsFolder = Instance.new("Frame")
local Output = Instance.new("Frame")
local OutputWindow = Instance.new("ScrollingFrame")
local R2S = Instance.new("Frame")
local Warning = Instance.new("Frame")
local Logo = Instance.new("ImageLabel")
local Shadow_4 = Instance.new("ImageLabel")
local Shadow_5 = Instance.new("ImageLabel")
local Shadow_6 = Instance.new("ImageLabel")
local WarningLabel = Instance.new("TextLabel")
local Shadow_7 = Instance.new("TextLabel")
local Shadow_8 = Instance.new("TextLabel")
local Shadow_9 = Instance.new("TextLabel")
local Window = Instance.new("Frame")
local ScriptWindow = Instance.new("ScrollingFrame")
local RemoteScript = Instance.new("TextLabel")
local CopyClip = Instance.new("TextButton")
local Shadow_10 = Instance.new("Frame")
local Shadow_11 = Instance.new("Frame")
local Shadow_12 = Instance.new("Frame")
local CopyText = Instance.new("TextLabel")
local BG_2 = Instance.new("TextLabel")
local BG_3 = Instance.new("TextLabel")
local BG_4 = Instance.new("TextLabel")
local Remotes = Instance.new("ScrollingFrame")
local Explorer = Instance.new("Frame")
local Warning_2 = Instance.new("Frame")
local Logo_2 = Instance.new("ImageLabel")
local Shadow_13 = Instance.new("ImageLabel")
local Shadow_14 = Instance.new("ImageLabel")
local Shadow_15 = Instance.new("ImageLabel")
local WarningLabel_2 = Instance.new("TextLabel")
local Shadow_16 = Instance.new("TextLabel")
local Shadow_17 = Instance.new("TextLabel")
local Shadow_18 = Instance.new("TextLabel")
local Window_2 = Instance.new("Frame")
local ExplorerWindow = Instance.new("ScrollingFrame")
local Shadow_19 = Instance.new("Frame")
local Shadow_20 = Instance.new("Frame")
local Shadow_21 = Instance.new("Frame")
local Shadow_22 = Instance.new("Frame")
local Title = Instance.new("TextLabel")
local Credits = Instance.new("TextLabel")
local Icon = Instance.new("ImageLabel")
local Exit = Instance.new("ImageButton")
local ShadowHolder_2 = Instance.new("Frame")
local Shadow_23 = Instance.new("ImageLabel")
local Shadow_24 = Instance.new("ImageLabel")
local Shadow_25 = Instance.new("ImageLabel")
local Tabs = Instance.new("Frame")
local TabLine = Instance.new("Frame")
local Remotes_2 = Instance.new("TextButton")
local Spys = Instance.new("Frame")
local Spyer = Instance.new("ImageButton")
local Shadow_26 = Instance.new("ImageLabel")
local Shadow_27 = Instance.new("ImageLabel")
local Shadow_28 = Instance.new("ImageLabel")
local Words = Instance.new("TextLabel")
local Output_2 = Instance.new("TextButton")
local ClearHolder = Instance.new("Frame")
local Clear = Instance.new("ImageButton")
local Shadow_29 = Instance.new("ImageLabel")
local Shadow_30 = Instance.new("ImageLabel")
local Shadow_31 = Instance.new("ImageLabel")
local TextLabel = Instance.new("TextLabel")
local Explorer_2 = Instance.new("TextButton")
local R2S_2 = Instance.new("TextButton")
local Holder = Instance.new("Frame")
local Icon_2 = Instance.new("Frame")
local IconMap = Instance.new("ImageLabel")
local RemoteGrid = Instance.new("UIGridLayout")
local RemoteTemplate = Instance.new("Frame")
local Icon_3 = Instance.new("Frame")
local IconMap_2 = Instance.new("ImageLabel")
local RemoteName = Instance.new("TextLabel")
local Spy = Instance.new("TextButton")
local Shadow_32 = Instance.new("Frame")
local Shadow_33 = Instance.new("Frame")
local Shadow_34 = Instance.new("Frame")
local View = Instance.new("TextButton")
local Shadow_35 = Instance.new("Frame")
local Shadow_36 = Instance.new("Frame")
local Shadow_37 = Instance.new("Frame")
local ExplorerTemplate = Instance.new("Frame")
local Arrow = Instance.new("Frame")
local Open = Instance.new("TextButton")
local IconMap_3 = Instance.new("ImageLabel")
local Icon_4 = Instance.new("Frame")
local IconMap_4 = Instance.new("ImageLabel")
local InstanceName = Instance.new("TextLabel")
local Open_2 = Instance.new("TextButton")
local Holder_2 = Instance.new("Frame")
local BG_5 = Instance.new("Frame")
local RemoteOutputTemplate = Instance.new("Frame")
local Icon_5 = Instance.new("Frame")
local IconMap_5 = Instance.new("ImageLabel")
local RemoteName_2 = Instance.new("TextLabel")
local R2S_3 = Instance.new("TextButton")
local Shadow_38 = Instance.new("Frame")
local Shadow_39 = Instance.new("Frame")
local Shadow_40 = Instance.new("Frame")
--Properties:
MrSpyV2RebugKurokkusGhost.Name = "Mr.Spy V2 - Rebug/KurokkusGhost"
MrSpyV2RebugKurokkusGhost.Parent = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")
MrSpyV2RebugKurokkusGhost.ResetOnSpawn = false

Hub.Name = "Hub"
Hub.Parent = MrSpyV2RebugKurokkusGhost
Hub.AnchorPoint = Vector2.new(0.5, 0.5)
Hub.BackgroundColor3 = Color3.new(0.156863, 0.156863, 0.156863)
Hub.BorderSizePixel = 0
Hub.Position = UDim2.new(0.5, 0, 0.349999994, 0)
Hub.Size = UDim2.new(0, 550, 0, 50)
Hub.ZIndex = 10
Hub.AutoButtonColor = false
Hub.Font = Enum.Font.SourceSans
Hub.Text = ""
Hub.TextColor3 = Color3.new(0, 0, 0)
Hub.TextSize = 14

Main.Name = "Main"
Main.Parent = Hub
Main.BackgroundColor3 = Color3.new(0.137255, 0.137255, 0.137255)
Main.BackgroundTransparency = 1
Main.BorderSizePixel = 0
Main.Position = UDim2.new(0, 0, 1, 0)
Main.Size = UDim2.new(1, 50, 0, 300)
Main.ZIndex = 5

BG.Name = "BG"
BG.Parent = Main
BG.BackgroundColor3 = Color3.new(0.137255, 0.137255, 0.137255)
BG.BackgroundTransparency = 1
BG.Position = UDim2.new(0, 0, 0, -25)
BG.Size = UDim2.new(1, 0, 1, 25)
BG.ZIndex = 5
BG.Image = "rbxassetid://2052866575"
BG.ImageColor3 = Color3.new(0.137255, 0.137255, 0.137255)
BG.ScaleType = Enum.ScaleType.Slice
BG.SliceCenter = Rect.new(8, 8, 8, 8)

ShadowHolder.Name = "ShadowHolder"
ShadowHolder.Parent = BG
ShadowHolder.BackgroundColor3 = Color3.new(1, 1, 1)
ShadowHolder.BackgroundTransparency = 1
ShadowHolder.ClipsDescendants = true
ShadowHolder.Position = UDim2.new(0, 0, 0, 25)
ShadowHolder.Size = UDim2.new(1, 100, 1, 100)

Shadow.Name = "Shadow"
Shadow.Parent = ShadowHolder
Shadow.BackgroundColor3 = Color3.new(0.137255, 0.137255, 0.137255)
Shadow.BackgroundTransparency = 1
Shadow.Position = UDim2.new(0, 1, 0, -24)
Shadow.Size = UDim2.new(1, -100, 1, -100)
Shadow.ZIndex = 4
Shadow.Image = "rbxassetid://2052866575"
Shadow.ImageColor3 = Color3.new(0, 0, 0)
Shadow.ImageTransparency = 0.85000002384186
Shadow.ScaleType = Enum.ScaleType.Slice
Shadow.SliceCenter = Rect.new(8, 8, 8, 8)

Shadow_2.Name = "Shadow"
Shadow_2.Parent = ShadowHolder
Shadow_2.BackgroundColor3 = Color3.new(0.137255, 0.137255, 0.137255)
Shadow_2.BackgroundTransparency = 1
Shadow_2.Position = UDim2.new(0, 2, 0, -23)
Shadow_2.Size = UDim2.new(1, -100, 1, -100)
Shadow_2.ZIndex = 4
Shadow_2.Image = "rbxassetid://2052866575"
Shadow_2.ImageColor3 = Color3.new(0, 0, 0)
Shadow_2.ImageTransparency = 0.85000002384186
Shadow_2.ScaleType = Enum.ScaleType.Slice
Shadow_2.SliceCenter = Rect.new(8, 8, 8, 8)

Shadow_3.Name = "Shadow"
Shadow_3.Parent = ShadowHolder
Shadow_3.BackgroundColor3 = Color3.new(0.137255, 0.137255, 0.137255)
Shadow_3.BackgroundTransparency = 1
Shadow_3.Position = UDim2.new(0, 3, 0, -22)
Shadow_3.Size = UDim2.new(1, -100, 1, -100)
Shadow_3.ZIndex = 4
Shadow_3.Image = "rbxassetid://2052866575"
Shadow_3.ImageColor3 = Color3.new(0, 0, 0)
Shadow_3.ImageTransparency = 0.85000002384186
Shadow_3.ScaleType = Enum.ScaleType.Slice
Shadow_3.SliceCenter = Rect.new(8, 8, 8, 8)

Animate.Name = "Animate"
Animate.Parent = Main
Animate.BackgroundColor3 = Color3.new(0.156863, 0.176471, 0.184314)
Animate.BackgroundTransparency = 1
Animate.BorderSizePixel = 0
Animate.ClipsDescendants = true
Animate.Size = UDim2.new(1, 0, 1, 0)

Texture.Name = "Texture"
Texture.Parent = Animate
Texture.BackgroundColor3 = Color3.new(1, 1, 1)
Texture.BackgroundTransparency = 1
Texture.BorderSizePixel = 0
Texture.Position = UDim2.new(0.00333333341, 0, 0.00999999978, 0)
Texture.Size = UDim2.new(2, 0, 2, 0)
Texture.ZIndex = 6
Texture.Image = "rbxassetid://922275274"
Texture.ImageColor3 = Color3.new(0.0784314, 0.0784314, 0.0784314)
Texture.ImageTransparency = 0.5
Texture.ScaleType = Enum.ScaleType.Tile
Texture.TileSize = UDim2.new(0, 50, 0, 50)

Texture2.Name = "Texture2"
Texture2.Parent = Animate
Texture2.BackgroundColor3 = Color3.new(1, 1, 1)
Texture2.BackgroundTransparency = 1
Texture2.BorderSizePixel = 0
Texture2.Position = UDim2.new(2, 0, 2, 0)
Texture2.Size = UDim2.new(2, 0, 2, 0)
Texture2.ZIndex = 6
Texture2.Image = "rbxassetid://922275274"
Texture2.ImageColor3 = Color3.new(0.0784314, 0.0784314, 0.0784314)
Texture2.ImageTransparency = 0.5
Texture2.ScaleType = Enum.ScaleType.Tile
Texture2.TileSize = UDim2.new(0, 50, 0, 50)

Texture3.Name = "Texture3"
Texture3.Parent = Animate
Texture3.BackgroundColor3 = Color3.new(1, 1, 1)
Texture3.BackgroundTransparency = 1
Texture3.BorderSizePixel = 0
Texture3.Position = UDim2.new(0, 0, 2, 0)
Texture3.Size = UDim2.new(2, 0, 2, 0)
Texture3.ZIndex = 6
Texture3.Image = "rbxassetid://922275274"
Texture3.ImageColor3 = Color3.new(0.0784314, 0.0784314, 0.0784314)
Texture3.ImageTransparency = 0.5
Texture3.ScaleType = Enum.ScaleType.Tile
Texture3.TileSize = UDim2.new(0, 50, 0, 50)

Texture4.Name = "Texture4"
Texture4.Parent = Animate
Texture4.BackgroundColor3 = Color3.new(1, 1, 1)
Texture4.BackgroundTransparency = 1
Texture4.BorderSizePixel = 0
Texture4.Position = UDim2.new(2, 0, 0, 0)
Texture4.Size = UDim2.new(2, 0, 2, 0)
Texture4.ZIndex = 6
Texture4.Image = "rbxassetid://922275274"
Texture4.ImageColor3 = Color3.new(0.0784314, 0.0784314, 0.0784314)
Texture4.ImageTransparency = 0.5
Texture4.ScaleType = Enum.ScaleType.Tile
Texture4.TileSize = UDim2.new(0, 50, 0, 50)

TabsFolder.Name = "TabsFolder"
TabsFolder.Parent = Main
TabsFolder.BackgroundColor3 = Color3.new(1, 1, 1)
TabsFolder.BackgroundTransparency = 1
TabsFolder.ClipsDescendants = true
TabsFolder.Size = UDim2.new(1, 0, 1, 0)

Output.Name = "Output"
Output.Parent = TabsFolder
Output.BackgroundColor3 = Color3.new(1, 1, 1)
Output.BackgroundTransparency = 1
Output.Position = UDim2.new(1, 0, 0, 0)
Output.Size = UDim2.new(1, 0, 1, 0)

OutputWindow.Name = "OutputWindow"
OutputWindow.Parent = Output
OutputWindow.BackgroundColor3 = Color3.new(1, 1, 1)
OutputWindow.BackgroundTransparency = 1
OutputWindow.BorderSizePixel = 0
OutputWindow.Size = UDim2.new(1, 0, 1, 0)
OutputWindow.ZIndex = 7
OutputWindow.BottomImage = "rbxassetid://2504831909"
OutputWindow.CanvasSize = UDim2.new(0, 0, 0, 0)
OutputWindow.MidImage = "rbxassetid://2504831909"
OutputWindow.ScrollBarThickness = 6
OutputWindow.TopImage = "rbxassetid://2504831909"

R2S.Name = "R2S"
R2S.Parent = TabsFolder
R2S.BackgroundColor3 = Color3.new(1, 1, 1)
R2S.BackgroundTransparency = 1
R2S.Position = UDim2.new(3, 0, 0, 0)
R2S.Size = UDim2.new(1, 0, 1, 0)

Warning.Name = "Warning"
Warning.Parent = R2S
Warning.BackgroundColor3 = Color3.new(1, 1, 1)
Warning.BackgroundTransparency = 1
Warning.Size = UDim2.new(1, 0, 1, 0)

Logo.Name = "Logo"
Logo.Parent = Warning
Logo.AnchorPoint = Vector2.new(0.5, 0)
Logo.BackgroundColor3 = Color3.new(1, 1, 1)
Logo.BackgroundTransparency = 1
Logo.Position = UDim2.new(0.5, 0, 0.125, 0)
Logo.Size = UDim2.new(0, 150, 0, 150)
Logo.ZIndex = 7
Logo.Image = "rbxassetid://2512823206"

Shadow_4.Name = "Shadow"
Shadow_4.Parent = Logo
Shadow_4.BackgroundColor3 = Color3.new(1, 1, 1)
Shadow_4.BackgroundTransparency = 1
Shadow_4.Position = UDim2.new(0, 1, 0, 1)
Shadow_4.Size = UDim2.new(1, 0, 1, 0)
Shadow_4.ZIndex = 6
Shadow_4.Image = "rbxassetid://2512823206"
Shadow_4.ImageColor3 = Color3.new(0, 0, 0)
Shadow_4.ImageTransparency = 0.80000001192093

Shadow_5.Name = "Shadow"
Shadow_5.Parent = Logo
Shadow_5.BackgroundColor3 = Color3.new(1, 1, 1)
Shadow_5.BackgroundTransparency = 1
Shadow_5.Position = UDim2.new(0, 2, 0, 2)
Shadow_5.Size = UDim2.new(1, 0, 1, 0)
Shadow_5.ZIndex = 6
Shadow_5.Image = "rbxassetid://2512823206"
Shadow_5.ImageColor3 = Color3.new(0, 0, 0)
Shadow_5.ImageTransparency = 0.80000001192093

Shadow_6.Name = "Shadow"
Shadow_6.Parent = Logo
Shadow_6.BackgroundColor3 = Color3.new(1, 1, 1)
Shadow_6.BackgroundTransparency = 1
Shadow_6.Position = UDim2.new(0, 3, 0, 3)
Shadow_6.Size = UDim2.new(1, 0, 1, 0)
Shadow_6.ZIndex = 6
Shadow_6.Image = "rbxassetid://2512823206"
Shadow_6.ImageColor3 = Color3.new(0, 0, 0)
Shadow_6.ImageTransparency = 0.80000001192093

WarningLabel.Name = "WarningLabel"
WarningLabel.Parent = Warning
WarningLabel.AnchorPoint = Vector2.new(0.5, 1)
WarningLabel.BackgroundColor3 = Color3.new(1, 1, 1)
WarningLabel.BackgroundTransparency = 1
WarningLabel.Position = UDim2.new(0.5, 0, 0.899999976, 0)
WarningLabel.Size = UDim2.new(0.800000012, 0, 0.200000003, 0)
WarningLabel.ZIndex = 7
WarningLabel.Font = Enum.Font.SourceSansBold
WarningLabel.Text = "Please make sure you have selected a remote in the output to convert into a script"
WarningLabel.TextColor3 = Color3.new(1, 0.8, 0.301961)
WarningLabel.TextScaled = true
WarningLabel.TextSize = 30
WarningLabel.TextWrapped = true

Shadow_7.Name = "Shadow"
Shadow_7.Parent = WarningLabel
Shadow_7.BackgroundColor3 = Color3.new(1, 1, 1)
Shadow_7.BackgroundTransparency = 1
Shadow_7.Position = UDim2.new(0, 1, 0, 1)
Shadow_7.Size = UDim2.new(1, 0, 1, 0)
Shadow_7.ZIndex = 6
Shadow_7.Font = Enum.Font.SourceSansBold
Shadow_7.Text = "Please make sure you have selected a remote in the output to convert into a script"
Shadow_7.TextColor3 = Color3.new(0, 0, 0)
Shadow_7.TextScaled = true
Shadow_7.TextSize = 30
Shadow_7.TextTransparency = 0.80000001192093
Shadow_7.TextWrapped = true

Shadow_8.Name = "Shadow"
Shadow_8.Parent = WarningLabel
Shadow_8.BackgroundColor3 = Color3.new(1, 1, 1)
Shadow_8.BackgroundTransparency = 1
Shadow_8.Position = UDim2.new(0, 2, 0, 2)
Shadow_8.Size = UDim2.new(1, 0, 1, 0)
Shadow_8.ZIndex = 6
Shadow_8.Font = Enum.Font.SourceSansBold
Shadow_8.Text = "Please make sure you have selected a remote in the output to convert into a script"
Shadow_8.TextColor3 = Color3.new(0, 0, 0)
Shadow_8.TextScaled = true
Shadow_8.TextSize = 30
Shadow_8.TextTransparency = 0.80000001192093
Shadow_8.TextWrapped = true

Shadow_9.Name = "Shadow"
Shadow_9.Parent = WarningLabel
Shadow_9.BackgroundColor3 = Color3.new(1, 1, 1)
Shadow_9.BackgroundTransparency = 1
Shadow_9.Position = UDim2.new(0, 3, 0, 3)
Shadow_9.Size = UDim2.new(1, 0, 1, 0)
Shadow_9.ZIndex = 6
Shadow_9.Font = Enum.Font.SourceSansBold
Shadow_9.Text = "Please make sure you have selected a remote in the output to convert into a script"
Shadow_9.TextColor3 = Color3.new(0, 0, 0)
Shadow_9.TextScaled = true
Shadow_9.TextSize = 30
Shadow_9.TextTransparency = 0.80000001192093
Shadow_9.TextWrapped = true

Window.Name = "Window"
Window.Parent = R2S
Window.BackgroundColor3 = Color3.new(1, 1, 1)
Window.BackgroundTransparency = 1
Window.Size = UDim2.new(1, 0, 1, 0)
Window.Visible = false

ScriptWindow.Name = "ScriptWindow"
ScriptWindow.Parent = Window
ScriptWindow.BackgroundColor3 = Color3.new(1, 1, 1)
ScriptWindow.BackgroundTransparency = 1
ScriptWindow.BorderSizePixel = 0
ScriptWindow.Position = UDim2.new(0, 2, 0, 0)
ScriptWindow.Size = UDim2.new(1, -2, 1, -50)
ScriptWindow.ZIndex = 7
ScriptWindow.BottomImage = "rbxassetid://2504831909"
ScriptWindow.CanvasSize = UDim2.new(0, 0, 0, 0)
ScriptWindow.MidImage = "rbxassetid://2504831909"
ScriptWindow.ScrollBarThickness = 6
ScriptWindow.TopImage = "rbxassetid://2504831909"

RemoteScript.Name = "RemoteScript"
RemoteScript.Parent = ScriptWindow
RemoteScript.BackgroundColor3 = Color3.new(1, 1, 1)
RemoteScript.BackgroundTransparency = 1
RemoteScript.Size = UDim2.new(1, 0, 1, 0)
RemoteScript.ZIndex = 7
RemoteScript.Font = Enum.Font.SourceSansSemibold
RemoteScript.Text = ""
RemoteScript.TextColor3 = Color3.new(1, 1, 1)
RemoteScript.TextSize = 16
RemoteScript.TextXAlignment = Enum.TextXAlignment.Left
RemoteScript.TextYAlignment = Enum.TextYAlignment.Top

CopyClip.Name = "CopyClip"
CopyClip.Parent = Window
CopyClip.AnchorPoint = Vector2.new(0, 1)
CopyClip.BackgroundColor3 = Color3.new(0.196078, 0.196078, 0.196078)
CopyClip.BorderSizePixel = 0
CopyClip.Position = UDim2.new(0, 10, 1, -10)
CopyClip.Size = UDim2.new(1, -20, 0, 30)
CopyClip.ZIndex = 8
CopyClip.AutoButtonColor = false
CopyClip.Font = Enum.Font.SourceSansBold
CopyClip.Text = ""
CopyClip.TextColor3 = Color3.new(1, 1, 1)
CopyClip.TextSize = 20

Shadow_10.Name = "Shadow"
Shadow_10.Parent = CopyClip
Shadow_10.BackgroundColor3 = Color3.new(0, 0, 0)
Shadow_10.BackgroundTransparency = 0.80000001192093
Shadow_10.BorderSizePixel = 0
Shadow_10.Position = UDim2.new(0, 1, 0, 1)
Shadow_10.Size = UDim2.new(1, 0, 1, 0)
Shadow_10.ZIndex = 7

Shadow_11.Name = "Shadow"
Shadow_11.Parent = CopyClip
Shadow_11.BackgroundColor3 = Color3.new(0, 0, 0)
Shadow_11.BackgroundTransparency = 0.80000001192093
Shadow_11.BorderSizePixel = 0
Shadow_11.Position = UDim2.new(0, 2, 0, 2)
Shadow_11.Size = UDim2.new(1, 0, 1, 0)
Shadow_11.ZIndex = 7

Shadow_12.Name = "Shadow"
Shadow_12.Parent = CopyClip
Shadow_12.BackgroundColor3 = Color3.new(0, 0, 0)
Shadow_12.BackgroundTransparency = 0.80000001192093
Shadow_12.BorderSizePixel = 0
Shadow_12.Position = UDim2.new(0, 3, 0, 3)
Shadow_12.Size = UDim2.new(1, 0, 1, 0)
Shadow_12.ZIndex = 7

CopyText.Name = "CopyText"
CopyText.Parent = CopyClip
CopyText.BackgroundColor3 = Color3.new(1, 1, 1)
CopyText.BackgroundTransparency = 1
CopyText.Size = UDim2.new(1, 0, 1, 0)
CopyText.ZIndex = 10
CopyText.Font = Enum.Font.SourceSansBold
CopyText.Text = "Copy to clipboard"
CopyText.TextColor3 = Color3.new(1, 1, 1)
CopyText.TextSize = 20

BG_2.Name = "BG"
BG_2.Parent = CopyClip
BG_2.BackgroundColor3 = Color3.new(1, 1, 1)
BG_2.BackgroundTransparency = 1
BG_2.Position = UDim2.new(0, 1, 0, 1)
BG_2.Size = UDim2.new(1, 0, 1, 0)
BG_2.ZIndex = 9
BG_2.Font = Enum.Font.SourceSansBold
BG_2.Text = "Copy to clipboard"
BG_2.TextColor3 = Color3.new(0, 0, 0)
BG_2.TextSize = 20
BG_2.TextTransparency = 0.80000001192093

BG_3.Name = "BG"
BG_3.Parent = CopyClip
BG_3.BackgroundColor3 = Color3.new(1, 1, 1)
BG_3.BackgroundTransparency = 1
BG_3.Position = UDim2.new(0, 2, 0, 2)
BG_3.Size = UDim2.new(1, 0, 1, 0)
BG_3.ZIndex = 9
BG_3.Font = Enum.Font.SourceSansBold
BG_3.Text = "Copy to clipboard"
BG_3.TextColor3 = Color3.new(0, 0, 0)
BG_3.TextSize = 20
BG_3.TextTransparency = 0.80000001192093

BG_4.Name = "BG"
BG_4.Parent = CopyClip
BG_4.BackgroundColor3 = Color3.new(1, 1, 1)
BG_4.BackgroundTransparency = 1
BG_4.Position = UDim2.new(0, 3, 0, 3)
BG_4.Size = UDim2.new(1, 0, 1, 0)
BG_4.ZIndex = 9
BG_4.Font = Enum.Font.SourceSansBold
BG_4.Text = "Copy to clipboard"
BG_4.TextColor3 = Color3.new(0, 0, 0)
BG_4.TextSize = 20
BG_4.TextTransparency = 0.80000001192093

Remotes.Name = "Remotes"
Remotes.Parent = TabsFolder
Remotes.BackgroundColor3 = Color3.new(1, 1, 1)
Remotes.BackgroundTransparency = 1
Remotes.BorderSizePixel = 0
Remotes.Size = UDim2.new(1, 0, 1, 0)
Remotes.ZIndex = 7
Remotes.BottomImage = "rbxassetid://2504831909"
Remotes.CanvasSize = UDim2.new(0, 0, 0, 0)
Remotes.MidImage = "rbxassetid://2504831909"
Remotes.ScrollBarThickness = 6
Remotes.TopImage = "rbxassetid://2504831909"

Explorer.Name = "Explorer"
Explorer.Parent = TabsFolder
Explorer.BackgroundColor3 = Color3.new(1, 1, 1)
Explorer.BackgroundTransparency = 1
Explorer.Position = UDim2.new(2, 0, 0, 0)
Explorer.Size = UDim2.new(1, 0, 1, 0)

Warning_2.Name = "Warning"
Warning_2.Parent = Explorer
Warning_2.BackgroundColor3 = Color3.new(1, 1, 1)
Warning_2.BackgroundTransparency = 1
Warning_2.Size = UDim2.new(1, 0, 1, 0)

Logo_2.Name = "Logo"
Logo_2.Parent = Warning_2
Logo_2.AnchorPoint = Vector2.new(0.5, 0)
Logo_2.BackgroundColor3 = Color3.new(1, 1, 1)
Logo_2.BackgroundTransparency = 1
Logo_2.Position = UDim2.new(0.5, 0, 0.125, 0)
Logo_2.Size = UDim2.new(0, 150, 0, 150)
Logo_2.ZIndex = 7
Logo_2.Image = "rbxassetid://2512823206"

Shadow_13.Name = "Shadow"
Shadow_13.Parent = Logo_2
Shadow_13.BackgroundColor3 = Color3.new(1, 1, 1)
Shadow_13.BackgroundTransparency = 1
Shadow_13.Position = UDim2.new(0, 1, 0, 1)
Shadow_13.Size = UDim2.new(1, 0, 1, 0)
Shadow_13.ZIndex = 6
Shadow_13.Image = "rbxassetid://2512823206"
Shadow_13.ImageColor3 = Color3.new(0, 0, 0)
Shadow_13.ImageTransparency = 0.80000001192093

Shadow_14.Name = "Shadow"
Shadow_14.Parent = Logo_2
Shadow_14.BackgroundColor3 = Color3.new(1, 1, 1)
Shadow_14.BackgroundTransparency = 1
Shadow_14.Position = UDim2.new(0, 2, 0, 2)
Shadow_14.Size = UDim2.new(1, 0, 1, 0)
Shadow_14.ZIndex = 6
Shadow_14.Image = "rbxassetid://2512823206"
Shadow_14.ImageColor3 = Color3.new(0, 0, 0)
Shadow_14.ImageTransparency = 0.80000001192093

Shadow_15.Name = "Shadow"
Shadow_15.Parent = Logo_2
Shadow_15.BackgroundColor3 = Color3.new(1, 1, 1)
Shadow_15.BackgroundTransparency = 1
Shadow_15.Position = UDim2.new(0, 3, 0, 3)
Shadow_15.Size = UDim2.new(1, 0, 1, 0)
Shadow_15.ZIndex = 6
Shadow_15.Image = "rbxassetid://2512823206"
Shadow_15.ImageColor3 = Color3.new(0, 0, 0)
Shadow_15.ImageTransparency = 0.80000001192093

WarningLabel_2.Name = "WarningLabel"
WarningLabel_2.Parent = Warning_2
WarningLabel_2.AnchorPoint = Vector2.new(0.5, 1)
WarningLabel_2.BackgroundColor3 = Color3.new(1, 1, 1)
WarningLabel_2.BackgroundTransparency = 1
WarningLabel_2.Position = UDim2.new(0.5, 0, 0.899999976, 0)
WarningLabel_2.Size = UDim2.new(0.800000012, 0, 0.200000003, 0)
WarningLabel_2.ZIndex = 7
WarningLabel_2.Font = Enum.Font.SourceSansBold
WarningLabel_2.Text = "Please make sure you select a remote in the remotes tab to view its location"
WarningLabel_2.TextColor3 = Color3.new(1, 0.8, 0.301961)
WarningLabel_2.TextScaled = true
WarningLabel_2.TextSize = 30
WarningLabel_2.TextWrapped = true

Shadow_16.Name = "Shadow"
Shadow_16.Parent = WarningLabel_2
Shadow_16.BackgroundColor3 = Color3.new(1, 1, 1)
Shadow_16.BackgroundTransparency = 1
Shadow_16.Position = UDim2.new(0, 1, 0, 1)
Shadow_16.Size = UDim2.new(1, 0, 1, 0)
Shadow_16.ZIndex = 6
Shadow_16.Font = Enum.Font.SourceSansBold
Shadow_16.Text = "Please make sure you select a remote in the remotes tab to view its location"
Shadow_16.TextColor3 = Color3.new(0, 0, 0)
Shadow_16.TextScaled = true
Shadow_16.TextSize = 30
Shadow_16.TextTransparency = 0.80000001192093
Shadow_16.TextWrapped = true

Shadow_17.Name = "Shadow"
Shadow_17.Parent = WarningLabel_2
Shadow_17.BackgroundColor3 = Color3.new(1, 1, 1)
Shadow_17.BackgroundTransparency = 1
Shadow_17.Position = UDim2.new(0, 2, 0, 2)
Shadow_17.Size = UDim2.new(1, 0, 1, 0)
Shadow_17.ZIndex = 6
Shadow_17.Font = Enum.Font.SourceSansBold
Shadow_17.Text = "Please make sure you select a remote in the remotes tab to view its location"
Shadow_17.TextColor3 = Color3.new(0, 0, 0)
Shadow_17.TextScaled = true
Shadow_17.TextSize = 30
Shadow_17.TextTransparency = 0.80000001192093
Shadow_17.TextWrapped = true

Shadow_18.Name = "Shadow"
Shadow_18.Parent = WarningLabel_2
Shadow_18.BackgroundColor3 = Color3.new(1, 1, 1)
Shadow_18.BackgroundTransparency = 1
Shadow_18.Position = UDim2.new(0, 3, 0, 3)
Shadow_18.Size = UDim2.new(1, 0, 1, 0)
Shadow_18.ZIndex = 6
Shadow_18.Font = Enum.Font.SourceSansBold
Shadow_18.Text = "Please make sure you select a remote in the remotes tab to view its location"
Shadow_18.TextColor3 = Color3.new(0, 0, 0)
Shadow_18.TextScaled = true
Shadow_18.TextSize = 30
Shadow_18.TextTransparency = 0.80000001192093
Shadow_18.TextWrapped = true

Window_2.Name = "Window"
Window_2.Parent = Explorer
Window_2.BackgroundColor3 = Color3.new(1, 1, 1)
Window_2.BackgroundTransparency = 1
Window_2.Size = UDim2.new(1, 0, 1, 0)
Window_2.Visible = false
Window_2.ZIndex = 7

ExplorerWindow.Name = "ExplorerWindow"
ExplorerWindow.Parent = Window_2
ExplorerWindow.BackgroundColor3 = Color3.new(1, 1, 1)
ExplorerWindow.BackgroundTransparency = 1
ExplorerWindow.Size = UDim2.new(1, 0, 1, 0)
ExplorerWindow.ZIndex = 7
ExplorerWindow.BottomImage = "rbxassetid://2504831909"
ExplorerWindow.CanvasSize = UDim2.new(0, 0, 0, 0)
ExplorerWindow.MidImage = "rbxassetid://2504831909"
ExplorerWindow.ScrollBarThickness = 6
ExplorerWindow.TopImage = "rbxassetid://2504831909"

Shadow_19.Name = "Shadow"
Shadow_19.Parent = Hub
Shadow_19.BackgroundColor3 = Color3.new(0, 0, 0)
Shadow_19.BackgroundTransparency = 0.89999997615814
Shadow_19.BorderSizePixel = 0
Shadow_19.Position = UDim2.new(0, 0, 0.5, 1)
Shadow_19.Size = UDim2.new(1, 50, 0.5, 0)
Shadow_19.ZIndex = 9

Shadow_20.Name = "Shadow"
Shadow_20.Parent = Hub
Shadow_20.BackgroundColor3 = Color3.new(0, 0, 0)
Shadow_20.BackgroundTransparency = 0.89999997615814
Shadow_20.BorderSizePixel = 0
Shadow_20.Position = UDim2.new(0, 0, 0.5, 2)
Shadow_20.Size = UDim2.new(1, 50, 0.5, 0)
Shadow_20.ZIndex = 9

Shadow_21.Name = "Shadow"
Shadow_21.Parent = Hub
Shadow_21.BackgroundColor3 = Color3.new(0, 0, 0)
Shadow_21.BackgroundTransparency = 0.89999997615814
Shadow_21.BorderSizePixel = 0
Shadow_21.Position = UDim2.new(0, 0, 0.5, 3)
Shadow_21.Size = UDim2.new(1, 50, 0.5, 0)
Shadow_21.ZIndex = 9

Shadow_22.Name = "Shadow"
Shadow_22.Parent = Hub
Shadow_22.BackgroundColor3 = Color3.new(0, 0, 0)
Shadow_22.BackgroundTransparency = 0.89999997615814
Shadow_22.BorderSizePixel = 0
Shadow_22.Position = UDim2.new(0, 0, 0.5, 4)
Shadow_22.Size = UDim2.new(1, 50, 0.5, 0)
Shadow_22.ZIndex = 9

Title.Name = "Title"
Title.Parent = Hub
Title.BackgroundColor3 = Color3.new(1, 1, 1)
Title.BackgroundTransparency = 1
Title.Position = UDim2.new(0, 50, 0, 0)
Title.Size = UDim2.new(0, 150, 1, 0)
Title.ZIndex = 25
Title.Font = Enum.Font.SourceSansLight
Title.Text = "Mr.Spy V2"
Title.TextColor3 = Color3.new(1, 1, 1)
Title.TextSize = 30
Title.TextXAlignment = Enum.TextXAlignment.Left

Credits.Name = "Credits"
Credits.Parent = Hub
Credits.BackgroundColor3 = Color3.new(1, 1, 1)
Credits.BackgroundTransparency = 1
Credits.Position = UDim2.new(0, 50, 0, 0)
Credits.Size = UDim2.new(0, 150, 1, -1)
Credits.ZIndex = 25
Credits.Font = Enum.Font.SourceSansSemibold
Credits.Text = "Created by - Rebug/KurokkusGhost"
Credits.TextColor3 = Color3.new(0.333333, 0.333333, 0.333333)
Credits.TextSize = 10
Credits.TextXAlignment = Enum.TextXAlignment.Left
Credits.TextYAlignment = Enum.TextYAlignment.Bottom

Icon.Name = "Icon"
Icon.Parent = Hub
Icon.BackgroundColor3 = Color3.new(1, 1, 1)
Icon.BackgroundTransparency = 1
Icon.Position = UDim2.new(0, 5, 0, 10)
Icon.Size = UDim2.new(0, 40, 0, 40)
Icon.ZIndex = 25
Icon.Image = "rbxassetid://2502312317"

Exit.Name = "Exit"
Exit.Parent = Hub
Exit.BackgroundColor3 = Color3.new(1, 1, 1)
Exit.BackgroundTransparency = 1
Exit.Position = UDim2.new(1, 0, 0, 0)
Exit.Size = UDim2.new(0, 50, 0, 50)
Exit.ZIndex = 25
Exit.Image = "rbxassetid://985583019"

ShadowHolder_2.Name = "ShadowHolder"
ShadowHolder_2.Parent = Exit
ShadowHolder_2.BackgroundColor3 = Color3.new(1, 1, 1)
ShadowHolder_2.BackgroundTransparency = 1
ShadowHolder_2.ClipsDescendants = true
ShadowHolder_2.Size = UDim2.new(1, 10, 1, 0)

Shadow_23.Name = "Shadow"
Shadow_23.Parent = ShadowHolder_2
Shadow_23.BackgroundColor3 = Color3.new(1, 1, 1)
Shadow_23.BackgroundTransparency = 1
Shadow_23.Position = UDim2.new(0, 1, 0, 1)
Shadow_23.Size = UDim2.new(0, 50, 0, 50)
Shadow_23.ZIndex = 24
Shadow_23.Image = "rbxassetid://985583019"
Shadow_23.ImageColor3 = Color3.new(0, 0, 0)
Shadow_23.ImageTransparency = 0.85000002384186

Shadow_24.Name = "Shadow"
Shadow_24.Parent = ShadowHolder_2
Shadow_24.BackgroundColor3 = Color3.new(1, 1, 1)
Shadow_24.BackgroundTransparency = 1
Shadow_24.Position = UDim2.new(0, 2, 0, 2)
Shadow_24.Size = UDim2.new(0, 50, 0, 50)
Shadow_24.ZIndex = 24
Shadow_24.Image = "rbxassetid://985583019"
Shadow_24.ImageColor3 = Color3.new(0, 0, 0)
Shadow_24.ImageTransparency = 0.85000002384186

Shadow_25.Name = "Shadow"
Shadow_25.Parent = ShadowHolder_2
Shadow_25.BackgroundColor3 = Color3.new(1, 1, 1)
Shadow_25.BackgroundTransparency = 1
Shadow_25.Position = UDim2.new(0, 3, 0, 3)
Shadow_25.Size = UDim2.new(0, 50, 0, 50)
Shadow_25.ZIndex = 24
Shadow_25.Image = "rbxassetid://985583019"
Shadow_25.ImageColor3 = Color3.new(0, 0, 0)
Shadow_25.ImageTransparency = 0.85000002384186

Tabs.Name = "Tabs"
Tabs.Parent = Hub
Tabs.BackgroundColor3 = Color3.new(1, 1, 1)
Tabs.BackgroundTransparency = 1
Tabs.Position = UDim2.new(0.400000006, 0, 0, 0)
Tabs.Size = UDim2.new(0.600000024, 0, 1, 0)
Tabs.ZIndex = 25

TabLine.Name = "TabLine"
TabLine.Parent = Tabs
TabLine.AnchorPoint = Vector2.new(0, 1)
TabLine.BackgroundColor3 = Color3.new(0.666667, 0.333333, 1)
TabLine.BorderSizePixel = 0
TabLine.Position = UDim2.new(0, 0, 1, 0)
TabLine.Size = UDim2.new(0.25, -1, 0, 3)
TabLine.ZIndex = 30

Remotes_2.Name = "Remotes"
Remotes_2.Parent = Tabs
Remotes_2.BackgroundColor3 = Color3.new(1, 1, 1)
Remotes_2.BackgroundTransparency = 1
Remotes_2.LayoutOrder = 1
Remotes_2.Size = UDim2.new(0.25, 0, 0, 50)
Remotes_2.ZIndex = 25
Remotes_2.Font = Enum.Font.SourceSansBold
Remotes_2.Text = "Remotes"
Remotes_2.TextColor3 = Color3.new(1, 1, 1)
Remotes_2.TextSize = 20

Spys.Name = "Spys"
Spys.Parent = Remotes_2
Spys.BackgroundColor3 = Color3.new(1, 1, 1)
Spys.BackgroundTransparency = 1
Spys.ClipsDescendants = true
Spys.Size = UDim2.new(1, 3, 1.75, 3)
Spys.ZIndex = 9

Spyer.Name = "Spyer"
Spyer.Parent = Spys
Spyer.BackgroundColor3 = Color3.new(0.843137, 0.352941, 0.290196)
Spyer.BackgroundTransparency = 1
Spyer.Position = UDim2.new(0, 0, 0, -7)
Spyer.Size = UDim2.new(1, -4, 0.5, 3)
Spyer.ZIndex = 8
Spyer.Image = "rbxassetid://2052866575"
Spyer.ImageColor3 = Color3.new(0, 0.666667, 0.364706)
Spyer.ScaleType = Enum.ScaleType.Slice
Spyer.SliceCenter = Rect.new(8, 8, 8, 8)

Shadow_26.Name = "Shadow"
Shadow_26.Parent = Spyer
Shadow_26.BackgroundColor3 = Color3.new(0.137255, 0.137255, 0.137255)
Shadow_26.BackgroundTransparency = 1
Shadow_26.Position = UDim2.new(0, 1, 0, 1)
Shadow_26.Size = UDim2.new(1, 0, 1, 0)
Shadow_26.ZIndex = 7
Shadow_26.Image = "rbxassetid://2052866575"
Shadow_26.ImageColor3 = Color3.new(0, 0, 0)
Shadow_26.ImageTransparency = 0.85000002384186
Shadow_26.ScaleType = Enum.ScaleType.Slice
Shadow_26.SliceCenter = Rect.new(8, 8, 8, 8)

Shadow_27.Name = "Shadow"
Shadow_27.Parent = Spyer
Shadow_27.BackgroundColor3 = Color3.new(0.137255, 0.137255, 0.137255)
Shadow_27.BackgroundTransparency = 1
Shadow_27.Position = UDim2.new(0, 2, 0, 2)
Shadow_27.Size = UDim2.new(1, 0, 1, 0)
Shadow_27.ZIndex = 7
Shadow_27.Image = "rbxassetid://2052866575"
Shadow_27.ImageColor3 = Color3.new(0, 0, 0)
Shadow_27.ImageTransparency = 0.85000002384186
Shadow_27.ScaleType = Enum.ScaleType.Slice
Shadow_27.SliceCenter = Rect.new(8, 8, 8, 8)

Shadow_28.Name = "Shadow"
Shadow_28.Parent = Spyer
Shadow_28.BackgroundColor3 = Color3.new(0.137255, 0.137255, 0.137255)
Shadow_28.BackgroundTransparency = 1
Shadow_28.Position = UDim2.new(0, 3, 0, 3)
Shadow_28.Size = UDim2.new(1, 0, 1, 0)
Shadow_28.ZIndex = 7
Shadow_28.Image = "rbxassetid://2052866575"
Shadow_28.ImageColor3 = Color3.new(0, 0, 0)
Shadow_28.ImageTransparency = 0.85000002384186
Shadow_28.ScaleType = Enum.ScaleType.Slice
Shadow_28.SliceCenter = Rect.new(8, 8, 8, 8)

Words.Name = "Words"
Words.Parent = Spyer
Words.BackgroundColor3 = Color3.new(1, 1, 1)
Words.BackgroundTransparency = 1
Words.Position = UDim2.new(0, 0, 0.25, -1)
Words.Size = UDim2.new(1, 0, 0.75, 0)
Words.ZIndex = 8
Words.Font = Enum.Font.SourceSansBold
Words.Text = "Spy All"
Words.TextColor3 = Color3.new(1, 1, 1)
Words.TextSize = 20

Output_2.Name = "Output"
Output_2.Parent = Tabs
Output_2.BackgroundColor3 = Color3.new(1, 1, 1)
Output_2.BackgroundTransparency = 1
Output_2.LayoutOrder = 2
Output_2.Position = UDim2.new(0.25, 0, 0, 0)
Output_2.Size = UDim2.new(0.25, 0, 0, 50)
Output_2.ZIndex = 25
Output_2.Font = Enum.Font.SourceSansBold
Output_2.Text = "Output"
Output_2.TextColor3 = Color3.new(1, 1, 1)
Output_2.TextSize = 20

ClearHolder.Name = "ClearHolder"
ClearHolder.Parent = Output_2
ClearHolder.BackgroundColor3 = Color3.new(1, 1, 1)
ClearHolder.BackgroundTransparency = 1
ClearHolder.ClipsDescendants = true
ClearHolder.Size = UDim2.new(1, 3, 1.75, 3)
ClearHolder.ZIndex = 9

Clear.Name = "Clear"
Clear.Parent = ClearHolder
Clear.BackgroundColor3 = Color3.new(0.843137, 0.352941, 0.290196)
Clear.BackgroundTransparency = 1
Clear.Position = UDim2.new(0, 0, 0, -7)
Clear.Size = UDim2.new(1, -4, 0.5, 3)
Clear.ZIndex = 8
Clear.Image = "rbxassetid://2052866575"
Clear.ImageColor3 = Color3.new(0.843137, 0.352941, 0.290196)
Clear.ScaleType = Enum.ScaleType.Slice
Clear.SliceCenter = Rect.new(8, 8, 8, 8)

Shadow_29.Name = "Shadow"
Shadow_29.Parent = Clear
Shadow_29.BackgroundColor3 = Color3.new(0.137255, 0.137255, 0.137255)
Shadow_29.BackgroundTransparency = 1
Shadow_29.Position = UDim2.new(0, 1, 0, 1)
Shadow_29.Size = UDim2.new(1, 0, 1, 0)
Shadow_29.ZIndex = 7
Shadow_29.Image = "rbxassetid://2052866575"
Shadow_29.ImageColor3 = Color3.new(0, 0, 0)
Shadow_29.ImageTransparency = 0.85000002384186
Shadow_29.ScaleType = Enum.ScaleType.Slice
Shadow_29.SliceCenter = Rect.new(8, 8, 8, 8)

Shadow_30.Name = "Shadow"
Shadow_30.Parent = Clear
Shadow_30.BackgroundColor3 = Color3.new(0.137255, 0.137255, 0.137255)
Shadow_30.BackgroundTransparency = 1
Shadow_30.Position = UDim2.new(0, 2, 0, 2)
Shadow_30.Size = UDim2.new(1, 0, 1, 0)
Shadow_30.ZIndex = 7
Shadow_30.Image = "rbxassetid://2052866575"
Shadow_30.ImageColor3 = Color3.new(0, 0, 0)
Shadow_30.ImageTransparency = 0.85000002384186
Shadow_30.ScaleType = Enum.ScaleType.Slice
Shadow_30.SliceCenter = Rect.new(8, 8, 8, 8)

Shadow_31.Name = "Shadow"
Shadow_31.Parent = Clear
Shadow_31.BackgroundColor3 = Color3.new(0.137255, 0.137255, 0.137255)
Shadow_31.BackgroundTransparency = 1
Shadow_31.Position = UDim2.new(0, 3, 0, 3)
Shadow_31.Size = UDim2.new(1, 0, 1, 0)
Shadow_31.ZIndex = 7
Shadow_31.Image = "rbxassetid://2052866575"
Shadow_31.ImageColor3 = Color3.new(0, 0, 0)
Shadow_31.ImageTransparency = 0.85000002384186
Shadow_31.ScaleType = Enum.ScaleType.Slice
Shadow_31.SliceCenter = Rect.new(8, 8, 8, 8)

TextLabel.Parent = Clear
TextLabel.BackgroundColor3 = Color3.new(1, 1, 1)
TextLabel.BackgroundTransparency = 1
TextLabel.Position = UDim2.new(0, 0, 0.25, -1)
TextLabel.Size = UDim2.new(1, 0, 0.75, 0)
TextLabel.ZIndex = 8
TextLabel.Font = Enum.Font.SourceSansBold
TextLabel.Text = "Clear"
TextLabel.TextColor3 = Color3.new(1, 1, 1)
TextLabel.TextSize = 20

Explorer_2.Name = "Explorer"
Explorer_2.Parent = Tabs
Explorer_2.BackgroundColor3 = Color3.new(1, 1, 1)
Explorer_2.BackgroundTransparency = 1
Explorer_2.LayoutOrder = 3
Explorer_2.Position = UDim2.new(0.5, 0, 0, 0)
Explorer_2.Size = UDim2.new(0.25, 0, 0, 50)
Explorer_2.ZIndex = 25
Explorer_2.Font = Enum.Font.SourceSansBold
Explorer_2.Text = "Explorer"
Explorer_2.TextColor3 = Color3.new(1, 1, 1)
Explorer_2.TextSize = 20

R2S_2.Name = "R2S"
R2S_2.Parent = Tabs
R2S_2.BackgroundColor3 = Color3.new(1, 1, 1)
R2S_2.BackgroundTransparency = 1
R2S_2.LayoutOrder = 3
R2S_2.Position = UDim2.new(0.75, 0, 0, 0)
R2S_2.Size = UDim2.new(0.25, 0, 0, 50)
R2S_2.ZIndex = 25
R2S_2.Font = Enum.Font.SourceSansBold
R2S_2.Text = "R2S"
R2S_2.TextColor3 = Color3.new(1, 1, 1)
R2S_2.TextSize = 20

Holder.Name = "Holder"
Holder.Parent = MrSpyV2RebugKurokkusGhost
Holder.BackgroundColor3 = Color3.new(1, 1, 1)
Holder.Size = UDim2.new(0, 100, 0, 100)
Holder.Visible = false

Icon_2.Name = "Icon"
Icon_2.Parent = Holder
Icon_2.BackgroundColor3 = Color3.new(1, 1, 1)
Icon_2.BackgroundTransparency = 1
Icon_2.ClipsDescendants = true
Icon_2.Size = UDim2.new(0, 16, 0, 16)
Icon_2.ZIndex = 7

IconMap.Name = "IconMap"
IconMap.Parent = Icon_2
IconMap.BackgroundColor3 = Color3.new(1, 1, 1)
IconMap.BackgroundTransparency = 1
IconMap.Position = UDim2.new(0, -93, 0, -21)
IconMap.Size = UDim2.new(0, 256, 0, 256)
IconMap.ZIndex = 7
IconMap.Image = "rbxassetid://483448923"

RemoteGrid.Name = "RemoteGrid"
RemoteGrid.Parent = Holder
RemoteGrid.HorizontalAlignment = Enum.HorizontalAlignment.Right
RemoteGrid.CellPadding = UDim2.new(0, 0, 0, 4)
RemoteGrid.CellSize = UDim2.new(1, -5, 0, 16)

RemoteTemplate.Name = "RemoteTemplate"
RemoteTemplate.Parent = Holder
RemoteTemplate.BackgroundColor3 = Color3.new(1, 1, 1)
RemoteTemplate.BackgroundTransparency = 1
RemoteTemplate.Size = UDim2.new(1, -5, 0, 16)
RemoteTemplate.ZIndex = 7

Icon_3.Name = "Icon"
Icon_3.Parent = RemoteTemplate
Icon_3.BackgroundColor3 = Color3.new(1, 1, 1)
Icon_3.BackgroundTransparency = 1
Icon_3.ClipsDescendants = true
Icon_3.Size = UDim2.new(0, 16, 0, 16)
Icon_3.ZIndex = 7

IconMap_2.Name = "IconMap"
IconMap_2.Parent = Icon_3
IconMap_2.BackgroundColor3 = Color3.new(1, 1, 1)
IconMap_2.BackgroundTransparency = 1
IconMap_2.Position = UDim2.new(0, -183, 0, -93)
IconMap_2.Size = UDim2.new(0, 256, 0, 256)
IconMap_2.ZIndex = 7
IconMap_2.Image = "rbxassetid://483448923"

RemoteName.Name = "RemoteName"
RemoteName.Parent = RemoteTemplate
RemoteName.BackgroundColor3 = Color3.new(1, 1, 1)
RemoteName.BackgroundTransparency = 1
RemoteName.Position = UDim2.new(0, 20, 0, 0)
RemoteName.Size = UDim2.new(0, 200, 0, 16)
RemoteName.ZIndex = 7
RemoteName.Font = Enum.Font.SourceSans
RemoteName.Text = "GiveMoney"
RemoteName.TextColor3 = Color3.new(0.901961, 0.901961, 0.901961)
RemoteName.TextSize = 14
RemoteName.TextXAlignment = Enum.TextXAlignment.Left

Spy.Name = "Spy"
Spy.Parent = RemoteTemplate
Spy.BackgroundColor3 = Color3.new(0.235294, 0.235294, 0.235294)
Spy.BorderSizePixel = 0
Spy.Position = UDim2.new(0, 82, 0, 0)
Spy.Size = UDim2.new(0, 50, 1, 0)
Spy.ZIndex = 8
Spy.AutoButtonColor = false
Spy.Font = Enum.Font.SourceSansSemibold
Spy.Text = "Spy"
Spy.TextColor3 = Color3.new(1, 1, 1)
Spy.TextSize = 14

Shadow_32.Name = "Shadow"
Shadow_32.Parent = Spy
Shadow_32.BackgroundColor3 = Color3.new(0, 0, 0)
Shadow_32.BackgroundTransparency = 0.80000001192093
Shadow_32.BorderSizePixel = 0
Shadow_32.Position = UDim2.new(0, 1, 0, 1)
Shadow_32.Size = UDim2.new(1, 0, 1, 0)
Shadow_32.ZIndex = 7

Shadow_33.Name = "Shadow"
Shadow_33.Parent = Spy
Shadow_33.BackgroundColor3 = Color3.new(0, 0, 0)
Shadow_33.BackgroundTransparency = 0.80000001192093
Shadow_33.BorderSizePixel = 0
Shadow_33.Position = UDim2.new(0, 2, 0, 2)
Shadow_33.Size = UDim2.new(1, 0, 1, 0)
Shadow_33.ZIndex = 7

Shadow_34.Name = "Shadow"
Shadow_34.Parent = Spy
Shadow_34.BackgroundColor3 = Color3.new(0, 0, 0)
Shadow_34.BackgroundTransparency = 0.80000001192093
Shadow_34.BorderSizePixel = 0
Shadow_34.Position = UDim2.new(0, 3, 0, 3)
Shadow_34.Size = UDim2.new(1, 0, 1, 0)
Shadow_34.ZIndex = 7

View.Name = "View"
View.Parent = RemoteTemplate
View.BackgroundColor3 = Color3.new(0.235294, 0.235294, 0.235294)
View.BorderSizePixel = 0
View.Position = UDim2.new(0, 142, 0, 0)
View.Size = UDim2.new(0, 50, 1, 0)
View.ZIndex = 8
View.AutoButtonColor = false
View.Font = Enum.Font.SourceSansSemibold
View.Text = "View"
View.TextColor3 = Color3.new(1, 1, 1)
View.TextSize = 14

Shadow_35.Name = "Shadow"
Shadow_35.Parent = View
Shadow_35.BackgroundColor3 = Color3.new(0, 0, 0)
Shadow_35.BackgroundTransparency = 0.80000001192093
Shadow_35.BorderSizePixel = 0
Shadow_35.Position = UDim2.new(0, 1, 0, 1)
Shadow_35.Size = UDim2.new(1, 0, 1, 0)
Shadow_35.ZIndex = 7

Shadow_36.Name = "Shadow"
Shadow_36.Parent = View
Shadow_36.BackgroundColor3 = Color3.new(0, 0, 0)
Shadow_36.BackgroundTransparency = 0.80000001192093
Shadow_36.BorderSizePixel = 0
Shadow_36.Position = UDim2.new(0, 2, 0, 2)
Shadow_36.Size = UDim2.new(1, 0, 1, 0)
Shadow_36.ZIndex = 7

Shadow_37.Name = "Shadow"
Shadow_37.Parent = View
Shadow_37.BackgroundColor3 = Color3.new(0, 0, 0)
Shadow_37.BackgroundTransparency = 0.80000001192093
Shadow_37.BorderSizePixel = 0
Shadow_37.Position = UDim2.new(0, 3, 0, 3)
Shadow_37.Size = UDim2.new(1, 0, 1, 0)
Shadow_37.ZIndex = 7

ExplorerTemplate.Name = "ExplorerTemplate"
ExplorerTemplate.Parent = Holder
ExplorerTemplate.BackgroundColor3 = Color3.new(0.0431373, 0.352941, 0.686275)
ExplorerTemplate.BackgroundTransparency = 1
ExplorerTemplate.BorderSizePixel = 0
ExplorerTemplate.Size = UDim2.new(0, 275, 0, 20)
ExplorerTemplate.ZIndex = 7

Arrow.Name = "Arrow"
Arrow.Parent = ExplorerTemplate
Arrow.BackgroundColor3 = Color3.new(1, 1, 1)
Arrow.BackgroundTransparency = 1
Arrow.ClipsDescendants = true
Arrow.Position = UDim2.new(0, 0, 0, 2)
Arrow.Size = UDim2.new(0, 16, 0, 16)
Arrow.ZIndex = 8

Open.Name = "Open"
Open.Parent = Arrow
Open.BackgroundColor3 = Color3.new(1, 1, 1)
Open.BackgroundTransparency = 1
Open.Size = UDim2.new(1, 0, 1, 0)
Open.ZIndex = 8
Open.Font = Enum.Font.SourceSans
Open.Text = ""
Open.TextColor3 = Color3.new(0, 0, 0)
Open.TextSize = 14

IconMap_3.Name = "IconMap"
IconMap_3.Parent = Arrow
IconMap_3.BackgroundColor3 = Color3.new(1, 1, 1)
IconMap_3.BackgroundTransparency = 1
IconMap_3.Position = UDim2.new(0, -219, 0, -201)
IconMap_3.Size = UDim2.new(0, 256, 0, 256)
IconMap_3.ZIndex = 8
IconMap_3.Image = "rbxassetid://483448923"

Icon_4.Name = "Icon"
Icon_4.Parent = ExplorerTemplate
Icon_4.BackgroundColor3 = Color3.new(1, 1, 1)
Icon_4.BackgroundTransparency = 1
Icon_4.ClipsDescendants = true
Icon_4.Position = UDim2.new(0, 20, 0, 2)
Icon_4.Size = UDim2.new(0, 16, 0, 16)
Icon_4.ZIndex = 8

IconMap_4.Name = "IconMap"
IconMap_4.Parent = Icon_4
IconMap_4.BackgroundColor3 = Color3.new(1, 1, 1)
IconMap_4.BackgroundTransparency = 1
IconMap_4.Position = UDim2.new(0, -93, 0, -21)
IconMap_4.Size = UDim2.new(0, 256, 0, 256)
IconMap_4.ZIndex = 8
IconMap_4.Image = "rbxassetid://483448923"

InstanceName.Name = "InstanceName"
InstanceName.Parent = ExplorerTemplate
InstanceName.BackgroundColor3 = Color3.new(0.0431373, 0.352941, 0.686275)
InstanceName.BackgroundTransparency = 1
InstanceName.BorderSizePixel = 0
InstanceName.Position = UDim2.new(0, 42, 0, 0)
InstanceName.Size = UDim2.new(0, 275, 1, 0)
InstanceName.ZIndex = 8
InstanceName.Font = Enum.Font.SourceSans
InstanceName.Text = "Workspace"
InstanceName.TextColor3 = Color3.new(0.784314, 0.784314, 0.784314)
InstanceName.TextSize = 14
InstanceName.TextXAlignment = Enum.TextXAlignment.Left

Open_2.Name = "Open"
Open_2.Parent = InstanceName
Open_2.BackgroundColor3 = Color3.new(1, 1, 1)
Open_2.BackgroundTransparency = 1
Open_2.Size = UDim2.new(1, 0, 1, 0)
Open_2.ZIndex = 8
Open_2.Font = Enum.Font.SourceSans
Open_2.Text = ""
Open_2.TextColor3 = Color3.new(0, 0, 0)
Open_2.TextSize = 14

Holder_2.Name = "Holder"
Holder_2.Parent = ExplorerTemplate
Holder_2.BackgroundColor3 = Color3.new(1, 1, 1)
Holder_2.BackgroundTransparency = 1
Holder_2.Position = UDim2.new(0, 20, 0, 20)
Holder_2.Size = UDim2.new(1, 0, 0, 20)
Holder_2.ZIndex = 8

BG_5.Name = "BG"
BG_5.Parent = ExplorerTemplate
BG_5.BackgroundColor3 = Color3.new(0.0431373, 0.352941, 0.686275)
BG_5.BackgroundTransparency = 1
BG_5.BorderSizePixel = 0
BG_5.Position = UDim2.new(0, 16, 0, 0)
BG_5.Size = UDim2.new(0, 100, 1, 0)
BG_5.ZIndex = 7

RemoteOutputTemplate.Name = "RemoteOutputTemplate"
RemoteOutputTemplate.Parent = Holder
RemoteOutputTemplate.BackgroundColor3 = Color3.new(1, 1, 1)
RemoteOutputTemplate.BackgroundTransparency = 1
RemoteOutputTemplate.Size = UDim2.new(1, -5, 0, 16)
RemoteOutputTemplate.ZIndex = 7

Icon_5.Name = "Icon"
Icon_5.Parent = RemoteOutputTemplate
Icon_5.BackgroundColor3 = Color3.new(1, 1, 1)
Icon_5.BackgroundTransparency = 1
Icon_5.ClipsDescendants = true
Icon_5.Size = UDim2.new(0, 16, 0, 16)
Icon_5.ZIndex = 7

IconMap_5.Name = "IconMap"
IconMap_5.Parent = Icon_5
IconMap_5.BackgroundColor3 = Color3.new(1, 1, 1)
IconMap_5.BackgroundTransparency = 1
IconMap_5.Position = UDim2.new(0, -183, 0, -93)
IconMap_5.Size = UDim2.new(0, 256, 0, 256)
IconMap_5.ZIndex = 7
IconMap_5.Image = "rbxassetid://483448923"

RemoteName_2.Name = "RemoteName"
RemoteName_2.Parent = RemoteOutputTemplate
RemoteName_2.BackgroundColor3 = Color3.new(1, 1, 1)
RemoteName_2.BackgroundTransparency = 1
RemoteName_2.Position = UDim2.new(0, 20, 0, 0)
RemoteName_2.Size = UDim2.new(1, -20, 0, 16)
RemoteName_2.ZIndex = 7
RemoteName_2.Font = Enum.Font.SourceSans
RemoteName_2.Text = "GiveMoney | Args: {}"
RemoteName_2.TextColor3 = Color3.new(0.901961, 0.901961, 0.901961)
RemoteName_2.TextSize = 14
RemoteName_2.TextXAlignment = Enum.TextXAlignment.Left

R2S_3.Name = "R2S"
R2S_3.Parent = RemoteOutputTemplate
R2S_3.BackgroundColor3 = Color3.new(0.235294, 0.235294, 0.235294)
R2S_3.BorderSizePixel = 0
R2S_3.Position = UDim2.new(0, 82, 0, 0)
R2S_3.Size = UDim2.new(0, 50, 1, 0)
R2S_3.ZIndex = 8
R2S_3.AutoButtonColor = false
R2S_3.Font = Enum.Font.SourceSansSemibold
R2S_3.Text = "R2S"
R2S_3.TextColor3 = Color3.new(1, 1, 1)
R2S_3.TextSize = 14

Shadow_38.Name = "Shadow"
Shadow_38.Parent = R2S_3
Shadow_38.BackgroundColor3 = Color3.new(0, 0, 0)
Shadow_38.BackgroundTransparency = 0.80000001192093
Shadow_38.BorderSizePixel = 0
Shadow_38.Position = UDim2.new(0, 1, 0, 1)
Shadow_38.Size = UDim2.new(1, 0, 1, 0)
Shadow_38.ZIndex = 7

Shadow_39.Name = "Shadow"
Shadow_39.Parent = R2S_3
Shadow_39.BackgroundColor3 = Color3.new(0, 0, 0)
Shadow_39.BackgroundTransparency = 0.80000001192093
Shadow_39.BorderSizePixel = 0
Shadow_39.Position = UDim2.new(0, 2, 0, 2)
Shadow_39.Size = UDim2.new(1, 0, 1, 0)
Shadow_39.ZIndex = 7

Shadow_40.Name = "Shadow"
Shadow_40.Parent = R2S_3
Shadow_40.BackgroundColor3 = Color3.new(0, 0, 0)
Shadow_40.BackgroundTransparency = 0.80000001192093
Shadow_40.BorderSizePixel = 0
Shadow_40.Position = UDim2.new(0, 3, 0, 3)
Shadow_40.Size = UDim2.new(1, 0, 1, 0)
Shadow_40.ZIndex = 7

getfenv().script = Instance.new('LocalScript', MrSpyV2RebugKurokkusGhost)

repeat wait() until game:GetService("Players").LocalPlayer.Character:WaitForChild("HumanoidRootPart")
local Hub = script.Parent.Hub
local plr = game:GetService("Players").LocalPlayer
local Animate = Hub.Main.Animate
local Animate_Time = 30
local Exit = Hub.Exit
local colSize = 14
script.Parent.Hub.Draggable = true
local Tabs = Hub.Tabs
local TF = Hub.Main.TabsFolder
local Remotes = TF.Remotes
local Output = TF.Output
local Supplies = script.Parent.Holder
local Opened = true;
local OutputTab = Tabs.Output
local RemoteTab = Tabs.Remotes
local Explorer = TF.Explorer
local R2S = TF.R2S

local Instances = {
	["BadgeService"] = 76;
	["Humanoid"] = 10;
	["GuiService"] = 48;
	["CylinderHandleAdornment"] = 55;
	["BallSocketConstraint"] = 90;
	["BrickColorValue"] = 5;
	["Accoutrement"] = 33;
	["AdService"] = 74;
	["AssetService"] = 73;
	["GuiMain"] = 48;
	["ImageButton"] = 53;
	["HapticService"] = 85;
	["DialogChoice"] = 64;
	["Handles"] = 54;
	["ReflectionMetadataClasses"] = 87;
	["JointInstance"] = 35;
	["AnimationController"] = 61;
	["RemoteEvent"] = 81;
	["CollectionService"] = 31;
	["Smoke"] = 60;
	["Configuration"] = 59;
	["KeyframeSequenceProvider"] = 61;
	["Accessory"] = 33;
	["SelectionPointLasso"] = 58;
	["GamePassService"] = 20;
	["CFrameValue"] = 5;
	["TextureTrail"] = 5;
	["ImageLabel"] = 50;
	["ReflectionMetadataMember"] = 87;
	["Animation"] = 61;
	["IntConstrainedValue"] = 5;
	["HttpService"] = 77;
	["PointLight"] = 14;
	["Model"] = 3;
	["DoubleConstrainedValue"] = 5;
	["Snap"] = 35;
	["BodyAngularVelocity"] = 15;
	["VelocityMotor"] = 35;
	["RocketPropulsion"] = 15;
	["SurfaceSelection"] = 56;
	["CoreGui"] = 47;
	["Part"] = 2;
	["ReplicatedFirst"] = 73;
	["BindableEvent"] = 68;
	["SelectionPartLasso"] = 58;
	["NegateOperation"] = 79;
	["PyramidPart"] = 2;
	["ArcHandles"] = 57;
	["Hint"] = 34;
	["Players"] = 22;
	["Script"] = 7;
	["ParallelRampPart"] = 2;
	["RayValue"] = 5;
	["LineHandleAdornment"] = 55;
	["Camera"] = 6;
	["RunService"] = 67;
	["BodyForce"] = 15;
	["KeyframeSequence"] = 61;
	["ServerScriptService"] = 1;
	["BillboardGui"] = 65;
	["BodyThrust"] = 15;
	["RemoteFunction"] = 80;
	["Team"] = 25;
	["Sound"] = 12;
	["GuiButton"] = 53;
	["Workspace"] = 20;
	["Lighting"] = 14;
	["JointsService"] = 35;
	["BlurEffect"] = 91;
	["WedgePart"] = 2;
	["BloomEffect"] = 91;
	["ReflectionMetadata"] = 87;
	["Vector3Value"] = 5;
	["PointsService"] = 84;
	["UserInputService"] = 85;
	["Sparkles"] = 43;
	["BodyGyro"] = 15;
	["Rotate"] = 35;
	["HopperBin"] = 23;
	["ForceField"] = 38;
	["Tool"] = 18;
	["Texture"] = 11;
	["Teams"] = 24;
	["ReflectionMetadataFunctions"] = 87;
	["RodConstraint"] = 90;
	["Folder"] = 71;
	["BodyVelocity"] = 15;
	["Shirt"] = 44;
	["SlidingBallConstraint"] = 90;
	["Animator"] = 61;
	["TextButton"] = 52;
	["Color3Value"] = 5;
	["TextBox"] = 52;
	["NetworkReplicator"] = 30;
	["Platform"] = 36;
	["TerrainRegion"] = 66;
	["SkateboardPlatform"] = 36;
	["Seat"] = 36;
	["Terrain"] = 66;
	["Explosion"] = 37;
	["BlockMesh"] = 9;
	["TeleportService"] = 82;
	["PlayerGui"] = 47;
	["TextLabel"] = 51;
	["SurfaceLight"] = 14;
	["SurfaceGui"] = 65;
	["Debris"] = 31;
	["FlagStand"] = 40;
	["StarterPack"] = 21;
	["BindableFunction"] = 67;
	["ReflectionMetadataCallbacks"] = 87;
	["NetworkClient"] = 17;
	["ModuleScript"] = 72;
	["Flag"] = 39;
	["Status"] = 3;
	["ParticleEmitter"] = 70;
	["StarterPlayer"] = 89;
	["StringValue"] = 5;
	["ObjectValue"] = 5;
	["CharacterMesh"] = 61;
	["StarterGui"] = 47;
	["ReplicatedStorage"] = 73;
	["StarterCharacterScripts"] = 83;
	["NetworkServer"] = 16;
	["Backpack"] = 21;
	["ReflectionMetadataEnum"] = 87;
	["StarterPlayerScripts"] = 83;
	["SpotLight"] = 14;
	["CustomEventReceiver"] = 5;
	["SphereHandleAdornment"] = 55;
	["SoundService"] = 32;
	["SpecialMesh"] = 9;
	["SpawnLocation"] = 26;
	["PlayerScripts"] = 83;
	["PartPairLasso"] = 58;
	["ColorCorrectionEffect"] = 91;
	["UnionOperation"] = 78;
	["Sky"] = 29;
	["MoveToConstraint"] = 90;
	["RopeConstraint"] = 90;
	["RightAngleRampPart"] = 2;
	["ShirtGraphic"] = 41;
	["ScreenGui"] = 48;
	["SelectionSphere"] = 55;
	["RotateV"] = 35;
	["SelectionBox"] = 55;
	["VehicleSeat"] = 36;
	["CustomEvent"] = 5;
	["Chat"] = 34;
	["ServerStorage"] = 75;
	["Selection"] = 56;
	["IntValue"] = 5;
	["RotateP"] = 35;
	["FloorWire"] = 5;
	["TrussPart"] = 2;
	["StarterGear"] = 21;
	["ReflectionMetadataYieldFunctions"] = 87;
	["ReflectionMetadataProperties"] = 87;
	["ReflectionMetadataEvents"] = 87;
	["ReflectionMetadataEnums"] = 87;
	["ReflectionMetadataEnumItem"] = 87;
	["ReflectionMetadataClass"] = 87;
	["PrismPart"] = 2;
	["BinaryStringValue"] = 5;
	["Glue"] = 35;
	["PrismaticConstraint"] = 90;
	["TouchTransmitter"] = 38;
	["CornerWedgePart"] = 2;
	["PathfindingService"] = 38;
	["SpringConstraint"] = 90;
	["Fire"] = 62;
	["Pants"] = 45;
	["NumberValue"] = 5;
	["TestService"] = 69;
	["Motor6D"] = 35;
	["Motor"] = 35;
	["CylindricalConstraint"] = 90;
	["MarketplaceService"] = 47;
	["CoreScript"] = 19;
	["CylinderMesh"] = 9;
	["ConeHandleAdornment"] = 55;
	["SunRaysEffect"] = 91;
	["LocalScript"] = 19;
	["Weld"] = 35;
	["Attachment"] = 35;
	["BoolValue"] = 5;
	["Dialog"] = 63;
	["Pose"] = 61;
	["Decal"] = 8;
	["Hat"] = 46;
	["AnimationTrack"] = 61;
	["ClickDetector"] = 42;
	["Frame"] = 49;
	["LogService"] = 88;
	["FileMesh"] = 9;
	["InsertService"] = 73;
	["HingeConstraint"] = 90;
	["Message"] = 34;
	["Player"] = 13;
	["ContextActionService"] = 42;
	["ContentProvider"] = 73;
	["BodyPosition"] = 15;
	["BoxHandleAdornment"] = 55;
	["ScrollingFrame"] = 49;
	["Keyframe"] = 61;
}

function LoadIcon(service, frame, numb)
	if Instances[service] or numb then
		local row = 1
		local col = 0
		if numb then
			for i = 1,numb do
				if i > colSize*row then
					col = 1
					row = row+1
				else
					col = col+1
				end
			end
		else
			for i = 1,Instances[service] do
				if i > colSize*row then
					col = 1
					row = row+1
				else
					col = col+1
				end
			end
		end
		frame.IconMap.Position = UDim2.new(0,(-3+(-18*col))+18,0,(-3+(-18*row))+18)
	end
end

Exit.MouseEnter:Connect(function()
	game:GetService("TweenService"):Create(Exit, TweenInfo.new(0.1), {
		['ImageColor3'] = Color3.fromRGB(200,200,200);
	}):Play();
end)

Exit.MouseLeave:Connect(function()
	game:GetService("TweenService"):Create(Exit, TweenInfo.new(0.1), {
		['ImageColor3'] = Color3.fromRGB(255,255,255);
	}):Play();
end)

Exit.MouseButton1Down:Connect(function()
	Opened = false
	Hub:TweenPosition(UDim2.new(0.5,0,1.1,0),"InOut","Sine",0.25,true)
end)

Hub.MouseEnter:Connect(function()
	game:GetService("TweenService"):Create(Hub, TweenInfo.new(0.1), {
		['BackgroundColor3'] = Color3.fromRGB(50,50,50);
	}):Play();
end)

Hub.MouseLeave:Connect(function()
	game:GetService("TweenService"):Create(Hub, TweenInfo.new(0.1), {
		['BackgroundColor3'] = Color3.fromRGB(40, 40, 40);
	}):Play();
end)

local CHO = false
local BTH = false

OutputTab.ClearHolder.MouseEnter:Connect(function()
	CHO = true
end)

OutputTab.ClearHolder.MouseLeave:Connect(function()
	CHO = false
end)

OutputTab.MouseEnter:Connect(function()
	BTH = true
	OutputTab.ClearHolder.Clear:TweenPosition(UDim2.new(0,0,0.5,-7),"InOut","Sine",0.2,true)
	repeat wait() until not BTH or not CHO
	OutputTab.ClearHolder.Clear:TweenPosition(UDim2.new(0,0,0,-7),"InOut","Sine",0.2,true)
end)

local SH = false
local RH = false

RemoteTab.Spys.MouseEnter:Connect(function()
	SH = true
end)

RemoteTab.Spys.MouseLeave:Connect(function()
	SH = false
end)

RemoteTab.MouseEnter:Connect(function()
	RH = true
	RemoteTab.Spys.Spyer:TweenPosition(UDim2.new(0,0,0.5,-7),"InOut","Sine",0.2,true)
	repeat wait() until not SH or not RH
	RemoteTab.Spys.Spyer:TweenPosition(UDim2.new(0,0,0,-7),"InOut","Sine",0.2,true)
end)

function OpenUI()
	if Opened then
		Opened = not Opened
		Hub:TweenPosition(UDim2.new(0.5,0,1.1,0),"InOut","Sine",0.25,true)
	else
		Opened = not Opened
		Hub:TweenPosition(UDim2.new(0.5,0,0.35,0),"InOut","Sine",0.25,true)
	end
end

plr.Chatted:Connect(function(msg)
	if msg:lower() == "/e open" then
		OpenUI()
	end
end)

game:GetService("UserInputService").InputBegan:Connect(function(input, proc)
	if not proc and input.KeyCode == Enum.KeyCode.F4 then
		OpenUI()
	end
end)

function SwitchTab(tab,x)
	Tabs.TabLine:TweenPosition(UDim2.new(x,0,1,0),"InOut","Sine",0.25,true)
	if tab == "Remotes" then
		TF.Remotes:TweenPosition(UDim2.new(0,0,0,0),"InOut","Sine",0.25,true)
		TF.Output:TweenPosition(UDim2.new(1,0,0,0),"InOut","Sine",0.25,true)
		TF.Explorer:TweenPosition(UDim2.new(2,0,0,0),"InOut","Sine",0.25,true)
		TF.R2S:TweenPosition(UDim2.new(3,0,0,0),"InOut","Sine",0.25,true)
	elseif tab == "Output" then
		TF.Remotes:TweenPosition(UDim2.new(-1,0,0,0),"InOut","Sine",0.25,true)
		TF.Output:TweenPosition(UDim2.new(0,0,0,0),"InOut","Sine",0.25,true)
		TF.Explorer:TweenPosition(UDim2.new(1,0,0,0),"InOut","Sine",0.25,true)
		TF.R2S:TweenPosition(UDim2.new(2,0,0,0),"InOut","Sine",0.25,true)
	elseif tab == "Explorer" then
		TF.Remotes:TweenPosition(UDim2.new(-2,0,0,0),"InOut","Sine",0.25,true)
		TF.Output:TweenPosition(UDim2.new(-1,0,0,0),"InOut","Sine",0.25,true)
		TF.Explorer:TweenPosition(UDim2.new(0,0,0,0),"InOut","Sine",0.25,true)
		TF.R2S:TweenPosition(UDim2.new(1,0,0,0),"InOut","Sine",0.25,true)
	elseif tab == "R2S" then
		TF.Remotes:TweenPosition(UDim2.new(-3,0,0,0),"InOut","Sine",0.25,true)
		TF.Output:TweenPosition(UDim2.new(-2,0,0,0),"InOut","Sine",0.25,true)
		TF.Explorer:TweenPosition(UDim2.new(-1,0,0,0),"InOut","Sine",0.25,true)
		TF.R2S:TweenPosition(UDim2.new(0,0,0,0),"InOut","Sine",0.25,true)
	end
end

for i,v in pairs(Tabs:GetChildren()) do
	if v:IsA("TextButton") then
		v.MouseButton1Down:Connect(function()
			SwitchTab(v.Name,v.Position.X.Scale)
		end)
	end
end

local Ignores = {
	["CharacterSoundEvent"] = true;
	["MovementUpdate"] = true;
	["OnNewMessage"] = true;
	["OnMessageDoneFiltering"] = true;
	["OnNewSystemMessage"] = true;
	["OnChannelJoined"] = true;
	["OnChannelLeft"] = true;
	["OnMuted"] = true;
	["OnUnmuted"] = true;
	["OnMainChannelSet"] = true;
	["ChannelNameColorUpdated"] = true;
	["SayMessageRequest"] = true;
	["SetBlockedUserIdsRequest"] = true;
	["GetInitDataRequest"] = true;
	["MutePlayerRequest"] = true;
	["UnMutePlayerRequest"] = true;
	["DefaultServerSoundEvent"] = true;
	["AddCharacterLoadedEvent"] = true;
	["RemoveCharacterEvent"] = true;
	["SoundDispatcher"] = true;
	["GamepadNotifications"] = true;
	["SendNotificationInfo"] = true;
	["FollowRelationshipChanged"] = true;
	["NewFollower"] = true;
	["GetFollowRelationships"] = true;
	["SetPlayerBlockList"] = true;
	["UpdatePlayerBlockList"] = true;
	["SetDialogInUse"] = true;
	["GetServerVersion"] = true;
}

local RemotesToSpy = {}
local SpyingRemotes = {}
local BiggestTB = 0;

function UpdateOutput()
	Output.OutputWindow.CanvasSize = UDim2.new(0,89+BiggestTB,0,(#Output.OutputWindow:GetChildren()*20)+1)
end

function ClearOutput()
	BiggestTB = 0
	Output.OutputWindow:ClearAllChildren()
	UpdateOutput()
end

OutputTab.ClearHolder.Clear.MouseButton1Down:Connect(function()
	BTH = false
	CHO = false
	ClearOutput()
end)

local TextToCopy = ""

function LoadR2S(obj,args)
	R2S.Warning.Visible = false
	R2S.Window.Visible = true
	
	local InstancesTable = {}
	local String = ""
	for i in string.gmatch(obj:GetFullName(),".") do
		if i == "." then
			InstancesTable[#InstancesTable+1] = String
			String = ""
		else
			String = String .. i
		end
	end
	InstancesTable[#InstancesTable+1] = String
	
	local TextToLoad = "local Remote = game"
	
	for i,v in pairs(InstancesTable) do
		if i == #InstancesTable then
			TextToLoad = TextToLoad.."['"..v.."']"
		else
			TextToLoad = TextToLoad.."."..v
		end
	end
	
	TextToLoad = TextToLoad.."\n\nlocal Arguments = "
	
	local function GenerateScript()
		local Tabs = 0
		local function AddTabs()
			if Tabs == 0 then return end
			for i = 0,Tabs do
				TextToLoad = TextToLoad.."    "
			end
		end
		local IgnoreCommaBreak = false
		local last = ""
		for i in string.gmatch(args,".") do
			if i == "{" then
				TextToLoad = TextToLoad.."{\n"
				Tabs = Tabs + 1
				AddTabs()
			elseif i == "}" then
				TextToLoad = TextToLoad.."\n"
				Tabs = Tabs - 1
				AddTabs()
				TextToLoad = TextToLoad.."}"
			elseif i == "(" then
				IgnoreCommaBreak = true
				TextToLoad = TextToLoad..i
			elseif i == ")" and IgnoreCommaBreak then
				IgnoreCommaBreak = false
				TextToLoad = TextToLoad..i
			elseif i == "," and not IgnoreCommaBreak then
				TextToLoad = TextToLoad..",\n"
				AddTabs()
			elseif i == " " and last == "," then
				--lol goteeem im doing nothing here cuz it's mainly for visuals
			else
				TextToLoad = TextToLoad..i
			end
			last = i
		end
	end
	GenerateScript()
	TextToLoad = TextToLoad.."\n\nRemote:"..((obj.ClassName == "RemoteEvent" and "FireServer") or (obj.ClassName == "RemoteFunction" and "InvokeServer") or (obj.ClassName == "BindableEvent" and "Fire") or (obj.ClassName == "BindableFunction" and "Invoke")).."(unpack(Arguments))"
	
	TextToCopy = TextToLoad
	
	R2S.Window.ScriptWindow.RemoteScript.Text = TextToLoad
	R2S.Window.ScriptWindow.CanvasSize = UDim2.new(0,R2S.Window.ScriptWindow.RemoteScript.TextBounds.X+6,0,R2S.Window.ScriptWindow.RemoteScript.TextBounds.Y+6)
end

R2S.Window.CopyClip.MouseEnter:Connect(function()
	game:GetService("TweenService"):Create(R2S.Window.CopyClip, TweenInfo.new(0.1), {
		['BackgroundColor3'] = Color3.fromRGB(60, 60, 60);
	}):Play();
end)

R2S.Window.CopyClip.MouseLeave:Connect(function()
	game:GetService("TweenService"):Create(R2S.Window.CopyClip, TweenInfo.new(0.1), {
		['BackgroundColor3'] = Color3.fromRGB(50, 50, 50);
	}):Play();
end)

R2S.Window.CopyClip.MouseButton1Down:Connect(function()
	R2S.Window.CopyClip.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
	game:GetService("TweenService"):Create(R2S.Window.CopyClip, TweenInfo.new(0.1), {
		['BackgroundColor3'] = Color3.fromRGB(50, 50, 50);
	}):Play();
	if setclipboard then
		setclipboard(TextToCopy)
	elseif toclipboard then
		toclipboard(TextToCopy)
	elseif syn and syn.write_clipboard then
		syn.write_clipboard(TextToCopy)
	end
end)

local ViewDB = false

function AddToOutput(obj,args)
	local temp = Supplies.RemoteOutputTemplate:Clone()
	temp.RemoteName.Text = obj.Name.." | Args: "..args
	LoadIcon(obj.ClassName,temp.Icon)
	temp.Position = UDim2.new(0,5,0,#Output.OutputWindow:GetChildren()*20)
	temp.Parent = Output.OutputWindow
	temp.R2S.Position = UDim2.new(0,25+temp.RemoteName.TextBounds.X,0,0)
	if temp.RemoteName.TextBounds.X >= BiggestTB then
		BiggestTB = temp.RemoteName.TextBounds.X
	end
	UpdateOutput()
	temp.R2S.MouseEnter:Connect(function()
		game:GetService("TweenService"):Create(temp.R2S, TweenInfo.new(0.1), {
			['BackgroundColor3'] = Color3.fromRGB(75,75,75);
		}):Play();
	end)
	temp.R2S.MouseLeave:Connect(function()
		game:GetService("TweenService"):Create(temp.R2S, TweenInfo.new(0.1), {
			['BackgroundColor3'] = Color3.fromRGB(60, 60, 60);
		}):Play();
	end)
	temp.R2S.MouseButton1Down:Connect(function()
		if not ViewDB then
			ViewDB = true
			LoadR2S(obj,args)
			SwitchTab("R2S",0.75)
			wait(0.5)
			ViewDB = false
		end
	end)
end

--Do Spy stuff boyssssss

local IgnoreThis = {
    GetSetting = true;
    GetSelection = true;
    SelectionChanged = true;
    GetAwaiting = true;
}

function GetType(item)
	if type(item) == "string" then
		return "\""..item.."\""
	elseif type(item) == "table" then
		local str = "{"
		local max = 0
		local numb = 1
		for i,v in pairs(item) do
			max = max+1
		end
		for i,v in pairs(item) do
			if numb == max then
				str = str.."["..GetType(i).."] = "..GetType(v)
			else
				str = str.."["..GetType(i).."] = "..GetType(v)..", "
			end
			numb = numb + 1
		end
		str = str.."}"
		return str
	elseif type(item) == "userdata" then
		local a,b = pcall(function()
			return item.ClassName 
		end)
		if a then
			return item:GetFullName()
		else
			if tostring(b):match("not a valid member of %w+") then
				local c, d = tostring(b):match("not a valid member of %w+"):find("of ")
				local class = tostring(b):match("not a valid member of %w+"):sub(d+1)
				return class..".new(".. tostring(item) ..")"
			end
		end
	else
		return tostring(item)
	end
end

function ReturnArgs(...)
	local args = {...}
	local list = ""
	local max = 0
	local numb = 1
	for i,v in pairs(args) do
		max = max + 1
	end
	for i,v in pairs(args) do
		if numb == max then
			list = list..GetType(v)
		else
			list = list..GetType(v)..", "
		end
		numb = numb + 1
	end
	list=list
	return list
end

local mt = getrawmetatable(game)
local old_n = mt.__namecall
if setreadonly then
    setreadonly(mt, false)
elseif make_writeable then
    make_writeable(mt)
end

local protect = newcclosure or protect_function or function(f) return f end
mt.__namecall = protect(function(self, ...)
    local args = {...}
	table.remove(args)

    if (not IgnoreThis[self.Name]) and SpyingRemotes[self] and RemoteIgnores[self.ClassName] then
        AddToOutput(self, ReturnArgs(args));
    end

    return old_n(self, ...)
end)

if replaceclosure then
	local OldFireServer
	local Hook = protect(function(self,...)
		local args = {...}
		
		if (not IgnoreThis[self.Name]) and SpyingRemotes[self] then
	        AddToOutput(self, ReturnArgs(args));
	    end
		
	    return OldFireServer(self,...)
	end)
	
	OldFireServer = replaceclosure(Instance.new("RemoteEvent").FireServer, Hook)
	
	local OldInvokeServer
	local Hook2 = protect(function(self,...)
		local args = {...}
		
		if (not IgnoreThis[self.Name]) and SpyingRemotes[self] then
	        AddToOutput(self, ReturnArgs(args));
	    end
		
	    return OldInvokeServer(self,...)
	end)
	
	OldInvokeServer = replaceclosure(Instance.new("RemoteFunction").InvokeServer, Hook2)
end
----------------------

local BiggestR = 0;

function UpdateRemotes()
	Remotes.CanvasSize = UDim2.new(0,144+BiggestR,0,(#Remotes:GetChildren()-1)*20)
end

function Spy(temp,bool)
	if not bool then
		temp.Spy.Text = "Spy"
		game:GetService("TweenService"):Create(temp.Spy, TweenInfo.new(0.5), {
			['TextColor3'] = Color3.fromRGB(255,255,255);
		}):Play();
	else
		temp.Spy.Text = "Spying"
		game:GetService("TweenService"):Create(temp.Spy, TweenInfo.new(0.5), {
			['TextColor3'] = Color3.fromRGB(17, 170, 73);
		}):Play();
	end
end

function LoadExplorer(obj)
	Explorer.Window.ExplorerWindow:ClearAllChildren()
	Explorer.Window.ExplorerWindow.CanvasSize = UDim2.new(0,0,0,0)
	Explorer.Warning.Visible = false
	Explorer.Window.Visible = true
	local InstancesTable = {}
	local String = ""
	for i in string.gmatch(obj:GetFullName(),".") do
		if i == "." then
			InstancesTable[#InstancesTable+1] = String
			String = ""
		else
			String = String .. i
		end
	end
	InstancesTable[#InstancesTable+1] = String
	local ClassTable = {}
	local function Check(obj,pos)
		if obj:FindFirstChild(InstancesTable[pos]) then
			ClassTable[pos] = obj:FindFirstChild(InstancesTable[pos])
			if InstancesTable[pos+1] then
				Check(obj:FindFirstChild(InstancesTable[pos]),pos+1)
			end
		end
	end
	Check(game,1)
	local last
	for i,v in pairs(InstancesTable) do
		local temp = Supplies.ExplorerTemplate:Clone()
		temp.Name = v
		temp.InstanceName.Text = v
		LoadIcon(((ClassTable[i] and ClassTable[i].ClassName) or "Folder"),temp.Icon)
		if ClassTable[i] then
			if #ClassTable[i]:GetChildren() > 0 then
				temp.Arrow.Visible = true
			else
				temp.Arrow.Visible = false
			end
		end
		if last then
			temp.Parent = last.Holder
		else
			temp.Parent = Explorer.Window.ExplorerWindow
		end
		temp.BG.Size = UDim2.new(0,temp.InstanceName.TextBounds.X+36,1,0)
		temp.InstanceName.Size = UDim2.new(0,temp.InstanceName.TextBounds.X+10,1,0)
		last = temp
		temp.InstanceName.MouseEnter:Connect(function()
			game:GetService("TweenService"):Create(temp.BG, TweenInfo.new(0.1), {
				['BackgroundTransparency'] = 0.5;
			}):Play();
		end)
		temp.InstanceName.MouseLeave:Connect(function()
			game:GetService("TweenService"):Create(temp.BG, TweenInfo.new(0.1), {
				['BackgroundTransparency'] = 1;
			}):Play();
		end)
		temp.Arrow.Open.MouseEnter:Connect(function()
			game:GetService("TweenService"):Create(temp.Arrow.IconMap, TweenInfo.new(0.1), {
				['ImageColor3'] = Color3.fromRGB(200,200,200);
			}):Play();
		end)
		temp.Arrow.Open.MouseLeave:Connect(function()
			game:GetService("TweenService"):Create(temp.Arrow.IconMap, TweenInfo.new(0.1), {
				['ImageColor3'] = Color3.fromRGB(255,255,255);
			}):Play();
		end)
		temp.Arrow.Open.MouseButton1Down:Connect(function()
			if temp.Holder.Visible then
				temp.Holder.Visible = false
				LoadIcon(nil,temp.Arrow,166)
			else
				temp.Holder.Visible = true
				LoadIcon(nil,temp.Arrow,167)
			end
		end)
		temp.InstanceName.Open.MouseButton1Down:Connect(function()
			if temp.Holder.Visible then
				temp.Holder.Visible = false
				LoadIcon(nil,temp.Arrow,166)
			else
				temp.Holder.Visible = true
				LoadIcon(nil,temp.Arrow,167)
			end
		end)
	end
	Explorer.Window.ExplorerWindow.CanvasSize = UDim2.new(0,(last.AbsolutePosition.X-Explorer.AbsolutePosition.X)+50+last.InstanceName.TextBounds.X,0,(20*#InstancesTable)+5)
end

local AllStuff = {}

function MakeRemote(obj)
	local temp = Supplies.RemoteTemplate:Clone()
	temp.RemoteName.Text = obj.Name
	LoadIcon(obj.ClassName,temp.Icon)
	temp.Parent = Remotes
	temp.Spy.Position = UDim2.new(0,25+temp.RemoteName.TextBounds.X,0,0)
	temp.View.Position = UDim2.new(0,80+temp.RemoteName.TextBounds.X,0,0)
	if temp.RemoteName.TextBounds.X >= BiggestR then
		BiggestR = temp.RemoteName.TextBounds.X
	end
	RemotesToSpy[obj] = temp
	AllStuff[temp] = obj
	temp.Spy.MouseEnter:Connect(function()
		game:GetService("TweenService"):Create(temp.Spy, TweenInfo.new(0.1), {
			['BackgroundColor3'] = Color3.fromRGB(75,75,75);
		}):Play();
	end)
	temp.Spy.MouseLeave:Connect(function()
		game:GetService("TweenService"):Create(temp.Spy, TweenInfo.new(0.1), {
			['BackgroundColor3'] = Color3.fromRGB(60, 60, 60);
		}):Play();
	end)
	temp.View.MouseEnter:Connect(function()
		game:GetService("TweenService"):Create(temp.View, TweenInfo.new(0.1), {
			['BackgroundColor3'] = Color3.fromRGB(75,75,75);
		}):Play();
	end)
	temp.View.MouseLeave:Connect(function()
		game:GetService("TweenService"):Create(temp.View, TweenInfo.new(0.1), {
			['BackgroundColor3'] = Color3.fromRGB(60, 60, 60);
		}):Play();
	end)
	temp.Spy.MouseButton1Down:Connect(function()
		if SpyingRemotes[obj] then
			SpyingRemotes[obj] = nil
			Spy(temp,false)
		else
			SpyingRemotes[obj] = true
			Spy(temp,true)
		end
	end)
	temp.View.MouseButton1Down:Connect(function()
		if not ViewDB then
			ViewDB = true
			LoadExplorer(obj)
			SwitchTab("Explorer",0.5)
			wait(0.5)
			ViewDB = false
		end
	end)
end

local SpyingDB = false
RemoteTab.Spys.Spyer.MouseButton1Down:Connect(function()
	if not SpyingDB then
		SpyingDB = true
		game:GetService("TweenService"):Create(RemoteTab.Spys.Spyer, TweenInfo.new(0.1), {
			['ImageColor3'] = Color3.fromRGB(215, 90, 74);
		}):Play();
		RemoteTab.Spys.Spyer.Words.Text = "Unspy All"
		for i,v in pairs(Remotes:GetChildren()) do
			if v:IsA("Frame") then
				Spy(v,true)
				if AllStuff[v] then
					SpyingRemotes[AllStuff[v]] = true
				end
			end
		end
	else
		SpyingDB = false
		game:GetService("TweenService"):Create(RemoteTab.Spys.Spyer, TweenInfo.new(0.1), {
			['ImageColor3'] = Color3.fromRGB(0, 170, 93);
		}):Play();
		RemoteTab.Spys.Spyer.Words.Text = "Spy All"
		for i,v in pairs(Remotes:GetChildren()) do
			if v:IsA("Frame") then
				Spy(v,false)
				if AllStuff[v] then
					SpyingRemotes[AllStuff[v]] = nil
				end
			end
		end
	end
end)

function LoadSpy()
	Remotes:ClearAllChildren()
	Supplies.RemoteGrid:Clone().Parent = Remotes
	local function recur(obj)
		for i,v in pairs(obj:GetChildren()) do
			local suc, err = pcall(function()
				v:GetChildren()
			end)
			if suc then
				if RemoteIgnores[v.ClassName] and not Ignores[v.Name] then
					MakeRemote(v)
				end
				recur(v)
			end
		end
	end
	recur(game)
	UpdateRemotes()
end
spawn(function()LoadSpy()end)

function CreateListener()
	for i,v in pairs(game:GetChildren()) do
		local suc, err = pcall(function()
			v:GetChildren()
		end)
		if suc then
			v.DescendantAdded:Connect(function(obj)
				if RemoteIgnores[obj.ClassName] and not Ignores[obj.Name] then
					MakeRemote(obj)
					UpdateRemotes()
				end
			end)
			v.DescendantRemoving:Connect(function(obj)
				if RemoteIgnores[obj.ClassName] and not Ignores[obj.Name] then
					RemotesToSpy[obj]:Destroy()
					RemotesToSpy[obj] = nil
					SpyingRemotes[obj] = nil
				end
			end)
		end
	end
end
spawn(function()CreateListener()end)

spawn(function()
	while true do
		for i = 0,100 do
			Tabs.TabLine.BackgroundColor3 = Color3.fromHSV(i/100,0.75,0.75)
			wait()
		end
	end
end)

spawn(function()
	while true do
		Animate.Texture:TweenPosition(UDim2.new(-2,0,-2,0),"Out","Linear",Animate_Time,true)
		Animate.Texture2:TweenPosition(UDim2.new(0,0,0,0),"Out","Linear",Animate_Time,true)
		Animate.Texture3:TweenPosition(UDim2.new(-2,0,0,0),"Out","Linear",Animate_Time,true)
		Animate.Texture4:TweenPosition(UDim2.new(0,0,-2,0),"Out","Linear",Animate_Time,true)
		wait(Animate_Time)
		Animate.Texture.Position = UDim2.new(2,0,2,0)
		Animate.Texture3.Position = UDim2.new(0,0,2,0)
		Animate.Texture4.Position = UDim2.new(2,0,0,0)
		Animate.Texture2:TweenPosition(UDim2.new(-2,0,-2,0),"Out","Linear",Animate_Time,true)
		Animate.Texture:TweenPosition(UDim2.new(0,0,0,0),"Out","Linear",Animate_Time,true)
		Animate.Texture3:TweenPosition(UDim2.new(-2,0,0,0),"Out","Linear",Animate_Time,true)
		Animate.Texture4:TweenPosition(UDim2.new(0,0,-2,0),"Out","Linear",Animate_Time,true)
		wait(Animate_Time)
		Animate.Texture2.Position = UDim2.new(2,0,2,0)
		Animate.Texture3.Position = UDim2.new(0,0,2,0)
		Animate.Texture4.Position = UDim2.new(2,0,0,0)
	end
end)
end)

Section5:NewButton("Dex explorer v2", "Yeah didn't know this exists too", function()
    CreateGui = function()
        local NewGuiPart1 = Instance.new("ScreenGui")
        local NewGuiPart2 = Instance.new("Frame")
        local NewGuiPart3 = Instance.new("Frame")
        local NewGuiPart4 = Instance.new("TextLabel")
        local NewGuiPart5 = Instance.new("TextBox")
        local NewGuiPart6 = Instance.new("Frame")
        local NewGuiPart7 = Instance.new("Frame")
        local NewGuiPart8 = Instance.new("TextButton")
        local NewGuiPart9 = Instance.new("TextLabel")
        local NewGuiPart10 = Instance.new("TextLabel")
        local NewGuiPart11 = Instance.new("ImageLabel")
        local NewGuiPart12 = Instance.new("Frame")
        local NewGuiPart13 = Instance.new("Frame")
        local NewGuiPart14 = Instance.new("Frame")
        local NewGuiPart15 = Instance.new("TextButton")
        local NewGuiPart16 = Instance.new("ImageLabel")
        local NewGuiPart17 = Instance.new("TextButton")
        local NewGuiPart18 = Instance.new("ImageLabel")
        local NewGuiPart19 = Instance.new("TextButton")
        local NewGuiPart20 = Instance.new("ImageLabel")
        local NewGuiPart21 = Instance.new("TextButton")
        local NewGuiPart22 = Instance.new("ImageLabel")
        local NewGuiPart23 = Instance.new("TextButton")
        local NewGuiPart24 = Instance.new("ImageLabel")
        local NewGuiPart25 = Instance.new("TextButton")
        local NewGuiPart26 = Instance.new("ImageLabel")
        local NewGuiPart27 = Instance.new("TextButton")
        local NewGuiPart28 = Instance.new("Frame")
        local NewGuiPart29 = Instance.new("Frame")
        local NewGuiPart30 = Instance.new("TextLabel")
        local NewGuiPart31 = Instance.new("Frame")
        local NewGuiPart32 = Instance.new("TextLabel")
        local NewGuiPart33 = Instance.new("TextLabel")
        local NewGuiPart34 = Instance.new("TextButton")
        local NewGuiPart35 = Instance.new("TextLabel")
        local NewGuiPart36 = Instance.new("TextLabel")
        local NewGuiPart37 = Instance.new("Frame")
        local NewGuiPart38 = Instance.new("Frame")
        local NewGuiPart39 = Instance.new("TextLabel")
        local NewGuiPart40 = Instance.new("Frame")
        local NewGuiPart41 = Instance.new("TextButton")
        local NewGuiPart42 = Instance.new("TextLabel")
        local NewGuiPart43 = Instance.new("TextButton")
        local NewGuiPart44 = Instance.new("TextBox")
        local NewGuiPart45 = Instance.new("TextButton")
        local NewGuiPart46 = Instance.new("TextLabel")
        local NewGuiPart47 = Instance.new("TextLabel")
        local NewGuiPart48 = Instance.new("Frame")
        local NewGuiPart49 = Instance.new("TextLabel")
        local NewGuiPart50 = Instance.new("Frame")
        local NewGuiPart51 = Instance.new("TextButton")
        local NewGuiPart52 = Instance.new("TextLabel")
        local NewGuiPart53 = Instance.new("TextButton")
        local NewGuiPart54 = Instance.new("Frame")
        local NewGuiPart55 = Instance.new("TextLabel")
        local NewGuiPart56 = Instance.new("Frame")
        local NewGuiPart57 = Instance.new("TextLabel")
        local NewGuiPart58 = Instance.new("TextButton")
        local NewGuiPart59 = Instance.new("Frame")
        local NewGuiPart60 = Instance.new("TextLabel")
        local NewGuiPart61 = Instance.new("Frame")
        local NewGuiPart62 = Instance.new("TextLabel")
        local NewGuiPart63 = Instance.new("ScrollingFrame")
        local NewGuiPart64 = Instance.new("TextButton")
        local NewGuiPart65 = Instance.new("TextLabel")
        local NewGuiPart66 = Instance.new("TextLabel")
        local NewGuiPart67 = Instance.new("TextButton")
        local NewGuiPart68 = Instance.new("TextButton")
        local NewGuiPart69 = Instance.new("Frame")
        local NewGuiPart70 = Instance.new("TextButton")
        local NewGuiPart71 = Instance.new("TextBox")
        local NewGuiPart72 = Instance.new("TextButton")
        local NewGuiPart73 = Instance.new("TextButton")
        local NewGuiPart74 = Instance.new("Frame")
        local NewGuiPart75 = Instance.new("Frame")
        local NewGuiPart76 = Instance.new("TextButton")
        local NewGuiPart77 = Instance.new("ScrollingFrame")
        local NewGuiPart78 = Instance.new("Frame")
        local NewGuiPart79 = Instance.new("TextLabel")
        local NewGuiPart80 = Instance.new("TextLabel")
        local NewGuiPart81 = Instance.new("TextLabel")
        local NewGuiPart82 = Instance.new("Frame")
        local NewGuiPart83 = Instance.new("TextLabel")
        local NewGuiPart84 = Instance.new("Frame")
        local NewGuiPart85 = Instance.new("Frame")
        local NewGuiPart86 = Instance.new("Frame")
        local NewGuiPart87 = Instance.new("ImageButton")
        local NewGuiPart88 = Instance.new("Frame")
        local NewGuiPart89 = Instance.new("Frame")
        local NewGuiPart90 = Instance.new("Frame")
        local NewGuiPart91 = Instance.new("Frame")
        local NewGuiPart92 = Instance.new("Frame")
        local NewGuiPart93 = Instance.new("ImageButton")
        local NewGuiPart94 = Instance.new("Frame")
        local NewGuiPart95 = Instance.new("Frame")
        local NewGuiPart96 = Instance.new("Frame")
        local NewGuiPart97 = Instance.new("Frame")
        local NewGuiPart98 = Instance.new("Frame")
        local NewGuiPart99 = Instance.new("TextButton")
        local NewGuiPart100 = Instance.new("Frame")
        local NewGuiPart101 = Instance.new("Frame")
        local NewGuiPart102 = Instance.new("TextButton")
        local NewGuiPart103 = Instance.new("TextButton")
        local NewGuiPart104 = Instance.new("TextButton")
        local NewGuiPart105 = Instance.new("Frame")
        local NewGuiPart106 = Instance.new("Frame")
        local NewGuiPart107 = Instance.new("TextLabel")
        local NewGuiPart108 = Instance.new("TextLabel")
        local NewGuiPart109 = Instance.new("TextLabel")
        local NewGuiPart110 = Instance.new("ImageLabel")
        local NewGuiPart111 = Instance.new("Frame")
        local NewGuiPart112 = Instance.new("Frame")
        local NewGuiPart113 = Instance.new("TextLabel")
        local NewGuiPart114 = Instance.new("Frame")
        local NewGuiPart115 = Instance.new("Frame")
        local NewGuiPart116 = Instance.new("TextLabel")
        local NewGuiPart117 = Instance.new("TextLabel")
        local NewGuiPart118 = Instance.new("TextButton")
        local NewGuiPart119 = Instance.new("TextLabel")
        local NewGuiPart120 = Instance.new("TextLabel")
        local NewGuiPart121 = Instance.new("Frame")
        local NewGuiPart122 = Instance.new("TextLabel")
        local NewGuiPart123 = Instance.new("TextLabel")
        local NewGuiPart124 = Instance.new("TextButton")
        local NewGuiPart125 = Instance.new("TextLabel")
        local NewGuiPart126 = Instance.new("TextLabel")
        local NewGuiPart127 = Instance.new("Frame")
        local NewGuiPart128 = Instance.new("TextLabel")
        local NewGuiPart129 = Instance.new("TextLabel")
        local NewGuiPart130 = Instance.new("TextButton")
        local NewGuiPart131 = Instance.new("TextLabel")
        local NewGuiPart132 = Instance.new("TextLabel")
        local NewGuiPart133 = Instance.new("Frame")
        local NewGuiPart134 = Instance.new("TextLabel")
        local NewGuiPart135 = Instance.new("TextLabel")
        local NewGuiPart136 = Instance.new("TextButton")
        local NewGuiPart137 = Instance.new("TextLabel")
        local NewGuiPart138 = Instance.new("TextLabel")
        local NewGuiPart139 = Instance.new("TextLabel")
        local NewGuiPart140 = Instance.new("Frame")
        local NewGuiPart141 = Instance.new("Frame")
        local NewGuiPart142 = Instance.new("TextLabel")
        local NewGuiPart143 = Instance.new("TextButton")
        local NewGuiPart144 = Instance.new("TextBox")
        local NewGuiPart145 = Instance.new("Frame")
        local NewGuiPart146 = Instance.new("TextButton")
        local NewGuiPart147 = Instance.new("TextLabel")
        local NewGuiPart148 = Instance.new("TextLabel")
        local NewGuiPart149 = Instance.new("Frame")
        local NewGuiPart150 = Instance.new("Frame")
        local NewGuiPart151 = Instance.new("TextLabel")
        local NewGuiPart152 = Instance.new("TextLabel")
        local NewGuiPart153 = Instance.new("BindableFunction")
        local NewGuiPart154 = Instance.new("BindableFunction")
        local NewGuiPart155 = Instance.new("BindableFunction")
        local NewGuiPart156 = Instance.new("BindableFunction")
        local NewGuiPart157 = Instance.new("BindableEvent")
        local NewGuiPart158 = Instance.new("BindableFunction")
        local NewGuiPart159 = Instance.new("BindableFunction")
        local NewGuiPart160 = Instance.new("BindableEvent")
        local NewGuiPart161 = Instance.new("BindableFunction")
        local NewGuiPart162 = Instance.new("BindableFunction")
        local NewGuiPart163 = Instance.new("BindableEvent")
        -- Properties
        
        NewGuiPart1.Name = "Dex"
        
        NewGuiPart2.Name = "PropertiesFrame"
        NewGuiPart2.Parent = NewGuiPart1
        NewGuiPart2.Active = true
        NewGuiPart2.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart2.BackgroundTransparency = 0.10000000149012
        NewGuiPart2.BorderColor3 = Color3.new(0.74902, 0.74902, 0.74902)
        NewGuiPart2.Position = UDim2.new(1, 0, 0.5, 36)
        NewGuiPart2.Size = UDim2.new(0, 300, 0.5, -36)
        
        NewGuiPart158.Name = "GetApi"
        NewGuiPart158.Parent = NewGuiPart2
        NewGuiPart158.Archivable = true
        
        NewGuiPart159.Name = "GetAwaiting"
        NewGuiPart159.Parent = NewGuiPart2
        NewGuiPart159.Archivable = true
        
        NewGuiPart160.Name = "SetAwaiting"
        NewGuiPart160.Parent = NewGuiPart2
        NewGuiPart160.Archivable = true
        
        NewGuiPart3.Name = "Header"
        NewGuiPart3.Parent = NewGuiPart2
        NewGuiPart3.BackgroundColor3 = Color3.new(0.913726, 0.913726, 0.913726)
        NewGuiPart3.BorderColor3 = Color3.new(0.584314, 0.584314, 0.584314)
        NewGuiPart3.Position = UDim2.new(0, 0, 0, -36)
        NewGuiPart3.Size = UDim2.new(1, 0, 0, 35)
        
        NewGuiPart4.Parent = NewGuiPart3
        NewGuiPart4.BackgroundTransparency = 1
        NewGuiPart4.Position = UDim2.new(0, 4, 0, 0)
        NewGuiPart4.Size = UDim2.new(1, -4, 0.5, 0)
        NewGuiPart4.Font = Enum.Font.SourceSans
        NewGuiPart4.FontSize = Enum.FontSize.Size14
        NewGuiPart4.Text = "Properties"
        NewGuiPart4.TextColor3 = Color3.new(0, 0, 0)
        NewGuiPart4.TextXAlignment = Enum.TextXAlignment.Left
        
        NewGuiPart5.Parent = NewGuiPart3
        NewGuiPart5.BackgroundTransparency = 0.80000001192093
        NewGuiPart5.Position = UDim2.new(0, 4, 0.5, 0)
        NewGuiPart5.Size = UDim2.new(1, -8, 0.5, -3)
        NewGuiPart5.Font = Enum.Font.SourceSans
        NewGuiPart5.FontSize = Enum.FontSize.Size14
        NewGuiPart5.Text = "Search Properties"
        --NewGuiPart5.TextColor3 = Color3.new(0, 0, 0)
        NewGuiPart5.TextXAlignment = Enum.TextXAlignment.Left
        
        NewGuiPart6.Name = "ExplorerPanel"
        NewGuiPart6.Parent = NewGuiPart1
        NewGuiPart6.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart6.BackgroundTransparency = 0.10000000149012
        NewGuiPart6.BorderColor3 = Color3.new(0.74902, 0.74902, 0.74902)
        NewGuiPart6.Position = UDim2.new(1, 0, 0, 0)
        NewGuiPart6.Size = UDim2.new(0, 300, 0.5, 0)
        
        NewGuiPart153.Name = "GetOption"
        NewGuiPart153.Parent = NewGuiPart6
        NewGuiPart153.Archivable = true
        
        NewGuiPart154.Name = "GetSelection"
        NewGuiPart154.Parent = NewGuiPart6
        NewGuiPart154.Archivable = true
        
        NewGuiPart155.Name = "SetOption"
        NewGuiPart155.Parent = NewGuiPart6
        NewGuiPart155.Archivable = true
        
        NewGuiPart156.Name = "SetSelection"
        NewGuiPart156.Parent = NewGuiPart6
        NewGuiPart156.Archivable = true
        
        NewGuiPart157.Name = "SelectionChanged"
        NewGuiPart157.Parent = NewGuiPart6
        NewGuiPart157.Archivable = true
        
        NewGuiPart7.Name = "SideMenu"
        NewGuiPart7.Parent = NewGuiPart1
        NewGuiPart7.BackgroundColor3 = Color3.new(0.913726, 0.913726, 0.913726)
        NewGuiPart7.BackgroundTransparency = 1
        NewGuiPart7.BorderColor3 = Color3.new(0.584314, 0.584314, 0.584314)
        NewGuiPart7.BorderSizePixel = 0
        NewGuiPart7.Position = UDim2.new(1, -330, 0, 0)
        NewGuiPart7.Size = UDim2.new(0, 30, 0, 180)
        NewGuiPart7.Visible = false
        NewGuiPart7.ZIndex = 2
        
        NewGuiPart8.Name = "Toggle"
        NewGuiPart8.Parent = NewGuiPart7
        NewGuiPart8.Active = false
        NewGuiPart8.BackgroundColor3 = Color3.new(0.913726, 0.913726, 0.913726)
        NewGuiPart8.BorderSizePixel = 0
        NewGuiPart8.Position = UDim2.new(0, 0, 0, 60)
        NewGuiPart8.Size = UDim2.new(0, 30, 0, 30)
        NewGuiPart8.AutoButtonColor = false
        NewGuiPart8.Font = Enum.Font.SourceSans
        NewGuiPart8.FontSize = Enum.FontSize.Size24
        NewGuiPart8.Text = ">"
        NewGuiPart8.TextTransparency = 1
        NewGuiPart8.TextWrapped = true
        
        NewGuiPart9.Name = "Title"
        NewGuiPart9.Parent = NewGuiPart7
        NewGuiPart9.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart9.BackgroundTransparency = 1
        NewGuiPart9.Size = UDim2.new(0, 30, 0, 20)
        NewGuiPart9.ZIndex = 2
        NewGuiPart9.Font = Enum.Font.SourceSansBold
        NewGuiPart9.FontSize = Enum.FontSize.Size14
        NewGuiPart9.Text = "DEX"
        NewGuiPart9.TextWrapped = true
        
        NewGuiPart10.Name = "Version"
        NewGuiPart10.Parent = NewGuiPart7
        NewGuiPart10.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart10.BackgroundTransparency = 1
        NewGuiPart10.Position = UDim2.new(0, 0, 0, 15)
        NewGuiPart10.Size = UDim2.new(0, 30, 0, 20)
        NewGuiPart10.ZIndex = 2
        NewGuiPart10.Font = Enum.Font.SourceSansBold
        NewGuiPart10.FontSize = Enum.FontSize.Size12
        NewGuiPart10.Text = "V2.0.0"
        NewGuiPart10.TextWrapped = true
        
        NewGuiPart11.Name = "Slant"
        NewGuiPart11.Parent = NewGuiPart7
        NewGuiPart11.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart11.BackgroundTransparency = 1
        NewGuiPart11.Position = UDim2.new(0, 0, 0, 90)
        NewGuiPart11.Rotation = 180
        NewGuiPart11.Size = UDim2.new(0, 30, 0, 30)
        NewGuiPart11.Image = "rbxassetid://474172996"
        NewGuiPart11.ImageColor3 = Color3.new(0.913726, 0.913726, 0.913726)
        
        NewGuiPart12.Name = "Main"
        NewGuiPart12.Parent = NewGuiPart7
        NewGuiPart12.BackgroundColor3 = Color3.new(0.913726, 0.913726, 0.913726)
        NewGuiPart12.BorderSizePixel = 0
        NewGuiPart12.Size = UDim2.new(0, 30, 0, 30)
        
        NewGuiPart13.Name = "SlideOut"
        NewGuiPart13.Parent = NewGuiPart7
        NewGuiPart13.BackgroundColor3 = Color3.new(0.862745, 0.862745, 0.862745)
        NewGuiPart13.BackgroundTransparency = 1
        NewGuiPart13.BorderSizePixel = 0
        NewGuiPart13.ClipsDescendants = true
        NewGuiPart13.Position = UDim2.new(0, 0, 0, 30)
        NewGuiPart13.Size = UDim2.new(0, 30, 0, 150)
        
        NewGuiPart14.Name = "SlideFrame"
        NewGuiPart14.Parent = NewGuiPart13
        NewGuiPart14.BackgroundColor3 = Color3.new(0.862745, 0.862745, 0.862745)
        NewGuiPart14.BorderSizePixel = 0
        NewGuiPart14.Position = UDim2.new(0, 0, 0, -150)
        NewGuiPart14.Size = UDim2.new(0, 30, 0, 150)
        
        NewGuiPart15.Name = "Explorer"
        NewGuiPart15.Parent = NewGuiPart14
        NewGuiPart15.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart15.BackgroundTransparency = 1
        NewGuiPart15.BorderSizePixel = 0
        NewGuiPart15.Position = UDim2.new(0, 0, 0, 120)
        NewGuiPart15.Size = UDim2.new(0, 30, 0, 30)
        NewGuiPart15.ZIndex = 2
        NewGuiPart15.AutoButtonColor = false
        NewGuiPart15.Font = Enum.Font.SourceSans
        NewGuiPart15.FontSize = Enum.FontSize.Size24
        NewGuiPart15.Text = ""
        
        NewGuiPart16.Name = "Icon"
        NewGuiPart16.Parent = NewGuiPart15
        NewGuiPart16.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart16.BackgroundTransparency = 1
        NewGuiPart16.Position = UDim2.new(0, 5, 0, 5)
        NewGuiPart16.Size = UDim2.new(0, 20, 0, 20)
        NewGuiPart16.ZIndex = 2
        NewGuiPart16.Image = "rbxassetid://472635937"
        NewGuiPart16.ImageColor3 = Color3.new(0.27451, 0.27451, 0.27451)
        
        NewGuiPart17.Name = "SaveMap"
        NewGuiPart17.Parent = NewGuiPart14
        NewGuiPart17.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart17.BackgroundTransparency = 1
        NewGuiPart17.BorderSizePixel = 0
        NewGuiPart17.Position = UDim2.new(0, 0, 0, 90)
        NewGuiPart17.Size = UDim2.new(0, 30, 0, 30)
        NewGuiPart17.ZIndex = 2
        NewGuiPart17.AutoButtonColor = false
        NewGuiPart17.Font = Enum.Font.SourceSans
        NewGuiPart17.FontSize = Enum.FontSize.Size24
        NewGuiPart17.Text = ""
        
        NewGuiPart18.Name = "Icon"
        NewGuiPart18.Parent = NewGuiPart17
        NewGuiPart18.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart18.BackgroundTransparency = 1
        NewGuiPart18.Position = UDim2.new(0, 5, 0, 5)
        NewGuiPart18.Size = UDim2.new(0, 20, 0, 20)
        NewGuiPart18.ZIndex = 2
        NewGuiPart18.Image = "rbxassetid://472636337"
        NewGuiPart18.ImageColor3 = Color3.new(0.27451, 0.27451, 0.27451)
        
        NewGuiPart19.Name = "Settings"
        NewGuiPart19.Parent = NewGuiPart14
        NewGuiPart19.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart19.BackgroundTransparency = 1
        NewGuiPart19.BorderSizePixel = 0
        NewGuiPart19.Position = UDim2.new(0, 0, 0, 30)
        NewGuiPart19.Size = UDim2.new(0, 30, 0, 30)
        NewGuiPart19.ZIndex = 2
        NewGuiPart19.AutoButtonColor = false
        NewGuiPart19.Font = Enum.Font.SourceSans
        NewGuiPart19.FontSize = Enum.FontSize.Size24
        NewGuiPart19.Text = ""
        
        NewGuiPart20.Name = "Icon"
        NewGuiPart20.Parent = NewGuiPart19
        NewGuiPart20.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart20.BackgroundTransparency = 1
        NewGuiPart20.Position = UDim2.new(0, 5, 0, 5)
        NewGuiPart20.Size = UDim2.new(0, 20, 0, 20)
        NewGuiPart20.ZIndex = 2
        NewGuiPart20.Image = "rbxassetid://472635774"
        NewGuiPart20.ImageColor3 = Color3.new(0.27451, 0.27451, 0.27451)
        
        NewGuiPart21.Name = "Remotes"
        NewGuiPart21.Parent = NewGuiPart14
        NewGuiPart21.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart21.BackgroundTransparency = 1
        NewGuiPart21.BorderSizePixel = 0
        NewGuiPart21.Position = UDim2.new(0, 0, 0, 60)
        NewGuiPart21.Size = UDim2.new(0, 30, 0, 30)
        NewGuiPart21.ZIndex = 2
        NewGuiPart21.AutoButtonColor = false
        NewGuiPart21.Font = Enum.Font.SourceSans
        NewGuiPart21.FontSize = Enum.FontSize.Size24
        NewGuiPart21.Text = ""
        
        NewGuiPart22.Name = "Icon"
        NewGuiPart22.Parent = NewGuiPart21
        NewGuiPart22.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart22.BackgroundTransparency = 1
        NewGuiPart22.Position = UDim2.new(0, 5, 0, 5)
        NewGuiPart22.Size = UDim2.new(0, 20, 0, 20)
        NewGuiPart22.ZIndex = 2
        NewGuiPart22.Image = "rbxassetid://472636187"
        NewGuiPart22.ImageColor3 = Color3.new(0.27451, 0.27451, 0.27451)
        
        NewGuiPart23.Name = "About"
        NewGuiPart23.Parent = NewGuiPart14
        NewGuiPart23.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart23.BackgroundTransparency = 1
        NewGuiPart23.BorderSizePixel = 0
        NewGuiPart23.Size = UDim2.new(0, 30, 0, 30)
        NewGuiPart23.ZIndex = 2
        NewGuiPart23.AutoButtonColor = false
        NewGuiPart23.Font = Enum.Font.SourceSans
        NewGuiPart23.FontSize = Enum.FontSize.Size24
        NewGuiPart23.Text = ""
        
        NewGuiPart24.Name = "Icon"
        NewGuiPart24.Parent = NewGuiPart23
        NewGuiPart24.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart24.BackgroundTransparency = 1
        NewGuiPart24.Position = UDim2.new(0, 5, 0, 5)
        NewGuiPart24.Size = UDim2.new(0, 20, 0, 20)
        NewGuiPart24.ZIndex = 2
        NewGuiPart24.Image = "rbxassetid://476354004"
        NewGuiPart24.ImageColor3 = Color3.new(0.27451, 0.27451, 0.27451)
        
        NewGuiPart25.Name = "OpenScriptEditor"
        NewGuiPart25.Parent = NewGuiPart7
        NewGuiPart25.Active = false
        NewGuiPart25.BackgroundColor3 = Color3.new(0.913726, 0.913726, 0.913726)
        NewGuiPart25.BorderSizePixel = 0
        NewGuiPart25.Position = UDim2.new(0, 0, 0, 30)
        NewGuiPart25.Size = UDim2.new(0, 30, 0, 30)
        NewGuiPart25.ZIndex = 2
        NewGuiPart25.AutoButtonColor = false
        NewGuiPart25.Font = Enum.Font.SourceSans
        NewGuiPart25.FontSize = Enum.FontSize.Size24
        NewGuiPart25.Text = ""
        
        NewGuiPart26.Name = "Icon"
        NewGuiPart26.Parent = NewGuiPart25
        NewGuiPart26.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart26.BackgroundTransparency = 1
        NewGuiPart26.Position = UDim2.new(0, 5, 0, 5)
        NewGuiPart26.Size = UDim2.new(0, 20, 0, 20)
        NewGuiPart26.ZIndex = 2
        NewGuiPart26.Image = "rbxassetid://475456048"
        NewGuiPart26.ImageColor3 = Color3.new(0.105882, 0.164706, 0.207843)
        NewGuiPart26.ImageTransparency = 1
        
        NewGuiPart27.Name = "Toggle"
        NewGuiPart27.Parent = NewGuiPart1
        NewGuiPart27.BackgroundColor3 = Color3.new(0.913726, 0.913726, 0.913726)
        NewGuiPart27.BorderColor3 = Color3.new(0.584314, 0.584314, 0.584314)
        NewGuiPart27.Position = UDim2.new(1, 0, 0, 0)
        NewGuiPart27.Size = UDim2.new(0, 30, 0, 30)
        NewGuiPart27.Font = Enum.Font.SourceSans
        NewGuiPart27.FontSize = Enum.FontSize.Size24
        NewGuiPart27.Text = "<"
        
        NewGuiPart28.Name = "SettingsPanel"
        NewGuiPart28.Parent = NewGuiPart1
        NewGuiPart28.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart28.BackgroundTransparency = 0.10000000149012
        NewGuiPart28.BorderColor3 = Color3.new(0.74902, 0.74902, 0.74902)
        NewGuiPart28.Position = UDim2.new(1, 0, 0, 0)
        NewGuiPart28.Size = UDim2.new(0, 300, 1, 0)
        
        NewGuiPart162.Name = "GetSetting"
        NewGuiPart162.Parent = NewGuiPart28
        NewGuiPart162.Archivable = true
        
        NewGuiPart29.Name = "Header"
        NewGuiPart29.Parent = NewGuiPart28
        NewGuiPart29.BackgroundColor3 = Color3.new(0.913726, 0.913726, 0.913726)
        NewGuiPart29.BorderColor3 = Color3.new(0.584314, 0.584314, 0.584314)
        NewGuiPart29.Size = UDim2.new(1, 0, 0, 17)
        
        NewGuiPart30.Parent = NewGuiPart29
        NewGuiPart30.BackgroundTransparency = 1
        NewGuiPart30.Position = UDim2.new(0, 4, 0, 0)
        NewGuiPart30.Size = UDim2.new(1, -4, 1, 0)
        NewGuiPart30.Font = Enum.Font.SourceSans
        NewGuiPart30.FontSize = Enum.FontSize.Size14
        NewGuiPart30.Text = "Settings"
        NewGuiPart30.TextColor3 = Color3.new(0, 0, 0)
        NewGuiPart30.TextXAlignment = Enum.TextXAlignment.Left
        
        NewGuiPart31.Name = "SettingTemplate"
        NewGuiPart31.Parent = NewGuiPart28
        NewGuiPart31.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart31.BackgroundTransparency = 1
        NewGuiPart31.Position = UDim2.new(0, 0, 0, 18)
        NewGuiPart31.Size = UDim2.new(1, 0, 0, 60)
        NewGuiPart31.Visible = false
        
        NewGuiPart32.Name = "SName"
        NewGuiPart32.Parent = NewGuiPart31
        NewGuiPart32.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart32.BackgroundTransparency = 1
        NewGuiPart32.Position = UDim2.new(0, 10, 0, 0)
        NewGuiPart32.Size = UDim2.new(1, -20, 0, 30)
        NewGuiPart32.Font = Enum.Font.SourceSans
        NewGuiPart32.FontSize = Enum.FontSize.Size18
        NewGuiPart32.Text = "SettingName"
        NewGuiPart32.TextXAlignment = Enum.TextXAlignment.Left
        
        NewGuiPart33.Name = "Status"
        NewGuiPart33.Parent = NewGuiPart31
        NewGuiPart33.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart33.BackgroundTransparency = 1
        NewGuiPart33.Position = UDim2.new(0, 60, 0, 30)
        NewGuiPart33.Size = UDim2.new(0, 50, 0, 15)
        NewGuiPart33.Font = Enum.Font.SourceSans
        NewGuiPart33.FontSize = Enum.FontSize.Size18
        NewGuiPart33.Text = "Off"
        NewGuiPart33.TextXAlignment = Enum.TextXAlignment.Left
        
        NewGuiPart34.Name = "Change"
        NewGuiPart34.Parent = NewGuiPart31
        NewGuiPart34.BackgroundColor3 = Color3.new(0.862745, 0.862745, 0.862745)
        NewGuiPart34.BorderSizePixel = 0
        NewGuiPart34.Position = UDim2.new(0, 10, 0, 30)
        NewGuiPart34.Size = UDim2.new(0, 40, 0, 15)
        NewGuiPart34.Font = Enum.Font.SourceSans
        NewGuiPart34.FontSize = Enum.FontSize.Size14
        NewGuiPart34.Text = ""
        
        NewGuiPart35.Name = "OnBar"
        NewGuiPart35.Parent = NewGuiPart34
        NewGuiPart35.BackgroundColor3 = Color3.new(0, 0.576471, 0.862745)
        NewGuiPart35.BorderSizePixel = 0
        NewGuiPart35.Size = UDim2.new(0, 0, 0, 15)
        NewGuiPart35.Font = Enum.Font.SourceSans
        NewGuiPart35.FontSize = Enum.FontSize.Size14
        NewGuiPart35.Text = ""
        
        NewGuiPart36.Name = "Bar"
        NewGuiPart36.Parent = NewGuiPart34
        NewGuiPart36.BackgroundColor3 = Color3.new(0, 0, 0)
        NewGuiPart36.BorderSizePixel = 0
        NewGuiPart36.ClipsDescendants = true
        NewGuiPart36.Position = UDim2.new(0, -2, 0, -2)
        NewGuiPart36.Size = UDim2.new(0, 10, 0, 19)
        NewGuiPart36.Font = Enum.Font.SourceSans
        NewGuiPart36.FontSize = Enum.FontSize.Size14
        NewGuiPart36.Text = ""
        
        NewGuiPart37.Name = "SettingList"
        NewGuiPart37.Parent = NewGuiPart28
        NewGuiPart37.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart37.BackgroundTransparency = 1
        NewGuiPart37.Position = UDim2.new(0, 0, 0, 17)
        NewGuiPart37.Size = UDim2.new(1, 0, 1, -17)
        
        NewGuiPart38.Name = "SaveInstance"
        NewGuiPart38.Parent = NewGuiPart1
        NewGuiPart38.Active = true
        NewGuiPart38.BackgroundColor3 = Color3.new(0.913726, 0.913726, 0.913726)
        NewGuiPart38.BorderColor3 = Color3.new(0.584314, 0.584314, 0.584314)
        NewGuiPart38.Draggable = true
        NewGuiPart38.Position = UDim2.new(0.300000012, 0, 0.300000012, 0)
        NewGuiPart38.Size = UDim2.new(0, 350, 0, 20)
        NewGuiPart38.Visible = false
        NewGuiPart38.ZIndex = 2
        
        NewGuiPart39.Name = "Title"
        NewGuiPart39.Parent = NewGuiPart38
        NewGuiPart39.BackgroundTransparency = 1
        NewGuiPart39.Size = UDim2.new(1, 0, 1, 0)
        NewGuiPart39.ZIndex = 2
        NewGuiPart39.Font = Enum.Font.SourceSans
        NewGuiPart39.FontSize = Enum.FontSize.Size14
        NewGuiPart39.Text = "Save Instance"
        NewGuiPart39.TextColor3 = Color3.new(0, 0, 0)
        NewGuiPart39.TextXAlignment = Enum.TextXAlignment.Left
        
        NewGuiPart40.Name = "MainWindow"
        NewGuiPart40.Parent = NewGuiPart38
        NewGuiPart40.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart40.BackgroundTransparency = 0.10000000149012
        NewGuiPart40.BorderColor3 = Color3.new(0.74902, 0.74902, 0.74902)
        NewGuiPart40.Size = UDim2.new(1, 0, 0, 200)
        
        NewGuiPart41.Name = "Save"
        NewGuiPart41.Parent = NewGuiPart40
        NewGuiPart41.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart41.BackgroundTransparency = 0.5
        NewGuiPart41.BorderColor3 = Color3.new(0, 0, 0)
        NewGuiPart41.Position = UDim2.new(0.075000003, 0, 1, -40)
        NewGuiPart41.Size = UDim2.new(0.400000006, 0, 0, 30)
        NewGuiPart41.Font = Enum.Font.SourceSans
        NewGuiPart41.FontSize = Enum.FontSize.Size18
        NewGuiPart41.Text = "Save"
        
        NewGuiPart42.Name = "Desc"
        NewGuiPart42.Parent = NewGuiPart40
        NewGuiPart42.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart42.BackgroundTransparency = 1
        NewGuiPart42.Position = UDim2.new(0, 0, 0, 20)
        NewGuiPart42.Size = UDim2.new(1, 0, 0, 40)
        NewGuiPart42.Font = Enum.Font.SourceSans
        NewGuiPart42.FontSize = Enum.FontSize.Size14
        NewGuiPart42.Text = "This will save an instance to your PC. Type in the name for your instance. (.rbxmx will be added automatically.)"
        NewGuiPart42.TextWrapped = true
        
        NewGuiPart43.Name = "Cancel"
        NewGuiPart43.Parent = NewGuiPart40
        NewGuiPart43.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart43.BackgroundTransparency = 0.5
        NewGuiPart43.BorderColor3 = Color3.new(0, 0, 0)
        NewGuiPart43.Position = UDim2.new(0.524999976, 0, 1, -40)
        NewGuiPart43.Size = UDim2.new(0.400000006, 0, 0, 30)
        NewGuiPart43.Font = Enum.Font.SourceSans
        NewGuiPart43.FontSize = Enum.FontSize.Size18
        NewGuiPart43.Text = "Cancel"
        
        NewGuiPart44.Name = "FileName"
        NewGuiPart44.Parent = NewGuiPart40
        NewGuiPart44.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart44.BackgroundTransparency = 0.20000000298023
        NewGuiPart44.Position = UDim2.new(0.075000003, 0, 0.400000006, 0)
        NewGuiPart44.Size = UDim2.new(0.850000024, 0, 0, 30)
        NewGuiPart44.Font = Enum.Font.SourceSans
        NewGuiPart44.FontSize = Enum.FontSize.Size18
        NewGuiPart44.Text = ""
        NewGuiPart44.TextXAlignment = Enum.TextXAlignment.Left
        
        NewGuiPart45.Name = "SaveObjects"
        NewGuiPart45.Parent = NewGuiPart40
        NewGuiPart45.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart45.BackgroundTransparency = 0.60000002384186
        NewGuiPart45.Position = UDim2.new(0.075000003, 0, 0.625, 0)
        NewGuiPart45.Size = UDim2.new(0, 20, 0, 20)
        NewGuiPart45.ZIndex = 2
        NewGuiPart45.Font = Enum.Font.SourceSans
        NewGuiPart45.FontSize = Enum.FontSize.Size18
        NewGuiPart45.Text = ""
        NewGuiPart45.TextColor3 = Color3.new(1, 1, 1)
        
        NewGuiPart46.Name = "enabled"
        NewGuiPart46.Parent = NewGuiPart45
        NewGuiPart46.BackgroundColor3 = Color3.new(0.380392, 0.380392, 0.380392)
        NewGuiPart46.BackgroundTransparency = 0.40000000596046
        NewGuiPart46.BorderSizePixel = 0
        NewGuiPart46.Position = UDim2.new(0, 3, 0, 3)
        NewGuiPart46.Size = UDim2.new(0, 14, 0, 14)
        NewGuiPart46.Font = Enum.Font.SourceSans
        NewGuiPart46.FontSize = Enum.FontSize.Size14
        NewGuiPart46.Text = ""
        
        NewGuiPart47.Name = "Desc2"
        NewGuiPart47.Parent = NewGuiPart40
        NewGuiPart47.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart47.BackgroundTransparency = 1
        NewGuiPart47.Position = UDim2.new(0.075000003, 30, 0.625, 0)
        NewGuiPart47.Size = UDim2.new(0.925000012, -30, 0, 20)
        NewGuiPart47.Font = Enum.Font.SourceSans
        NewGuiPart47.FontSize = Enum.FontSize.Size14
        NewGuiPart47.Text = "Save \"Object\" type values"
        NewGuiPart47.TextXAlignment = Enum.TextXAlignment.Left
        
        NewGuiPart48.Name = "Confirmation"
        NewGuiPart48.Parent = NewGuiPart1
        NewGuiPart48.Active = true
        NewGuiPart48.BackgroundColor3 = Color3.new(0.913726, 0.913726, 0.913726)
        NewGuiPart48.BorderColor3 = Color3.new(0.584314, 0.584314, 0.584314)
        NewGuiPart48.Draggable = true
        NewGuiPart48.Position = UDim2.new(0.300000012, 0, 0.349999994, 0)
        NewGuiPart48.Size = UDim2.new(0, 350, 0, 20)
        NewGuiPart48.Visible = false
        NewGuiPart48.ZIndex = 3
        
        NewGuiPart49.Name = "Title"
        NewGuiPart49.Parent = NewGuiPart48
        NewGuiPart49.BackgroundTransparency = 1
        NewGuiPart49.Size = UDim2.new(1, 0, 1, 0)
        NewGuiPart49.ZIndex = 3
        NewGuiPart49.Font = Enum.Font.SourceSans
        NewGuiPart49.FontSize = Enum.FontSize.Size14
        NewGuiPart49.Text = "Confirm"
        NewGuiPart49.TextColor3 = Color3.new(0, 0, 0)
        NewGuiPart49.TextXAlignment = Enum.TextXAlignment.Left
        
        NewGuiPart50.Name = "MainWindow"
        NewGuiPart50.Parent = NewGuiPart48
        NewGuiPart50.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart50.BackgroundTransparency = 0.10000000149012
        NewGuiPart50.BorderColor3 = Color3.new(0.74902, 0.74902, 0.74902)
        NewGuiPart50.Size = UDim2.new(1, 0, 0, 150)
        NewGuiPart50.ZIndex = 2
        
        NewGuiPart51.Name = "Yes"
        NewGuiPart51.Parent = NewGuiPart50
        NewGuiPart51.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart51.BackgroundTransparency = 0.5
        NewGuiPart51.BorderColor3 = Color3.new(0, 0, 0)
        NewGuiPart51.Position = UDim2.new(0.075000003, 0, 1, -40)
        NewGuiPart51.Size = UDim2.new(0.400000006, 0, 0, 30)
        NewGuiPart51.ZIndex = 2
        NewGuiPart51.Font = Enum.Font.SourceSans
        NewGuiPart51.FontSize = Enum.FontSize.Size18
        NewGuiPart51.Text = "Yes"
        
        NewGuiPart52.Name = "Desc"
        NewGuiPart52.Parent = NewGuiPart50
        NewGuiPart52.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart52.BackgroundTransparency = 1
        NewGuiPart52.Position = UDim2.new(0, 0, 0, 20)
        NewGuiPart52.Size = UDim2.new(1, 0, 0, 40)
        NewGuiPart52.ZIndex = 2
        NewGuiPart52.Font = Enum.Font.SourceSans
        NewGuiPart52.FontSize = Enum.FontSize.Size14
        NewGuiPart52.Text = "The file, FILENAME, already exists. Overwrite?"
        NewGuiPart52.TextWrapped = true
        
        NewGuiPart53.Name = "No"
        NewGuiPart53.Parent = NewGuiPart50
        NewGuiPart53.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart53.BackgroundTransparency = 0.5
        NewGuiPart53.BorderColor3 = Color3.new(0, 0, 0)
        NewGuiPart53.Position = UDim2.new(0.524999976, 0, 1, -40)
        NewGuiPart53.Size = UDim2.new(0.400000006, 0, 0, 30)
        NewGuiPart53.ZIndex = 2
        NewGuiPart53.Font = Enum.Font.SourceSans
        NewGuiPart53.FontSize = Enum.FontSize.Size18
        NewGuiPart53.Text = "No"
        
        NewGuiPart54.Name = "Caution"
        NewGuiPart54.Parent = NewGuiPart1
        NewGuiPart54.Active = true
        NewGuiPart54.BackgroundColor3 = Color3.new(0.913726, 0.913726, 0.913726)
        NewGuiPart54.BorderColor3 = Color3.new(0.584314, 0.584314, 0.584314)
        NewGuiPart54.Draggable = true
        NewGuiPart54.Position = UDim2.new(0.300000012, 0, 0.300000012, 0)
        NewGuiPart54.Size = UDim2.new(0, 350, 0, 20)
        NewGuiPart54.Visible = false
        NewGuiPart54.ZIndex = 5
        
        NewGuiPart55.Name = "Title"
        NewGuiPart55.Parent = NewGuiPart54
        NewGuiPart55.BackgroundTransparency = 1
        NewGuiPart55.Size = UDim2.new(1, 0, 1, 0)
        NewGuiPart55.ZIndex = 5
        NewGuiPart55.Font = Enum.Font.SourceSans
        NewGuiPart55.FontSize = Enum.FontSize.Size14
        NewGuiPart55.Text = "Caution"
        NewGuiPart55.TextColor3 = Color3.new(0, 0, 0)
        NewGuiPart55.TextXAlignment = Enum.TextXAlignment.Left
        
        NewGuiPart56.Name = "MainWindow"
        NewGuiPart56.Parent = NewGuiPart54
        NewGuiPart56.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart56.BackgroundTransparency = 0.10000000149012
        NewGuiPart56.BorderColor3 = Color3.new(0.74902, 0.74902, 0.74902)
        NewGuiPart56.Size = UDim2.new(1, 0, 0, 150)
        NewGuiPart56.ZIndex = 4
        
        NewGuiPart57.Name = "Desc"
        NewGuiPart57.Parent = NewGuiPart56
        NewGuiPart57.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart57.BackgroundTransparency = 1
        NewGuiPart57.Position = UDim2.new(0, 0, 0, 20)
        NewGuiPart57.Size = UDim2.new(1, 0, 0, 42)
        NewGuiPart57.ZIndex = 4
        NewGuiPart57.Font = Enum.Font.SourceSans
        NewGuiPart57.FontSize = Enum.FontSize.Size14
        NewGuiPart57.Text = "The file, FILENAME, already exists. Overwrite?"
        NewGuiPart57.TextWrapped = true
        
        NewGuiPart58.Name = "Ok"
        NewGuiPart58.Parent = NewGuiPart56
        NewGuiPart58.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart58.BackgroundTransparency = 0.5
        NewGuiPart58.BorderColor3 = Color3.new(0, 0, 0)
        NewGuiPart58.Position = UDim2.new(0.300000012, 0, 1, -40)
        NewGuiPart58.Size = UDim2.new(0.400000006, 0, 0, 30)
        NewGuiPart58.ZIndex = 4
        NewGuiPart58.Font = Enum.Font.SourceSans
        NewGuiPart58.FontSize = Enum.FontSize.Size18
        NewGuiPart58.Text = "Ok"
        
        NewGuiPart59.Name = "CallRemote"
        NewGuiPart59.Parent = NewGuiPart1
        NewGuiPart59.Active = true
        NewGuiPart59.BackgroundColor3 = Color3.new(0.913726, 0.913726, 0.913726)
        NewGuiPart59.BorderColor3 = Color3.new(0.584314, 0.584314, 0.584314)
        NewGuiPart59.Draggable = true
        NewGuiPart59.Position = UDim2.new(0.300000012, 0, 0.300000012, 0)
        NewGuiPart59.Size = UDim2.new(0, 350, 0, 20)
        NewGuiPart59.Visible = false
        NewGuiPart59.ZIndex = 2
        
        NewGuiPart60.Name = "Title"
        NewGuiPart60.Parent = NewGuiPart59
        NewGuiPart60.BackgroundTransparency = 1
        NewGuiPart60.Size = UDim2.new(1, 0, 1, 0)
        NewGuiPart60.ZIndex = 2
        NewGuiPart60.Font = Enum.Font.SourceSans
        NewGuiPart60.FontSize = Enum.FontSize.Size14
        NewGuiPart60.Text = "Call Remote"
        NewGuiPart60.TextColor3 = Color3.new(0, 0, 0)
        NewGuiPart60.TextXAlignment = Enum.TextXAlignment.Left
        
        NewGuiPart61.Name = "MainWindow"
        NewGuiPart61.Parent = NewGuiPart59
        NewGuiPart61.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart61.BackgroundTransparency = 0.10000000149012
        NewGuiPart61.BorderColor3 = Color3.new(0.74902, 0.74902, 0.74902)
        NewGuiPart61.Size = UDim2.new(1, 0, 0, 200)
        
        NewGuiPart62.Name = "Desc"
        NewGuiPart62.Parent = NewGuiPart61
        NewGuiPart62.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart62.BackgroundTransparency = 1
        NewGuiPart62.Position = UDim2.new(0, 0, 0, 20)
        NewGuiPart62.Size = UDim2.new(1, 0, 0, 20)
        NewGuiPart62.Font = Enum.Font.SourceSans
        NewGuiPart62.FontSize = Enum.FontSize.Size14
        NewGuiPart62.Text = "Arguments"
        NewGuiPart62.TextWrapped = true
        
        NewGuiPart63.Name = "Arguments"
        NewGuiPart63.Parent = NewGuiPart61
        NewGuiPart63.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart63.BackgroundTransparency = 1
        NewGuiPart63.Position = UDim2.new(0, 0, 0, 40)
        NewGuiPart63.Size = UDim2.new(1, 0, 0, 80)
        NewGuiPart63.BottomImage = "rbxasset://textures/blackBkg_square.png"
        NewGuiPart63.CanvasSize = UDim2.new(0, 0, 0, 0)
        NewGuiPart63.MidImage = "rbxasset://textures/blackBkg_square.png"
        NewGuiPart63.TopImage = "rbxasset://textures/blackBkg_square.png"
        
        NewGuiPart64.Name = "DisplayReturned"
        NewGuiPart64.Parent = NewGuiPart61
        NewGuiPart64.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart64.BackgroundTransparency = 0.60000002384186
        NewGuiPart64.Position = UDim2.new(0.075000003, 0, 0.625, 0)
        NewGuiPart64.Size = UDim2.new(0, 20, 0, 20)
        NewGuiPart64.ZIndex = 2
        NewGuiPart64.Font = Enum.Font.SourceSans
        NewGuiPart64.FontSize = Enum.FontSize.Size18
        NewGuiPart64.Text = ""
        NewGuiPart64.TextColor3 = Color3.new(1, 1, 1)
        
        NewGuiPart65.Name = "enabled"
        NewGuiPart65.Parent = NewGuiPart64
        NewGuiPart65.BackgroundColor3 = Color3.new(0.380392, 0.380392, 0.380392)
        NewGuiPart65.BackgroundTransparency = 0.40000000596046
        NewGuiPart65.BorderSizePixel = 0
        NewGuiPart65.Position = UDim2.new(0, 3, 0, 3)
        NewGuiPart65.Size = UDim2.new(0, 14, 0, 14)
        NewGuiPart65.Visible = false
        NewGuiPart65.Font = Enum.Font.SourceSans
        NewGuiPart65.FontSize = Enum.FontSize.Size14
        NewGuiPart65.Text = ""
        
        NewGuiPart66.Name = "Desc2"
        NewGuiPart66.Parent = NewGuiPart61
        NewGuiPart66.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart66.BackgroundTransparency = 1
        NewGuiPart66.Position = UDim2.new(0.075000003, 30, 0.625, 0)
        NewGuiPart66.Size = UDim2.new(0.925000012, -30, 0, 20)
        NewGuiPart66.Font = Enum.Font.SourceSans
        NewGuiPart66.FontSize = Enum.FontSize.Size14
        NewGuiPart66.Text = "Display values returned"
        NewGuiPart66.TextXAlignment = Enum.TextXAlignment.Left
        
        NewGuiPart67.Name = "Add"
        NewGuiPart67.Parent = NewGuiPart61
        NewGuiPart67.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart67.BackgroundTransparency = 0.5
        NewGuiPart67.BorderColor3 = Color3.new(0, 0, 0)
        NewGuiPart67.Position = UDim2.new(0.800000012, 0, 0.625, 0)
        NewGuiPart67.Size = UDim2.new(0, 20, 0, 20)
        NewGuiPart67.Font = Enum.Font.SourceSansBold
        NewGuiPart67.FontSize = Enum.FontSize.Size24
        NewGuiPart67.Text = "+"
        
        NewGuiPart68.Name = "Subtract"
        NewGuiPart68.Parent = NewGuiPart61
        NewGuiPart68.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart68.BackgroundTransparency = 0.5
        NewGuiPart68.BorderColor3 = Color3.new(0, 0, 0)
        NewGuiPart68.Position = UDim2.new(0.899999976, 0, 0.625, 0)
        NewGuiPart68.Size = UDim2.new(0, 20, 0, 20)
        NewGuiPart68.Font = Enum.Font.SourceSansBold
        NewGuiPart68.FontSize = Enum.FontSize.Size24
        NewGuiPart68.Text = "-"
        
        NewGuiPart69.Name = "ArgumentTemplate"
        NewGuiPart69.Parent = NewGuiPart61
        NewGuiPart69.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart69.BackgroundTransparency = 0.5
        NewGuiPart69.BorderColor3 = Color3.new(0.74902, 0.74902, 0.74902)
        NewGuiPart69.Size = UDim2.new(1, 0, 0, 20)
        NewGuiPart69.Visible = false
        
        NewGuiPart70.Name = "Type"
        NewGuiPart70.Parent = NewGuiPart69
        NewGuiPart70.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart70.BackgroundTransparency = 0.89999997615814
        NewGuiPart70.BorderColor3 = Color3.new(0, 0, 0)
        NewGuiPart70.Size = UDim2.new(0.400000006, 0, 0, 20)
        NewGuiPart70.Font = Enum.Font.SourceSans
        NewGuiPart70.FontSize = Enum.FontSize.Size18
        NewGuiPart70.Text = "Script"
        
        NewGuiPart71.Name = "Value"
        NewGuiPart71.Parent = NewGuiPart69
        NewGuiPart71.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart71.BackgroundTransparency = 0.89999997615814
        NewGuiPart71.Position = UDim2.new(0.400000006, 0, 0, 0)
        NewGuiPart71.Size = UDim2.new(0.600000024, -12, 0, 20)
        NewGuiPart71.Font = Enum.Font.SourceSans
        NewGuiPart71.FontSize = Enum.FontSize.Size14
        NewGuiPart71.Text = ""
        NewGuiPart71.TextXAlignment = Enum.TextXAlignment.Left
        
        NewGuiPart72.Name = "Cancel"
        NewGuiPart72.Parent = NewGuiPart61
        NewGuiPart72.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart72.BackgroundTransparency = 0.5
        NewGuiPart72.BorderColor3 = Color3.new(0, 0, 0)
        NewGuiPart72.Size = UDim2.new(0.400000006, 0, 0, 30)
        NewGuiPart72.Font = Enum.Font.SourceSans
        NewGuiPart72.FontSize = Enum.FontSize.Size18
        NewGuiPart72.Text = "Cancel"
        
        NewGuiPart73.Name = "Ok"
        NewGuiPart73.Parent = NewGuiPart61
        NewGuiPart73.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart73.BackgroundTransparency = 0.5
        NewGuiPart73.BorderColor3 = Color3.new(0, 0, 0)
        NewGuiPart73.Position = UDim2.new(0.075000003, 0, 1, -40)
        NewGuiPart73.Size = UDim2.new(0.400000006, 0, 0, 30)
        NewGuiPart73.Font = Enum.Font.SourceSans
        NewGuiPart73.FontSize = Enum.FontSize.Size18
        NewGuiPart73.Text = "Call"
        
        NewGuiPart74.Name = "TableCaution"
        NewGuiPart74.Parent = NewGuiPart1
        NewGuiPart74.Active = true
        NewGuiPart74.BackgroundColor3 = Color3.new(0.913726, 0.913726, 0.913726)
        NewGuiPart74.BorderColor3 = Color3.new(0.584314, 0.584314, 0.584314)
        NewGuiPart74.Draggable = true
        NewGuiPart74.Position = UDim2.new(0.300000012, 0, 0.300000012, 0)
        NewGuiPart74.Size = UDim2.new(0, 350, 0, 20)
        NewGuiPart74.Visible = false
        NewGuiPart74.ZIndex = 2
        
        NewGuiPart75.Name = "MainWindow"
        NewGuiPart75.Parent = NewGuiPart74
        NewGuiPart75.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart75.BackgroundTransparency = 0.10000000149012
        NewGuiPart75.BorderColor3 = Color3.new(0.74902, 0.74902, 0.74902)
        NewGuiPart75.Size = UDim2.new(1, 0, 0, 150)
        
        NewGuiPart76.Name = "Ok"
        NewGuiPart76.Parent = NewGuiPart75
        NewGuiPart76.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart76.BackgroundTransparency = 0.5
        NewGuiPart76.BorderColor3 = Color3.new(0, 0, 0)
        NewGuiPart76.Position = UDim2.new(0.300000012, 0, 1, -40)
        NewGuiPart76.Size = UDim2.new(0.400000006, 0, 0, 30)
        NewGuiPart76.Font = Enum.Font.SourceSans
        NewGuiPart76.FontSize = Enum.FontSize.Size18
        NewGuiPart76.Text = "Ok"
        
        NewGuiPart77.Name = "TableResults"
        NewGuiPart77.Parent = NewGuiPart75
        NewGuiPart77.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart77.BackgroundTransparency = 1
        NewGuiPart77.Position = UDim2.new(0, 0, 0, 20)
        NewGuiPart77.Size = UDim2.new(1, 0, 0, 80)
        NewGuiPart77.BottomImage = "rbxasset://textures/blackBkg_square.png"
        NewGuiPart77.CanvasSize = UDim2.new(0, 0, 0, 0)
        NewGuiPart77.MidImage = "rbxasset://textures/blackBkg_square.png"
        NewGuiPart77.TopImage = "rbxasset://textures/blackBkg_square.png"
        
        NewGuiPart78.Name = "TableTemplate"
        NewGuiPart78.Parent = NewGuiPart75
        NewGuiPart78.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart78.BackgroundTransparency = 0.5
        NewGuiPart78.BorderColor3 = Color3.new(0.74902, 0.74902, 0.74902)
        NewGuiPart78.Size = UDim2.new(1, 0, 0, 20)
        NewGuiPart78.Visible = false
        
        NewGuiPart79.Name = "Type"
        NewGuiPart79.Parent = NewGuiPart78
        NewGuiPart79.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart79.BackgroundTransparency = 0.89999997615814
        NewGuiPart79.Size = UDim2.new(0.400000006, 0, 0, 20)
        NewGuiPart79.Font = Enum.Font.SourceSans
        NewGuiPart79.FontSize = Enum.FontSize.Size18
        NewGuiPart79.Text = "Script"
        
        NewGuiPart80.Name = "Value"
        NewGuiPart80.Parent = NewGuiPart78
        NewGuiPart80.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart80.BackgroundTransparency = 0.89999997615814
        NewGuiPart80.Position = UDim2.new(0.400000006, 0, 0, 0)
        NewGuiPart80.Size = UDim2.new(0.600000024, -12, 0, 20)
        NewGuiPart80.Font = Enum.Font.SourceSans
        NewGuiPart80.FontSize = Enum.FontSize.Size14
        NewGuiPart80.Text = "Script"
        
        NewGuiPart81.Name = "Title"
        NewGuiPart81.Parent = NewGuiPart74
        NewGuiPart81.BackgroundTransparency = 1
        NewGuiPart81.Size = UDim2.new(1, 0, 1, 0)
        NewGuiPart81.ZIndex = 2
        NewGuiPart81.Font = Enum.Font.SourceSans
        NewGuiPart81.FontSize = Enum.FontSize.Size14
        NewGuiPart81.Text = "Caution"
        NewGuiPart81.TextColor3 = Color3.new(0, 0, 0)
        NewGuiPart81.TextXAlignment = Enum.TextXAlignment.Left
        
        NewGuiPart82.Name = "ScriptEditor"
        NewGuiPart82.Parent = NewGuiPart1
        NewGuiPart82.Active = true
        NewGuiPart82.BackgroundColor3 = Color3.new(0.913726, 0.913726, 0.913726)
        NewGuiPart82.BorderColor3 = Color3.new(0.584314, 0.584314, 0.584314)
        NewGuiPart82.Draggable = true
        NewGuiPart82.Position = UDim2.new(0.300000012, 0, 0.300000012, 0)
        NewGuiPart82.Size = UDim2.new(0, 516, 0, 20)
        NewGuiPart82.Visible = false
        NewGuiPart82.ZIndex = 5
        
        NewGuiPart163.Name = "OpenScript"
        NewGuiPart163.Parent = NewGuiPart82
        NewGuiPart163.Archivable = true
        
        NewGuiPart83.Name = "Title"
        NewGuiPart83.Parent = NewGuiPart82
        NewGuiPart83.BackgroundTransparency = 1
        NewGuiPart83.Size = UDim2.new(1, 0, 1, 0)
        NewGuiPart83.ZIndex = 5
        NewGuiPart83.Font = Enum.Font.SourceSans
        NewGuiPart83.FontSize = Enum.FontSize.Size14
        NewGuiPart83.Text = "Script Viewer"
        NewGuiPart83.TextColor3 = Color3.new(0, 0, 0)
        NewGuiPart83.TextXAlignment = Enum.TextXAlignment.Left
        
        NewGuiPart84.Name = "Cover"
        NewGuiPart84.Parent = NewGuiPart82
        NewGuiPart84.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart84.BorderSizePixel = 0
        NewGuiPart84.Position = UDim2.new(0, 0, 3, 0)
        NewGuiPart84.Size = UDim2.new(0, 516, 0, 416)
        
        NewGuiPart85.Name = "EditorGrid"
        NewGuiPart85.Parent = NewGuiPart82
        NewGuiPart85.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart85.BorderSizePixel = 0
        NewGuiPart85.Position = UDim2.new(0, 0, 3, 0)
        NewGuiPart85.Size = UDim2.new(0, 500, 0, 400)
        
        NewGuiPart86.Name = "TopBar"
        NewGuiPart86.Parent = NewGuiPart82
        NewGuiPart86.BackgroundColor3 = Color3.new(0.941177, 0.941177, 0.941177)
        NewGuiPart86.BorderColor3 = Color3.new(0.584314, 0.584314, 0.584314)
        NewGuiPart86.Size = UDim2.new(1, 0, 3, 0)
        
        NewGuiPart87.Name = "ScriptBarLeft"
        NewGuiPart87.Parent = NewGuiPart86
        NewGuiPart87.Active = false
        NewGuiPart87.BackgroundColor3 = Color3.new(0.866667, 0.866667, 0.866667)
        NewGuiPart87.BorderColor3 = Color3.new(0.584314, 0.584314, 0.584314)
        NewGuiPart87.Position = UDim2.new(1, -32, 0, 40)
        NewGuiPart87.Size = UDim2.new(0, 16, 0, 20)
        NewGuiPart87.AutoButtonColor = false
        
        NewGuiPart88.Name = "Arrow Graphic"
        NewGuiPart88.Parent = NewGuiPart87
        NewGuiPart88.BackgroundTransparency = 1
        NewGuiPart88.BorderSizePixel = 0
        NewGuiPart88.Position = UDim2.new(0.5, -4, 0.5, -4)
        NewGuiPart88.Size = UDim2.new(0, 8, 0, 8)
        
        NewGuiPart89.Name = "Graphic"
        NewGuiPart89.Parent = NewGuiPart88
        NewGuiPart89.BackgroundColor3 = Color3.new(0.584314, 0.584314, 0.584314)
        NewGuiPart89.BackgroundTransparency = 0.69999998807907
        NewGuiPart89.BorderSizePixel = 0
        NewGuiPart89.Position = UDim2.new(0.25, 0, 0.375, 0)
        NewGuiPart89.Size = UDim2.new(0.125, 0, 0.25, 0)
        
        NewGuiPart90.Name = "Graphic"
        NewGuiPart90.Parent = NewGuiPart88
        NewGuiPart90.BackgroundColor3 = Color3.new(0.584314, 0.584314, 0.584314)
        NewGuiPart90.BackgroundTransparency = 0.69999998807907
        NewGuiPart90.BorderSizePixel = 0
        NewGuiPart90.Position = UDim2.new(0.375, 0, 0.25, 0)
        NewGuiPart90.Size = UDim2.new(0.125, 0, 0.5, 0)
        
        NewGuiPart91.Name = "Graphic"
        NewGuiPart91.Parent = NewGuiPart88
        NewGuiPart91.BackgroundColor3 = Color3.new(0.584314, 0.584314, 0.584314)
        NewGuiPart91.BackgroundTransparency = 0.69999998807907
        NewGuiPart91.BorderSizePixel = 0
        NewGuiPart91.Position = UDim2.new(0.5, 0, 0.125, 0)
        NewGuiPart91.Size = UDim2.new(0.125, 0, 0.75, 0)
        
        NewGuiPart92.Name = "Graphic"
        NewGuiPart92.Parent = NewGuiPart88
        NewGuiPart92.BackgroundColor3 = Color3.new(0.584314, 0.584314, 0.584314)
        NewGuiPart92.BackgroundTransparency = 0.69999998807907
        NewGuiPart92.BorderSizePixel = 0
        NewGuiPart92.Position = UDim2.new(0.625, 0, 0, 0)
        NewGuiPart92.Size = UDim2.new(0.125, 0, 1, 0)
        
        NewGuiPart93.Name = "ScriptBarRight"
        NewGuiPart93.Parent = NewGuiPart86
        NewGuiPart93.Active = false
        NewGuiPart93.BackgroundColor3 = Color3.new(0.866667, 0.866667, 0.866667)
        NewGuiPart93.BorderColor3 = Color3.new(0.584314, 0.584314, 0.584314)
        NewGuiPart93.Position = UDim2.new(1, -16, 0, 40)
        NewGuiPart93.Size = UDim2.new(0, 16, 0, 20)
        NewGuiPart93.AutoButtonColor = false
        
        NewGuiPart94.Name = "Arrow Graphic"
        NewGuiPart94.Parent = NewGuiPart93
        NewGuiPart94.BackgroundTransparency = 1
        NewGuiPart94.BorderSizePixel = 0
        NewGuiPart94.Position = UDim2.new(0.5, -4, 0.5, -4)
        NewGuiPart94.Size = UDim2.new(0, 8, 0, 8)
        
        NewGuiPart95.Name = "Graphic"
        NewGuiPart95.Parent = NewGuiPart94
        NewGuiPart95.BackgroundColor3 = Color3.new(0.584314, 0.584314, 0.584314)
        NewGuiPart95.BackgroundTransparency = 0.69999998807907
        NewGuiPart95.BorderSizePixel = 0
        NewGuiPart95.Position = UDim2.new(0.625, 0, 0.375, 0)
        NewGuiPart95.Size = UDim2.new(0.125, 0, 0.25, 0)
        
        NewGuiPart96.Name = "Graphic"
        NewGuiPart96.Parent = NewGuiPart94
        NewGuiPart96.BackgroundColor3 = Color3.new(0.584314, 0.584314, 0.584314)
        NewGuiPart96.BackgroundTransparency = 0.69999998807907
        NewGuiPart96.BorderSizePixel = 0
        NewGuiPart96.Position = UDim2.new(0.5, 0, 0.25, 0)
        NewGuiPart96.Size = UDim2.new(0.125, 0, 0.5, 0)
        
        NewGuiPart97.Name = "Graphic"
        NewGuiPart97.Parent = NewGuiPart94
        NewGuiPart97.BackgroundColor3 = Color3.new(0.584314, 0.584314, 0.584314)
        NewGuiPart97.BackgroundTransparency = 0.69999998807907
        NewGuiPart97.BorderSizePixel = 0
        NewGuiPart97.Position = UDim2.new(0.375, 0, 0.125, 0)
        NewGuiPart97.Size = UDim2.new(0.125, 0, 0.75, 0)
        
        NewGuiPart98.Name = "Graphic"
        NewGuiPart98.Parent = NewGuiPart94
        NewGuiPart98.BackgroundColor3 = Color3.new(0.584314, 0.584314, 0.584314)
        NewGuiPart98.BackgroundTransparency = 0.69999998807907
        NewGuiPart98.BorderSizePixel = 0
        NewGuiPart98.Position = UDim2.new(0.25, 0, 0, 0)
        NewGuiPart98.Size = UDim2.new(0.125, 0, 1, 0)
        
        NewGuiPart99.Name = "Clipboard"
        NewGuiPart99.Parent = NewGuiPart86
        NewGuiPart99.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart99.BackgroundTransparency = 0.5
        NewGuiPart99.BorderColor3 = Color3.new(0, 0, 0)
        NewGuiPart99.Position = UDim2.new(0, 0, 0, 20)
        NewGuiPart99.Size = UDim2.new(0, 80, 0, 20)
        NewGuiPart99.Font = Enum.Font.SourceSans
        NewGuiPart99.FontSize = Enum.FontSize.Size14
        NewGuiPart99.Text = "To Clipboard"
        
        NewGuiPart100.Name = "ScriptBar"
        NewGuiPart100.Parent = NewGuiPart86
        NewGuiPart100.BackgroundColor3 = Color3.new(0.823529, 0.823529, 0.823529)
        NewGuiPart100.BorderColor3 = Color3.new(0.584314, 0.584314, 0.584314)
        NewGuiPart100.ClipsDescendants = true
        NewGuiPart100.Position = UDim2.new(0, 0, 0, 40)
        NewGuiPart100.Size = UDim2.new(1, -32, 0, 20)
        
        NewGuiPart101.Name = "Entry"
        NewGuiPart101.Parent = NewGuiPart86
        NewGuiPart101.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart101.BackgroundTransparency = 1
        NewGuiPart101.Size = UDim2.new(0, 100, 1, 0)
        NewGuiPart101.Visible = false
        
        NewGuiPart102.Name = "Button"
        NewGuiPart102.Parent = NewGuiPart101
        NewGuiPart102.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart102.BackgroundTransparency = 0.60000002384186
        NewGuiPart102.BorderColor3 = Color3.new(0, 0, 0)
        NewGuiPart102.ClipsDescendants = true
        NewGuiPart102.Size = UDim2.new(1, 0, 1, 0)
        NewGuiPart102.ZIndex = 4
        NewGuiPart102.Font = Enum.Font.SourceSans
        NewGuiPart102.FontSize = Enum.FontSize.Size12
        NewGuiPart102.Text = ""
        NewGuiPart102.TextXAlignment = Enum.TextXAlignment.Left
        
        NewGuiPart103.Name = "Close"
        NewGuiPart103.Parent = NewGuiPart101
        NewGuiPart103.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart103.BackgroundTransparency = 1
        NewGuiPart103.BorderColor3 = Color3.new(0, 0, 0)
        NewGuiPart103.Position = UDim2.new(1, -20, 0, 0)
        NewGuiPart103.Size = UDim2.new(0, 20, 0, 20)
        NewGuiPart103.ZIndex = 4
        NewGuiPart103.Font = Enum.Font.SourceSans
        NewGuiPart103.FontSize = Enum.FontSize.Size14
        NewGuiPart103.Text = "X"
        
        NewGuiPart104.Name = "Close"
        NewGuiPart104.Parent = NewGuiPart82
        NewGuiPart104.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart104.BackgroundTransparency = 1
        NewGuiPart104.BorderColor3 = Color3.new(0, 0, 0)
        NewGuiPart104.Position = UDim2.new(1, -20, 0, 0)
        NewGuiPart104.Size = UDim2.new(0, 20, 0, 20)
        NewGuiPart104.ZIndex = 5
        NewGuiPart104.Font = Enum.Font.SourceSans
        NewGuiPart104.FontSize = Enum.FontSize.Size14
        NewGuiPart104.Text = "X"
        
        NewGuiPart105.Name = "IntroFrame"
        NewGuiPart105.Parent = NewGuiPart1
        NewGuiPart105.BackgroundColor3 = Color3.new(0.960784, 0.960784, 0.960784)
        NewGuiPart105.BorderSizePixel = 0
        NewGuiPart105.Position = UDim2.new(1, 30, 0, 0)
        NewGuiPart105.Size = UDim2.new(0, 300, 1, 0)
        NewGuiPart105.ZIndex = 2
        
        NewGuiPart106.Name = "Main"
        NewGuiPart106.Parent = NewGuiPart105
        NewGuiPart106.BackgroundColor3 = Color3.new(0.960784, 0.960784, 0.960784)
        NewGuiPart106.BorderSizePixel = 0
        NewGuiPart106.Position = UDim2.new(0, -30, 0, 0)
        NewGuiPart106.Size = UDim2.new(0, 30, 0, 90)
        NewGuiPart106.ZIndex = 2
        
        NewGuiPart107.Name = "Title"
        NewGuiPart107.Parent = NewGuiPart105
        NewGuiPart107.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart107.BackgroundTransparency = 1
        NewGuiPart107.Position = UDim2.new(0, 100, 0, 150)
        NewGuiPart107.Size = UDim2.new(0, 100, 0, 60)
        NewGuiPart107.ZIndex = 2
        NewGuiPart107.Font = Enum.Font.SourceSansBold
        NewGuiPart107.FontSize = Enum.FontSize.Size60
        NewGuiPart107.Text = "DEX"
        NewGuiPart107.TextWrapped = true
        
        NewGuiPart108.Name = "Version"
        NewGuiPart108.Parent = NewGuiPart105
        NewGuiPart108.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart108.BackgroundTransparency = 1
        NewGuiPart108.Position = UDim2.new(0, 100, 0, 210)
        NewGuiPart108.Size = UDim2.new(0, 100, 0, 30)
        NewGuiPart108.ZIndex = 2
        NewGuiPart108.Font = Enum.Font.SourceSansBold
        NewGuiPart108.FontSize = Enum.FontSize.Size28
        NewGuiPart108.Text = "V2.0.0"
        NewGuiPart108.TextWrapped = true
        
        NewGuiPart109.Name = "Creator"
        NewGuiPart109.Parent = NewGuiPart105
        NewGuiPart109.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart109.BackgroundTransparency = 1
        NewGuiPart109.Position = UDim2.new(0, 80, 0, 300)
        NewGuiPart109.Size = UDim2.new(0, 140, 0, 30)
        NewGuiPart109.ZIndex = 2
        NewGuiPart109.Font = Enum.Font.SourceSansBold
        NewGuiPart109.FontSize = Enum.FontSize.Size28
        NewGuiPart109.Text = "Raspberry Pi , Script Made By Advancedev"
        NewGuiPart109.TextWrapped = true
        
        NewGuiPart110.Name = "Slant"
        NewGuiPart110.Parent = NewGuiPart105
        NewGuiPart110.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart110.BackgroundTransparency = 1
        NewGuiPart110.Position = UDim2.new(0, -30, 0, 90)
        NewGuiPart110.Rotation = 180
        NewGuiPart110.Size = UDim2.new(0, 30, 0, 30)
        NewGuiPart110.ZIndex = 2
        NewGuiPart110.Image = "rbxassetid://474172996"
        NewGuiPart110.ImageColor3 = Color3.new(0.960784, 0.960784, 0.960784)
        
        NewGuiPart111.Name = "SaveMapWindow"
        NewGuiPart111.Parent = NewGuiPart1
        NewGuiPart111.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart111.BackgroundTransparency = 0.10000000149012
        NewGuiPart111.BorderColor3 = Color3.new(0.74902, 0.74902, 0.74902)
        NewGuiPart111.Position = UDim2.new(1, 0, 0, 0)
        NewGuiPart111.Size = UDim2.new(0, 300, 1, 0)
        
        NewGuiPart112.Name = "Header"
        NewGuiPart112.Parent = NewGuiPart111
        NewGuiPart112.BackgroundColor3 = Color3.new(0.913726, 0.913726, 0.913726)
        NewGuiPart112.BorderColor3 = Color3.new(0.584314, 0.584314, 0.584314)
        NewGuiPart112.Size = UDim2.new(1, 0, 0, 17)
        
        NewGuiPart113.Parent = NewGuiPart112
        NewGuiPart113.BackgroundTransparency = 1
        NewGuiPart113.Position = UDim2.new(0, 4, 0, 0)
        NewGuiPart113.Size = UDim2.new(1, -4, 1, 0)
        NewGuiPart113.Font = Enum.Font.SourceSans
        NewGuiPart113.FontSize = Enum.FontSize.Size14
        NewGuiPart113.Text = "Map Downloader"
        NewGuiPart113.TextColor3 = Color3.new(0, 0, 0)
        NewGuiPart113.TextXAlignment = Enum.TextXAlignment.Left
        
        NewGuiPart114.Name = "MapSettings"
        NewGuiPart114.Parent = NewGuiPart111
        NewGuiPart114.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart114.BackgroundTransparency = 1
        NewGuiPart114.Position = UDim2.new(0, 0, 0, 200)
        NewGuiPart114.Size = UDim2.new(1, 0, 0, 240)
        
        NewGuiPart115.Name = "Terrain"
        NewGuiPart115.Parent = NewGuiPart114
        NewGuiPart115.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart115.BackgroundTransparency = 1
        NewGuiPart115.Position = UDim2.new(0, 0, 0, 60)
        NewGuiPart115.Size = UDim2.new(1, 0, 0, 60)
        
        NewGuiPart116.Name = "SName"
        NewGuiPart116.Parent = NewGuiPart115
        NewGuiPart116.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart116.BackgroundTransparency = 1
        NewGuiPart116.Position = UDim2.new(0, 10, 0, 0)
        NewGuiPart116.Size = UDim2.new(1, -20, 0, 30)
        NewGuiPart116.Font = Enum.Font.SourceSans
        NewGuiPart116.FontSize = Enum.FontSize.Size18
        NewGuiPart116.Text = "Save Terrain"
        NewGuiPart116.TextXAlignment = Enum.TextXAlignment.Left
        
        NewGuiPart117.Name = "Status"
        NewGuiPart117.Parent = NewGuiPart115
        NewGuiPart117.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart117.BackgroundTransparency = 1
        NewGuiPart117.Position = UDim2.new(0, 60, 0, 30)
        NewGuiPart117.Size = UDim2.new(0, 50, 0, 15)
        NewGuiPart117.Font = Enum.Font.SourceSans
        NewGuiPart117.FontSize = Enum.FontSize.Size18
        NewGuiPart117.Text = "Off"
        NewGuiPart117.TextXAlignment = Enum.TextXAlignment.Left
        
        NewGuiPart118.Name = "Change"
        NewGuiPart118.Parent = NewGuiPart115
        NewGuiPart118.BackgroundColor3 = Color3.new(0.862745, 0.862745, 0.862745)
        NewGuiPart118.BorderSizePixel = 0
        NewGuiPart118.Position = UDim2.new(0, 10, 0, 30)
        NewGuiPart118.Size = UDim2.new(0, 40, 0, 15)
        NewGuiPart118.Font = Enum.Font.SourceSans
        NewGuiPart118.FontSize = Enum.FontSize.Size14
        NewGuiPart118.Text = ""
        
        NewGuiPart119.Name = "OnBar"
        NewGuiPart119.Parent = NewGuiPart118
        NewGuiPart119.BackgroundColor3 = Color3.new(0, 0.576471, 0.862745)
        NewGuiPart119.BorderSizePixel = 0
        NewGuiPart119.Size = UDim2.new(0, 0, 0, 15)
        NewGuiPart119.Font = Enum.Font.SourceSans
        NewGuiPart119.FontSize = Enum.FontSize.Size14
        NewGuiPart119.Text = ""
        
        NewGuiPart120.Name = "Bar"
        NewGuiPart120.Parent = NewGuiPart118
        NewGuiPart120.BackgroundColor3 = Color3.new(0, 0, 0)
        NewGuiPart120.BorderSizePixel = 0
        NewGuiPart120.ClipsDescendants = true
        NewGuiPart120.Position = UDim2.new(0, -2, 0, -2)
        NewGuiPart120.Size = UDim2.new(0, 10, 0, 19)
        NewGuiPart120.Font = Enum.Font.SourceSans
        NewGuiPart120.FontSize = Enum.FontSize.Size14
        NewGuiPart120.Text = ""
        
        NewGuiPart121.Name = "Lighting"
        NewGuiPart121.Parent = NewGuiPart114
        NewGuiPart121.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart121.BackgroundTransparency = 1
        NewGuiPart121.Position = UDim2.new(0, 0, 0, 120)
        NewGuiPart121.Size = UDim2.new(1, 0, 0, 60)
        
        NewGuiPart122.Name = "SName"
        NewGuiPart122.Parent = NewGuiPart121
        NewGuiPart122.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart122.BackgroundTransparency = 1
        NewGuiPart122.Position = UDim2.new(0, 10, 0, 0)
        NewGuiPart122.Size = UDim2.new(1, -20, 0, 30)
        NewGuiPart122.Font = Enum.Font.SourceSans
        NewGuiPart122.FontSize = Enum.FontSize.Size18
        NewGuiPart122.Text = "Lighting Properties"
        NewGuiPart122.TextXAlignment = Enum.TextXAlignment.Left
        
        NewGuiPart123.Name = "Status"
        NewGuiPart123.Parent = NewGuiPart121
        NewGuiPart123.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart123.BackgroundTransparency = 1
        NewGuiPart123.Position = UDim2.new(0, 60, 0, 30)
        NewGuiPart123.Size = UDim2.new(0, 50, 0, 15)
        NewGuiPart123.Font = Enum.Font.SourceSans
        NewGuiPart123.FontSize = Enum.FontSize.Size18
        NewGuiPart123.Text = "Off"
        NewGuiPart123.TextXAlignment = Enum.TextXAlignment.Left
        
        NewGuiPart124.Name = "Change"
        NewGuiPart124.Parent = NewGuiPart121
        NewGuiPart124.BackgroundColor3 = Color3.new(0.862745, 0.862745, 0.862745)
        NewGuiPart124.BorderSizePixel = 0
        NewGuiPart124.Position = UDim2.new(0, 10, 0, 30)
        NewGuiPart124.Size = UDim2.new(0, 40, 0, 15)
        NewGuiPart124.Font = Enum.Font.SourceSans
        NewGuiPart124.FontSize = Enum.FontSize.Size14
        NewGuiPart124.Text = ""
        
        NewGuiPart125.Name = "OnBar"
        NewGuiPart125.Parent = NewGuiPart124
        NewGuiPart125.BackgroundColor3 = Color3.new(0, 0.576471, 0.862745)
        NewGuiPart125.BorderSizePixel = 0
        NewGuiPart125.Size = UDim2.new(0, 0, 0, 15)
        NewGuiPart125.Font = Enum.Font.SourceSans
        NewGuiPart125.FontSize = Enum.FontSize.Size14
        NewGuiPart125.Text = ""
        
        NewGuiPart126.Name = "Bar"
        NewGuiPart126.Parent = NewGuiPart124
        NewGuiPart126.BackgroundColor3 = Color3.new(0, 0, 0)
        NewGuiPart126.BorderSizePixel = 0
        NewGuiPart126.ClipsDescendants = true
        NewGuiPart126.Position = UDim2.new(0, -2, 0, -2)
        NewGuiPart126.Size = UDim2.new(0, 10, 0, 19)
        NewGuiPart126.Font = Enum.Font.SourceSans
        NewGuiPart126.FontSize = Enum.FontSize.Size14
        NewGuiPart126.Text = ""
        
        NewGuiPart127.Name = "CameraInstances"
        NewGuiPart127.Parent = NewGuiPart114
        NewGuiPart127.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart127.BackgroundTransparency = 1
        NewGuiPart127.Position = UDim2.new(0, 0, 0, 180)
        NewGuiPart127.Size = UDim2.new(1, 0, 0, 60)
        
        NewGuiPart128.Name = "SName"
        NewGuiPart128.Parent = NewGuiPart127
        NewGuiPart128.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart128.BackgroundTransparency = 1
        NewGuiPart128.Position = UDim2.new(0, 10, 0, 0)
        NewGuiPart128.Size = UDim2.new(1, -20, 0, 30)
        NewGuiPart128.Font = Enum.Font.SourceSans
        NewGuiPart128.FontSize = Enum.FontSize.Size18
        NewGuiPart128.Text = "Camera Instances"
        NewGuiPart128.TextXAlignment = Enum.TextXAlignment.Left
        
        NewGuiPart129.Name = "Status"
        NewGuiPart129.Parent = NewGuiPart127
        NewGuiPart129.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart129.BackgroundTransparency = 1
        NewGuiPart129.Position = UDim2.new(0, 60, 0, 30)
        NewGuiPart129.Size = UDim2.new(0, 50, 0, 15)
        NewGuiPart129.Font = Enum.Font.SourceSans
        NewGuiPart129.FontSize = Enum.FontSize.Size18
        NewGuiPart129.Text = "Off"
        NewGuiPart129.TextXAlignment = Enum.TextXAlignment.Left
        
        NewGuiPart130.Name = "Change"
        NewGuiPart130.Parent = NewGuiPart127
        NewGuiPart130.BackgroundColor3 = Color3.new(0.862745, 0.862745, 0.862745)
        NewGuiPart130.BorderSizePixel = 0
        NewGuiPart130.Position = UDim2.new(0, 10, 0, 30)
        NewGuiPart130.Size = UDim2.new(0, 40, 0, 15)
        NewGuiPart130.Font = Enum.Font.SourceSans
        NewGuiPart130.FontSize = Enum.FontSize.Size14
        NewGuiPart130.Text = ""
        
        NewGuiPart131.Name = "OnBar"
        NewGuiPart131.Parent = NewGuiPart130
        NewGuiPart131.BackgroundColor3 = Color3.new(0, 0.576471, 0.862745)
        NewGuiPart131.BorderSizePixel = 0
        NewGuiPart131.Size = UDim2.new(0, 0, 0, 15)
        NewGuiPart131.Font = Enum.Font.SourceSans
        NewGuiPart131.FontSize = Enum.FontSize.Size14
        NewGuiPart131.Text = ""
        
        NewGuiPart132.Name = "Bar"
        NewGuiPart132.Parent = NewGuiPart130
        NewGuiPart132.BackgroundColor3 = Color3.new(0, 0, 0)
        NewGuiPart132.BorderSizePixel = 0
        NewGuiPart132.ClipsDescendants = true
        NewGuiPart132.Position = UDim2.new(0, -2, 0, -2)
        NewGuiPart132.Size = UDim2.new(0, 10, 0, 19)
        NewGuiPart132.Font = Enum.Font.SourceSans
        NewGuiPart132.FontSize = Enum.FontSize.Size14
        NewGuiPart132.Text = ""
        
        NewGuiPart133.Name = "Scripts"
        NewGuiPart133.Parent = NewGuiPart114
        NewGuiPart133.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart133.BackgroundTransparency = 1
        NewGuiPart133.Size = UDim2.new(1, 0, 0, 60)
        
        NewGuiPart134.Name = "SName"
        NewGuiPart134.Parent = NewGuiPart133
        NewGuiPart134.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart134.BackgroundTransparency = 1
        NewGuiPart134.Position = UDim2.new(0, 10, 0, 0)
        NewGuiPart134.Size = UDim2.new(1, -20, 0, 30)
        NewGuiPart134.Font = Enum.Font.SourceSans
        NewGuiPart134.FontSize = Enum.FontSize.Size18
        NewGuiPart134.Text = "Save Scripts"
        NewGuiPart134.TextXAlignment = Enum.TextXAlignment.Left
        
        NewGuiPart135.Name = "Status"
        NewGuiPart135.Parent = NewGuiPart133
        NewGuiPart135.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart135.BackgroundTransparency = 1
        NewGuiPart135.Position = UDim2.new(0, 60, 0, 30)
        NewGuiPart135.Size = UDim2.new(0, 50, 0, 15)
        NewGuiPart135.Font = Enum.Font.SourceSans
        NewGuiPart135.FontSize = Enum.FontSize.Size18
        NewGuiPart135.Text = "Off"
        NewGuiPart135.TextXAlignment = Enum.TextXAlignment.Left
        
        NewGuiPart136.Name = "Change"
        NewGuiPart136.Parent = NewGuiPart133
        NewGuiPart136.BackgroundColor3 = Color3.new(0.862745, 0.862745, 0.862745)
        NewGuiPart136.BorderSizePixel = 0
        NewGuiPart136.Position = UDim2.new(0, 10, 0, 30)
        NewGuiPart136.Size = UDim2.new(0, 40, 0, 15)
        NewGuiPart136.Font = Enum.Font.SourceSans
        NewGuiPart136.FontSize = Enum.FontSize.Size14
        NewGuiPart136.Text = ""
        
        NewGuiPart137.Name = "OnBar"
        NewGuiPart137.Parent = NewGuiPart136
        NewGuiPart137.BackgroundColor3 = Color3.new(0, 0.576471, 0.862745)
        NewGuiPart137.BorderSizePixel = 0
        NewGuiPart137.Size = UDim2.new(0, 0, 0, 15)
        NewGuiPart137.Font = Enum.Font.SourceSans
        NewGuiPart137.FontSize = Enum.FontSize.Size14
        NewGuiPart137.Text = ""
        
        NewGuiPart138.Name = "Bar"
        NewGuiPart138.Parent = NewGuiPart136
        NewGuiPart138.BackgroundColor3 = Color3.new(0, 0, 0)
        NewGuiPart138.BorderSizePixel = 0
        NewGuiPart138.ClipsDescendants = true
        NewGuiPart138.Position = UDim2.new(0, -2, 0, -2)
        NewGuiPart138.Size = UDim2.new(0, 10, 0, 19)
        NewGuiPart138.Font = Enum.Font.SourceSans
        NewGuiPart138.FontSize = Enum.FontSize.Size14
        NewGuiPart138.Text = ""
        
        NewGuiPart139.Name = "ToSave"
        NewGuiPart139.Parent = NewGuiPart111
        NewGuiPart139.BackgroundTransparency = 1
        NewGuiPart139.Position = UDim2.new(0, 0, 0, 17)
        NewGuiPart139.Size = UDim2.new(1, 0, 0, 20)
        NewGuiPart139.Font = Enum.Font.SourceSans
        NewGuiPart139.FontSize = Enum.FontSize.Size18
        NewGuiPart139.Text = "To Save"
        NewGuiPart139.TextColor3 = Color3.new(0, 0, 0)
        
        NewGuiPart140.Name = "CopyList"
        NewGuiPart140.Parent = NewGuiPart111
        NewGuiPart140.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart140.BackgroundTransparency = 0.80000001192093
        NewGuiPart140.Position = UDim2.new(0, 0, 0, 37)
        NewGuiPart140.Size = UDim2.new(1, 0, 0, 163)
        
        NewGuiPart141.Name = "Bottom"
        NewGuiPart141.Parent = NewGuiPart111
        NewGuiPart141.BackgroundColor3 = Color3.new(0.913726, 0.913726, 0.913726)
        NewGuiPart141.BorderColor3 = Color3.new(0.584314, 0.584314, 0.584314)
        NewGuiPart141.Position = UDim2.new(0, 0, 1, -50)
        NewGuiPart141.Size = UDim2.new(1, 0, 0, 50)
        
        NewGuiPart142.Parent = NewGuiPart141
        NewGuiPart142.BackgroundTransparency = 1
        NewGuiPart142.Position = UDim2.new(0, 4, 0, 0)
        NewGuiPart142.Size = UDim2.new(1, -4, 1, 0)
        NewGuiPart142.Font = Enum.Font.SourceSans
        NewGuiPart142.FontSize = Enum.FontSize.Size14
        NewGuiPart142.Text = "After the map saves, open a new place on studio, then right click Lighting and \"Insert from file...\", then select your file and run the unpacker script inside the folder."
        NewGuiPart142.TextColor3 = Color3.new(0, 0, 0)
        NewGuiPart142.TextWrapped = true
        NewGuiPart142.TextXAlignment = Enum.TextXAlignment.Left
        NewGuiPart142.TextYAlignment = Enum.TextYAlignment.Top
        
        NewGuiPart143.Name = "Save"
        NewGuiPart143.Parent = NewGuiPart111
        NewGuiPart143.BackgroundColor3 = Color3.new(0.941177, 0.941177, 0.941177)
        NewGuiPart143.BackgroundTransparency = 0.80000001192093
        NewGuiPart143.BorderColor3 = Color3.new(0, 0, 0)
        NewGuiPart143.Position = UDim2.new(0, 0, 1, -80)
        NewGuiPart143.Size = UDim2.new(1, 0, 0, 30)
        NewGuiPart143.Font = Enum.Font.SourceSans
        NewGuiPart143.FontSize = Enum.FontSize.Size18
        NewGuiPart143.Text = "Save"
        
        NewGuiPart144.Name = "FileName"
        NewGuiPart144.Parent = NewGuiPart111
        NewGuiPart144.BackgroundColor3 = Color3.new(0.941177, 0.941177, 0.941177)
        NewGuiPart144.BackgroundTransparency = 0.60000002384186
        NewGuiPart144.Position = UDim2.new(0, 0, 1, -105)
        NewGuiPart144.Size = UDim2.new(1, 0, 0, 25)
        NewGuiPart144.Font = Enum.Font.SourceSans
        NewGuiPart144.FontSize = Enum.FontSize.Size18
        NewGuiPart144.Text = "PlaceName"
        NewGuiPart144.TextXAlignment = Enum.TextXAlignment.Left
        
        NewGuiPart145.Name = "Entry"
        NewGuiPart145.Parent = NewGuiPart111
        NewGuiPart145.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart145.BackgroundTransparency = 1
        NewGuiPart145.Size = UDim2.new(1, 0, 0, 22)
        NewGuiPart145.Visible = false
        
        NewGuiPart146.Name = "Change"
        NewGuiPart146.Parent = NewGuiPart145
        NewGuiPart146.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart146.BackgroundTransparency = 0.60000002384186
        NewGuiPart146.Position = UDim2.new(0, 10, 0, 1)
        NewGuiPart146.Size = UDim2.new(0, 20, 0, 20)
        NewGuiPart146.ZIndex = 2
        NewGuiPart146.Font = Enum.Font.SourceSans
        NewGuiPart146.FontSize = Enum.FontSize.Size18
        NewGuiPart146.Text = ""
        NewGuiPart146.TextColor3 = Color3.new(1, 1, 1)
        
        NewGuiPart147.Name = "enabled"
        NewGuiPart147.Parent = NewGuiPart146
        NewGuiPart147.BackgroundColor3 = Color3.new(0.380392, 0.380392, 0.380392)
        NewGuiPart147.BackgroundTransparency = 0.40000000596046
        NewGuiPart147.BorderSizePixel = 0
        NewGuiPart147.Position = UDim2.new(0, 3, 0, 3)
        NewGuiPart147.Size = UDim2.new(0, 14, 0, 14)
        NewGuiPart147.Font = Enum.Font.SourceSans
        NewGuiPart147.FontSize = Enum.FontSize.Size14
        NewGuiPart147.Text = ""
        
        NewGuiPart148.Name = "Info"
        NewGuiPart148.Parent = NewGuiPart145
        NewGuiPart148.BackgroundTransparency = 1
        NewGuiPart148.Position = UDim2.new(0, 40, 0, 0)
        NewGuiPart148.Size = UDim2.new(1, -40, 0, 22)
        NewGuiPart148.Font = Enum.Font.SourceSans
        NewGuiPart148.FontSize = Enum.FontSize.Size18
        NewGuiPart148.Text = "Workspace"
        NewGuiPart148.TextColor3 = Color3.new(0, 0, 0)
        NewGuiPart148.TextXAlignment = Enum.TextXAlignment.Left
        
        NewGuiPart149.Name = "RemoteDebugWindow"
        NewGuiPart149.Parent = NewGuiPart1
        NewGuiPart149.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart149.BackgroundTransparency = 0.10000000149012
        NewGuiPart149.BorderColor3 = Color3.new(0.74902, 0.74902, 0.74902)
        NewGuiPart149.Position = UDim2.new(1, 0, 0, 0)
        NewGuiPart149.Size = UDim2.new(0, 300, 1, 0)
        
        NewGuiPart161.Name = "GetSetting"
        NewGuiPart161.Parent = NewGuiPart149
        NewGuiPart161.Archivable = true
        
        NewGuiPart150.Name = "Header"
        NewGuiPart150.Parent = NewGuiPart149
        NewGuiPart150.BackgroundColor3 = Color3.new(0.913726, 0.913726, 0.913726)
        NewGuiPart150.BorderColor3 = Color3.new(0.584314, 0.584314, 0.584314)
        NewGuiPart150.Size = UDim2.new(1, 0, 0, 17)
        
        NewGuiPart151.Parent = NewGuiPart150
        NewGuiPart151.BackgroundTransparency = 1
        NewGuiPart151.Position = UDim2.new(0, 4, 0, 0)
        NewGuiPart151.Size = UDim2.new(1, -4, 1, 0)
        NewGuiPart151.Font = Enum.Font.SourceSans
        NewGuiPart151.FontSize = Enum.FontSize.Size14
        NewGuiPart151.Text = "Remote Debugger"
        NewGuiPart151.TextColor3 = Color3.new(0, 0, 0)
        NewGuiPart151.TextXAlignment = Enum.TextXAlignment.Left
        
        NewGuiPart152.Name = "Desc"
        NewGuiPart152.Parent = NewGuiPart149
        NewGuiPart152.BackgroundColor3 = Color3.new(1, 1, 1)
        NewGuiPart152.BackgroundTransparency = 1
        NewGuiPart152.Position = UDim2.new(0, 0, 0, 20)
        NewGuiPart152.Size = UDim2.new(1, 0, 0, 40)
        NewGuiPart152.Font = Enum.Font.SourceSans
        NewGuiPart152.FontSize = Enum.FontSize.Size32
        NewGuiPart152.Text = "Have fun with remotes"
        NewGuiPart152.TextWrapped = true
        return NewGuiPart1
        end
        local D_E_X = CreateGui()
        D_E_X.Parent = game.Players.LocalPlayer.PlayerGui
        spawn(function()
            local Gui = D_E_X
            
        
        local IntroFrame = Gui:WaitForChild("IntroFrame")
        
        local SideMenu = Gui:WaitForChild("SideMenu")
        local OpenToggleButton = Gui:WaitForChild("Toggle")
        local CloseToggleButton = SideMenu:WaitForChild("Toggle")
        local OpenScriptEditorButton = SideMenu:WaitForChild("OpenScriptEditor")
        
        local ScriptEditor = Gui:WaitForChild("ScriptEditor")
        
        local SlideOut = SideMenu:WaitForChild("SlideOut")
        local SlideFrame = SlideOut:WaitForChild("SlideFrame")
        local Slant = SideMenu:WaitForChild("Slant")
        
        local ExplorerButton = SlideFrame:WaitForChild("Explorer")
        local SettingsButton = SlideFrame:WaitForChild("Settings")
        
        local SelectionBox = Instance.new("SelectionBox")
        SelectionBox.Parent = Gui
        
        local ExplorerPanel = Gui:WaitForChild("ExplorerPanel")
        local PropertiesFrame = Gui:WaitForChild("PropertiesFrame")
        local SaveMapWindow = Gui:WaitForChild("SaveMapWindow")
        local RemoteDebugWindow = Gui:WaitForChild("RemoteDebugWindow")
        
        local SettingsPanel = Gui:WaitForChild("SettingsPanel")
        local SettingsListener = SettingsPanel:WaitForChild("GetSetting")
        local SettingTemplate = SettingsPanel:WaitForChild("SettingTemplate")
        local SettingList = SettingsPanel:WaitForChild("SettingList")
        
        local SaveMapCopyList = SaveMapWindow:WaitForChild("CopyList")
        local SaveMapSettingFrame = SaveMapWindow:WaitForChild("MapSettings")
        local SaveMapName = SaveMapWindow:WaitForChild("FileName")
        local SaveMapButton = SaveMapWindow:WaitForChild("Save")
        local SaveMapCopyTemplate = SaveMapWindow:WaitForChild("Entry")
        local SaveMapSettings = {
            CopyWhat = {
                Workspace = true,
                Lighting = true,
                ReplicatedStorage = true,
                ReplicatedFirst = true,
                StarterPack = true,
                StarterGui = true,
                StarterPlayer = true
            },
            SaveScripts = true,
            SaveTerrain = true,
            LightingProperties = true,
            CameraInstances = true
        }
        
        local SelectionChanged = ExplorerPanel:WaitForChild("SelectionChanged")
        local GetSelection = ExplorerPanel:WaitForChild("GetSelection")
        local SetSelection = ExplorerPanel:WaitForChild("SetSelection")
        
        local Player = game:GetService("Players").LocalPlayer
        local Mouse = Player:GetMouse()
        
        local CurrentWindow = "Nothing c:"
        local Windows = {
            Explorer = {
                ExplorerPanel,
                PropertiesFrame
            },
            Settings = {SettingsPanel},
            SaveMap = {SaveMapWindow},
            Remotes = {RemoteDebugWindow}
        }
        
        function switchWindows(wName,over)
            if CurrentWindow == wName and not over then return end
            
            local count = 0
            
            for i,v in pairs(Windows) do
                count = 0
                if i ~= wName then
                    for _,c in pairs(v) do c:TweenPosition(UDim2.new(1, 30, count * 0.5, count * 36), "Out", "Quad", 0.5, true) count = count + 1 end
                end
            end
            
            count = 0
            
            if Windows[wName] then
                for _,c in pairs(Windows[wName]) do c:TweenPosition(UDim2.new(1, -300, count * 0.5, count * 36), "Out", "Quad", 0.5, true) count = count + 1 end
            end
            
            if wName ~= "Nothing c:" then
                CurrentWindow = wName
                for i,v in pairs(SlideFrame:GetChildren()) do
                    v.BackgroundTransparency = 1
                    v.Icon.ImageColor3 = Color3.new(70/255, 70/255, 70/255)
                end
                if SlideFrame:FindFirstChild(wName) then
                    SlideFrame[wName].BackgroundTransparency = 0.5
                    SlideFrame[wName].Icon.ImageColor3 = Color3.new(0,0,0)
                end
            end
        end
        
        function toggleDex(on)
            if on then
                SideMenu:TweenPosition(UDim2.new(1, -330, 0, 0), "Out", "Quad", 0.5, true)
                OpenToggleButton:TweenPosition(UDim2.new(1,0,0,0), "Out", "Quad", 0.5, true)
                switchWindows(CurrentWindow,true)
            else
                SideMenu:TweenPosition(UDim2.new(1, 0, 0, 0), "Out", "Quad", 0.5, true)
                OpenToggleButton:TweenPosition(UDim2.new(1,-30,0,0), "Out", "Quad", 0.5, true)
                switchWindows("Nothing c:")
            end
        end
        
        local Settings = {
            ClickSelect = false,
            SelBox = false,
            ClearProps = false,
            SelectUngrouped = true,
            SaveInstanceScripts = true
        }
        
        function ReturnSetting(set)
            if set == "ClearProps" then
                return Settings.ClearProps
            elseif set == "SelectUngrouped" then
                return Settings.SelectUngrouped
            end
        end
        
        OpenToggleButton.MouseButton1Up:connect(function()
            toggleDex(true)
        end)
        
        OpenScriptEditorButton.MouseButton1Up:connect(function()
            if OpenScriptEditorButton.Active then
                ScriptEditor.Visible = true
            end
        end)
        
        CloseToggleButton.MouseButton1Up:connect(function()
            if CloseToggleButton.Active then
                toggleDex(false)
            end
        end)
        
        for i,v in pairs(SlideFrame:GetChildren()) do
            v.MouseButton1Click:connect(function()
                switchWindows(v.Name)
            end)
            
            v.MouseEnter:connect(function()v.BackgroundTransparency = 0.5 end)
            v.MouseLeave:connect(function()if CurrentWindow~=v.Name then v.BackgroundTransparency = 1 end end)
        end
        
        
        function createSetting(name,interName,defaultOn)
            local newSetting = SettingTemplate:Clone()
            newSetting.Position = UDim2.new(0,0,0,#SettingList:GetChildren() * 60)
            newSetting.SName.Text = name
            
            local function toggle(on)
                if on then
                    newSetting.Change.Bar:TweenPosition(UDim2.new(0,32,0,-2),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.25,true)
                    newSetting.Change.OnBar:TweenSize(UDim2.new(0,34,0,15),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.25,true)
                    newSetting.Status.Text = "On"
                    Settings[interName] = true
                else
                    newSetting.Change.Bar:TweenPosition(UDim2.new(0,-2,0,-2),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.25,true)
                    newSetting.Change.OnBar:TweenSize(UDim2.new(0,0,0,15),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.25,true)
                    newSetting.Status.Text = "Off"
                    Settings[interName] = false
                end
            end	
            
            newSetting.Change.MouseButton1Click:connect(function()
                toggle(not Settings[interName])
            end)
            
            newSetting.Visible = true
            newSetting.Parent = SettingList
            
            if defaultOn then
                toggle(true)
            end
        end
        
        createSetting("Click part to select","ClickSelect",false)
        createSetting("Selection Box","SelBox",false)
        createSetting("Clear property value on focus","ClearProps",false)
        createSetting("Select ungrouped models","SelectUngrouped",true)
        createSetting("SaveInstance decompiles scripts","SaveInstanceScripts",true)
        
        local function getSelection()
            local t = GetSelection:Invoke()
            if t and #t > 0 then
                return t[1]
            else
                return nil
            end
        end
        
        Mouse.Button1Down:connect(function()
            if CurrentWindow == "Explorer" and Settings.ClickSelect then
                local target = Mouse.Target
                if target then
                    SetSelection:Invoke({target})
                end
            end
        end)
        
        SelectionChanged.Event:connect(function()
            if Settings.SelBox then
                local success,err = pcall(function()
                    local selection = getSelection()
                    SelectionBox.Adornee = selection
                end)
                if err then
                    SelectionBox.Adornee = nil
                end
            end
        end)
        
        SettingsListener.OnInvoke = ReturnSetting
        
        -- Map Copier
        
        function createMapSetting(obj,interName,defaultOn)
            local function toggle(on)
                if on then
                    obj.Change.Bar:TweenPosition(UDim2.new(0,32,0,-2),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.25,true)
                    obj.Change.OnBar:TweenSize(UDim2.new(0,34,0,15),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.25,true)
                    obj.Status.Text = "On"
                    SaveMapSettings[interName] = true
                else
                    obj.Change.Bar:TweenPosition(UDim2.new(0,-2,0,-2),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.25,true)
                    obj.Change.OnBar:TweenSize(UDim2.new(0,0,0,15),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.25,true)
                    obj.Status.Text = "Off"
                    SaveMapSettings[interName] = false
                end
            end	
            
            obj.Change.MouseButton1Click:connect(function()
                toggle(not SaveMapSettings[interName])
            end)
            
            obj.Visible = true
            obj.Parent = SaveMapSettingFrame
            
            if defaultOn then
                toggle(true)
            end
        end
        
        function createCopyWhatSetting(serv)
            if SaveMapSettings.CopyWhat[serv] then
                local newSetting = SaveMapCopyTemplate:Clone()
                newSetting.Position = UDim2.new(0,0,0,#SaveMapCopyList:GetChildren() * 22 + 5)
                newSetting.Info.Text = serv
                
                local function toggle(on)
                    if on then
                        newSetting.Change.enabled.Visible = true
                        SaveMapSettings.CopyWhat[serv] = true
                    else
                        newSetting.Change.enabled.Visible = false
                        SaveMapSettings.CopyWhat[serv] = false
                    end
                end	
            
                newSetting.Change.MouseButton1Click:connect(function()
                    toggle(not SaveMapSettings.CopyWhat[serv])
                end)
                
                newSetting.Visible = true
                newSetting.Parent = SaveMapCopyList
            end
        end
        
        createMapSetting(SaveMapSettingFrame.Scripts,"SaveScripts",true)
        createMapSetting(SaveMapSettingFrame.Terrain,"SaveTerrain",true)
        createMapSetting(SaveMapSettingFrame.Lighting,"LightingProperties",true)
        createMapSetting(SaveMapSettingFrame.CameraInstances,"CameraInstances",true)
        
        createCopyWhatSetting("Workspace")
        createCopyWhatSetting("Lighting")
        createCopyWhatSetting("ReplicatedStorage")
        createCopyWhatSetting("ReplicatedFirst")
        createCopyWhatSetting("StarterPack")
        createCopyWhatSetting("StarterGui")
        createCopyWhatSetting("StarterPlayer")
        
        SaveMapName.Text = tostring(game.PlaceId).."MapCopy"
        
        SaveMapButton.MouseButton1Click:connect(function()
            local copyWhat = {}
        
            local copyGroup = Instance.new("Model",game.ReplicatedStorage)
        
            local copyScripts = SaveMapSettings.SaveScripts
        
            local copyTerrain = SaveMapSettings.SaveTerrain
        
            local lightingProperties = SaveMapSettings.LightingProperties
        
            local cameraInstances = SaveMapSettings.CameraInstances
        
            -----------------------------------------------------------------------------------
        
            for i,v in pairs(SaveMapSettings.CopyWhat) do
                if v then
                    table.insert(copyWhat,i)
                end
            end
        
            local consoleFunc = printconsole or writeconsole
        
            if consoleFunc then
                consoleFunc("Raspberry Pi's place copier loaded.")
                consoleFunc("Copying map of game "..tostring(game.PlaceId)..".")
            end
        
            function archivable(root)
                for i,v in pairs(root:GetChildren()) do
                    if not game.Players:GetPlayerFromCharacter(v) then
                        v.Archivable = true
                        archivable(v)
                    end
                end
            end
        
            function decompileS(root)
                for i,v in pairs(root:GetChildren()) do
                    pcall(function()
                        if v:IsA("LocalScript") then
                            local isDisabled = v.Disabled
                            v.Disabled = true
                            v.Source = decompile(v)
                            v.Disabled = isDisabled
                        
                            if v.Source == "" then 
                                if consoleFunc then consoleFunc("LocalScript "..v.Name.." had a problem decompiling.") end
                            else
                                if consoleFunc then consoleFunc("LocalScript "..v.Name.." decompiled.") end
                            end
                        elseif v:IsA("ModuleScript") then
                            v.Source = decompile(v)
                        
                            if v.Source == "" then 
                                if consoleFunc then consoleFunc("ModuleScript "..v.Name.." had a problem decompiling.") end
                            else
                                if consoleFunc then consoleFunc("ModuleScript "..v.Name.." decompiled.") end
                            end
                        end
                    end)
                    decompileS(v)
                end
            end
        
            for i,v in pairs(copyWhat) do archivable(game[v]) end
        
            for j,obj in pairs(copyWhat) do
                if obj ~= "StarterPlayer" then
                    local newFolder = Instance.new("Folder",copyGroup)
                    newFolder.Name = obj
                    for i,v in pairs(game[obj]:GetChildren()) do
                        if v ~= copyGroup then
                            pcall(function()
                                v:Clone().Parent = newFolder
                            end)
                        end
                    end
                else
                    local newFolder = Instance.new("Model",copyGroup)
                    newFolder.Name = "StarterPlayer"
                    for i,v in pairs(game[obj]:GetChildren()) do
                        local newObj = Instance.new("Folder",newFolder)
                        newObj.Name = v.Name
                        for _,c in pairs(v:GetChildren()) do
                            if c.Name ~= "ControlScript" and c.Name ~= "CameraScript" then
                                c:Clone().Parent = newObj
                            end
                        end
                    end
                end
            end
        
            if workspace.CurrentCamera and cameraInstances then
                local cameraFolder = Instance.new("Model",copyGroup)
                cameraFolder.Name = "CameraItems"
                for i,v in pairs(workspace.CurrentCamera:GetChildren()) do v:Clone().Parent = cameraFolder end
            end
        
            if copyTerrain then
                local myTerrain = workspace.Terrain:CopyRegion(workspace.Terrain.MaxExtents)
                myTerrain.Parent = copyGroup
            end
        
            function saveProp(obj,prop,par)
                local myProp = obj[prop]
                if type(myProp) == "boolean" then
                    local newProp = Instance.new("BoolValue",par)
                    newProp.Name = prop
                    newProp.Value = myProp
                elseif type(myProp) == "number" then
                    local newProp = Instance.new("IntValue",par)
                    newProp.Name = prop
                    newProp.Value = myProp
                elseif type(myProp) == "string" then
                    local newProp = Instance.new("StringValue",par)
                    newProp.Name = prop
                    newProp.Value = myProp
                elseif type(myProp) == "userdata" then -- Assume Color3
                    pcall(function()
                        local newProp = Instance.new("Color3Value",par)
                        newProp.Name = prop
                        newProp.Value = myProp
                    end)
                end
            end
        
            if lightingProperties then
                local lightingProps = Instance.new("Model",copyGroup)
                lightingProps.Name = "LightingProperties"
            
                saveProp(game.Lighting,"Ambient",lightingProps)
                saveProp(game.Lighting,"Brightness",lightingProps)
                saveProp(game.Lighting,"ColorShift_Bottom",lightingProps)
                saveProp(game.Lighting,"ColorShift_Top",lightingProps)
                saveProp(game.Lighting,"GlobalShadows",lightingProps)
                saveProp(game.Lighting,"OutdoorAmbient",lightingProps)
                saveProp(game.Lighting,"Outlines",lightingProps)
                saveProp(game.Lighting,"GeographicLatitude",lightingProps)
                saveProp(game.Lighting,"TimeOfDay",lightingProps)
                saveProp(game.Lighting,"FogColor",lightingProps)
                saveProp(game.Lighting,"FogEnd",lightingProps)
                saveProp(game.Lighting,"FogStart",lightingProps)
            end
        
            if decompile and copyScripts then
                decompileS(copyGroup)
            end
        
            if SaveInstance then
                SaveInstance(copyGroup,SaveMapName.Text..".rbxm")
            elseif saveinstance then
                saveinstance(getelysianpath()..SaveMapName.Text..".rbxm",copyGroup)
            end
            --print("Saved!")
            if consoleFunc then
                consoleFunc("The map has been copied.")
            end
            SaveMapButton.Text = "The map has been saved"
            wait(5)
            SaveMapButton.Text = "Save"
        end)
        
        -- End Copier
        
        wait()
        
        IntroFrame:TweenPosition(UDim2.new(1,-300,0,0),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.5,true)
        
        switchWindows("Explorer")
        
        wait(1)
        
        SideMenu.Visible = true
        
        for i = 0,1,0.1 do
            IntroFrame.BackgroundTransparency = i
            IntroFrame.Main.BackgroundTransparency = i
            IntroFrame.Slant.ImageTransparency = i
            IntroFrame.Title.TextTransparency = i
            IntroFrame.Version.TextTransparency = i
            IntroFrame.Creator.TextTransparency = i
            wait()
        end
        
        IntroFrame.Visible = false
        
        SlideFrame:TweenPosition(UDim2.new(0,0,0,0),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.5,true)
        OpenScriptEditorButton:TweenPosition(UDim2.new(0,0,0,180),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.5,true)
        CloseToggleButton:TweenPosition(UDim2.new(0,0,0,210),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.5,true)
        Slant:TweenPosition(UDim2.new(0,0,0,240),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.5,true)
        
        wait(0.5)
        
        for i = 1,0,-0.1 do
            OpenScriptEditorButton.Icon.ImageTransparency = i
            CloseToggleButton.TextTransparency = i
            wait()
        end
        
        CloseToggleButton.Active = true
        CloseToggleButton.AutoButtonColor = true
        
        OpenScriptEditorButton.Active = true
        OpenScriptEditorButton.AutoButtonColor = true
        end)
        spawn(function()
            -- initial states
        local Option = {
            -- can modify object parents in the hierarchy
            Modifiable = false;
            -- can select objects
            Selectable = true;
        }
        
        -- MERELY
        
        Option.Modifiable = true
        
        -- END MERELY
        
        -- general size of GUI objects, in pixels
        local GUI_SIZE = 16
        -- padding between items within each entry
        local ENTRY_PADDING = 1
        -- padding between each entry
        local ENTRY_MARGIN = 1
        
        local Input = game:GetService("UserInputService")
        local HoldingCtrl = false
        local HoldingShift = false
        
        --[[
        
        # Explorer Panel
        
        A GUI panel that displays the game hierarchy.
        
        
        ## Selection Bindables
        
        - `Function GetSelection ( )`
        
            Returns an array of objects representing the objects currently
            selected in the panel.
        
        - `Function SetSelection ( Objects selection )`
        
            Sets the objects that are selected in the panel. `selection` is an array
            of objects.
        
        - `Event SelectionChanged ( )`
        
            Fired after the selection changes.
        
        
        ## Option Bindables
        
        - `Function GetOption ( string optionName )`
        
            If `optionName` is given, returns the value of that option. Otherwise,
            returns a table of options and their current values.
        
        - `Function SetOption ( string optionName, bool value )`
        
            Sets `optionName` to `value`.
        
            Options:
        
            - Modifiable
        
                Whether objects can be modified by the panel.
        
                Note that modifying objects depends on being able to select them. If
                Selectable is false, then Actions will not be available. Reparenting
                is still possible, but only for the dragged object.
        
            - Selectable
        
                Whether objects can be selected.
        
                If Modifiable is false, then left-clicking will perform a drag
                selection.
        
        ## Updates
        
        - 2013-09-18
            - Fixed explorer icons to match studio explorer.
        
        - 2013-09-14
            - Added GetOption and SetOption bindables.
                - Option: Modifiable; sets whether objects can be modified by the panel.
                - Option: Selectable; sets whether objects can be selected.
            - Slight modification to left-click selection behavior.
            - Improved layout and scaling.
        
        - 2013-09-13
            - Added drag to reparent objects.
                - Left-click to select/deselect object.
                - Left-click and drag unselected object to reparent single object.
                - Left-click and drag selected object to move reparent entire selection.
                - Right-click while dragging to cancel.
        
        - 2013-09-11
            - Added explorer panel header with actions.
                - Added Cut action.
                - Added Copy action.
                - Added Paste action.
                - Added Delete action.
            - Added drag selection.
                - Left-click: Add to selection on drag.
                - Right-click: Add to or remove from selection on drag.
            - Ensured SelectionChanged fires only when the selection actually changes.
            - Added documentation and change log.
            - Fixed thread issue.
        
        - 2013-09-09
            - Added basic multi-selection.
                - Left-click to set selection.
                - Right-click to add to or remove from selection.
            - Removed "Selection" ObjectValue.
                - Added GetSelection BindableFunction.
                - Added SetSelection BindableFunction.
                - Added SelectionChanged BindableEvent.
            - Changed font to SourceSans.
        
        - 2013-08-31
            - Improved GUI sizing based off of `GUI_SIZE` constant.
            - Automatic font size detection.
        
        - 2013-08-27
            - Initial explorer panel.
        
        
        ## Todo
        
        - Sorting
            - by ExplorerOrder
            - by children
            - by name
        - Drag objects to reparent
        
        ]]
        
        local ENTRY_SIZE = GUI_SIZE + ENTRY_PADDING*2
        local ENTRY_BOUND = ENTRY_SIZE + ENTRY_MARGIN
        local HEADER_SIZE = ENTRY_SIZE*2
        
        local FONT = 'SourceSans'
        local FONT_SIZE do
            local size = {8,9,10,11,12,14,18,24,36,48}
            local s
            local n = math.huge
            for i = 1,#size do
                if size[i] <= GUI_SIZE then
                    FONT_SIZE = i - 1
                end
            end
        end
        
        local GuiColor = {
            Background      = Color3.new(233/255, 233/255, 233/255);
            Border          = Color3.new(149/255, 149/255, 149/255);
            Selected        = Color3.new( 96/255, 140/255, 211/255);
            BorderSelected  = Color3.new( 86/255, 125/255, 188/255);
            Text            = Color3.new(  0/255,   0/255,   0/255);
            TextDisabled    = Color3.new(128/255, 128/255, 128/255);
            TextSelected    = Color3.new(255/255, 255/255, 255/255);
            Button          = Color3.new(221/255, 221/255, 221/255);
            ButtonBorder    = Color3.new(149/255, 149/255, 149/255);
            ButtonSelected  = Color3.new(255/255,   0/255,   0/255);
            Field           = Color3.new(255/255, 255/255, 255/255);
            FieldBorder     = Color3.new(191/255, 191/255, 191/255);
            TitleBackground = Color3.new(178/255, 178/255, 178/255);
        }
        
        ----------------------------------------------------------------
        ----------------------------------------------------------------
        ----------------------------------------------------------------
        ----------------------------------------------------------------
        ---- Icon map constants
        
        local MAP_ID = 483448923
        
        -- Indices based on implementation of Icon function.
        local ACTION_CUT         	 = 160
        local ACTION_COPY        	 = 161
        local ACTION_PASTE       	 = 162
        local ACTION_DELETE      	 = 163
        local ACTION_SORT        	 = 164
        local ACTION_CUT_OVER    	 = 174
        local ACTION_COPY_OVER   	 = 175
        local ACTION_PASTE_OVER  	 = 176
        local ACTION_DELETE_OVER	 = 177
        local ACTION_SORT_OVER  	 = 178
        local ACTION_EDITQUICKACCESS = 190
        local ACTION_FREEZE 		 = 188
        local ACTION_STARRED 		 = 189
        local ACTION_ADDSTAR 		 = 184
        local ACTION_ADDSTAR_OVER 	 = 187
        
        local NODE_COLLAPSED      = 165
        local NODE_EXPANDED       = 166
        local NODE_COLLAPSED_OVER = 179
        local NODE_EXPANDED_OVER  = 180
        
        local ExplorerIndex = {
            ["Accessory"] = 32;
            ["Accoutrement"] = 32;
            ["AdService"] = 73;
            ["Animation"] = 60;
            ["AnimationController"] = 60;
            ["AnimationTrack"] = 60;
            ["Animator"] = 60;
            ["ArcHandles"] = 56;
            ["AssetService"] = 72;
            ["Attachment"] = 34;
            ["Backpack"] = 20;
            ["BadgeService"] = 75;
            ["BallSocketConstraint"] = 89;
            ["BillboardGui"] = 64;
            ["BinaryStringValue"] = 4;
            ["BindableEvent"] = 67;
            ["BindableFunction"] = 66;
            ["BlockMesh"] = 8;
            ["BloomEffect"] = 90;
            ["BlurEffect"] = 90;
            ["BodyAngularVelocity"] = 14;
            ["BodyForce"] = 14;
            ["BodyGyro"] = 14;
            ["BodyPosition"] = 14;
            ["BodyThrust"] = 14;
            ["BodyVelocity"] = 14;
            ["BoolValue"] = 4;
            ["BoxHandleAdornment"] = 54;
            ["BrickColorValue"] = 4;
            ["Camera"] = 5;
            ["CFrameValue"] = 4;
            ["CharacterMesh"] = 60;
            ["Chat"] = 33;
            ["ClickDetector"] = 41;
            ["CollectionService"] = 30;
            ["Color3Value"] = 4;
            ["ColorCorrectionEffect"] = 90;
            ["ConeHandleAdornment"] = 54;
            ["Configuration"] = 58;
            ["ContentProvider"] = 72;
            ["ContextActionService"] = 41;
            ["CoreGui"] = 46;
            ["CoreScript"] = 18;
            ["CornerWedgePart"] = 1;
            ["CustomEvent"] = 4;
            ["CustomEventReceiver"] = 4;
            ["CylinderHandleAdornment"] = 54;
            ["CylinderMesh"] = 8;
            ["CylindricalConstraint"] = 89;
            ["Debris"] = 30;
            ["Decal"] = 7;
            ["Dialog"] = 62;
            ["DialogChoice"] = 63;
            ["DoubleConstrainedValue"] = 4;
            ["Explosion"] = 36;
            ["FileMesh"] = 8;
            ["Fire"] = 61;
            ["Flag"] = 38;
            ["FlagStand"] = 39;
            ["FloorWire"] = 4;
            ["Folder"] = 70;
            ["ForceField"] = 37;
            ["Frame"] = 48;
            ["GamePassService"] = 19;
            ["Glue"] = 34;
            ["GuiButton"] = 52;
            ["GuiMain"] = 47;
            ["GuiService"] = 47;
            ["Handles"] = 53;
            ["HapticService"] = 84;
            ["Hat"] = 45;
            ["HingeConstraint"] = 89;
            ["Hint"] = 33;
            ["HopperBin"] = 22;
            ["HttpService"] = 76;
            ["Humanoid"] = 9;
            ["ImageButton"] = 52;
            ["ImageLabel"] = 49;
            ["InsertService"] = 72;
            ["IntConstrainedValue"] = 4;
            ["IntValue"] = 4;
            ["JointInstance"] = 34;
            ["JointsService"] = 34;
            ["Keyframe"] = 60;
            ["KeyframeSequence"] = 60;
            ["KeyframeSequenceProvider"] = 60;
            ["Lighting"] = 13;
            ["LineHandleAdornment"] = 54;
            ["LocalScript"] = 18;
            ["LogService"] = 87;
            ["MarketplaceService"] = 46;
            ["Message"] = 33;
            ["Model"] = 2;
            ["ModuleScript"] = 71;
            ["Motor"] = 34;
            ["Motor6D"] = 34;
            ["MoveToConstraint"] = 89;
            ["NegateOperation"] = 78;
            ["NetworkClient"] = 16;
            ["NetworkReplicator"] = 29;
            ["NetworkServer"] = 15;
            ["NumberValue"] = 4;
            ["ObjectValue"] = 4;
            ["Pants"] = 44;
            ["ParallelRampPart"] = 1;
            ["Part"] = 1;
            ["ParticleEmitter"] = 69;
            ["PartPairLasso"] = 57;
            ["PathfindingService"] = 37;
            ["Platform"] = 35;
            ["Player"] = 12;
            ["PlayerGui"] = 46;
            ["Players"] = 21;
            ["PlayerScripts"] = 82;
            ["PointLight"] = 13;
            ["PointsService"] = 83;
            ["Pose"] = 60;
            ["PrismaticConstraint"] = 89;
            ["PrismPart"] = 1;
            ["PyramidPart"] = 1;
            ["RayValue"] = 4;
            ["ReflectionMetadata"] = 86;
            ["ReflectionMetadataCallbacks"] = 86;
            ["ReflectionMetadataClass"] = 86;
            ["ReflectionMetadataClasses"] = 86;
            ["ReflectionMetadataEnum"] = 86;
            ["ReflectionMetadataEnumItem"] = 86;
            ["ReflectionMetadataEnums"] = 86;
            ["ReflectionMetadataEvents"] = 86;
            ["ReflectionMetadataFunctions"] = 86;
            ["ReflectionMetadataMember"] = 86;
            ["ReflectionMetadataProperties"] = 86;
            ["ReflectionMetadataYieldFunctions"] = 86;
            ["RemoteEvent"] = 80;
            ["RemoteFunction"] = 79;
            ["ReplicatedFirst"] = 72;
            ["ReplicatedStorage"] = 72;
            ["RightAngleRampPart"] = 1;
            ["RocketPropulsion"] = 14;
            ["RodConstraint"] = 89;
            ["RopeConstraint"] = 89;
            ["Rotate"] = 34;
            ["RotateP"] = 34;
            ["RotateV"] = 34;
            ["RunService"] = 66;
            ["ScreenGui"] = 47;
            ["Script"] = 6;
            ["ScrollingFrame"] = 48;
            ["Seat"] = 35;
            ["Selection"] = 55;
            ["SelectionBox"] = 54;
            ["SelectionPartLasso"] = 57;
            ["SelectionPointLasso"] = 57;
            ["SelectionSphere"] = 54;
            ["ServerScriptService"] = 0;
            ["ServerStorage"] = 74;
            ["Shirt"] = 43;
            ["ShirtGraphic"] = 40;
            ["SkateboardPlatform"] = 35;
            ["Sky"] = 28;
            ["SlidingBallConstraint"] = 89;
            ["Smoke"] = 59;
            ["Snap"] = 34;
            ["Sound"] = 11;
            ["SoundService"] = 31;
            ["Sparkles"] = 42;
            ["SpawnLocation"] = 25;
            ["SpecialMesh"] = 8;
            ["SphereHandleAdornment"] = 54;
            ["SpotLight"] = 13;
            ["SpringConstraint"] = 89;
            ["StarterCharacterScripts"] = 82;
            ["StarterGear"] = 20;
            ["StarterGui"] = 46;
            ["StarterPack"] = 20;
            ["StarterPlayer"] = 88;
            ["StarterPlayerScripts"] = 82;
            ["Status"] = 2;
            ["StringValue"] = 4;
            ["SunRaysEffect"] = 90;
            ["SurfaceGui"] = 64;
            ["SurfaceLight"] = 13;
            ["SurfaceSelection"] = 55;
            ["Team"] = 24;
            ["Teams"] = 23;
            ["TeleportService"] = 81;
            ["Terrain"] = 65;
            ["TerrainRegion"] = 65;
            ["TestService"] = 68;
            ["TextBox"] = 51;
            ["TextButton"] = 51;
            ["TextLabel"] = 50;
            ["Texture"] = 10;
            ["TextureTrail"] = 4;
            ["Tool"] = 17;
            ["TouchTransmitter"] = 37;
            ["TrussPart"] = 1;
            ["UnionOperation"] = 77;
            ["UserInputService"] = 84;
            ["Vector3Value"] = 4;
            ["VehicleSeat"] = 35;
            ["VelocityMotor"] = 34;
            ["WedgePart"] = 1;
            ["Weld"] = 34;
            ["Workspace"] = 19;
        }
        
        ----------------------------------------------------------------
        ----------------------------------------------------------------
        ----------------------------------------------------------------
        ----------------------------------------------------------------
        ----------------------------------------------------------------
        
        function Create(ty,data)
            local obj
            if type(ty) == 'string' then
                obj = Instance.new(ty)
            else
                obj = ty
            end
            for k, v in pairs(data) do
                if type(k) == 'number' then
                    v.Parent = obj
                else
                    obj[k] = v
                end
            end
            return obj
        end
        
        local barActive = false
        local activeOptions = {}
        
        function createDDown(dBut, callback,...)
            if barActive then
                for i,v in pairs(activeOptions) do
                    v:Destroy()
                end
                activeOptions = {}
                barActive = false
                return
            else
                barActive = true
            end
            local slots = {...}
            local base = dBut
            for i,v in pairs(slots) do
                local newOption = base:Clone()
                newOption.ZIndex = 5
                newOption.Name = "Option "..tostring(i)
                newOption.Parent = base.Parent.Parent.Parent
                newOption.BackgroundTransparency = 0
                newOption.ZIndex = 2
                table.insert(activeOptions,newOption)
                newOption.Position = UDim2.new(-0.4, dBut.Position.X.Offset, dBut.Position.Y.Scale, dBut.Position.Y.Offset + (#activeOptions * dBut.Size.Y.Offset))
                newOption.Text = slots[i]
                newOption.MouseButton1Down:connect(function()
                    dBut.Text = slots[i]
                    callback(slots[i])
                    for i,v in pairs(activeOptions) do
                        v:Destroy()
                    end
                    activeOptions = {}
                    barActive = false
                end)
            end
        end
        
        -- Connects a function to an event such that it fires asynchronously
        function Connect(event,func)
            return event:connect(function(...)
                local a = {...}
                spawn(function() func(unpack(a)) end)
            end)
        end
        
        -- returns the ascendant ScreenGui of an object
        function GetScreen(screen)
            if screen == nil then return nil end
            while not screen:IsA("ScreenGui") do
                screen = screen.Parent
                if screen == nil then return nil end
            end
            return screen
        end
        
        do
            local ZIndexLock = {}
            -- Sets the ZIndex of an object and its descendants. Objects are locked so
            -- that SetZIndexOnChanged doesn't spawn multiple threads that set the
            -- ZIndex of the same object.
            function SetZIndex(object,z)
                if not ZIndexLock[object] then
                    ZIndexLock[object] = true
                    if object:IsA'GuiObject' then
                        object.ZIndex = z
                    end
                    local children = object:GetChildren()
                    for i = 1,#children do
                        SetZIndex(children[i],z)
                    end
                    ZIndexLock[object] = nil
                end
            end
        
            function SetZIndexOnChanged(object)
                return object.Changed:connect(function(p)
                    if p == "ZIndex" then
                        SetZIndex(object,object.ZIndex)
                    end
                end)
            end
        end
        
        ---- IconMap ----
        -- Image size: 256px x 256px
        -- Icon size: 16px x 16px
        -- Padding between each icon: 2px
        -- Padding around image edge: 1px
        -- Total icons: 14 x 14 (196)
        local Icon do
            local iconMap = 'http://www.roblox.com/asset/?id=' .. MAP_ID
            game:GetService('ContentProvider'):Preload(iconMap)
            local iconDehash do
                -- 14 x 14, 0-based input, 0-based output
                local f=math.floor
                function iconDehash(h)
                    return f(h/14%14),f(h%14)
                end
            end
        
            function Icon(IconFrame,index)
                local row,col = iconDehash(index)
                local mapSize = Vector2.new(256,256)
                local pad,border = 2,1
                local iconSize = 16
        
                local class = 'Frame'
                if type(IconFrame) == 'string' then
                    class = IconFrame
                    IconFrame = nil
                end
        
                if not IconFrame then
                    IconFrame = Create(class,{
                        Name = "Icon";
                        BackgroundTransparency = 1;
                        ClipsDescendants = true;
                        Create('ImageLabel',{
                            Name = "IconMap";
                            Active = false;
                            BackgroundTransparency = 1;
                            Image = iconMap;
                            Size = UDim2.new(mapSize.x/iconSize,0,mapSize.y/iconSize,0);
                        });
                    })
                end
        
                IconFrame.IconMap.Position = UDim2.new(-col - (pad*(col+1) + border)/iconSize,0,-row - (pad*(row+1) + border)/iconSize,0)
                return IconFrame
            end
        end
        
        ----------------------------------------------------------------
        ----------------------------------------------------------------
        ----------------------------------------------------------------
        ----------------------------------------------------------------
        ---- ScrollBar
        do
            -- AutoButtonColor doesn't always reset properly
            local function ResetButtonColor(button)
                local active = button.Active
                button.Active = not active
                button.Active = active
            end
        
            local function ArrowGraphic(size,dir,scaled,template)
                local Frame = Create('Frame',{
                    Name = "Arrow Graphic";
                    BorderSizePixel = 0;
                    Size = UDim2.new(0,size,0,size);
                    Transparency = 1;
                })
                if not template then
                    template = Instance.new("Frame")
                    template.BorderSizePixel = 0
                end
        
                local transform
                if dir == nil or dir == 'Up' then
                    function transform(p,s) return p,s end
                elseif dir == 'Down' then
                    function transform(p,s) return UDim2.new(0,p.X.Offset,0,size-p.Y.Offset-1),s end
                elseif dir == 'Left' then
                    function transform(p,s) return UDim2.new(0,p.Y.Offset,0,p.X.Offset),UDim2.new(0,s.Y.Offset,0,s.X.Offset) end
                elseif dir == 'Right' then
                    function transform(p,s) return UDim2.new(0,size-p.Y.Offset-1,0,p.X.Offset),UDim2.new(0,s.Y.Offset,0,s.X.Offset) end
                end
        
                local scale
                if scaled then
                    function scale(p,s) return UDim2.new(p.X.Offset/size,0,p.Y.Offset/size,0),UDim2.new(s.X.Offset/size,0,s.Y.Offset/size,0) end
                else
                    function scale(p,s) return p,s end
                end
        
                local o = math.floor(size/4)
                if size%2 == 0 then
                    local n = size/2-1
                    for i = 0,n do
                        local t = template:Clone()
                        local p,s = scale(transform(
                            UDim2.new(0,n-i,0,o+i),
                            UDim2.new(0,(i+1)*2,0,1)
                        ))
                        t.Position = p
                        t.Size = s
                        t.Parent = Frame
                    end
                else
                    local n = (size-1)/2
                    for i = 0,n do
                        local t = template:Clone()
                        local p,s = scale(transform(
                            UDim2.new(0,n-i,0,o+i),
                            UDim2.new(0,i*2+1,0,1)
                        ))
                        t.Position = p
                        t.Size = s
                        t.Parent = Frame
                    end
                end
                if size%4 > 1 then
                    local t = template:Clone()
                    local p,s = scale(transform(
                        UDim2.new(0,0,0,size-o-1),
                        UDim2.new(0,size,0,1)
                    ))
                    t.Position = p
                    t.Size = s
                    t.Parent = Frame
                end
                return Frame
            end
        
        
            local function GripGraphic(size,dir,spacing,scaled,template)
                local Frame = Create('Frame',{
                    Name = "Grip Graphic";
                    BorderSizePixel = 0;
                    Size = UDim2.new(0,size.x,0,size.y);
                    Transparency = 1;
                })
                if not template then
                    template = Instance.new("Frame")
                    template.BorderSizePixel = 0
                end
        
                spacing = spacing or 2
        
                local scale
                if scaled then
                    function scale(p) return UDim2.new(p.X.Offset/size.x,0,p.Y.Offset/size.y,0) end
                else
                    function scale(p) return p end
                end
        
                if dir == 'Vertical' then
                    for i=0,size.x-1,spacing do
                        local t = template:Clone()
                        t.Size = scale(UDim2.new(0,1,0,size.y))
                        t.Position = scale(UDim2.new(0,i,0,0))
                        t.Parent = Frame
                    end
                elseif dir == nil or dir == 'Horizontal' then
                    for i=0,size.y-1,spacing do
                        local t = template:Clone()
                        t.Size = scale(UDim2.new(0,size.x,0,1))
                        t.Position = scale(UDim2.new(0,0,0,i))
                        t.Parent = Frame
                    end
                end
        
                return Frame
            end
        
            local mt = {
                __index = {
                    GetScrollPercent = function(self)
                        return self.ScrollIndex/(self.TotalSpace-self.VisibleSpace)
                    end;
                    CanScrollDown = function(self)
                        return self.ScrollIndex + self.VisibleSpace < self.TotalSpace
                    end;
                    CanScrollUp = function(self)
                        return self.ScrollIndex > 0
                    end;
                    ScrollDown = function(self)
                        self.ScrollIndex = self.ScrollIndex + self.PageIncrement
                        self:Update()
                    end;
                    ScrollUp = function(self)
                        self.ScrollIndex = self.ScrollIndex - self.PageIncrement
                        self:Update()
                    end;
                    ScrollTo = function(self,index)
                        self.ScrollIndex = index
                        self:Update()
                    end;
                    SetScrollPercent = function(self,percent)
                        self.ScrollIndex = math.floor((self.TotalSpace - self.VisibleSpace)*percent + 0.5)
                        self:Update()
                    end;
                };
            }
            mt.__index.CanScrollRight = mt.__index.CanScrollDown
            mt.__index.CanScrollLeft = mt.__index.CanScrollUp
            mt.__index.ScrollLeft = mt.__index.ScrollUp
            mt.__index.ScrollRight = mt.__index.ScrollDown
        
            function ScrollBar(horizontal)
                -- create row scroll bar
                local ScrollFrame = Create('Frame',{
                    Name = "ScrollFrame";
                    Position = horizontal and UDim2.new(0,0,1,-GUI_SIZE) or UDim2.new(1,-GUI_SIZE,0,0);
                    Size = horizontal and UDim2.new(1,0,0,GUI_SIZE) or UDim2.new(0,GUI_SIZE,1,0);
                    BackgroundTransparency = 1;
                    Create('ImageButton',{
                        Name = "ScrollDown";
                        Position = horizontal and UDim2.new(1,-GUI_SIZE,0,0) or UDim2.new(0,0,1,-GUI_SIZE);
                        Size = UDim2.new(0, GUI_SIZE, 0, GUI_SIZE);
                        BackgroundColor3 = GuiColor.Button;
                        BorderColor3 = GuiColor.Border;
                        --BorderSizePixel = 0;
                    });
                    Create('ImageButton',{
                        Name = "ScrollUp";
                        Size = UDim2.new(0, GUI_SIZE, 0, GUI_SIZE);
                        BackgroundColor3 = GuiColor.Button;
                        BorderColor3 = GuiColor.Border;
                        --BorderSizePixel = 0;
                    });
                    Create('ImageButton',{
                        Name = "ScrollBar";
                        Size = horizontal and UDim2.new(1,-GUI_SIZE*2,1,0) or UDim2.new(1,0,1,-GUI_SIZE*2);
                        Position = horizontal and UDim2.new(0,GUI_SIZE,0,0) or UDim2.new(0,0,0,GUI_SIZE);
                        AutoButtonColor = false;
                        BackgroundColor3 = Color3.new(0.94902, 0.94902, 0.94902);
                        BorderColor3 = GuiColor.Border;
                        --BorderSizePixel = 0;
                        Create('ImageButton',{
                            Name = "ScrollThumb";
                            AutoButtonColor = false;
                            Size = UDim2.new(0, GUI_SIZE, 0, GUI_SIZE);
                            BackgroundColor3 = GuiColor.Button;
                            BorderColor3 = GuiColor.Border;
                            --BorderSizePixel = 0;
                        });
                    });
                })
        
                local graphicTemplate = Create('Frame',{
                    Name="Graphic";
                    BorderSizePixel = 0;
                    BackgroundColor3 = GuiColor.Border;
                })
                local graphicSize = GUI_SIZE/2
        
                local ScrollDownFrame = ScrollFrame.ScrollDown
                    local ScrollDownGraphic = ArrowGraphic(graphicSize,horizontal and 'Right' or 'Down',true,graphicTemplate)
                    ScrollDownGraphic.Position = UDim2.new(0.5,-graphicSize/2,0.5,-graphicSize/2)
                    ScrollDownGraphic.Parent = ScrollDownFrame
                local ScrollUpFrame = ScrollFrame.ScrollUp
                    local ScrollUpGraphic = ArrowGraphic(graphicSize,horizontal and 'Left' or 'Up',true,graphicTemplate)
                    ScrollUpGraphic.Position = UDim2.new(0.5,-graphicSize/2,0.5,-graphicSize/2)
                    ScrollUpGraphic.Parent = ScrollUpFrame
                local ScrollBarFrame = ScrollFrame.ScrollBar
                local ScrollThumbFrame = ScrollBarFrame.ScrollThumb
                do
                    local size = GUI_SIZE*3/8
                    local Decal = GripGraphic(Vector2.new(size,size),horizontal and 'Vertical' or 'Horizontal',2,graphicTemplate)
                    Decal.Position = UDim2.new(0.5,-size/2,0.5,-size/2)
                    Decal.Parent = ScrollThumbFrame
                end
        
                local Class = setmetatable({
                    GUI = ScrollFrame;
                    ScrollIndex = 0;
                    VisibleSpace = 0;
                    TotalSpace = 0;
                    PageIncrement = 1;
                },mt)
        
                local UpdateScrollThumb
                if horizontal then
                    function UpdateScrollThumb()
                        ScrollThumbFrame.Size = UDim2.new(Class.VisibleSpace/Class.TotalSpace,0,0,GUI_SIZE)
                        if ScrollThumbFrame.AbsoluteSize.x < GUI_SIZE then
                            ScrollThumbFrame.Size = UDim2.new(0,GUI_SIZE,0,GUI_SIZE)
                        end
                        local barSize = ScrollBarFrame.AbsoluteSize.x
                        ScrollThumbFrame.Position = UDim2.new(Class:GetScrollPercent()*(barSize - ScrollThumbFrame.AbsoluteSize.x)/barSize,0,0,0)
                    end
                else
                    function UpdateScrollThumb()
                        ScrollThumbFrame.Size = UDim2.new(0,GUI_SIZE,Class.VisibleSpace/Class.TotalSpace,0)
                        if ScrollThumbFrame.AbsoluteSize.y < GUI_SIZE then
                            ScrollThumbFrame.Size = UDim2.new(0,GUI_SIZE,0,GUI_SIZE)
                        end
                        local barSize = ScrollBarFrame.AbsoluteSize.y
                        ScrollThumbFrame.Position = UDim2.new(0,0,Class:GetScrollPercent()*(barSize - ScrollThumbFrame.AbsoluteSize.y)/barSize,0)
                    end
                end
        
                local lastDown
                local lastUp
                local scrollStyle = {BackgroundColor3=GuiColor.Border,BackgroundTransparency=0}
                local scrollStyle_ds = {BackgroundColor3=GuiColor.Border,BackgroundTransparency=0.7}
        
                local function Update()
                    local t = Class.TotalSpace
                    local v = Class.VisibleSpace
                    local s = Class.ScrollIndex
                    if v <= t then
                        if s > 0 then
                            if s + v > t then
                                Class.ScrollIndex = t - v
                            end
                        else
                            Class.ScrollIndex = 0
                        end
                    else
                        Class.ScrollIndex = 0
                    end
        
                    if Class.UpdateCallback then
                        if Class.UpdateCallback(Class) == false then
                            return
                        end
                    end
        
                    local down = Class:CanScrollDown()
                    local up = Class:CanScrollUp()
                    if down ~= lastDown then
                        lastDown = down
                        ScrollDownFrame.Active = down
                        ScrollDownFrame.AutoButtonColor = down
                        local children = ScrollDownGraphic:GetChildren()
                        local style = down and scrollStyle or scrollStyle_ds
                        for i = 1,#children do
                            Create(children[i],style)
                        end
                    end
                    if up ~= lastUp then
                        lastUp = up
                        ScrollUpFrame.Active = up
                        ScrollUpFrame.AutoButtonColor = up
                        local children = ScrollUpGraphic:GetChildren()
                        local style = up and scrollStyle or scrollStyle_ds
                        for i = 1,#children do
                            Create(children[i],style)
                        end
                    end
                    ScrollThumbFrame.Visible = down or up
                    UpdateScrollThumb()
                end
                Class.Update = Update
        
                SetZIndexOnChanged(ScrollFrame)
        
                local MouseDrag = Create('ImageButton',{
                    Name = "MouseDrag";
                    Position = UDim2.new(-0.25,0,-0.25,0);
                    Size = UDim2.new(1.5,0,1.5,0);
                    Transparency = 1;
                    AutoButtonColor = false;
                    Active = true;
                    ZIndex = 10;
                })
        
                local scrollEventID = 0
                ScrollDownFrame.MouseButton1Down:connect(function()
                    scrollEventID = tick()
                    local current = scrollEventID
                    local up_con
                    up_con = MouseDrag.MouseButton1Up:connect(function()
                        scrollEventID = tick()
                        MouseDrag.Parent = nil
                        ResetButtonColor(ScrollDownFrame)
                        up_con:disconnect(); drag = nil
                    end)
                    MouseDrag.Parent = GetScreen(ScrollFrame)
                    Class:ScrollDown()
                    wait(0.2) -- delay before auto scroll
                    while scrollEventID == current do
                        Class:ScrollDown()
                        if not Class:CanScrollDown() then break end
                        wait()
                    end
                end)
        
                ScrollDownFrame.MouseButton1Up:connect(function()
                    scrollEventID = tick()
                end)
        
                ScrollUpFrame.MouseButton1Down:connect(function()
                    scrollEventID = tick()
                    local current = scrollEventID
                    local up_con
                    up_con = MouseDrag.MouseButton1Up:connect(function()
                        scrollEventID = tick()
                        MouseDrag.Parent = nil
                        ResetButtonColor(ScrollUpFrame)
                        up_con:disconnect(); drag = nil
                    end)
                    MouseDrag.Parent = GetScreen(ScrollFrame)
                    Class:ScrollUp()
                    wait(0.2)
                    while scrollEventID == current do
                        Class:ScrollUp()
                        if not Class:CanScrollUp() then break end
                        wait()
                    end
                end)
        
                ScrollUpFrame.MouseButton1Up:connect(function()
                    scrollEventID = tick()
                end)
        
                if horizontal then
                    ScrollBarFrame.MouseButton1Down:connect(function(x,y)
                        scrollEventID = tick()
                        local current = scrollEventID
                        local up_con
                        up_con = MouseDrag.MouseButton1Up:connect(function()
                            scrollEventID = tick()
                            MouseDrag.Parent = nil
                            ResetButtonColor(ScrollUpFrame)
                            up_con:disconnect(); drag = nil
                        end)
                        MouseDrag.Parent = GetScreen(ScrollFrame)
                        if x > ScrollThumbFrame.AbsolutePosition.x then
                            Class:ScrollTo(Class.ScrollIndex + Class.VisibleSpace)
                            wait(0.2)
                            while scrollEventID == current do
                                if x < ScrollThumbFrame.AbsolutePosition.x + ScrollThumbFrame.AbsoluteSize.x then break end
                                Class:ScrollTo(Class.ScrollIndex + Class.VisibleSpace)
                                wait()
                            end
                        else
                            Class:ScrollTo(Class.ScrollIndex - Class.VisibleSpace)
                            wait(0.2)
                            while scrollEventID == current do
                                if x > ScrollThumbFrame.AbsolutePosition.x then break end
                                Class:ScrollTo(Class.ScrollIndex - Class.VisibleSpace)
                                wait()
                            end
                        end
                    end)
                else
                    ScrollBarFrame.MouseButton1Down:connect(function(x,y)
                        scrollEventID = tick()
                        local current = scrollEventID
                        local up_con
                        up_con = MouseDrag.MouseButton1Up:connect(function()
                            scrollEventID = tick()
                            MouseDrag.Parent = nil
                            ResetButtonColor(ScrollUpFrame)
                            up_con:disconnect(); drag = nil
                        end)
                        MouseDrag.Parent = GetScreen(ScrollFrame)
                        if y > ScrollThumbFrame.AbsolutePosition.y then
                            Class:ScrollTo(Class.ScrollIndex + Class.VisibleSpace)
                            wait(0.2)
                            while scrollEventID == current do
                                if y < ScrollThumbFrame.AbsolutePosition.y + ScrollThumbFrame.AbsoluteSize.y then break end
                                Class:ScrollTo(Class.ScrollIndex + Class.VisibleSpace)
                                wait()
                            end
                        else
                            Class:ScrollTo(Class.ScrollIndex - Class.VisibleSpace)
                            wait(0.2)
                            while scrollEventID == current do
                                if y > ScrollThumbFrame.AbsolutePosition.y then break end
                                Class:ScrollTo(Class.ScrollIndex - Class.VisibleSpace)
                                wait()
                            end
                        end
                    end)
                end
        
                if horizontal then
                    ScrollThumbFrame.MouseButton1Down:connect(function(x,y)
                        scrollEventID = tick()
                        local mouse_offset = x - ScrollThumbFrame.AbsolutePosition.x
                        local drag_con
                        local up_con
                        drag_con = MouseDrag.MouseMoved:connect(function(x,y)
                            local bar_abs_pos = ScrollBarFrame.AbsolutePosition.x
                            local bar_drag = ScrollBarFrame.AbsoluteSize.x - ScrollThumbFrame.AbsoluteSize.x
                            local bar_abs_one = bar_abs_pos + bar_drag
                            x = x - mouse_offset
                            x = x < bar_abs_pos and bar_abs_pos or x > bar_abs_one and bar_abs_one or x
                            x = x - bar_abs_pos
                            Class:SetScrollPercent(x/(bar_drag))
                        end)
                        up_con = MouseDrag.MouseButton1Up:connect(function()
                            scrollEventID = tick()
                            MouseDrag.Parent = nil
                            ResetButtonColor(ScrollThumbFrame)
                            drag_con:disconnect(); drag_con = nil
                            up_con:disconnect(); drag = nil
                        end)
                        MouseDrag.Parent = GetScreen(ScrollFrame)
                    end)
                else
                    ScrollThumbFrame.MouseButton1Down:connect(function(x,y)
                        scrollEventID = tick()
                        local mouse_offset = y - ScrollThumbFrame.AbsolutePosition.y
                        local drag_con
                        local up_con
                        drag_con = MouseDrag.MouseMoved:connect(function(x,y)
                            local bar_abs_pos = ScrollBarFrame.AbsolutePosition.y
                            local bar_drag = ScrollBarFrame.AbsoluteSize.y - ScrollThumbFrame.AbsoluteSize.y
                            local bar_abs_one = bar_abs_pos + bar_drag
                            y = y - mouse_offset
                            y = y < bar_abs_pos and bar_abs_pos or y > bar_abs_one and bar_abs_one or y
                            y = y - bar_abs_pos
                            Class:SetScrollPercent(y/(bar_drag))
                        end)
                        up_con = MouseDrag.MouseButton1Up:connect(function()
                            scrollEventID = tick()
                            MouseDrag.Parent = nil
                            ResetButtonColor(ScrollThumbFrame)
                            drag_con:disconnect(); drag_con = nil
                            up_con:disconnect(); drag = nil
                        end)
                        MouseDrag.Parent = GetScreen(ScrollFrame)
                    end)
                end
        
                function Class:Destroy()
                    ScrollFrame:Destroy()
                    MouseDrag:Destroy()
                    for k in pairs(Class) do
                        Class[k] = nil
                    end
                    setmetatable(Class,nil)
                end
        
                Update()
        
                return Class
            end
        end
        
        ----------------------------------------------------------------
        ----------------------------------------------------------------
        ----------------------------------------------------------------
        ----------------------------------------------------------------
        ---- Explorer panel
        
        local explorerPanel = D_E_X.ExplorerPanel
        Create(explorerPanel,{
            BackgroundColor3 = GuiColor.Field;
            BorderColor3 = GuiColor.Border;
            Active = true;
        })
        
        local SettingsRemote = explorerPanel.Parent:WaitForChild("SettingsPanel"):WaitForChild("GetSetting")
        local GetApiRemote = explorerPanel.Parent:WaitForChild("PropertiesFrame"):WaitForChild("GetApi")
        local GetAwaitRemote = explorerPanel.Parent:WaitForChild("PropertiesFrame"):WaitForChild("GetAwaiting")
        local bindSetAwaiting = explorerPanel.Parent:WaitForChild("PropertiesFrame"):WaitForChild("SetAwaiting")
        
        local SaveInstanceWindow = explorerPanel.Parent:WaitForChild("SaveInstance")
        local ConfirmationWindow = explorerPanel.Parent:WaitForChild("Confirmation")
        local CautionWindow = explorerPanel.Parent:WaitForChild("Caution")
        local TableCautionWindow = explorerPanel.Parent:WaitForChild("TableCaution")
        
        local RemoteWindow = explorerPanel.Parent:WaitForChild("CallRemote")
        
        local ScriptEditor = explorerPanel.Parent:WaitForChild("ScriptEditor")
        local ScriptEditorEvent = ScriptEditor:WaitForChild("OpenScript")
        
        local CurrentSaveInstanceWindow
        local CurrentRemoteWindow
        
        local lastSelectedNode
        
        local DexStorage
        local DexStorageMain
        local DexStorageEnabled
        
        if saveinstance then DexStorageEnabled = true end
        
        if DexStorageEnabled then
            DexStorage = Instance.new("Folder")
            DexStorage.Name = "Dex"
            DexStorageMain = Instance.new("Folder",DexStorage)
            DexStorageMain.Name = "DexStorage"
        end
        
        local NilStorage
        local NilStorageMain
        local NilStorageEnabled
        
        if get_nil_instances and IfThisFunctionWasStableEnough then NilStorageEnabled = true end
        
        if NilStorageEnabled then
            NilStorage = Instance.new("Folder")
            NilStorage.Name = "Dex Internal Storage"
            NilStorageMain = Instance.new("Folder",NilStorage)
            NilStorageMain.Name = "Nil Instances"
        end
        
        local listFrame = Create('Frame',{
            Name = "List";
            BackgroundTransparency = 1;
            ClipsDescendants = true;
            Position = UDim2.new(0,0,0,HEADER_SIZE);
            Size = UDim2.new(1,-GUI_SIZE,1,-HEADER_SIZE);
            Parent = explorerPanel;
        })
        
        local scrollBar = ScrollBar(false)
        scrollBar.PageIncrement = 1
        Create(scrollBar.GUI,{
            Position = UDim2.new(1,-GUI_SIZE,0,HEADER_SIZE);
            Size = UDim2.new(0,GUI_SIZE,1,-HEADER_SIZE);
            Parent = explorerPanel;
        })
        
        local scrollBarH = ScrollBar(true)
        scrollBarH.PageIncrement = GUI_SIZE
        Create(scrollBarH.GUI,{
            Position = UDim2.new(0,0,1,-GUI_SIZE);
            Size = UDim2.new(1,-GUI_SIZE,0,GUI_SIZE);
            Visible = false;
            Parent = explorerPanel;
        })
        
        local headerFrame = Create('Frame',{
            Name = "Header";
            BackgroundColor3 = GuiColor.Background;
            BorderColor3 = GuiColor.Border;
            Position = UDim2.new(0,0,0,0);
            Size = UDim2.new(1,0,0,HEADER_SIZE);
            Parent = explorerPanel;
            Create('TextLabel',{
                Text = "Explorer";
                BackgroundTransparency = 1;
                TextColor3 = GuiColor.Text;
                TextXAlignment = 'Left';
                Font = FONT;
                FontSize = FONT_SIZE;
                Position = UDim2.new(0,4,0,0);
                Size = UDim2.new(1,-4,0.5,0);
            });
        })
        
        local explorerFilter = 	Create('TextBox',{
            Text = "Filter Workspace";
            BackgroundTransparency = 0.8;
            TextColor3 = GuiColor.Text;
            TextXAlignment = 'Left';
            Font = FONT;
            FontSize = FONT_SIZE;
            Position = UDim2.new(0,4,0.5,0);
            Size = UDim2.new(1,-8,0.5,-2);
        });
        explorerFilter.Parent = headerFrame
        
        SetZIndexOnChanged(explorerPanel)
        
        local function CreateColor3(r, g, b) return Color3.new(r/255,g/255,b/255) end
        
        local Styles = {
            Font = Enum.Font.Arial;
            Margin = 5;
            Black = CreateColor3(0,0,0);
            White = CreateColor3(255,255,255);
        }
        
        local DropDown = {
            Font = Styles.Font;
            FontSize = Enum.FontSize.Size14;
            TextColor = CreateColor3(0,0,0);
            TextColorOver = Styles.White;
            TextXAlignment = Enum.TextXAlignment.Left;
            Height = 20;
            BackColor = Styles.White;
            BackColorOver = CreateColor3(86,125,188);
            BorderColor = CreateColor3(216,216,216);
            BorderSizePixel = 2;
            ArrowColor = CreateColor3(160,160,160);
            ArrowColorOver = Styles.Black;
        }
        
        local Row = {
            Font = Styles.Font;
            FontSize = Enum.FontSize.Size14;
            TextXAlignment = Enum.TextXAlignment.Left;
            TextColor = Styles.Black;
            TextColorOver = Styles.White;
            TextLockedColor = CreateColor3(120,120,120);
            Height = 24;
            BorderColor = CreateColor3(216,216,216);
            BackgroundColor = Styles.White;
            BackgroundColorAlternate = CreateColor3(246,246,246);
            BackgroundColorMouseover = CreateColor3(211,224,244);
            TitleMarginLeft = 15;
        }
        
        local currentRightClickMenu
        local CurrentInsertObjectWindow
        local CurrentFunctionCallerWindow
        
        local RbxApi
        
        function ClassCanCreate(IName)
            local success,err = pcall(function() Instance.new(IName) end)
            if err then
                return false
            else
                return true
            end
        end
        
        function GetClasses()
            if RbxApi == nil then return {} end
            local classTable = {}
            for i,v in pairs(RbxApi.Classes) do
                if ClassCanCreate(v.Name) then
                    table.insert(classTable,v.Name)
                end
            end
            return classTable
        end
        
        local function sortAlphabetic(t, property)
            table.sort(t, 
                function(x,y) return x[property] < y[property]
            end)
        end
        
        local function FunctionIsHidden(functionData)
            local tags = functionData["tags"]
            for _,name in pairs(tags) do
                if name == "deprecated"
                    or name == "hidden"
                    or name == "writeonly" then
                    return true
                end
            end
            return false
        end
        
        local function GetAllFunctions(className)
            local class = RbxApi.Classes[className]
            local functions = {}
            
            if not class then return functions end
            
            while class do
                if class.Name == "Instance" then break end
                for _,nextFunction in pairs(class.Functions) do
                    if not FunctionIsHidden(nextFunction) then
                        table.insert(functions, nextFunction)
                    end
                end
                class = RbxApi.Classes[class.Superclass]
            end
            
            sortAlphabetic(functions, "Name")
        
            return functions
        end
        
        function GetFunctions()
            if RbxApi == nil then return {} end
            local List = SelectionVar():Get()
            
            if #List == 0 then return end
            
            local MyObject = List[1]
            
            local functionTable = {}
            for i,v in pairs(GetAllFunctions(MyObject.ClassName)) do
                table.insert(functionTable,v)
            end
            return functionTable
        end
        
        function CreateInsertObjectMenu(choices, currentChoice, readOnly, onClick)
            local mouse = game.Players.LocalPlayer:GetMouse()
            local totalSize = explorerPanel.Parent.AbsoluteSize.y
            if #choices == 0 then return end
            
            table.sort(choices, function(a,b) return a < b end)
        
            local frame = Instance.new("Frame")	
            frame.Name = "InsertObject"
            frame.Size = UDim2.new(0, 200, 1, 0)
            frame.BackgroundTransparency = 1
            frame.Active = true
            
            local menu = nil
            local arrow = nil
            local expanded = false
            local margin = DropDown.BorderSizePixel;
            
            --[[
            local button = Instance.new("TextButton")
            button.Font = Row.Font
            button.FontSize = Row.FontSize
            button.TextXAlignment = Row.TextXAlignment
            button.BackgroundTransparency = 1
            button.TextColor3 = Row.TextColor
            if readOnly then
                button.TextColor3 = Row.TextLockedColor
            end
            button.Text = currentChoice
            button.Size = UDim2.new(1, -2 * Styles.Margin, 1, 0)
            button.Position = UDim2.new(0, Styles.Margin, 0, 0)
            button.Parent = frame
            --]]
            
            local function hideMenu()
                expanded = false
                --showArrow(DropDown.ArrowColor)
                if frame then 
                    --frame:Destroy()
                    CurrentInsertObjectWindow.Visible = false
                end
            end
            
            local function showMenu()
                expanded = true
                menu = Instance.new("ScrollingFrame")
                menu.Size = UDim2.new(0,200,1,0)
                menu.CanvasSize = UDim2.new(0, 200, 0, #choices * DropDown.Height)
                menu.Position = UDim2.new(0, margin, 0, 0)
                menu.BackgroundTransparency = 0
                menu.BackgroundColor3 = DropDown.BackColor
                menu.BorderColor3 = DropDown.BorderColor
                menu.BorderSizePixel = DropDown.BorderSizePixel
                menu.TopImage = "rbxasset://textures/blackBkg_square.png"
                menu.MidImage = "rbxasset://textures/blackBkg_square.png"
                menu.BottomImage = "rbxasset://textures/blackBkg_square.png"
                menu.Active = true
                menu.ZIndex = 5
                menu.Parent = frame
                
                --local parentFrameHeight = script.Parent.List.Size.Y.Offset
                --local rowHeight = mouse.Y
                --if (rowHeight + menu.Size.Y.Offset) > parentFrameHeight then
                --	menu.Position = UDim2.new(0, margin, 0, -1 * (#choices * DropDown.Height) - margin)
                --end
                    
                local function choice(name)
                    onClick(name)
                    hideMenu()
                end
                
                for i,name in pairs(choices) do
                    local option = CreateRightClickMenuItem(name, function()
                        choice(name)
                    end,1)
                    option.Size = UDim2.new(1, 0, 0, 20)
                    option.Position = UDim2.new(0, 0, 0, (i - 1) * DropDown.Height)
                    option.ZIndex = menu.ZIndex
                    option.Parent = menu
                end
            end
        
        
            showMenu()
        
            
            return frame
        end
        
        function CreateFunctionCallerMenu(choices, currentChoice, readOnly, onClick)
            local mouse = game.Players.LocalPlayer:GetMouse()
            local totalSize = explorerPanel.Parent.AbsoluteSize.y
            if #choices == 0 then return end
            
            table.sort(choices, function(a,b) return a.Name < b.Name end)
        
            local frame = Instance.new("Frame")	
            frame.Name = "InsertObject"
            frame.Size = UDim2.new(0, 200, 1, 0)
            frame.BackgroundTransparency = 1
            frame.Active = true
            
            local menu = nil
            local arrow = nil
            local expanded = false
            local margin = DropDown.BorderSizePixel;
            
            local function hideMenu()
                expanded = false
                --showArrow(DropDown.ArrowColor)
                if frame then 
                    --frame:Destroy()
                    CurrentInsertObjectWindow.Visible = false
                end
            end
            
            local function showMenu()
                expanded = true
                menu = Instance.new("ScrollingFrame")
                menu.Size = UDim2.new(0,300,1,0)
                menu.CanvasSize = UDim2.new(0, 300, 0, #choices * DropDown.Height)
                menu.Position = UDim2.new(0, margin, 0, 0)
                menu.BackgroundTransparency = 0
                menu.BackgroundColor3 = DropDown.BackColor
                menu.BorderColor3 = DropDown.BorderColor
                menu.BorderSizePixel = DropDown.BorderSizePixel
                menu.TopImage = "rbxasset://textures/blackBkg_square.png"
                menu.MidImage = "rbxasset://textures/blackBkg_square.png"
                menu.BottomImage = "rbxasset://textures/blackBkg_square.png"
                menu.Active = true
                menu.ZIndex = 5
                menu.Parent = frame
                
                --local parentFrameHeight = script.Parent.List.Size.Y.Offset
                --local rowHeight = mouse.Y
                --if (rowHeight + menu.Size.Y.Offset) > parentFrameHeight then
                --	menu.Position = UDim2.new(0, margin, 0, -1 * (#choices * DropDown.Height) - margin)
                --end
                
                local function GetParameters(functionData)
                    local paraString = ""
                    paraString = paraString.."("
                    for i,v in pairs(functionData.Arguments) do
                        paraString = paraString..v.Type.." "..v.Name
                        if i < #functionData.Arguments then
                            paraString = paraString..", "
                        end
                    end
                    paraString = paraString..")"
                    return paraString
                end
                    
                local function choice(name)
                    onClick(name)
                    hideMenu()
                end
                
                for i,name in pairs(choices) do
                    local option = CreateRightClickMenuItem(name.ReturnType.." "..name.Name..GetParameters(name), function()
                        choice(name)
                    end,2)
                    option.Size = UDim2.new(1, 0, 0, 20)
                    option.Position = UDim2.new(0, 0, 0, (i - 1) * DropDown.Height)
                    option.ZIndex = menu.ZIndex
                    option.Parent = menu
                end
            end
        
        
            showMenu()
        
            
            return frame
        end
        
        function CreateInsertObject()
            if not CurrentInsertObjectWindow then return end
            CurrentInsertObjectWindow.Visible = true
            if currentRightClickMenu and CurrentInsertObjectWindow.Visible then
                CurrentInsertObjectWindow.Position = UDim2.new(0,currentRightClickMenu.Position.X.Offset-currentRightClickMenu.Size.X.Offset-2,0,0)
            end
            if CurrentInsertObjectWindow.Visible then
                CurrentInsertObjectWindow.Parent = explorerPanel.Parent
            end
        end
        
        function CreateFunctionCaller()
            if CurrentFunctionCallerWindow then
                CurrentFunctionCallerWindow:Destroy()
                CurrentFunctionCallerWindow = nil
            end
            CurrentFunctionCallerWindow = CreateFunctionCallerMenu(
                GetFunctions(),
                "",
                false,
                function(option)
                    CurrentFunctionCallerWindow:Destroy()
                    CurrentFunctionCallerWindow = nil
                    local list = SelectionVar():Get()
                    for i = 1,#list do
                        pcall(function() Instance.new(option,list[i]) end)
                    end
                    print(option.Name .. " selected to be called. Function caller being added soon, please wait!")
                    --CallFunction()
                    DestroyRightClick()
                end
            )
            if currentRightClickMenu and CurrentFunctionCallerWindow then
                CurrentFunctionCallerWindow.Position = UDim2.new(0,currentRightClickMenu.Position.X.Offset-currentRightClickMenu.Size.X.Offset*1.5-2,0,0)
            end
            if CurrentFunctionCallerWindow then
                CurrentFunctionCallerWindow.Parent = explorerPanel.Parent
            end
        end
        
        function CreateRightClickMenuItem(text, onClick, insObj)
            local button = Instance.new("TextButton")
            button.Font = DropDown.Font
            button.FontSize = DropDown.FontSize
            button.TextColor3 = DropDown.TextColor
            button.TextXAlignment = DropDown.TextXAlignment
            button.BackgroundColor3 = DropDown.BackColor
            button.AutoButtonColor = false
            button.BorderSizePixel = 0
            button.Active = true
            button.Text = text
            
            if insObj == 1 then
                local newIcon = Icon(nil,ExplorerIndex[text] or 0)
                newIcon.Position = UDim2.new(0,0,0,2)
                newIcon.Size = UDim2.new(0,16,0,16)
                newIcon.IconMap.ZIndex = 5
                newIcon.Parent = button
                button.Text = "\t\t"..button.Text
            elseif insObj == 2 then
                button.FontSize = Enum.FontSize.Size11
            end
            
            button.MouseEnter:connect(function()
                button.TextColor3 = DropDown.TextColorOver
                button.BackgroundColor3 = DropDown.BackColorOver
                if not insObj and CurrentInsertObjectWindow then
                    if CurrentInsertObjectWindow.Visible == false and button.Text == "Insert Object" then
                        CreateInsertObject()
                    elseif CurrentInsertObjectWindow.Visible and button.Text ~= "Insert Object" then
                        CurrentInsertObjectWindow.Visible = false
                    end
                end
                if not insObj then
                    if CurrentFunctionCallerWindow and button.Text ~= "Call Function" then
                        CurrentFunctionCallerWindow:Destroy()
                        CurrentFunctionCallerWindow = nil
                    elseif button.Text == "Call Function" then
                        CreateFunctionCaller()
                    end
                end
            end)
            button.MouseLeave:connect(function()
                button.TextColor3 = DropDown.TextColor
                button.BackgroundColor3 = DropDown.BackColor
            end)
            button.MouseButton1Click:connect(function()
                button.TextColor3 = DropDown.TextColor
                button.BackgroundColor3 = DropDown.BackColor
                onClick(text)
            end)	
            return button
        end
        
        function CreateRightClickMenu(choices, currentChoice, readOnly, onClick)
            local mouse = game.Players.LocalPlayer:GetMouse()
        
            local frame = Instance.new("Frame")	
            frame.Name = "DropDown"
            frame.Size = UDim2.new(0, 200, 1, 0)
            frame.BackgroundTransparency = 1
            frame.Active = true
            
            local menu = nil
            local arrow = nil
            local expanded = false
            local margin = DropDown.BorderSizePixel;
            
            --[[
            local button = Instance.new("TextButton")
            button.Font = Row.Font
            button.FontSize = Row.FontSize
            button.TextXAlignment = Row.TextXAlignment
            button.BackgroundTransparency = 1
            button.TextColor3 = Row.TextColor
            if readOnly then
                button.TextColor3 = Row.TextLockedColor
            end
            button.Text = currentChoice
            button.Size = UDim2.new(1, -2 * Styles.Margin, 1, 0)
            button.Position = UDim2.new(0, Styles.Margin, 0, 0)
            button.Parent = frame
            --]]
            
            local function hideMenu()
                expanded = false
                --showArrow(DropDown.ArrowColor)
                if frame then 
                    frame:Destroy()
                    DestroyRightClick()
                end
            end
            
            local function showMenu()
                expanded = true
                menu = Instance.new("Frame")
                menu.Size = UDim2.new(0, 200, 0, #choices * DropDown.Height)
                menu.Position = UDim2.new(0, margin, 0, 5)
                menu.BackgroundTransparency = 0
                menu.BackgroundColor3 = DropDown.BackColor
                menu.BorderColor3 = DropDown.BorderColor
                menu.BorderSizePixel = DropDown.BorderSizePixel
                menu.Active = true
                menu.ZIndex = 5
                menu.Parent = frame
                
                --local parentFrameHeight = script.Parent.List.Size.Y.Offset
                --local rowHeight = mouse.Y
                --if (rowHeight + menu.Size.Y.Offset) > parentFrameHeight then
                --	menu.Position = UDim2.new(0, margin, 0, -1 * (#choices * DropDown.Height) - margin)
                --end
                    
                local function choice(name)
                    onClick(name)
                    hideMenu()
                end
                
                for i,name in pairs(choices) do
                    local option = CreateRightClickMenuItem(name, function()
                        choice(name)
                    end)
                    option.Size = UDim2.new(1, 0, 0, 20)
                    option.Position = UDim2.new(0, 0, 0, (i - 1) * DropDown.Height)
                    option.ZIndex = menu.ZIndex
                    option.Parent = menu
                end
            end
        
        
            showMenu()
        
            
            return frame
        end
        
        function checkMouseInGui(gui)
            if gui == nil then return false end
            local plrMouse = game.Players.LocalPlayer:GetMouse()
            local guiPosition = gui.AbsolutePosition
            local guiSize = gui.AbsoluteSize	
            
            if plrMouse.X >= guiPosition.x and plrMouse.X <= guiPosition.x + guiSize.x and plrMouse.Y >= guiPosition.y and plrMouse.Y <= guiPosition.y + guiSize.y then
                return true
            else
                return false
            end
        end
        
        local clipboard = {}
        local function delete(o)
            o.Parent = nil
        end
        
        local getTextWidth do
            local text = Create('TextLabel',{
                Name = "TextWidth";
                TextXAlignment = 'Left';
                TextYAlignment = 'Center';
                Font = FONT;
                FontSize = FONT_SIZE;
                Text = "";
                Position = UDim2.new(0,0,0,0);
                Size = UDim2.new(1,0,1,0);
                Visible = false;
                Parent = explorerPanel;
            })
            function getTextWidth(s)
                text.Text = s
                return text.TextBounds.x
            end
        end
        
        local nameScanned = false
        -- Holds the game tree converted to a list.
        local TreeList = {}
        -- Matches objects to their tree node representation.
        local NodeLookup = {}
        
        local nodeWidth = 0
        
        local QuickButtons = {}
        
        function filteringWorkspace()
            if explorerFilter.Text ~= "" and explorerFilter.Text ~= "Filter Workspace" then
                return true
            end
            return false
        end
        
        function lookForAName(obj,name)
            for i,v in pairs(obj:GetChildren()) do
                if string.find(string.lower(v.Name),string.lower(name)) then nameScanned = true end
                lookForAName(v,name)
            end
        end
        
        function scanName(obj)
            nameScanned = false
            if string.find(string.lower(obj.Name),string.lower(explorerFilter.Text)) then
                nameScanned = true
            else
                lookForAName(obj,explorerFilter.Text)
            end
            return nameScanned
        end
        
        function updateActions()
            for i,v in pairs(QuickButtons) do
                if v.Cond() then
                    v.Toggle(true)
                else
                    v.Toggle(false)
                end
            end
        end
        
        local updateList,rawUpdateList,updateScroll,rawUpdateSize do
            local function r(t)
                for i = 1,#t do
                    if not filteringWorkspace() or scanName(t[i].Object) then
                        TreeList[#TreeList+1] = t[i]
        
                        local w = (t[i].Depth)*(2+ENTRY_PADDING+GUI_SIZE) + 2 + ENTRY_SIZE + 4 + getTextWidth(t[i].Object.Name) + 4
                        if w > nodeWidth then
                            nodeWidth = w
                        end
                        if t[i].Expanded or filteringWorkspace() then
                            r(t[i])
                        end
                    end
                end
            end
        
            function rawUpdateSize()
                scrollBarH.TotalSpace = nodeWidth
                scrollBarH.VisibleSpace = listFrame.AbsoluteSize.x
                scrollBarH:Update()
                local visible = scrollBarH:CanScrollDown() or scrollBarH:CanScrollUp()
                scrollBarH.GUI.Visible = visible
        
                listFrame.Size = UDim2.new(1,-GUI_SIZE,1,-GUI_SIZE*(visible and 1 or 0) - HEADER_SIZE)
        
                scrollBar.VisibleSpace = math.ceil(listFrame.AbsoluteSize.y/ENTRY_BOUND)
                scrollBar.GUI.Size = UDim2.new(0,GUI_SIZE,1,-GUI_SIZE*(visible and 1 or 0) - HEADER_SIZE)
                
                scrollBar.TotalSpace = #TreeList+1
                scrollBar:Update()
            end
        
            function rawUpdateList()
                -- Clear then repopulate the entire list. It appears to be fast enough.
                TreeList = {}
                nodeWidth = 0
                r(NodeLookup[workspace.Parent])
                if DexStorageEnabled then
                    r(NodeLookup[DexStorage])
                end
                if NilStorageEnabled then
                    r(NodeLookup[NilStorage])
                end
                rawUpdateSize()
                updateActions()
            end
        
            -- Adding or removing large models will cause many updates to occur. We
            -- can reduce the number of updates by creating a delay, then dropping any
            -- updates that occur during the delay.
            local updatingList = false
            function updateList()
                if updatingList then return end
                updatingList = true
                wait(0.25)
                updatingList = false
                rawUpdateList()
            end
        
            local updatingScroll = false
            function updateScroll()
                if updatingScroll then return end
                updatingScroll = true
                wait(0.25)
                updatingScroll = false
                scrollBar:Update()
            end
        end
        
        local Selection do
            local bindGetSelection = explorerPanel:FindFirstChild("GetSelection")
            if not bindGetSelection then
                bindGetSelection = Create('BindableFunction',{Name = "GetSelection"})
                bindGetSelection.Parent = explorerPanel
            end
        
            local bindSetSelection = explorerPanel:FindFirstChild("SetSelection")
            if not bindSetSelection then
                bindSetSelection = Create('BindableFunction',{Name = "SetSelection"})
                bindSetSelection.Parent = explorerPanel
            end
        
            local bindSelectionChanged = explorerPanel:FindFirstChild("SelectionChanged")
            if not bindSelectionChanged then
                bindSelectionChanged = Create('BindableEvent',{Name = "SelectionChanged"})
                bindSelectionChanged.Parent = explorerPanel
            end
        
            local SelectionList = {}
            local SelectionSet = {}
            local Updates = true
            Selection = {
                Selected = SelectionSet;
                List = SelectionList;
            }
        
            local function addObject(object)
                -- list update
                local lupdate = false
                -- scroll update
                local supdate = false
        
                if not SelectionSet[object] then
                    local node = NodeLookup[object]
                    if node then
                        table.insert(SelectionList,object)
                        SelectionSet[object] = true
                        node.Selected = true
        
                        -- expand all ancestors so that selected node becomes visible
                        node = node.Parent
                        while node do
                            if not node.Expanded then
                                node.Expanded = true
                                lupdate = true
                            end
                            node = node.Parent
                        end
                        supdate = true
                    end
                end
                return lupdate,supdate
            end
        
            function Selection:Set(objects)
                local lupdate = false
                local supdate = false
        
                if #SelectionList > 0 then
                    for i = 1,#SelectionList do
                        local object = SelectionList[i]
                        local node = NodeLookup[object]
                        if node then
                            node.Selected = false
                            SelectionSet[object] = nil
                        end
                    end
        
                    SelectionList = {}
                    Selection.List = SelectionList
                    supdate = true
                end
        
                for i = 1,#objects do
                    local l,s = addObject(objects[i])
                    lupdate = l or lupdate
                    supdate = s or supdate
                end
        
                if lupdate then
                    rawUpdateList()
                    supdate = true
                elseif supdate then
                    scrollBar:Update()
                end
        
                if supdate then
                    bindSelectionChanged:Fire()
                    updateActions()
                end
            end
        
            function Selection:Add(object)
                local l,s = addObject(object)
                if l then
                    rawUpdateList()
                    if Updates then
                        bindSelectionChanged:Fire()
                        updateActions()
                    end
                elseif s then
                    scrollBar:Update()
                    if Updates then
                        bindSelectionChanged:Fire()
                        updateActions()
                    end
                end
            end
            
            function Selection:StopUpdates()
                Updates = false
            end
            
            function Selection:ResumeUpdates()
                Updates = true
                bindSelectionChanged:Fire()
                updateActions()
            end
        
            function Selection:Remove(object,noupdate)
                if SelectionSet[object] then
                    local node = NodeLookup[object]
                    if node then
                        node.Selected = false
                        SelectionSet[object] = nil
                        for i = 1,#SelectionList do
                            if SelectionList[i] == object then
                                table.remove(SelectionList,i)
                                break
                            end
                        end
        
                        if not noupdate then
                            scrollBar:Update()
                        end
                        bindSelectionChanged:Fire()
                        updateActions()
                    end
                end
            end
        
            function Selection:Get()
                local list = {}
                for i = 1,#SelectionList do
                    list[i] = SelectionList[i]
                end
                return list
            end
        
            bindSetSelection.OnInvoke = function(...)
                Selection:Set(...)
            end
        
            bindGetSelection.OnInvoke = function()
                return Selection:Get()
            end
        end
        
        function CreateCaution(title,msg)
            local newCaution = CautionWindow:Clone()
            newCaution.Title.Text = title
            newCaution.MainWindow.Desc.Text = msg
            newCaution.Parent = explorerPanel.Parent
            newCaution.Visible = true
            newCaution.MainWindow.Ok.MouseButton1Up:connect(function()
                newCaution:Destroy()
            end)
        end
        
        function CreateTableCaution(title,msg)
            if type(msg) ~= "table" then return CreateCaution(title,tostring(msg)) end
            local newCaution = TableCautionWindow:Clone()
            newCaution.Title.Text = title
            
            local TableList = newCaution.MainWindow.TableResults
            local TableTemplate = newCaution.MainWindow.TableTemplate
            
            for i,v in pairs(msg) do
                local newResult = TableTemplate:Clone()
                newResult.Type.Text = type(v)
                newResult.Value.Text = tostring(v)
                newResult.Position = UDim2.new(0,0,0,#TableList:GetChildren() * 20)
                newResult.Parent = TableList
                TableList.CanvasSize = UDim2.new(0,0,0,#TableList:GetChildren() * 20)
                newResult.Visible = true
            end
            newCaution.Parent = explorerPanel.Parent
            newCaution.Visible = true
            newCaution.MainWindow.Ok.MouseButton1Up:connect(function()
                newCaution:Destroy()
            end)
        end
        
        local function Split(str, delimiter)
            local start = 1
            local t = {}
            while true do
                local pos = string.find (str, delimiter, start, true)
                if not pos then
                    break
                end
                table.insert (t, string.sub (str, start, pos - 1))
                start = pos + string.len (delimiter)
            end
            table.insert (t, string.sub (str, start))
            return t
        end
        
        local function ToValue(value,type)
            if type == "Vector2" then
                local list = Split(value,",")
                if #list < 2 then return nil end
                local x = tonumber(list[1]) or 0
                local y = tonumber(list[2]) or 0
                return Vector2.new(x,y)
            elseif type == "Vector3" then
                local list = Split(value,",")
                if #list < 3 then return nil end
                local x = tonumber(list[1]) or 0
                local y = tonumber(list[2]) or 0
                local z = tonumber(list[3]) or 0
                return Vector3.new(x,y,z)
            elseif type == "Color3" then
                local list = Split(value,",")
                if #list < 3 then return nil end
                local r = tonumber(list[1]) or 0
                local g = tonumber(list[2]) or 0
                local b = tonumber(list[3]) or 0
                return Color3.new(r/255,g/255, b/255)
            elseif type == "UDim2" then
                local list = Split(string.gsub(string.gsub(value, "{", ""),"}",""),",")
                if #list < 4 then return nil end
                local xScale = tonumber(list[1]) or 0
                local xOffset = tonumber(list[2]) or 0
                local yScale = tonumber(list[3]) or 0
                local yOffset = tonumber(list[4]) or 0
                return UDim2.new(xScale, xOffset, yScale, yOffset)
            elseif type == "Number" then
                return tonumber(value)
            elseif type == "String" then
                return value
            elseif type == "NumberRange" then
                local list = Split(value,",")
                if #list == 1 then
                    if tonumber(list[1]) == nil then return nil end
                    local newVal = tonumber(list[1]) or 0
                    return NumberRange.new(newVal)
                end
                if #list < 2 then return nil end
                local x = tonumber(list[1]) or 0
                local y = tonumber(list[2]) or 0
                return NumberRange.new(x,y)
            elseif type == "Script" then
                local success,err = ypcall(function()
                _G.D_E_X_DONOTUSETHISPLEASE = nil
                loadstring(
                    "_G.D_E_X_DONOTUSETHISPLEASE = "..value
                )()
                return _G.D_E_X_DONOTUSETHISPLEASE
                end)
                if err then
                    return nil
                end
            else
                return nil
            end
        end
        
        local function ToPropValue(value,type)
            if type == "Vector2" then
                local list = Split(value,",")
                if #list < 2 then return nil end
                local x = tonumber(list[1]) or 0
                local y = tonumber(list[2]) or 0
                return Vector2.new(x,y)
            elseif type == "Vector3" then
                local list = Split(value,",")
                if #list < 3 then return nil end
                local x = tonumber(list[1]) or 0
                local y = tonumber(list[2]) or 0
                local z = tonumber(list[3]) or 0
                return Vector3.new(x,y,z)
            elseif type == "Color3" then
                local list = Split(value,",")
                if #list < 3 then return nil end
                local r = tonumber(list[1]) or 0
                local g = tonumber(list[2]) or 0
                local b = tonumber(list[3]) or 0
                return Color3.new(r/255,g/255, b/255)
            elseif type == "UDim2" then
                local list = Split(string.gsub(string.gsub(value, "{", ""),"}",""),",")
                if #list < 4 then return nil end
                local xScale = tonumber(list[1]) or 0
                local xOffset = tonumber(list[2]) or 0
                local yScale = tonumber(list[3]) or 0
                local yOffset = tonumber(list[4]) or 0
                return UDim2.new(xScale, xOffset, yScale, yOffset)
            elseif type == "Content" then
                return value
            elseif type == "float" or type == "int" or type == "double" then
                return tonumber(value)
            elseif type == "string" then
                return value
            elseif type == "NumberRange" then
                local list = Split(value,",")
                if #list == 1 then
                    if tonumber(list[1]) == nil then return nil end
                    local newVal = tonumber(list[1]) or 0
                    return NumberRange.new(newVal)
                end
                if #list < 2 then return nil end
                local x = tonumber(list[1]) or 0
                local y = tonumber(list[2]) or 0
                return NumberRange.new(x,y)
            elseif string.sub(value,1,4) == "Enum" then
                local getEnum = value
                while true do
                    local x,y = string.find(getEnum,".")
                    if y then
                        getEnum = string.sub(getEnum,y+1)
                    else
                        break
                    end
                end
                print(getEnum)
                return getEnum
            else
                return nil
            end
        end
        
        function PromptRemoteCaller(inst)
            if CurrentRemoteWindow then
                CurrentRemoteWindow:Destroy()
                CurrentRemoteWindow = nil
            end
            CurrentRemoteWindow = RemoteWindow:Clone()
            CurrentRemoteWindow.Parent = explorerPanel.Parent
            CurrentRemoteWindow.Visible = true
            
            local displayValues = false
            
            local ArgumentList = CurrentRemoteWindow.MainWindow.Arguments
            local ArgumentTemplate = CurrentRemoteWindow.MainWindow.ArgumentTemplate
            
            if inst:IsA("RemoteEvent") then
                CurrentRemoteWindow.Title.Text = "Fire Event"
                CurrentRemoteWindow.MainWindow.Ok.Text = "Fire"
                CurrentRemoteWindow.MainWindow.DisplayReturned.Visible = false
                CurrentRemoteWindow.MainWindow.Desc2.Visible = false
            end
            
            local newArgument = ArgumentTemplate:Clone()
            newArgument.Parent = ArgumentList
            newArgument.Visible = true
            newArgument.Type.MouseButton1Down:connect(function()
                createDDown(newArgument.Type,function(choice)
                    newArgument.Type.Text = choice
                end,"Script","Number","String","Color3","Vector3","Vector2","UDim2","NumberRange")
            end)
            
            CurrentRemoteWindow.MainWindow.Ok.MouseButton1Up:connect(function()
                if CurrentRemoteWindow and inst.Parent ~= nil then
                    local MyArguments = {}
                    for i,v in pairs(ArgumentList:GetChildren()) do
                        table.insert(MyArguments,ToValue(v.Value.Text,v.Type.Text))
                    end
                    if inst:IsA("RemoteFunction") then
                        if displayValues then
                            spawn(function()
                                local myResults = inst:InvokeServer(unpack(MyArguments))
                                if myResults then
                                    CreateTableCaution("Remote Caller",myResults)
                                else
                                    CreateCaution("Remote Caller","This remote did not return anything.")
                                end
                            end)
                        else
                            spawn(function()
                                inst:InvokeServer(unpack(MyArguments))
                            end)
                        end
                    else
                        inst:FireServer(unpack(MyArguments))
                    end
                    CurrentRemoteWindow:Destroy()
                    CurrentRemoteWindow = nil
                end
            end)
            
            CurrentRemoteWindow.MainWindow.Add.MouseButton1Up:connect(function()
                if CurrentRemoteWindow then
                    local newArgument = ArgumentTemplate:Clone()
                    newArgument.Position = UDim2.new(0,0,0,#ArgumentList:GetChildren() * 20)
                    newArgument.Parent = ArgumentList
                    ArgumentList.CanvasSize = UDim2.new(0,0,0,#ArgumentList:GetChildren() * 20)
                    newArgument.Visible = true
                    newArgument.Type.MouseButton1Down:connect(function()
                        createDDown(newArgument.Type,function(choice)
                            newArgument.Type.Text = choice
                        end,"Script","Number","String","Color3","Vector3","Vector2","UDim2","NumberRange")
                    end)
                end
            end)
            
            CurrentRemoteWindow.MainWindow.Subtract.MouseButton1Up:connect(function()
                if CurrentRemoteWindow then
                    if #ArgumentList:GetChildren() > 1 then
                        ArgumentList:GetChildren()[#ArgumentList:GetChildren()]:Destroy()
                        ArgumentList.CanvasSize = UDim2.new(0,0,0,#ArgumentList:GetChildren() * 20)
                    end
                end
            end)
            
            CurrentRemoteWindow.MainWindow.Cancel.MouseButton1Up:connect(function()
                if CurrentRemoteWindow then
                    CurrentRemoteWindow:Destroy()
                    CurrentRemoteWindow = nil
                end
            end)
            
            CurrentRemoteWindow.MainWindow.DisplayReturned.MouseButton1Up:connect(function()
                if displayValues then
                    displayValues = false
                    CurrentRemoteWindow.MainWindow.DisplayReturned.enabled.Visible = false
                else
                    displayValues = true
                    CurrentRemoteWindow.MainWindow.DisplayReturned.enabled.Visible = true
                end
            end)
        end
        
        function PromptSaveInstance(inst)
            if not SaveInstance and not _G.SaveInstance then CreateCaution("SaveInstance Missing","You do not have the SaveInstance function installed. Please go to RaspberryPi's thread to retrieve it.") return end
            if CurrentSaveInstanceWindow then
                CurrentSaveInstanceWindow:Destroy()
                CurrentSaveInstanceWindow = nil
                if explorerPanel.Parent:FindFirstChild("SaveInstanceOverwriteCaution") then
                    explorerPanel.Parent.SaveInstanceOverwriteCaution:Destroy()
                end
            end
            CurrentSaveInstanceWindow = SaveInstanceWindow:Clone()
            CurrentSaveInstanceWindow.Parent = explorerPanel.Parent
            CurrentSaveInstanceWindow.Visible = true
            
            local filename = CurrentSaveInstanceWindow.MainWindow.FileName
            local saveObjects = true
            local overwriteCaution = false
            
            CurrentSaveInstanceWindow.MainWindow.Save.MouseButton1Up:connect(function()
                if readfile and getelysianpath then
                    if readfile(getelysianpath()..filename.Text..".rbxmx") then
                        if not overwriteCaution then
                            overwriteCaution = true
                            local newCaution = ConfirmationWindow:Clone()
                            newCaution.Name = "SaveInstanceOverwriteCaution"
                            newCaution.MainWindow.Desc.Text = "The file, "..filename.Text..".rbxmx, already exists. Overwrite?"
                            newCaution.Parent = explorerPanel.Parent
                            newCaution.Visible = true
                            newCaution.MainWindow.Yes.MouseButton1Up:connect(function()
                                ypcall(function()
                                    SaveInstance(inst,filename.Text..".rbxmx",not saveObjects)
                                end)
                                overwriteCaution = false
                                newCaution:Destroy()
                                if CurrentSaveInstanceWindow then
                                    CurrentSaveInstanceWindow:Destroy()
                                    CurrentSaveInstanceWindow = nil
                                end
                            end)
                            newCaution.MainWindow.No.MouseButton1Up:connect(function()
                                overwriteCaution = false
                                newCaution:Destroy()
                            end)
                        end
                    else
                        ypcall(function()
                            SaveInstance(inst,filename.Text..".rbxmx",not saveObjects)
                        end)
                        if CurrentSaveInstanceWindow then
                            CurrentSaveInstanceWindow:Destroy()
                            CurrentSaveInstanceWindow = nil
                            if explorerPanel.Parent:FindFirstChild("SaveInstanceOverwriteCaution") then
                                explorerPanel.Parent.SaveInstanceOverwriteCaution:Destroy()
                            end
                        end
                    end
                else
                    ypcall(function()
                        if SaveInstance then
                            SaveInstance(inst,filename.Text..".rbxmx",not saveObjects)
                        else
                            _G.SaveInstance(inst,filename.Text,not saveObjects)
                        end
                    end)
                    if CurrentSaveInstanceWindow then
                        CurrentSaveInstanceWindow:Destroy()
                        CurrentSaveInstanceWindow = nil
                        if explorerPanel.Parent:FindFirstChild("SaveInstanceOverwriteCaution") then
                            explorerPanel.Parent.SaveInstanceOverwriteCaution:Destroy()
                        end
                    end
                end
            end)
            CurrentSaveInstanceWindow.MainWindow.Cancel.MouseButton1Up:connect(function()
                if CurrentSaveInstanceWindow then
                    CurrentSaveInstanceWindow:Destroy()
                    CurrentSaveInstanceWindow = nil
                    if explorerPanel.Parent:FindFirstChild("SaveInstanceOverwriteCaution") then
                        explorerPanel.Parent.SaveInstanceOverwriteCaution:Destroy()
                    end
                end
            end)
            CurrentSaveInstanceWindow.MainWindow.SaveObjects.MouseButton1Up:connect(function()
                if saveObjects then
                    saveObjects = false
                    CurrentSaveInstanceWindow.MainWindow.SaveObjects.enabled.Visible = false
                else
                    saveObjects = true
                    CurrentSaveInstanceWindow.MainWindow.SaveObjects.enabled.Visible = true
                end
            end)
        end
        
        function DestroyRightClick()
            if currentRightClickMenu then
                currentRightClickMenu:Destroy()
                currentRightClickMenu = nil
            end
            if CurrentInsertObjectWindow and CurrentInsertObjectWindow.Visible then
                CurrentInsertObjectWindow.Visible = false
            end
        end
        
        function rightClickMenu(sObj)
            local mouse = game.Players.LocalPlayer:GetMouse()
            
            currentRightClickMenu = CreateRightClickMenu(
                {"Cut","Copy","Paste Into","Duplicate","Delete","Group","Ungroup","Select Children","Teleport To","Insert Part","Insert Object","View Script","Save Instance","Call Function","Call Remote"},
                "",
                false,
                function(option)
                    if option == "Cut" then
                        if not Option.Modifiable then return end
                        clipboard = {}
                        local list = Selection.List
                        local cut = {}
                        for i = 1,#list do
                            local obj = list[i]:Clone()
                            if obj then
                                table.insert(clipboard,obj)
                                table.insert(cut,list[i])
                            end
                        end
                        for i = 1,#cut do
                            pcall(delete,cut[i])
                        end
                        updateActions()
                    elseif option == "Copy" then
                        if not Option.Modifiable then return end
                        clipboard = {}
                        local list = Selection.List
                        for i = 1,#list do
                            table.insert(clipboard,list[i]:Clone())
                        end
                        updateActions()
                    elseif option == "Paste Into" then
                        if not Option.Modifiable then return end
                        local parent = Selection.List[1] or workspace
                        for i = 1,#clipboard do
                            clipboard[i]:Clone().Parent = parent
                        end
                    elseif option == "Duplicate" then
                        if not Option.Modifiable then return end
                        local list = Selection:Get()
                        for i = 1,#list do
                            list[i]:Clone().Parent = Selection.List[1].Parent or workspace
                        end
                    elseif option == "Delete" then
                        if not Option.Modifiable then return end
                        local list = Selection:Get()
                        for i = 1,#list do
                            pcall(delete,list[i])
                        end
                        Selection:Set({})
                    elseif option == "Group" then
                        if not Option.Modifiable then return end
                        local newModel = Instance.new("Model")
                        local list = Selection:Get()
                        newModel.Parent = Selection.List[1].Parent or workspace
                        for i = 1,#list do
                            list[i].Parent = newModel
                        end
                        Selection:Set({})
                    elseif option == "Ungroup" then
                        if not Option.Modifiable then return end
                        local ungrouped = {}
                        local list = Selection:Get()
                        for i = 1,#list do
                            if list[i]:IsA("Model") then
                                for i2,v2 in pairs(list[i]:GetChildren()) do
                                    v2.Parent = list[i].Parent or workspace
                                    table.insert(ungrouped,v2)
                                end		
                                pcall(delete,list[i])			
                            end
                        end
                        Selection:Set({})
                        if SettingsRemote:Invoke("SelectUngrouped") then
                            for i,v in pairs(ungrouped) do
                                Selection:Add(v)
                            end
                        end
                    elseif option == "Select Children" then
                        if not Option.Modifiable then return end
                        local list = Selection:Get()
                        Selection:Set({})
                        Selection:StopUpdates()
                        for i = 1,#list do
                            for i2,v2 in pairs(list[i]:GetChildren()) do
                                Selection:Add(v2)
                            end
                        end
                        Selection:ResumeUpdates()
                    elseif option == "Teleport To" then
                        if not Option.Modifiable then return end
                        local list = Selection:Get()
                        for i = 1,#list do
                            if list[i]:IsA("BasePart") then
                                pcall(function()
                                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = list[i].CFrame
                                end)
                                break
                            end
                        end
                    elseif option == "Insert Part" then
                        if not Option.Modifiable then return end
                        local insertedParts = {}
                        local list = Selection:Get()
                        for i = 1,#list do
                            pcall(function()
                                local newPart = Instance.new("Part")
                                newPart.Parent = list[i]
                                newPart.CFrame = CFrame.new(game.Players.LocalPlayer.Character.Head.Position) + Vector3.new(0,3,0)
                                table.insert(insertedParts,newPart)
                            end)
                        end
                    elseif option == "Save Instance" then
                        if not Option.Modifiable then return end
                        local list = Selection:Get()
                        if #list == 1 then
                            list[1].Archivable = true
                            ypcall(function()PromptSaveInstance(list[1]:Clone())end)
                        elseif #list > 1 then
                            local newModel = Instance.new("Model")
                            newModel.Name = "SavedInstances"
                            for i = 1,#list do
                                ypcall(function()
                                    list[i].Archivable = true
                                    list[i]:Clone().Parent = newModel
                                end)
                            end
                            PromptSaveInstance(newModel)
                        end
                    elseif option == "Call Remote" then
                        if not Option.Modifiable then return end
                        local list = Selection:Get()
                        for i = 1,#list do
                            if list[i]:IsA("RemoteFunction") or list[i]:IsA("RemoteEvent") then
                                PromptRemoteCaller(list[i])
                                break
                            end
                        end
                    elseif option == "View Script" then
                        if not Option.Modifiable then return end
                        local list = Selection:Get()
                        for i = 1,#list do
                            if list[i]:IsA("LocalScript") or list[i]:IsA("ModuleScript") then
                                ScriptEditorEvent:Fire(list[i])
                            end
                        end
                    end
            end)
            currentRightClickMenu.Parent = explorerPanel.Parent
            currentRightClickMenu.Position = UDim2.new(0,mouse.X,0,mouse.Y)
            if currentRightClickMenu.AbsolutePosition.X + currentRightClickMenu.AbsoluteSize.X > explorerPanel.AbsolutePosition.X + explorerPanel.AbsoluteSize.X then
                currentRightClickMenu.Position = UDim2.new(0, explorerPanel.AbsolutePosition.X + explorerPanel.AbsoluteSize.X - currentRightClickMenu.AbsoluteSize.X, 0, mouse.Y)
            end
        end
        
        local function cancelReparentDrag()end
        local function cancelSelectDrag()end
        do
            local listEntries = {}
            local nameConnLookup = {}
        
            local mouseDrag = Create('ImageButton',{
                Name = "MouseDrag";
                Position = UDim2.new(-0.25,0,-0.25,0);
                Size = UDim2.new(1.5,0,1.5,0);
                Transparency = 1;
                AutoButtonColor = false;
                Active = true;
                ZIndex = 10;
            })
            local function dragSelect(last,add,button)
                local connDrag
                local conUp
        
                conDrag = mouseDrag.MouseMoved:connect(function(x,y)
                    local pos = Vector2.new(x,y) - listFrame.AbsolutePosition
                    local size = listFrame.AbsoluteSize
                    if pos.x < 0 or pos.x > size.x or pos.y < 0 or pos.y > size.y then return end
        
                    local i = math.ceil(pos.y/ENTRY_BOUND) + scrollBar.ScrollIndex
                    -- Mouse may have made a large step, so interpolate between the
                    -- last index and the current.
                    for n = i<last and i or last, i>last and i or last do
                        local node = TreeList[n]
                        if node then
                            if add then
                                Selection:Add(node.Object)
                            else
                                Selection:Remove(node.Object)
                            end
                        end
                    end
                    last = i
                end)
        
                function cancelSelectDrag()
                    mouseDrag.Parent = nil
                    conDrag:disconnect()
                    conUp:disconnect()
                    function cancelSelectDrag()end
                end
        
                conUp = mouseDrag[button]:connect(cancelSelectDrag)
        
                mouseDrag.Parent = GetScreen(listFrame)
            end
        
            local function dragReparent(object,dragGhost,clickPos,ghostOffset)
                local connDrag
                local conUp
                local conUp2
        
                local parentIndex = nil
                local dragged = false
        
                local parentHighlight = Create('Frame',{
                    Transparency = 1;
                    Visible = false;
                    Create('Frame',{
                        BorderSizePixel = 0;
                        BackgroundColor3 = Color3.new(0,0,0);
                        BackgroundTransparency = 0.1;
                        Position = UDim2.new(0,0,0,0);
                        Size = UDim2.new(1,0,0,1);
                    });
                    Create('Frame',{
                        BorderSizePixel = 0;
                        BackgroundColor3 = Color3.new(0,0,0);
                        BackgroundTransparency = 0.1;
                        Position = UDim2.new(1,0,0,0);
                        Size = UDim2.new(0,1,1,0);
                    });
                    Create('Frame',{
                        BorderSizePixel = 0;
                        BackgroundColor3 = Color3.new(0,0,0);
                        BackgroundTransparency = 0.1;
                        Position = UDim2.new(0,0,1,0);
                        Size = UDim2.new(1,0,0,1);
                    });
                    Create('Frame',{
                        BorderSizePixel = 0;
                        BackgroundColor3 = Color3.new(0,0,0);
                        BackgroundTransparency = 0.1;
                        Position = UDim2.new(0,0,0,0);
                        Size = UDim2.new(0,1,1,0);
                    });
                })
                SetZIndex(parentHighlight,9)
        
                conDrag = mouseDrag.MouseMoved:connect(function(x,y)
                    local dragPos = Vector2.new(x,y)
                    if dragged then
                        local pos = dragPos - listFrame.AbsolutePosition
                        local size = listFrame.AbsoluteSize
        
                        parentIndex = nil
                        parentHighlight.Visible = false
                        if pos.x >= 0 and pos.x <= size.x and pos.y >= 0 and pos.y <= size.y + ENTRY_SIZE*2 then
                            local i = math.ceil(pos.y/ENTRY_BOUND-2)
                            local node = TreeList[i + scrollBar.ScrollIndex]
                            if node and node.Object ~= object and not object:IsAncestorOf(node.Object) then
                                parentIndex = i
                                local entry = listEntries[i]
                                if entry then
                                    parentHighlight.Visible = true
                                    parentHighlight.Position = UDim2.new(0,1,0,entry.AbsolutePosition.y-listFrame.AbsolutePosition.y)
                                    parentHighlight.Size = UDim2.new(0,size.x-4,0,entry.AbsoluteSize.y)
                                end
                            end
                        end
        
                        dragGhost.Position = UDim2.new(0,dragPos.x+ghostOffset.x,0,dragPos.y+ghostOffset.y)
                    elseif (clickPos-dragPos).magnitude > 8 then
                        dragged = true
                        SetZIndex(dragGhost,9)
                        dragGhost.IndentFrame.Transparency = 0.25
                        dragGhost.IndentFrame.EntryText.TextColor3 = GuiColor.TextSelected
                        dragGhost.Position = UDim2.new(0,dragPos.x+ghostOffset.x,0,dragPos.y+ghostOffset.y)
                        dragGhost.Parent = GetScreen(listFrame)
                        parentHighlight.Parent = listFrame
                    end
                end)
        
                function cancelReparentDrag()
                    mouseDrag.Parent = nil
                    conDrag:disconnect()
                    conUp:disconnect()
                    conUp2:disconnect()
                    dragGhost:Destroy()
                    parentHighlight:Destroy()
                    function cancelReparentDrag()end
                end
        
                local wasSelected = Selection.Selected[object]
                if not wasSelected and Option.Selectable then
                    Selection:Set({object})
                end
        
                conUp = mouseDrag.MouseButton1Up:connect(function()
                    cancelReparentDrag()
                    if dragged then
                        if parentIndex then
                            local parentNode = TreeList[parentIndex + scrollBar.ScrollIndex]
                            if parentNode then
                                parentNode.Expanded = true
        
                                local parentObj = parentNode.Object
                                local function parent(a,b)
                                    a.Parent = b
                                end
                                if Option.Selectable then
                                    local list = Selection.List
                                    for i = 1,#list do
                                        pcall(parent,list[i],parentObj)
                                    end
                                else
                                    pcall(parent,object,parentObj)
                                end
                            end
                        end
                    else
                        -- do selection click
                        if wasSelected and Option.Selectable then
                            Selection:Set({})
                        end
                    end
                end)
                conUp2 = mouseDrag.MouseButton2Down:connect(function()
                    cancelReparentDrag()
                end)
        
                mouseDrag.Parent = GetScreen(listFrame)
            end
        
            local entryTemplate = Create('ImageButton',{
                Name = "Entry";
                Transparency = 1;
                AutoButtonColor = false;
                Position = UDim2.new(0,0,0,0);
                Size = UDim2.new(1,0,0,ENTRY_SIZE);
                Create('Frame',{
                    Name = "IndentFrame";
                    BackgroundTransparency = 1;
                    BackgroundColor3 = GuiColor.Selected;
                    BorderColor3 = GuiColor.BorderSelected;
                    Position = UDim2.new(0,0,0,0);
                    Size = UDim2.new(1,0,1,0);
                    Create(Icon('ImageButton',0),{
                        Name = "Expand";
                        AutoButtonColor = false;
                        Position = UDim2.new(0,-GUI_SIZE,0.5,-GUI_SIZE/2);
                        Size = UDim2.new(0,GUI_SIZE,0,GUI_SIZE);
                    });
                    Create(Icon(nil,0),{
                        Name = "ExplorerIcon";
                        Position = UDim2.new(0,2+ENTRY_PADDING,0.5,-GUI_SIZE/2);
                        Size = UDim2.new(0,GUI_SIZE,0,GUI_SIZE);
                    });
                    Create('TextLabel',{
                        Name = "EntryText";
                        BackgroundTransparency = 1;
                        TextColor3 = GuiColor.Text;
                        TextXAlignment = 'Left';
                        TextYAlignment = 'Center';
                        Font = FONT;
                        FontSize = FONT_SIZE;
                        Text = "";
                        Position = UDim2.new(0,2+ENTRY_SIZE+4,0,0);
                        Size = UDim2.new(1,-2,1,0);
                    });
                });
            })
        
            function scrollBar.UpdateCallback(self)
                for i = 1,self.VisibleSpace do
                    local node = TreeList[i + self.ScrollIndex]
                    if node then
                        local entry = listEntries[i]
                        if not entry then
                            entry = Create(entryTemplate:Clone(),{
                                Position = UDim2.new(0,2,0,ENTRY_BOUND*(i-1)+2);
                                Size = UDim2.new(0,nodeWidth,0,ENTRY_SIZE);
                                ZIndex = listFrame.ZIndex;
                            })
                            listEntries[i] = entry
        
                            local expand = entry.IndentFrame.Expand
                            expand.MouseEnter:connect(function()
                                local node = TreeList[i + self.ScrollIndex]
                                if #node > 0 then
                                    if node.Expanded then
                                        Icon(expand,NODE_EXPANDED_OVER)
                                    else
                                        Icon(expand,NODE_COLLAPSED_OVER)
                                    end
                                end
                            end)
                            expand.MouseLeave:connect(function()
                                local node = TreeList[i + self.ScrollIndex]
                                if #node > 0 then
                                    if node.Expanded then
                                        Icon(expand,NODE_EXPANDED)
                                    else
                                        Icon(expand,NODE_COLLAPSED)
                                    end
                                end
                            end)
                            expand.MouseButton1Down:connect(function()
                                local node = TreeList[i + self.ScrollIndex]
                                if #node > 0 then
                                    node.Expanded = not node.Expanded
                                    if node.Object == explorerPanel.Parent and node.Expanded then
                                        CreateCaution("Warning","Please be careful when editing instances inside here, this is like the System32 of Dex and modifying objects here can break Dex.")
                                    end
                                    -- use raw update so the list updates instantly
                                    rawUpdateList()
                                end
                            end)
        
                            entry.MouseButton1Down:connect(function(x,y)
                                local node = TreeList[i + self.ScrollIndex]
                                DestroyRightClick()
                                if GetAwaitRemote:Invoke() then
                                    bindSetAwaiting:Fire(node.Object)
                                    return
                                end
                                
                                if not HoldingShift then
                                    lastSelectedNode = i + self.ScrollIndex
                                end
                                
                                if HoldingShift and not filteringWorkspace() then
                                    if lastSelectedNode then
                                        if i + self.ScrollIndex - lastSelectedNode > 0 then
                                            Selection:StopUpdates()
                                            for i2 = 1, i + self.ScrollIndex - lastSelectedNode do
                                                local newNode = TreeList[lastSelectedNode + i2]
                                                if newNode then
                                                    Selection:Add(newNode.Object)
                                                end
                                            end
                                            Selection:ResumeUpdates()
                                        else
                                            Selection:StopUpdates()
                                            for i2 = i + self.ScrollIndex - lastSelectedNode, 1 do
                                                local newNode = TreeList[lastSelectedNode + i2]
                                                if newNode then
                                                    Selection:Add(newNode.Object)
                                                end
                                            end
                                            Selection:ResumeUpdates()
                                        end
                                    end
                                    return
                                end
                                
                                if HoldingCtrl then
                                    if Selection.Selected[node.Object] then
                                        Selection:Remove(node.Object)
                                    else
                                        Selection:Add(node.Object)
                                    end
                                    return
                                end
                                if Option.Modifiable then
                                    local pos = Vector2.new(x,y)
                                    dragReparent(node.Object,entry:Clone(),pos,entry.AbsolutePosition-pos)
                                elseif Option.Selectable then
                                    if Selection.Selected[node.Object] then
                                        Selection:Set({})
                                    else
                                        Selection:Set({node.Object})
                                    end
                                    dragSelect(i+self.ScrollIndex,true,'MouseButton1Up')
                                end
                            end)
        
                            entry.MouseButton2Down:connect(function()
                                if not Option.Selectable then return end
                                
                                DestroyRightClick()
                                
                                curSelect = entry
                                
                                local node = TreeList[i + self.ScrollIndex]
                                
                                if GetAwaitRemote:Invoke() then
                                    bindSetAwaiting:Fire(node.Object)
                                    return
                                end
                                
                                if not Selection.Selected[node.Object] then
                                    Selection:Set({node.Object})
                                end
                            end)
                            
                            
                            entry.MouseButton2Up:connect(function()
                                if not Option.Selectable then return end
                                
                                local node = TreeList[i + self.ScrollIndex]
                                
                                if checkMouseInGui(curSelect) then
                                    rightClickMenu(node.Object)
                                end
                            end)
        
                            entry.Parent = listFrame
                        end
        
                        entry.Visible = true
        
                        local object = node.Object
        
                        -- update expand icon
                        if #node == 0 then
                            entry.IndentFrame.Expand.Visible = false
                        elseif node.Expanded then
                            Icon(entry.IndentFrame.Expand,NODE_EXPANDED)
                            entry.IndentFrame.Expand.Visible = true
                        else
                            Icon(entry.IndentFrame.Expand,NODE_COLLAPSED)
                            entry.IndentFrame.Expand.Visible = true
                        end
        
                        -- update explorer icon
                        Icon(entry.IndentFrame.ExplorerIcon,ExplorerIndex[object.ClassName] or 0)
        
                        -- update indentation
                        local w = (node.Depth)*(2+ENTRY_PADDING+GUI_SIZE)
                        entry.IndentFrame.Position = UDim2.new(0,w,0,0)
                        entry.IndentFrame.Size = UDim2.new(1,-w,1,0)
        
                        -- update name change detection
                        if nameConnLookup[entry] then
                            nameConnLookup[entry]:disconnect()
                        end
                        local text = entry.IndentFrame.EntryText
                        text.Text = object.Name
                        nameConnLookup[entry] = node.Object.Changed:connect(function(p)
                            if p == 'Name' then
                                text.Text = object.Name
                            end
                        end)
        
                        -- update selection
                        entry.IndentFrame.Transparency = node.Selected and 0 or 1
                        text.TextColor3 = GuiColor[node.Selected and 'TextSelected' or 'Text']
        
                        entry.Size = UDim2.new(0,nodeWidth,0,ENTRY_SIZE)
                    elseif listEntries[i] then
                        listEntries[i].Visible = false
                    end
                end
                for i = self.VisibleSpace+1,self.TotalSpace do
                    local entry = listEntries[i]
                    if entry then
                        listEntries[i] = nil
                        entry:Destroy()
                    end
                end
            end
        
            function scrollBarH.UpdateCallback(self)
                for i = 1,scrollBar.VisibleSpace do
                    local node = TreeList[i + scrollBar.ScrollIndex]
                    if node then
                        local entry = listEntries[i]
                        if entry then
                            entry.Position = UDim2.new(0,2 - scrollBarH.ScrollIndex,0,ENTRY_BOUND*(i-1)+2)
                        end
                    end
                end
            end
        
            Connect(listFrame.Changed,function(p)
                if p == 'AbsoluteSize' then
                    rawUpdateSize()
                end
            end)
        
            local wheelAmount = 6
            explorerPanel.MouseWheelForward:connect(function()
                if scrollBar.VisibleSpace - 1 > wheelAmount then
                    scrollBar:ScrollTo(scrollBar.ScrollIndex - wheelAmount)
                else
                    scrollBar:ScrollTo(scrollBar.ScrollIndex - scrollBar.VisibleSpace)
                end
            end)
            explorerPanel.MouseWheelBackward:connect(function()
                if scrollBar.VisibleSpace - 1 > wheelAmount then
                    scrollBar:ScrollTo(scrollBar.ScrollIndex + wheelAmount)
                else
                    scrollBar:ScrollTo(scrollBar.ScrollIndex + scrollBar.VisibleSpace)
                end
            end)
        end
        
        ----------------------------------------------------------------
        ----------------------------------------------------------------
        ----------------------------------------------------------------
        ----------------------------------------------------------------
        ---- Object detection
        
        -- Inserts `v` into `t` at `i`. Also sets `Index` field in `v`.
        local function insert(t,i,v)
            for n = #t,i,-1 do
                local v = t[n]
                v.Index = n+1
                t[n+1] = v
            end
            v.Index = i
            t[i] = v
        end
        
        -- Removes `i` from `t`. Also sets `Index` field in removed value.
        local function remove(t,i)
            local v = t[i]
            for n = i+1,#t do
                local v = t[n]
                v.Index = n-1
                t[n-1] = v
            end
            t[#t] = nil
            v.Index = 0
            return v
        end
        
        -- Returns how deep `o` is in the tree.
        local function depth(o)
            local d = -1
            while o do
                o = o.Parent
                d = d + 1
            end
            return d
        end
        
        
        local connLookup = {}
        
        -- Returns whether a node would be present in the tree list
        local function nodeIsVisible(node)
            local visible = true
            node = node.Parent
            while node and visible do
                visible = visible and node.Expanded
                node = node.Parent
            end
            return visible
        end
        
        -- Removes an object's tree node. Called when the object stops existing in the
        -- game tree.
        local function removeObject(object)
            local objectNode = NodeLookup[object]
            if not objectNode then
                return
            end
        
            local visible = nodeIsVisible(objectNode)
        
            Selection:Remove(object,true)
        
            local parent = objectNode.Parent
            remove(parent,objectNode.Index)
            NodeLookup[object] = nil
            connLookup[object]:disconnect()
            connLookup[object] = nil
        
            if visible then
                updateList()
            elseif nodeIsVisible(parent) then
                updateScroll()
            end
        end
        
        -- Moves a tree node to a new parent. Called when an existing object's parent
        -- changes.
        local function moveObject(object,parent)
            local objectNode = NodeLookup[object]
            if not objectNode then
                return
            end
        
            local parentNode = NodeLookup[parent]
            if not parentNode then
                return
            end
        
            local visible = nodeIsVisible(objectNode)
        
            remove(objectNode.Parent,objectNode.Index)
            objectNode.Parent = parentNode
        
            objectNode.Depth = depth(object)
            local function r(node,d)
                for i = 1,#node do
                    node[i].Depth = d
                    r(node[i],d+1)
                end
            end
            r(objectNode,objectNode.Depth+1)
        
            insert(parentNode,#parentNode+1,objectNode)
        
            if visible or nodeIsVisible(objectNode) then
                updateList()
            elseif nodeIsVisible(objectNode.Parent) then
                updateScroll()
            end
        end
        
        -- ScriptContext['/Libraries/LibraryRegistration/LibraryRegistration']
        -- This RobloxLocked object lets me index its properties for some reason
        
        local function check(object)
            return object.AncestryChanged
        end
        
        -- Creates a new tree node from an object. Called when an object starts
        -- existing in the game tree.
        local function addObject(object,noupdate)
            if script then
                -- protect against naughty RobloxLocked objects
                local s = pcall(check,object)
                if not s then
                    return
                end
            end
        
            local parentNode = NodeLookup[object.Parent]
            if not parentNode then
                return
            end
        
            local objectNode = {
                Object = object;
                Parent = parentNode;
                Index = 0;
                Expanded = false;
                Selected = false;
                Depth = depth(object);
            }
        
            connLookup[object] = Connect(object.AncestryChanged,function(c,p)
                if c == object then
                    if p == nil then
                        removeObject(c)
                    else
                        moveObject(c,p)
                    end
                end
            end)
        
            NodeLookup[object] = objectNode
            insert(parentNode,#parentNode+1,objectNode)
        
            if not noupdate then
                if nodeIsVisible(objectNode) then
                    updateList()
                elseif nodeIsVisible(objectNode.Parent) then
                    updateScroll()
                end
            end
        end
        
        local function makeObject(obj,par)
            local newObject = Instance.new(obj.ClassName)
            for i,v in pairs(obj.Properties) do
                ypcall(function()
                    local newProp
                    newProp = ToPropValue(v.Value,v.Type)
                    newObject[v.Name] = newProp
                end)
            end
            newObject.Parent = par
        end
        
        local function writeObject(obj)
            local newObject = {ClassName = obj.ClassName, Properties = {}}
            for i,v in pairs(RbxApi.GetProperties(obj.className)) do
                if v["Name"] ~= "Parent" then
                    print("thispassed")
                    table.insert(newObject.Properties,{Name = v["Name"], Type = v["ValueType"], Value = tostring(obj[v["Name"]])})
                end
            end
            return newObject
        end
        
        local function buildDexStorage()
            local localDexStorage
            
            local success,err = ypcall(function()
                localDexStorage = game:GetObjects("rbxasset://DexStorage.rbxm")[1]
            end)
            
            if success and localDexStorage then
                for i,v in pairs(localDexStorage:GetChildren()) do
                    ypcall(function()
                        v.Parent = DexStorageMain
                    end)
                end
            end
            
            updateDexStorageListeners()
            --[[
            local localDexStorage = readfile(getelysianpath().."DexStorage.txt")--game:GetService("CookiesService"):GetCookieValue("DexStorage")
            --local success,err = pcall(function()
                if localDexStorage then
                    local objTable = game:GetService("HttpService"):JSONDecode(localDexStorage)
                    for i,v in pairs(objTable) do
                        makeObject(v,DexStorageMain)
                    end
                end
            --end)
            --]]
        end
        
        local dexStorageDebounce = false
        local dexStorageListeners = {}
        
        local function updateDexStorage()
            if dexStorageDebounce then return end
            dexStorageDebounce = true	
            
            wait()
            
            pcall(function()
                saveinstance("content//DexStorage.rbxm",DexStorageMain)
            end)
            
            updateDexStorageListeners()
            
            dexStorageDebounce = false
            --[[
            local success,err = ypcall(function()
                local objs = {}
                for i,v in pairs(DexStorageMain:GetChildren()) do
                    table.insert(objs,writeObject(v))
                end
                writefile(getelysianpath().."DexStorage.txt",game:GetService("HttpService"):JSONEncode(objs))
                --game:GetService("CookiesService"):SetCookieValue("DexStorage",game:GetService("HttpService"):JSONEncode(objs))
            end)
            if err then
                CreateCaution("DexStorage Save Fail!","DexStorage broke! If you see this message, report to Raspberry Pi!")
            end
            print("hi")
            --]]
        end
        
        function updateDexStorageListeners()
            for i,v in pairs(dexStorageListeners) do
                v:Disconnect()
            end
            dexStorageListeners = {}
            for i,v in pairs(DexStorageMain:GetChildren()) do
                pcall(function()
                    local ev = v.Changed:connect(updateDexStorage)
                    table.insert(dexStorageListeners,ev)
                end)
            end
        end
        
        do
            NodeLookup[workspace.Parent] = {
                Object = workspace.Parent;
                Parent = nil;
                Index = 0;
                Expanded = true;
            }
            
            if DexStorageEnabled then
                NodeLookup[DexStorage] = {
                    Object = DexStorage;
                    Parent = nil;
                    Index = 0;
                    Expanded = true;
                }
            end
            
            if NilStorageEnabled then
                NodeLookup[NilStorage] = {
                    Object = NilStorage;
                    Parent = nil;
                    Index = 0;
                    Expanded = true;
                }
            end
        
            Connect(game.DescendantAdded,addObject)
            Connect(game.DescendantRemoving,removeObject)
            
            if DexStorageEnabled then
                --[[
                if readfile(getelysianpath().."DexStorage.txt") == nil then
                    writefile(getelysianpath().."DexStorage.txt","")
                end
                --]]
                
                buildDexStorage()
            
                Connect(DexStorage.DescendantAdded,addObject)
                Connect(DexStorage.DescendantRemoving,removeObject)
            
                Connect(DexStorage.DescendantAdded,updateDexStorage)
                Connect(DexStorage.DescendantRemoving,updateDexStorage)
            end
            
            if NilStorageEnabled then
                Connect(NilStorage.DescendantAdded,addObject)
                Connect(NilStorage.DescendantRemoving,removeObject)		
                
                local currentTable = get_nil_instances()	
                
                spawn(function()
                    while wait() do
                        if #currentTable ~= #get_nil_instances() then
                            currentTable = get_nil_instances()
                            --NilStorageMain:ClearAllChildren()
                            for i,v in pairs(get_nil_instances()) do
                                if v ~= NilStorage and v ~= DexStorage then
                                    pcall(function()
                                        v.Parent = NilStorageMain
                                    end)
                                    --[[
                                    local newNil = v
                                    newNil.Archivable = true
                                    newNil:Clone().Parent = NilStorageMain
                                    --]]
                                end
                            end
                        end
                    end
                end)
            end
        
            local function get(o)
                return o:GetChildren()
            end
        
            local function r(o)
                local s,children = pcall(get,o)
                if s then
                    for i = 1,#children do
                        addObject(children[i],true)
                        r(children[i])
                    end
                end
            end
        
            r(workspace.Parent)
            if DexStorageEnabled then
                r(DexStorage)
            end
            if NilStorageEnabled then
                r(NilStorage)
            end
        
            scrollBar.VisibleSpace = math.ceil(listFrame.AbsoluteSize.y/ENTRY_BOUND)
            updateList()
        end
        
        ----------------------------------------------------------------
        ----------------------------------------------------------------
        ----------------------------------------------------------------
        ----------------------------------------------------------------
        ---- Actions
        
        local actionButtons do
            actionButtons = {}
        
            local totalActions = 1
            local currentActions = totalActions
            local function makeButton(icon,over,name,vis,cond)
                local buttonEnabled = false
                
                local button = Create(Icon('ImageButton',icon),{
                    Name = name .. "Button";
                    Visible = Option.Modifiable and Option.Selectable;
                    Position = UDim2.new(1,-(GUI_SIZE+2)*currentActions+2,0.25,-GUI_SIZE/2);
                    Size = UDim2.new(0,GUI_SIZE,0,GUI_SIZE);
                    Parent = headerFrame;
                })
        
                local tipText = Create('TextLabel',{
                    Name = name .. "Text";
                    Text = name;
                    Visible = false;
                    BackgroundTransparency = 1;
                    TextXAlignment = 'Right';
                    Font = FONT;
                    FontSize = FONT_SIZE;
                    Position = UDim2.new(0,0,0,0);
                    Size = UDim2.new(1,-(GUI_SIZE+2)*totalActions,1,0);
                    Parent = headerFrame;
                })
        
                
                button.MouseEnter:connect(function()
                    if buttonEnabled then
                        button.BackgroundTransparency = 0.9
                    end
                    --Icon(button,over)
                    --tipText.Visible = true
                end)
                button.MouseLeave:connect(function()
                    button.BackgroundTransparency = 1
                    --Icon(button,icon)
                    --tipText.Visible = false
                end)
        
                currentActions = currentActions + 1
                actionButtons[#actionButtons+1] = {Obj = button,Cond = cond}
                QuickButtons[#actionButtons+1] = {Obj = button,Cond = cond, Toggle = function(on)
                    if on then
                        buttonEnabled = true
                        Icon(button,over)
                    else
                        buttonEnabled = false
                        Icon(button,icon)
                    end
                end}
                return button
            end
        
            --local clipboard = {}
            local function delete(o)
                o.Parent = nil
            end
            
            makeButton(ACTION_EDITQUICKACCESS,ACTION_EDITQUICKACCESS,"Options",true,function()return true end).MouseButton1Click:connect(function()
                
            end)
            
        
            -- DELETE
            makeButton(ACTION_DELETE,ACTION_DELETE_OVER,"Delete",true,function() return #Selection:Get() > 0 end).MouseButton1Click:connect(function()
                if not Option.Modifiable then return end
                local list = Selection:Get()
                for i = 1,#list do
                    pcall(delete,list[i])
                end
                Selection:Set({})
            end)
            
            -- PASTE
            makeButton(ACTION_PASTE,ACTION_PASTE_OVER,"Paste",true,function() return #Selection:Get() > 0 and #clipboard > 0 end).MouseButton1Click:connect(function()
                if not Option.Modifiable then return end
                local parent = Selection.List[1] or workspace
                for i = 1,#clipboard do
                    clipboard[i]:Clone().Parent = parent
                end
            end)
            
            -- COPY
            makeButton(ACTION_COPY,ACTION_COPY_OVER,"Copy",true,function() return #Selection:Get() > 0 end).MouseButton1Click:connect(function()
                if not Option.Modifiable then return end
                clipboard = {}
                local list = Selection.List
                for i = 1,#list do
                    table.insert(clipboard,list[i]:Clone())
                end
                updateActions()
            end)
            
            -- CUT
            makeButton(ACTION_CUT,ACTION_CUT_OVER,"Cut",true,function() return #Selection:Get() > 0 end).MouseButton1Click:connect(function()
                if not Option.Modifiable then return end
                clipboard = {}
                local list = Selection.List
                local cut = {}
                for i = 1,#list do
                    local obj = list[i]:Clone()
                    if obj then
                        table.insert(clipboard,obj)
                        table.insert(cut,list[i])
                    end
                end
                for i = 1,#cut do
                    pcall(delete,cut[i])
                end
                updateActions()
            end)
            
            -- FREEZE
            makeButton(ACTION_FREEZE,ACTION_FREEZE,"Freeze",true,function() return true end)
            
            -- ADD/REMOVE STARRED
            makeButton(ACTION_ADDSTAR,ACTION_ADDSTAR_OVER,"Star",true,function() return #Selection:Get() > 0 end)
            
            -- STARRED
            makeButton(ACTION_STARRED,ACTION_STARRED,"Starred",true,function() return true end)
        
        
            -- SORT
            -- local actionSort = makeButton(ACTION_SORT,ACTION_SORT_OVER,"Sort")
        end
        
        ----------------------------------------------------------------
        ----------------------------------------------------------------
        ----------------------------------------------------------------
        ----------------------------------------------------------------
        ---- Option Bindables
        
        do
            local optionCallback = {
                Modifiable = function(value)
                    for i = 1,#actionButtons do
                        actionButtons[i].Obj.Visible = value and Option.Selectable
                    end
                    cancelReparentDrag()
                end;
                Selectable = function(value)
                    for i = 1,#actionButtons do
                        actionButtons[i].Obj.Visible = value and Option.Modifiable
                    end
                    cancelSelectDrag()
                    Selection:Set({})
                end;
            }
        
            local bindSetOption = explorerPanel:FindFirstChild("SetOption")
            if not bindSetOption then
                bindSetOption = Create('BindableFunction',{Name = "SetOption"})
                bindSetOption.Parent = explorerPanel
            end
        
            bindSetOption.OnInvoke = function(optionName,value)
                if optionCallback[optionName] then
                    Option[optionName] = value
                    optionCallback[optionName](value)
                end
            end
        
            local bindGetOption = explorerPanel:FindFirstChild("GetOption")
            if not bindGetOption then
                bindGetOption = Create('BindableFunction',{Name = "GetOption"})
                bindGetOption.Parent = explorerPanel
            end
        
            bindGetOption.OnInvoke = function(optionName)
                if optionName then
                    return Option[optionName]
                else
                    local options = {}
                    for k,v in pairs(Option) do
                        options[k] = v
                    end
                    return options
                end
            end
        end
        
        function SelectionVar()
            return Selection
        end
        
        Input.InputBegan:connect(function(key)
            if key.KeyCode == Enum.KeyCode.LeftControl then
                HoldingCtrl = true
            end
            if key.KeyCode == Enum.KeyCode.LeftShift then
                HoldingShift = true
            end
        end)
        
        Input.InputEnded:connect(function(key)
            if key.KeyCode == Enum.KeyCode.LeftControl then
                HoldingCtrl = false
            end
            if key.KeyCode == Enum.KeyCode.LeftShift then
                HoldingShift = false
            end
        end)
        
        while RbxApi == nil do
            RbxApi = GetApiRemote:Invoke()
            wait()
        end
        
        explorerFilter.Changed:connect(function(prop)
            if prop == "Text" then
                rawUpdateList()
            end
        end)
        
        CurrentInsertObjectWindow = CreateInsertObjectMenu(
            GetClasses(),
            "",
            false,
            function(option)
                CurrentInsertObjectWindow.Visible = false
                local list = SelectionVar():Get()
                for i = 1,#list do
                    pcall(function() Instance.new(option,list[i]) end)
                end
                DestroyRightClick()
            end
        )
        end)
        spawn(function()
            --[[
            
        Change log:
        
        09/18
            Fixed checkbox mouseover sprite
            Encapsulated checkbox creation into separate method
            Fixed another checkbox issue
        
        09/15
            Invalid input is ignored instead of setting to default of that data type
            Consolidated control methods and simplified them
            All input goes through ToValue method
            Fixed position of BrickColor palette
            Made DropDown appear above row if it would otherwise exceed the page height
            Cleaned up stylesheets
        
        09/14
            Made properties window scroll when mouse wheel scrolled
            Object/Instance and Color3 data types handled properly
            Multiple BrickColor controls interfering with each other fixed
            Added support for Content data type
            
        --]]
        
        wait(0.2)
        
        local print = function(s)
            print(tostring(s))
        end
        
        -- Services
        local Teams = game:GetService("Teams")
        local Workspace = game:GetService("Workspace")
        local Debris = game:GetService("Debris")
        local ContentProvider = game:GetService("ContentProvider")
        local Players = game:GetService("Players")
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        
        -- Functions
        function httpGet(url)
            return game:HttpGet(url,true)
        end
        
        -- RbxApi Stuff
        
        local apiUrl = "http://anaminus.github.io/rbx/json/api/latest.json"
        local maxChunkSize = 100 * 1000
        local ApiJson
        if script:FindFirstChild("RawApiJson") then
            ApiJson = script.RawApiJson
        else
            ApiJson = ""
        end
        
        
        function getLocalApiJson()
            local rawApiJson = [===[
            [{"Superclass":null,"type":"Class","Name":"Instance","tags":["notbrowsable"]},{"ValueType":"bool","type":"Property","Name":"Archivable","tags":[],"Class":"Instance"},{"ValueType":"string","type":"Property","Name":"ClassName","tags":["readonly"],"Class":"Instance"},{"ValueType":"int","type":"Property","Name":"DataCost","tags":["RobloxPlaceSecurity","readonly"],"Class":"Instance"},{"ValueType":"string","type":"Property","Name":"Name","tags":[],"Class":"Instance"},{"ValueType":"Object","type":"Property","Name":"Parent","tags":[],"Class":"Instance"},{"ValueType":"bool","type":"Property","Name":"RobloxLocked","tags":["PluginSecurity"],"Class":"Instance"},{"ValueType":"bool","type":"Property","Name":"archivable","tags":["hidden"],"Class":"Instance"},{"ValueType":"string","type":"Property","Name":"className","tags":["deprecated","readonly"],"Class":"Instance"},{"ReturnType":"void","Arguments":[],"Name":"ClearAllChildren","tags":[],"Class":"Instance","type":"Function"},{"ReturnType":"Instance","Arguments":[],"Name":"Clone","tags":[],"Class":"Instance","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Destroy","tags":[],"Class":"Instance","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"name","Default":null},{"Type":"bool","Name":"recursive","Default":"false"}],"Name":"FindFirstChild","tags":[],"Class":"Instance","type":"Function"},{"ReturnType":"Objects","Arguments":[],"Name":"GetChildren","tags":[],"Class":"Instance","type":"Function"},{"ReturnType":"string","Arguments":[{"Type":"int","Name":"scopeLength","Default":"4"}],"Name":"GetDebugId","tags":["PluginSecurity","notbrowsable"],"Class":"Instance","type":"Function"},{"ReturnType":"string","Arguments":[],"Name":"GetFullName","tags":[],"Class":"Instance","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"string","Name":"className","Default":null}],"Name":"IsA","tags":[],"Class":"Instance","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"Instance","Name":"descendant","Default":null}],"Name":"IsAncestorOf","tags":[],"Class":"Instance","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"Instance","Name":"ancestor","Default":null}],"Name":"IsDescendantOf","tags":[],"Class":"Instance","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Remove","tags":["deprecated"],"Class":"Instance","type":"Function"},{"ReturnType":"Objects","Arguments":[],"Name":"children","tags":["deprecated"],"Class":"Instance","type":"Function"},{"ReturnType":"Instance","Arguments":[],"Name":"clone","tags":["deprecated"],"Class":"Instance","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"destroy","tags":["deprecated"],"Class":"Instance","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"name","Default":null},{"Type":"bool","Name":"recursive","Default":"false"}],"Name":"findFirstChild","tags":["deprecated"],"Class":"Instance","type":"Function"},{"ReturnType":"Objects","Arguments":[],"Name":"getChildren","tags":["deprecated"],"Class":"Instance","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"string","Name":"className","Default":null}],"Name":"isA","tags":["deprecated"],"Class":"Instance","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"Instance","Name":"ancestor","Default":null}],"Name":"isDescendantOf","tags":["deprecated"],"Class":"Instance","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"remove","tags":["deprecated"],"Class":"Instance","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"childName","Default":null}],"Name":"WaitForChild","tags":[],"Class":"Instance","type":"YieldFunction"},{"Arguments":[{"Name":"child","Type":"Instance"},{"Name":"parent","Type":"Instance"}],"Name":"AncestryChanged","tags":[],"Class":"Instance","type":"Event"},{"Arguments":[{"Name":"property","Type":"Property"}],"Name":"Changed","tags":[],"Class":"Instance","type":"Event"},{"Arguments":[{"Name":"child","Type":"Instance"}],"Name":"ChildAdded","tags":[],"Class":"Instance","type":"Event"},{"Arguments":[{"Name":"child","Type":"Instance"}],"Name":"ChildRemoved","tags":[],"Class":"Instance","type":"Event"},{"Arguments":[{"Name":"descendant","Type":"Instance"}],"Name":"DescendantAdded","tags":[],"Class":"Instance","type":"Event"},{"Arguments":[{"Name":"descendant","Type":"Instance"}],"Name":"DescendantRemoving","tags":[],"Class":"Instance","type":"Event"},{"Arguments":[{"Name":"child","Type":"Instance"}],"Name":"childAdded","tags":["deprecated"],"Class":"Instance","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"Accoutrement","tags":[]},{"ValueType":"Vector3","type":"Property","Name":"AttachmentForward","tags":[],"Class":"Accoutrement"},{"ValueType":"CoordinateFrame","type":"Property","Name":"AttachmentPoint","tags":[],"Class":"Accoutrement"},{"ValueType":"Vector3","type":"Property","Name":"AttachmentPos","tags":[],"Class":"Accoutrement"},{"ValueType":"Vector3","type":"Property","Name":"AttachmentRight","tags":[],"Class":"Accoutrement"},{"ValueType":"Vector3","type":"Property","Name":"AttachmentUp","tags":[],"Class":"Accoutrement"},{"Superclass":"Accoutrement","type":"Class","Name":"Accessory","tags":[]},{"Superclass":"Accoutrement","type":"Class","Name":"Hat","tags":["deprecated"]},{"Superclass":"Instance","type":"Class","Name":"AdService","tags":["notCreatable"]},{"ReturnType":"void","Arguments":[],"Name":"ShowVideoAd","tags":[],"Class":"AdService","type":"Function"},{"Arguments":[{"Name":"adShown","Type":"bool"}],"Name":"VideoAdClosed","tags":[],"Class":"AdService","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"AdvancedDragger","tags":[]},{"Superclass":"Instance","type":"Class","Name":"Animation","tags":[]},{"ValueType":"Content","type":"Property","Name":"AnimationId","tags":[],"Class":"Animation"},{"Superclass":"Instance","type":"Class","Name":"AnimationController","tags":[]},{"ReturnType":"Array","Arguments":[],"Name":"GetPlayingAnimationTracks","tags":[],"Class":"AnimationController","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"Instance","Name":"animation","Default":null}],"Name":"LoadAnimation","tags":[],"Class":"AnimationController","type":"Function"},{"Arguments":[{"Name":"animationTrack","Type":"Instance"}],"Name":"AnimationPlayed","tags":[],"Class":"AnimationController","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"AnimationTrack","tags":[]},{"ValueType":"Object","type":"Property","Name":"Animation","tags":["readonly"],"Class":"AnimationTrack"},{"ValueType":"bool","type":"Property","Name":"IsPlaying","tags":["readonly"],"Class":"AnimationTrack"},{"ValueType":"float","type":"Property","Name":"Length","tags":["readonly"],"Class":"AnimationTrack"},{"ValueType":"AnimationPriority","type":"Property","Name":"Priority","tags":[],"Class":"AnimationTrack"},{"ValueType":"float","type":"Property","Name":"TimePosition","tags":[],"Class":"AnimationTrack"},{"ReturnType":"void","Arguments":[{"Type":"float","Name":"speed","Default":"1"}],"Name":"AdjustSpeed","tags":[],"Class":"AnimationTrack","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"float","Name":"weight","Default":"1"},{"Type":"float","Name":"fadeTime","Default":"0.100000001"}],"Name":"AdjustWeight","tags":[],"Class":"AnimationTrack","type":"Function"},{"ReturnType":"double","Arguments":[{"Type":"string","Name":"keyframeName","Default":null}],"Name":"GetTimeOfKeyframe","tags":[],"Class":"AnimationTrack","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"float","Name":"fadeTime","Default":"0.100000001"},{"Type":"float","Name":"weight","Default":"1"},{"Type":"float","Name":"speed","Default":"1"}],"Name":"Play","tags":[],"Class":"AnimationTrack","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"float","Name":"fadeTime","Default":"0.100000001"}],"Name":"Stop","tags":[],"Class":"AnimationTrack","type":"Function"},{"Arguments":[{"Name":"keyframeName","Type":"string"}],"Name":"KeyframeReached","tags":[],"Class":"AnimationTrack","type":"Event"},{"Arguments":[],"Name":"Stopped","tags":["deprecated"],"Class":"AnimationTrack","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"AnimationTrackState","tags":[]},{"Superclass":"Instance","type":"Class","Name":"Animator","tags":[]},{"ReturnType":"Instance","Arguments":[{"Type":"Instance","Name":"animation","Default":null}],"Name":"LoadAnimation","tags":[],"Class":"Animator","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"AssetService","tags":[]},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"revertUrl","Default":null}],"Name":"SetAssetRevertUrl","tags":["LocalUserSecurity"],"Class":"AssetService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"versionsUrl","Default":null}],"Name":"SetAssetVersionsUrl","tags":["LocalUserSecurity"],"Class":"AssetService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"accessUrl","Default":null}],"Name":"SetPlaceAccessUrl","tags":["LocalUserSecurity"],"Class":"AssetService","type":"Function"},{"ReturnType":"int","Arguments":[{"Type":"string","Name":"placeName","Default":null},{"Type":"int","Name":"templatePlaceID","Default":null},{"Type":"string","Name":"description","Default":""}],"Name":"CreatePlaceAsync","tags":[],"Class":"AssetService","type":"YieldFunction"},{"ReturnType":"int","Arguments":[{"Type":"Instance","Name":"player","Default":null},{"Type":"string","Name":"placeName","Default":null},{"Type":"int","Name":"templatePlaceID","Default":null},{"Type":"string","Name":"description","Default":""}],"Name":"CreatePlaceInPlayerInventoryAsync","tags":[],"Class":"AssetService","type":"YieldFunction"},{"ReturnType":"Dictionary","Arguments":[{"Type":"int","Name":"placeId","Default":null},{"Type":"int","Name":"pageNum","Default":"1"}],"Name":"GetAssetVersions","tags":[],"Class":"AssetService","type":"YieldFunction"},{"ReturnType":"int","Arguments":[{"Type":"int","Name":"creationID","Default":null}],"Name":"GetCreatorAssetID","tags":[],"Class":"AssetService","type":"YieldFunction"},{"ReturnType":"Instance","Arguments":[],"Name":"GetGamePlacesAsync","tags":[],"Class":"AssetService","type":"YieldFunction"},{"ReturnType":"Dictionary","Arguments":[{"Type":"int","Name":"placeId","Default":null}],"Name":"GetPlacePermissions","tags":[],"Class":"AssetService","type":"YieldFunction"},{"ReturnType":"bool","Arguments":[{"Type":"int","Name":"placeId","Default":null},{"Type":"int","Name":"versionNumber","Default":null}],"Name":"RevertAsset","tags":[],"Class":"AssetService","type":"YieldFunction"},{"ReturnType":"void","Arguments":[],"Name":"SavePlaceAsync","tags":[],"Class":"AssetService","type":"YieldFunction"},{"ReturnType":"bool","Arguments":[{"Type":"int","Name":"placeId","Default":null},{"Type":"AccessType","Name":"accessType","Default":"Everyone"},{"Type":"Array","Name":"inviteList","Default":"{}"}],"Name":"SetPlacePermissions","tags":[],"Class":"AssetService","type":"YieldFunction"},{"Superclass":"Instance","type":"Class","Name":"Attachment","tags":[]},{"ValueType":"Vector3","type":"Property","Name":"Axis","tags":[],"Class":"Attachment"},{"ValueType":"CoordinateFrame","type":"Property","Name":"CFrame","tags":[],"Class":"Attachment"},{"ValueType":"Vector3","type":"Property","Name":"Position","tags":[],"Class":"Attachment"},{"ValueType":"Vector3","type":"Property","Name":"Rotation","tags":[],"Class":"Attachment"},{"ValueType":"Vector3","type":"Property","Name":"SecondaryAxis","tags":[],"Class":"Attachment"},{"ValueType":"Vector3","type":"Property","Name":"WorldAxis","tags":["readonly"],"Class":"Attachment"},{"ValueType":"Vector3","type":"Property","Name":"WorldPosition","tags":["readonly"],"Class":"Attachment"},{"ValueType":"Vector3","type":"Property","Name":"WorldRotation","tags":["readonly"],"Class":"Attachment"},{"ValueType":"Vector3","type":"Property","Name":"WorldSecondaryAxis","tags":["readonly"],"Class":"Attachment"},{"ReturnType":"Vector3","Arguments":[],"Name":"GetAxis","tags":[],"Class":"Attachment","type":"Function"},{"ReturnType":"Vector3","Arguments":[],"Name":"GetSecondaryAxis","tags":[],"Class":"Attachment","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector3","Name":"axis","Default":null}],"Name":"SetAxis","tags":[],"Class":"Attachment","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector3","Name":"axis","Default":null}],"Name":"SetSecondaryAxis","tags":[],"Class":"Attachment","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"BadgeService","tags":["notCreatable"]},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"url","Default":null}],"Name":"SetAwardBadgeUrl","tags":["LocalUserSecurity"],"Class":"BadgeService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"seconds","Default":null}],"Name":"SetHasBadgeCooldown","tags":["LocalUserSecurity"],"Class":"BadgeService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"url","Default":null}],"Name":"SetHasBadgeUrl","tags":["LocalUserSecurity"],"Class":"BadgeService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"url","Default":null}],"Name":"SetIsBadgeDisabledUrl","tags":["LocalUserSecurity"],"Class":"BadgeService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"url","Default":null}],"Name":"SetIsBadgeLegalUrl","tags":["LocalUserSecurity"],"Class":"BadgeService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"placeId","Default":null}],"Name":"SetPlaceId","tags":["LocalUserSecurity"],"Class":"BadgeService","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"int","Name":"userId","Default":null},{"Type":"int","Name":"badgeId","Default":null}],"Name":"AwardBadge","tags":[],"Class":"BadgeService","type":"YieldFunction"},{"ReturnType":"bool","Arguments":[{"Type":"int","Name":"badgeId","Default":null}],"Name":"IsDisabled","tags":[],"Class":"BadgeService","type":"YieldFunction"},{"ReturnType":"bool","Arguments":[{"Type":"int","Name":"badgeId","Default":null}],"Name":"IsLegal","tags":[],"Class":"BadgeService","type":"YieldFunction"},{"ReturnType":"bool","Arguments":[{"Type":"int","Name":"userId","Default":null},{"Type":"int","Name":"badgeId","Default":null}],"Name":"UserHasBadge","tags":[],"Class":"BadgeService","type":"YieldFunction"},{"Arguments":[{"Name":"message","Type":"string"},{"Name":"userId","Type":"int"},{"Name":"badgeId","Type":"int"}],"Name":"BadgeAwarded","tags":["RobloxScriptSecurity"],"Class":"BadgeService","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"BasePlayerGui","tags":[]},{"Superclass":"BasePlayerGui","type":"Class","Name":"CoreGui","tags":["notCreatable","notbrowsable"]},{"ValueType":"Object","type":"Property","Name":"SelectionImageObject","tags":["RobloxScriptSecurity"],"Class":"CoreGui"},{"ValueType":"int","type":"Property","Name":"Version","tags":["readonly"],"Class":"CoreGui"},{"Superclass":"BasePlayerGui","type":"Class","Name":"PlayerGui","tags":["notCreatable"]},{"ValueType":"Object","type":"Property","Name":"SelectionImageObject","tags":[],"Class":"PlayerGui"},{"ReturnType":"float","Arguments":[],"Name":"GetTopbarTransparency","tags":[],"Class":"PlayerGui","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"float","Name":"transparency","Default":null}],"Name":"SetTopbarTransparency","tags":[],"Class":"PlayerGui","type":"Function"},{"Arguments":[{"Name":"transparency","Type":"float"}],"Name":"TopbarTransparencyChangedSignal","tags":[],"Class":"PlayerGui","type":"Event"},{"Superclass":"BasePlayerGui","type":"Class","Name":"StarterGui","tags":[]},{"ValueType":"bool","type":"Property","Name":"ResetPlayerGuiOnSpawn","tags":[],"Class":"StarterGui"},{"ValueType":"bool","type":"Property","Name":"ShowDevelopmentGui","tags":[],"Class":"StarterGui"},{"ReturnType":"bool","Arguments":[{"Type":"CoreGuiType","Name":"coreGuiType","Default":null}],"Name":"GetCoreGuiEnabled","tags":[],"Class":"StarterGui","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"parameterName","Default":null},{"Type":"Function","Name":"getFunction","Default":null}],"Name":"RegisterGetCore","tags":["RobloxScriptSecurity"],"Class":"StarterGui","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"parameterName","Default":null},{"Type":"Function","Name":"setFunction","Default":null}],"Name":"RegisterSetCore","tags":["RobloxScriptSecurity"],"Class":"StarterGui","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"parameterName","Default":null},{"Type":"Variant","Name":"value","Default":null}],"Name":"SetCore","tags":[],"Class":"StarterGui","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"CoreGuiType","Name":"coreGuiType","Default":null},{"Type":"bool","Name":"enabled","Default":null}],"Name":"SetCoreGuiEnabled","tags":[],"Class":"StarterGui","type":"Function"},{"ReturnType":"Variant","Arguments":[{"Type":"string","Name":"parameterName","Default":null}],"Name":"GetCore","tags":[],"Class":"StarterGui","type":"YieldFunction"},{"Arguments":[{"Name":"coreGuiType","Type":"CoreGuiType"},{"Name":"enabled","Type":"bool"}],"Name":"CoreGuiChangedSignal","tags":["RobloxScriptSecurity"],"Class":"StarterGui","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"BinaryStringValue","tags":[]},{"Superclass":"Instance","type":"Class","Name":"BindableEvent","tags":[]},{"ReturnType":"void","Arguments":[{"Type":"Tuple","Name":"arguments","Default":null}],"Name":"Fire","tags":[],"Class":"BindableEvent","type":"Function"},{"Arguments":[{"Name":"arguments","Type":"Tuple"}],"Name":"Event","tags":[],"Class":"BindableEvent","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"BindableFunction","tags":[]},{"ReturnType":"Tuple","Arguments":[{"Type":"Tuple","Name":"arguments","Default":null}],"Name":"Invoke","tags":[],"Class":"BindableFunction","type":"YieldFunction"},{"ReturnType":"Tuple","Arguments":[{"Name":"arguments","Type":"Tuple"}],"Name":"OnInvoke","tags":[],"Class":"BindableFunction","type":"Callback"},{"Superclass":"Instance","type":"Class","Name":"BodyMover","tags":[]},{"Superclass":"BodyMover","type":"Class","Name":"BodyAngularVelocity","tags":[]},{"ValueType":"Vector3","type":"Property","Name":"AngularVelocity","tags":[],"Class":"BodyAngularVelocity"},{"ValueType":"Vector3","type":"Property","Name":"MaxTorque","tags":[],"Class":"BodyAngularVelocity"},{"ValueType":"float","type":"Property","Name":"P","tags":[],"Class":"BodyAngularVelocity"},{"ValueType":"Vector3","type":"Property","Name":"angularvelocity","tags":["deprecated"],"Class":"BodyAngularVelocity"},{"ValueType":"Vector3","type":"Property","Name":"maxTorque","tags":["deprecated"],"Class":"BodyAngularVelocity"},{"Superclass":"BodyMover","type":"Class","Name":"BodyForce","tags":[]},{"ValueType":"Vector3","type":"Property","Name":"Force","tags":[],"Class":"BodyForce"},{"ValueType":"Vector3","type":"Property","Name":"force","tags":["deprecated"],"Class":"BodyForce"},{"Superclass":"BodyMover","type":"Class","Name":"BodyGyro","tags":[]},{"ValueType":"CoordinateFrame","type":"Property","Name":"CFrame","tags":[],"Class":"BodyGyro"},{"ValueType":"float","type":"Property","Name":"D","tags":[],"Class":"BodyGyro"},{"ValueType":"Vector3","type":"Property","Name":"MaxTorque","tags":[],"Class":"BodyGyro"},{"ValueType":"float","type":"Property","Name":"P","tags":[],"Class":"BodyGyro"},{"ValueType":"CoordinateFrame","type":"Property","Name":"cframe","tags":["deprecated"],"Class":"BodyGyro"},{"ValueType":"Vector3","type":"Property","Name":"maxTorque","tags":["deprecated"],"Class":"BodyGyro"},{"Superclass":"BodyMover","type":"Class","Name":"BodyPosition","tags":[]},{"ValueType":"float","type":"Property","Name":"D","tags":[],"Class":"BodyPosition"},{"ValueType":"Vector3","type":"Property","Name":"MaxForce","tags":[],"Class":"BodyPosition"},{"ValueType":"float","type":"Property","Name":"P","tags":[],"Class":"BodyPosition"},{"ValueType":"Vector3","type":"Property","Name":"Position","tags":[],"Class":"BodyPosition"},{"ValueType":"Vector3","type":"Property","Name":"maxForce","tags":["deprecated"],"Class":"BodyPosition"},{"ValueType":"Vector3","type":"Property","Name":"position","tags":["deprecated"],"Class":"BodyPosition"},{"ReturnType":"Vector3","Arguments":[],"Name":"GetLastForce","tags":[],"Class":"BodyPosition","type":"Function"},{"ReturnType":"Vector3","Arguments":[],"Name":"lastForce","tags":["deprecated"],"Class":"BodyPosition","type":"Function"},{"Arguments":[],"Name":"ReachedTarget","tags":[],"Class":"BodyPosition","type":"Event"},{"Superclass":"BodyMover","type":"Class","Name":"BodyThrust","tags":[]},{"ValueType":"Vector3","type":"Property","Name":"Force","tags":[],"Class":"BodyThrust"},{"ValueType":"Vector3","type":"Property","Name":"Location","tags":[],"Class":"BodyThrust"},{"ValueType":"Vector3","type":"Property","Name":"force","tags":["deprecated"],"Class":"BodyThrust"},{"ValueType":"Vector3","type":"Property","Name":"location","tags":["deprecated"],"Class":"BodyThrust"},{"Superclass":"BodyMover","type":"Class","Name":"BodyVelocity","tags":[]},{"ValueType":"Vector3","type":"Property","Name":"MaxForce","tags":[],"Class":"BodyVelocity"},{"ValueType":"float","type":"Property","Name":"P","tags":[],"Class":"BodyVelocity"},{"ValueType":"Vector3","type":"Property","Name":"Velocity","tags":[],"Class":"BodyVelocity"},{"ValueType":"Vector3","type":"Property","Name":"maxForce","tags":["deprecated"],"Class":"BodyVelocity"},{"ValueType":"Vector3","type":"Property","Name":"velocity","tags":["deprecated"],"Class":"BodyVelocity"},{"ReturnType":"Vector3","Arguments":[],"Name":"GetLastForce","tags":[],"Class":"BodyVelocity","type":"Function"},{"ReturnType":"Vector3","Arguments":[],"Name":"lastForce","tags":[],"Class":"BodyVelocity","type":"Function"},{"Superclass":"BodyMover","type":"Class","Name":"RocketPropulsion","tags":[]},{"ValueType":"float","type":"Property","Name":"CartoonFactor","tags":[],"Class":"RocketPropulsion"},{"ValueType":"float","type":"Property","Name":"MaxSpeed","tags":[],"Class":"RocketPropulsion"},{"ValueType":"float","type":"Property","Name":"MaxThrust","tags":[],"Class":"RocketPropulsion"},{"ValueType":"Vector3","type":"Property","Name":"MaxTorque","tags":[],"Class":"RocketPropulsion"},{"ValueType":"Object","type":"Property","Name":"Target","tags":[],"Class":"RocketPropulsion"},{"ValueType":"Vector3","type":"Property","Name":"TargetOffset","tags":[],"Class":"RocketPropulsion"},{"ValueType":"float","type":"Property","Name":"TargetRadius","tags":[],"Class":"RocketPropulsion"},{"ValueType":"float","type":"Property","Name":"ThrustD","tags":[],"Class":"RocketPropulsion"},{"ValueType":"float","type":"Property","Name":"ThrustP","tags":[],"Class":"RocketPropulsion"},{"ValueType":"float","type":"Property","Name":"TurnD","tags":[],"Class":"RocketPropulsion"},{"ValueType":"float","type":"Property","Name":"TurnP","tags":[],"Class":"RocketPropulsion"},{"ReturnType":"void","Arguments":[],"Name":"Abort","tags":[],"Class":"RocketPropulsion","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Fire","tags":[],"Class":"RocketPropulsion","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"fire","tags":["deprecated"],"Class":"RocketPropulsion","type":"Function"},{"Arguments":[],"Name":"ReachedTarget","tags":[],"Class":"RocketPropulsion","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"BoolValue","tags":[]},{"ValueType":"bool","type":"Property","Name":"Value","tags":[],"Class":"BoolValue"},{"Arguments":[{"Name":"value","Type":"bool"}],"Name":"Changed","tags":[],"Class":"BoolValue","type":"Event"},{"Arguments":[{"Name":"value","Type":"bool"}],"Name":"changed","tags":["deprecated"],"Class":"BoolValue","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"BrickColorValue","tags":[]},{"ValueType":"BrickColor","type":"Property","Name":"Value","tags":[],"Class":"BrickColorValue"},{"Arguments":[{"Name":"value","Type":"BrickColor"}],"Name":"Changed","tags":[],"Class":"BrickColorValue","type":"Event"},{"Arguments":[{"Name":"value","Type":"BrickColor"}],"Name":"changed","tags":["deprecated"],"Class":"BrickColorValue","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"Button","tags":[]},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"active","Default":null}],"Name":"SetActive","tags":["PluginSecurity"],"Class":"Button","type":"Function"},{"Arguments":[],"Name":"Click","tags":["PluginSecurity"],"Class":"Button","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"CFrameValue","tags":[]},{"ValueType":"CoordinateFrame","type":"Property","Name":"Value","tags":[],"Class":"CFrameValue"},{"Arguments":[{"Name":"value","Type":"CoordinateFrame"}],"Name":"Changed","tags":[],"Class":"CFrameValue","type":"Event"},{"Arguments":[{"Name":"value","Type":"CoordinateFrame"}],"Name":"changed","tags":["deprecated"],"Class":"CFrameValue","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"CacheableContentProvider","tags":[]},{"Superclass":"CacheableContentProvider","type":"Class","Name":"MeshContentProvider","tags":[]},{"Superclass":"CacheableContentProvider","type":"Class","Name":"SolidModelContentProvider","tags":[]},{"Superclass":"CacheableContentProvider","type":"Class","Name":"TextureContentProvider","tags":[]},{"Superclass":"Instance","type":"Class","Name":"Camera","tags":[]},{"ValueType":"CoordinateFrame","type":"Property","Name":"CFrame","tags":[],"Class":"Camera"},{"ValueType":"Object","type":"Property","Name":"CameraSubject","tags":[],"Class":"Camera"},{"ValueType":"CameraType","type":"Property","Name":"CameraType","tags":[],"Class":"Camera"},{"ValueType":"CoordinateFrame","type":"Property","Name":"CoordinateFrame","tags":["deprecated","hidden"],"Class":"Camera"},{"ValueType":"float","type":"Property","Name":"FieldOfView","tags":[],"Class":"Camera"},{"ValueType":"CoordinateFrame","type":"Property","Name":"Focus","tags":[],"Class":"Camera"},{"ValueType":"bool","type":"Property","Name":"HeadLocked","tags":[],"Class":"Camera"},{"ValueType":"float","type":"Property","Name":"HeadScale","tags":[],"Class":"Camera"},{"ValueType":"Vector2","type":"Property","Name":"ViewportSize","tags":["readonly"],"Class":"Camera"},{"ValueType":"CoordinateFrame","type":"Property","Name":"focus","tags":["deprecated"],"Class":"Camera"},{"ReturnType":"float","Arguments":[],"Name":"GetPanSpeed","tags":[],"Class":"Camera","type":"Function"},{"ReturnType":"CoordinateFrame","Arguments":[],"Name":"GetRenderCFrame","tags":[],"Class":"Camera","type":"Function"},{"ReturnType":"float","Arguments":[],"Name":"GetRoll","tags":[],"Class":"Camera","type":"Function"},{"ReturnType":"float","Arguments":[],"Name":"GetTiltSpeed","tags":[],"Class":"Camera","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"CoordinateFrame","Name":"endPos","Default":null},{"Type":"CoordinateFrame","Name":"endFocus","Default":null},{"Type":"float","Name":"duration","Default":null}],"Name":"Interpolate","tags":[],"Class":"Camera","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"units","Default":null}],"Name":"PanUnits","tags":[],"Class":"Camera","type":"Function"},{"ReturnType":"Ray","Arguments":[{"Type":"float","Name":"x","Default":null},{"Type":"float","Name":"y","Default":null},{"Type":"float","Name":"depth","Default":"0"}],"Name":"ScreenPointToRay","tags":[],"Class":"Camera","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"CameraPanMode","Name":"mode","Default":"Classic"}],"Name":"SetCameraPanMode","tags":[],"Class":"Camera","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"float","Name":"rollAngle","Default":null}],"Name":"SetRoll","tags":[],"Class":"Camera","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"int","Name":"units","Default":null}],"Name":"TiltUnits","tags":[],"Class":"Camera","type":"Function"},{"ReturnType":"Ray","Arguments":[{"Type":"float","Name":"x","Default":null},{"Type":"float","Name":"y","Default":null},{"Type":"float","Name":"depth","Default":"0"}],"Name":"ViewportPointToRay","tags":[],"Class":"Camera","type":"Function"},{"ReturnType":"Tuple","Arguments":[{"Type":"Vector3","Name":"worldPoint","Default":null}],"Name":"WorldToScreenPoint","tags":[],"Class":"Camera","type":"Function"},{"ReturnType":"Tuple","Arguments":[{"Type":"Vector3","Name":"worldPoint","Default":null}],"Name":"WorldToViewportPoint","tags":[],"Class":"Camera","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"float","Name":"distance","Default":null}],"Name":"Zoom","tags":["RobloxScriptSecurity"],"Class":"Camera","type":"Function"},{"Arguments":[{"Name":"entering","Type":"bool"}],"Name":"FirstPersonTransition","tags":["RobloxPlaceSecurity"],"Class":"Camera","type":"Event"},{"Arguments":[],"Name":"InterpolationFinished","tags":[],"Class":"Camera","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"ChangeHistoryService","tags":["notCreatable"]},{"ReturnType":"Tuple","Arguments":[],"Name":"GetCanRedo","tags":["PluginSecurity"],"Class":"ChangeHistoryService","type":"Function"},{"ReturnType":"Tuple","Arguments":[],"Name":"GetCanUndo","tags":["PluginSecurity"],"Class":"ChangeHistoryService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Redo","tags":["PluginSecurity"],"Class":"ChangeHistoryService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"ResetWaypoints","tags":["PluginSecurity"],"Class":"ChangeHistoryService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"state","Default":null}],"Name":"SetEnabled","tags":["PluginSecurity"],"Class":"ChangeHistoryService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"name","Default":null}],"Name":"SetWaypoint","tags":["PluginSecurity"],"Class":"ChangeHistoryService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Undo","tags":["PluginSecurity"],"Class":"ChangeHistoryService","type":"Function"},{"Arguments":[{"Name":"waypoint","Type":"string"}],"Name":"OnRedo","tags":["PluginSecurity"],"Class":"ChangeHistoryService","type":"Event"},{"Arguments":[{"Name":"waypoint","Type":"string"}],"Name":"OnUndo","tags":["PluginSecurity"],"Class":"ChangeHistoryService","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"CharacterAppearance","tags":[]},{"Superclass":"CharacterAppearance","type":"Class","Name":"BodyColors","tags":[]},{"ValueType":"BrickColor","type":"Property","Name":"HeadColor","tags":[],"Class":"BodyColors"},{"ValueType":"BrickColor","type":"Property","Name":"LeftArmColor","tags":[],"Class":"BodyColors"},{"ValueType":"BrickColor","type":"Property","Name":"LeftLegColor","tags":[],"Class":"BodyColors"},{"ValueType":"BrickColor","type":"Property","Name":"RightArmColor","tags":[],"Class":"BodyColors"},{"ValueType":"BrickColor","type":"Property","Name":"RightLegColor","tags":[],"Class":"BodyColors"},{"ValueType":"BrickColor","type":"Property","Name":"TorsoColor","tags":[],"Class":"BodyColors"},{"Superclass":"CharacterAppearance","type":"Class","Name":"CharacterMesh","tags":[]},{"ValueType":"int","type":"Property","Name":"BaseTextureId","tags":[],"Class":"CharacterMesh"},{"ValueType":"BodyPart","type":"Property","Name":"BodyPart","tags":[],"Class":"CharacterMesh"},{"ValueType":"int","type":"Property","Name":"MeshId","tags":[],"Class":"CharacterMesh"},{"ValueType":"int","type":"Property","Name":"OverlayTextureId","tags":[],"Class":"CharacterMesh"},{"Superclass":"CharacterAppearance","type":"Class","Name":"Clothing","tags":[]},{"Superclass":"Clothing","type":"Class","Name":"Pants","tags":[]},{"ValueType":"Content","type":"Property","Name":"PantsTemplate","tags":[],"Class":"Pants"},{"Superclass":"Clothing","type":"Class","Name":"Shirt","tags":[]},{"ValueType":"Content","type":"Property","Name":"ShirtTemplate","tags":[],"Class":"Shirt"},{"Superclass":"CharacterAppearance","type":"Class","Name":"ShirtGraphic","tags":[]},{"ValueType":"Content","type":"Property","Name":"Graphic","tags":[],"Class":"ShirtGraphic"},{"Superclass":"CharacterAppearance","type":"Class","Name":"Skin","tags":["deprecated"]},{"ValueType":"BrickColor","type":"Property","Name":"SkinColor","tags":[],"Class":"Skin"},{"Superclass":"Instance","type":"Class","Name":"Chat","tags":["notCreatable"]},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"partOrCharacter","Default":null},{"Type":"string","Name":"message","Default":null},{"Type":"ChatColor","Name":"color","Default":"Blue"}],"Name":"Chat","tags":[],"Class":"Chat","type":"Function"},{"ReturnType":"string","Arguments":[{"Type":"string","Name":"stringToFilter","Default":null},{"Type":"Instance","Name":"playerFrom","Default":null},{"Type":"Instance","Name":"playerTo","Default":null}],"Name":"FilterStringAsync","tags":[],"Class":"Chat","type":"YieldFunction"},{"ReturnType":"string","Arguments":[{"Type":"string","Name":"stringToFilter","Default":null},{"Type":"Instance","Name":"playerToFilterFor","Default":null}],"Name":"FilterStringForPlayerAsync","tags":[],"Class":"Chat","type":"YieldFunction"},{"Arguments":[{"Name":"part","Type":"Instance"},{"Name":"message","Type":"string"},{"Name":"color","Type":"ChatColor"}],"Name":"Chatted","tags":[],"Class":"Chat","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"ChatFilter","tags":["notCreatable"]},{"Superclass":"Instance","type":"Class","Name":"ClickDetector","tags":[]},{"ValueType":"float","type":"Property","Name":"MaxActivationDistance","tags":[],"Class":"ClickDetector"},{"Arguments":[{"Name":"playerWhoClicked","Type":"Instance"}],"Name":"MouseClick","tags":[],"Class":"ClickDetector","type":"Event"},{"Arguments":[{"Name":"playerWhoHovered","Type":"Instance"}],"Name":"MouseHoverEnter","tags":[],"Class":"ClickDetector","type":"Event"},{"Arguments":[{"Name":"playerWhoHovered","Type":"Instance"}],"Name":"MouseHoverLeave","tags":[],"Class":"ClickDetector","type":"Event"},{"Arguments":[{"Name":"playerWhoClicked","Type":"Instance"}],"Name":"mouseClick","tags":["deprecated"],"Class":"ClickDetector","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"ClusterPacketCache","tags":[]},{"Superclass":"Instance","type":"Class","Name":"CollectionService","tags":[]},{"ReturnType":"Objects","Arguments":[{"Type":"string","Name":"class","Default":null}],"Name":"GetCollection","tags":[],"Class":"CollectionService","type":"Function"},{"Arguments":[{"Name":"instance","Type":"Instance"}],"Name":"ItemAdded","tags":[],"Class":"CollectionService","type":"Event"},{"Arguments":[{"Name":"instance","Type":"Instance"}],"Name":"ItemRemoved","tags":[],"Class":"CollectionService","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"Color3Value","tags":[]},{"ValueType":"Color3","type":"Property","Name":"Value","tags":[],"Class":"Color3Value"},{"Arguments":[{"Name":"value","Type":"Color3"}],"Name":"Changed","tags":[],"Class":"Color3Value","type":"Event"},{"Arguments":[{"Name":"value","Type":"Color3"}],"Name":"changed","tags":["deprecated"],"Class":"Color3Value","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"Configuration","tags":[]},{"Superclass":"Instance","type":"Class","Name":"Constraint","tags":[]},{"ValueType":"Object","type":"Property","Name":"Attachment0","tags":[],"Class":"Constraint"},{"ValueType":"Object","type":"Property","Name":"Attachment1","tags":[],"Class":"Constraint"},{"ValueType":"bool","type":"Property","Name":"Enabled","tags":[],"Class":"Constraint"},{"Superclass":"Constraint","type":"Class","Name":"BallSocketConstraint","tags":[]},{"ValueType":"bool","type":"Property","Name":"LimitsEnabled","tags":[],"Class":"BallSocketConstraint"},{"ValueType":"float","type":"Property","Name":"Restitution","tags":[],"Class":"BallSocketConstraint"},{"ValueType":"float","type":"Property","Name":"UpperAngle","tags":[],"Class":"BallSocketConstraint"},{"Superclass":"Constraint","type":"Class","Name":"HingeConstraint","tags":[]},{"ValueType":"ActuatorType","type":"Property","Name":"ActuatorType","tags":[],"Class":"HingeConstraint"},{"ValueType":"float","type":"Property","Name":"AngularSpeed","tags":[],"Class":"HingeConstraint"},{"ValueType":"float","type":"Property","Name":"AngularVelocity","tags":[],"Class":"HingeConstraint"},{"ValueType":"float","type":"Property","Name":"CurrentAngle","tags":["readonly"],"Class":"HingeConstraint"},{"ValueType":"bool","type":"Property","Name":"LimitsEnabled","tags":[],"Class":"HingeConstraint"},{"ValueType":"float","type":"Property","Name":"LowerAngle","tags":[],"Class":"HingeConstraint"},{"ValueType":"float","type":"Property","Name":"MotorMaxAcceleration","tags":[],"Class":"HingeConstraint"},{"ValueType":"float","type":"Property","Name":"MotorMaxTorque","tags":[],"Class":"HingeConstraint"},{"ValueType":"float","type":"Property","Name":"Restitution","tags":[],"Class":"HingeConstraint"},{"ValueType":"float","type":"Property","Name":"ServoMaxTorque","tags":[],"Class":"HingeConstraint"},{"ValueType":"float","type":"Property","Name":"TargetAngle","tags":[],"Class":"HingeConstraint"},{"ValueType":"float","type":"Property","Name":"UpperAngle","tags":[],"Class":"HingeConstraint"},{"Superclass":"Constraint","type":"Class","Name":"MoveToConstraint","tags":[]},{"ValueType":"float","type":"Property","Name":"MaxForce","tags":[],"Class":"MoveToConstraint"},{"ValueType":"float","type":"Property","Name":"StabilizingDistance","tags":[],"Class":"MoveToConstraint"},{"ValueType":"float","type":"Property","Name":"Velocity","tags":[],"Class":"MoveToConstraint"},{"Superclass":"Constraint","type":"Class","Name":"RodConstraint","tags":[]},{"ValueType":"float","type":"Property","Name":"CurrentDistance","tags":["readonly"],"Class":"RodConstraint"},{"ValueType":"float","type":"Property","Name":"Length","tags":[],"Class":"RodConstraint"},{"Superclass":"Constraint","type":"Class","Name":"RopeConstraint","tags":[]},{"ValueType":"float","type":"Property","Name":"CurrentLength","tags":["readonly"],"Class":"RopeConstraint"},{"ValueType":"float","type":"Property","Name":"Length","tags":[],"Class":"RopeConstraint"},{"ValueType":"float","type":"Property","Name":"Restitution","tags":[],"Class":"RopeConstraint"},{"Superclass":"Constraint","type":"Class","Name":"SlidingBallConstraint","tags":[]},{"ValueType":"ActuatorType","type":"Property","Name":"ActuatorType","tags":[],"Class":"SlidingBallConstraint"},{"ValueType":"float","type":"Property","Name":"CurrentPosition","tags":["readonly"],"Class":"SlidingBallConstraint"},{"ValueType":"bool","type":"Property","Name":"LimitsEnabled","tags":[],"Class":"SlidingBallConstraint"},{"ValueType":"float","type":"Property","Name":"LowerLimit","tags":[],"Class":"SlidingBallConstraint"},{"ValueType":"float","type":"Property","Name":"MotorMaxAcceleration","tags":[],"Class":"SlidingBallConstraint"},{"ValueType":"float","type":"Property","Name":"MotorMaxForce","tags":[],"Class":"SlidingBallConstraint"},{"ValueType":"float","type":"Property","Name":"Restitution","tags":[],"Class":"SlidingBallConstraint"},{"ValueType":"float","type":"Property","Name":"ServoMaxForce","tags":[],"Class":"SlidingBallConstraint"},{"ValueType":"float","type":"Property","Name":"Speed","tags":[],"Class":"SlidingBallConstraint"},{"ValueType":"float","type":"Property","Name":"TargetPosition","tags":[],"Class":"SlidingBallConstraint"},{"ValueType":"float","type":"Property","Name":"UpperLimit","tags":[],"Class":"SlidingBallConstraint"},{"ValueType":"float","type":"Property","Name":"Velocity","tags":[],"Class":"SlidingBallConstraint"},{"Superclass":"SlidingBallConstraint","type":"Class","Name":"CylindricalConstraint","tags":[]},{"ValueType":"float","type":"Property","Name":"AzimuthalAngle","tags":[],"Class":"CylindricalConstraint"},{"ValueType":"float","type":"Property","Name":"InclinationAngle","tags":[],"Class":"CylindricalConstraint"},{"Superclass":"SlidingBallConstraint","type":"Class","Name":"PrismaticConstraint","tags":[]},{"Superclass":"Constraint","type":"Class","Name":"SpringConstraint","tags":[]},{"ValueType":"float","type":"Property","Name":"CurrentLength","tags":["readonly"],"Class":"SpringConstraint"},{"ValueType":"float","type":"Property","Name":"Damping","tags":[],"Class":"SpringConstraint"},{"ValueType":"float","type":"Property","Name":"FreeLength","tags":[],"Class":"SpringConstraint"},{"ValueType":"bool","type":"Property","Name":"LimitsEnabled","tags":[],"Class":"SpringConstraint"},{"ValueType":"float","type":"Property","Name":"MaxForce","tags":[],"Class":"SpringConstraint"},{"ValueType":"float","type":"Property","Name":"MaxLength","tags":[],"Class":"SpringConstraint"},{"ValueType":"float","type":"Property","Name":"MinLength","tags":[],"Class":"SpringConstraint"},{"ValueType":"float","type":"Property","Name":"Stiffness","tags":[],"Class":"SpringConstraint"},{"Superclass":"Instance","type":"Class","Name":"ContentFilter","tags":[]},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"outstandingRequests","Default":null},{"Type":"int","Name":"cacheSize","Default":null}],"Name":"SetFilterLimits","tags":["LocalUserSecurity"],"Class":"ContentFilter","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"url","Default":null}],"Name":"SetFilterUrl","tags":["LocalUserSecurity"],"Class":"ContentFilter","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"ContentProvider","tags":[]},{"ValueType":"string","type":"Property","Name":"BaseUrl","tags":["readonly"],"Class":"ContentProvider"},{"ValueType":"int","type":"Property","Name":"RequestQueueSize","tags":["readonly"],"Class":"ContentProvider"},{"ReturnType":"void","Arguments":[{"Type":"Content","Name":"contentId","Default":null}],"Name":"Preload","tags":[],"Class":"ContentProvider","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"url","Default":null}],"Name":"SetAssetUrl","tags":["LocalUserSecurity"],"Class":"ContentProvider","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"url","Default":null}],"Name":"SetBaseUrl","tags":["LocalUserSecurity"],"Class":"ContentProvider","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"count","Default":null}],"Name":"SetCacheSize","tags":["LocalUserSecurity"],"Class":"ContentProvider","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"count","Default":null}],"Name":"SetThreadPool","tags":["LocalUserSecurity"],"Class":"ContentProvider","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Array","Name":"contentIdList","Default":null}],"Name":"PreloadAsync","tags":[],"Class":"ContentProvider","type":"YieldFunction"},{"Superclass":"Instance","type":"Class","Name":"ContextActionService","tags":[]},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"actionName","Default":null},{"Type":"Function","Name":"functionToBind","Default":null},{"Type":"bool","Name":"createTouchButton","Default":null},{"Type":"Tuple","Name":"inputTypes","Default":null}],"Name":"BindAction","tags":[],"Class":"ContextActionService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"actionName","Default":null},{"Type":"Function","Name":"functionToBind","Default":null},{"Type":"bool","Name":"createTouchButton","Default":null},{"Type":"Tuple","Name":"inputTypes","Default":null}],"Name":"BindActionToInputTypes","tags":["deprecated"],"Class":"ContextActionService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"UserInputType","Name":"userInputTypeForActivation","Default":null},{"Type":"KeyCode","Name":"keyCodeForActivation","Default":"Unknown"}],"Name":"BindActivate","tags":[],"Class":"ContextActionService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"actionName","Default":null},{"Type":"Function","Name":"functionToBind","Default":null},{"Type":"bool","Name":"createTouchButton","Default":null},{"Type":"Tuple","Name":"inputTypes","Default":null}],"Name":"BindCoreAction","tags":["RobloxScriptSecurity"],"Class":"ContextActionService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"actionName","Default":null},{"Type":"UserInputState","Name":"state","Default":null},{"Type":"Instance","Name":"inputObject","Default":null}],"Name":"CallFunction","tags":["RobloxScriptSecurity"],"Class":"ContextActionService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"actionName","Default":null},{"Type":"Instance","Name":"actionButton","Default":null}],"Name":"FireActionButtonFoundSignal","tags":["RobloxScriptSecurity"],"Class":"ContextActionService","type":"Function"},{"ReturnType":"Dictionary","Arguments":[],"Name":"GetAllBoundActionInfo","tags":[],"Class":"ContextActionService","type":"Function"},{"ReturnType":"Dictionary","Arguments":[{"Type":"string","Name":"actionName","Default":null}],"Name":"GetBoundActionInfo","tags":[],"Class":"ContextActionService","type":"Function"},{"ReturnType":"string","Arguments":[],"Name":"GetCurrentLocalToolIcon","tags":[],"Class":"ContextActionService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"actionName","Default":null},{"Type":"string","Name":"description","Default":null}],"Name":"SetDescription","tags":[],"Class":"ContextActionService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"actionName","Default":null},{"Type":"string","Name":"image","Default":null}],"Name":"SetImage","tags":[],"Class":"ContextActionService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"actionName","Default":null},{"Type":"UDim2","Name":"position","Default":null}],"Name":"SetPosition","tags":[],"Class":"ContextActionService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"actionName","Default":null},{"Type":"string","Name":"title","Default":null}],"Name":"SetTitle","tags":[],"Class":"ContextActionService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"actionName","Default":null}],"Name":"UnbindAction","tags":[],"Class":"ContextActionService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"UserInputType","Name":"userInputTypeForActivation","Default":null},{"Type":"KeyCode","Name":"keyCodeForActivation","Default":"Unknown"}],"Name":"UnbindActivate","tags":[],"Class":"ContextActionService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"UnbindAllActions","tags":[],"Class":"ContextActionService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"actionName","Default":null}],"Name":"UnbindCoreAction","tags":["RobloxScriptSecurity"],"Class":"ContextActionService","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"actionName","Default":null}],"Name":"GetButton","tags":[],"Class":"ContextActionService","type":"YieldFunction"},{"Arguments":[{"Name":"actionAdded","Type":"string"},{"Name":"createTouchButton","Type":"bool"},{"Name":"functionInfoTable","Type":"Dictionary"}],"Name":"BoundActionAdded","tags":["RobloxScriptSecurity"],"Class":"ContextActionService","type":"Event"},{"Arguments":[{"Name":"actionChanged","Type":"string"},{"Name":"changeName","Type":"string"},{"Name":"changeTable","Type":"Dictionary"}],"Name":"BoundActionChanged","tags":["RobloxScriptSecurity"],"Class":"ContextActionService","type":"Event"},{"Arguments":[{"Name":"actionRemoved","Type":"string"},{"Name":"functionInfoTable","Type":"Dictionary"}],"Name":"BoundActionRemoved","tags":["RobloxScriptSecurity"],"Class":"ContextActionService","type":"Event"},{"Arguments":[{"Name":"actionName","Type":"string"}],"Name":"GetActionButtonEvent","tags":["RobloxScriptSecurity"],"Class":"ContextActionService","type":"Event"},{"Arguments":[{"Name":"toolEquipped","Type":"Instance"}],"Name":"LocalToolEquipped","tags":[],"Class":"ContextActionService","type":"Event"},{"Arguments":[{"Name":"toolUnequipped","Type":"Instance"}],"Name":"LocalToolUnequipped","tags":[],"Class":"ContextActionService","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"Controller","tags":[]},{"ReturnType":"void","Arguments":[{"Type":"Button","Name":"button","Default":null},{"Type":"string","Name":"caption","Default":null}],"Name":"BindButton","tags":[],"Class":"Controller","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"Button","Name":"button","Default":null}],"Name":"GetButton","tags":[],"Class":"Controller","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Button","Name":"button","Default":null}],"Name":"UnbindButton","tags":[],"Class":"Controller","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Button","Name":"button","Default":null},{"Type":"string","Name":"caption","Default":null}],"Name":"bindButton","tags":["deprecated"],"Class":"Controller","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"Button","Name":"button","Default":null}],"Name":"getButton","tags":["deprecated"],"Class":"Controller","type":"Function"},{"Arguments":[{"Name":"button","Type":"Button"}],"Name":"ButtonChanged","tags":[],"Class":"Controller","type":"Event"},{"Superclass":"Controller","type":"Class","Name":"HumanoidController","tags":[]},{"Superclass":"Controller","type":"Class","Name":"SkateboardController","tags":[]},{"ValueType":"float","type":"Property","Name":"Steer","tags":["readonly"],"Class":"SkateboardController"},{"ValueType":"float","type":"Property","Name":"Throttle","tags":["readonly"],"Class":"SkateboardController"},{"Arguments":[{"Name":"axis","Type":"string"}],"Name":"AxisChanged","tags":[],"Class":"SkateboardController","type":"Event"},{"Superclass":"Controller","type":"Class","Name":"VehicleController","tags":[]},{"Superclass":"Instance","type":"Class","Name":"ControllerService","tags":["notCreatable"]},{"Superclass":"Instance","type":"Class","Name":"CookiesService","tags":[]},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"DeleteCookieValue","tags":["RobloxSecurity"],"Class":"CookiesService","type":"Function"},{"ReturnType":"string","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"GetCookieValue","tags":["RobloxSecurity"],"Class":"CookiesService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null},{"Type":"string","Name":"value","Default":null}],"Name":"SetCookieValue","tags":["RobloxSecurity"],"Class":"CookiesService","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"CustomEvent","tags":["deprecated"]},{"ReturnType":"Objects","Arguments":[],"Name":"GetAttachedReceivers","tags":[],"Class":"CustomEvent","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"float","Name":"newValue","Default":null}],"Name":"SetValue","tags":[],"Class":"CustomEvent","type":"Function"},{"Arguments":[{"Name":"receiver","Type":"Instance"}],"Name":"ReceiverConnected","tags":[],"Class":"CustomEvent","type":"Event"},{"Arguments":[{"Name":"receiver","Type":"Instance"}],"Name":"ReceiverDisconnected","tags":[],"Class":"CustomEvent","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"CustomEventReceiver","tags":["deprecated"]},{"ValueType":"Object","type":"Property","Name":"Source","tags":[],"Class":"CustomEventReceiver"},{"ReturnType":"float","Arguments":[],"Name":"GetCurrentValue","tags":[],"Class":"CustomEventReceiver","type":"Function"},{"Arguments":[{"Name":"event","Type":"Instance"}],"Name":"EventConnected","tags":[],"Class":"CustomEventReceiver","type":"Event"},{"Arguments":[{"Name":"event","Type":"Instance"}],"Name":"EventDisconnected","tags":[],"Class":"CustomEventReceiver","type":"Event"},{"Arguments":[{"Name":"newValue","Type":"float"}],"Name":"SourceValueChanged","tags":[],"Class":"CustomEventReceiver","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"DataModelMesh","tags":["notbrowsable"]},{"ValueType":"Vector3","type":"Property","Name":"Offset","tags":[],"Class":"DataModelMesh"},{"ValueType":"Vector3","type":"Property","Name":"Scale","tags":[],"Class":"DataModelMesh"},{"ValueType":"Vector3","type":"Property","Name":"VertexColor","tags":[],"Class":"DataModelMesh"},{"Superclass":"DataModelMesh","type":"Class","Name":"BevelMesh","tags":["deprecated","notbrowsable"]},{"Superclass":"BevelMesh","type":"Class","Name":"BlockMesh","tags":[]},{"Superclass":"BevelMesh","type":"Class","Name":"CylinderMesh","tags":[]},{"Superclass":"DataModelMesh","type":"Class","Name":"FileMesh","tags":[]},{"ValueType":"Content","type":"Property","Name":"MeshId","tags":[],"Class":"FileMesh"},{"ValueType":"Content","type":"Property","Name":"TextureId","tags":[],"Class":"FileMesh"},{"Superclass":"FileMesh","type":"Class","Name":"SpecialMesh","tags":[]},{"ValueType":"MeshType","type":"Property","Name":"MeshType","tags":[],"Class":"SpecialMesh"},{"Superclass":"Instance","type":"Class","Name":"DataStoreService","tags":["notCreatable"]},{"ValueType":"bool","type":"Property","Name":"LegacyNamingScheme","tags":["LocalUserSecurity"],"Class":"DataStoreService"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"name","Default":null},{"Type":"string","Name":"scope","Default":"global"}],"Name":"GetDataStore","tags":[],"Class":"DataStoreService","type":"Function"},{"ReturnType":"Instance","Arguments":[],"Name":"GetGlobalDataStore","tags":[],"Class":"DataStoreService","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"name","Default":null},{"Type":"string","Name":"scope","Default":"global"}],"Name":"GetOrderedDataStore","tags":[],"Class":"DataStoreService","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"Debris","tags":[]},{"ValueType":"int","type":"Property","Name":"MaxItems","tags":["deprecated"],"Class":"Debris"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"item","Default":null},{"Type":"double","Name":"lifetime","Default":"10"}],"Name":"AddItem","tags":[],"Class":"Debris","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"enabled","Default":null}],"Name":"SetLegacyMaxItems","tags":["LocalUserSecurity"],"Class":"Debris","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"item","Default":null},{"Type":"double","Name":"lifetime","Default":"10"}],"Name":"addItem","tags":["deprecated"],"Class":"Debris","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"DebugSettings","tags":["notbrowsable"]},{"ValueType":"int","type":"Property","Name":"AltCdnFailureCount","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"int","type":"Property","Name":"AltCdnSuccessCount","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"int","type":"Property","Name":"AvailablePhysicalMemory","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"int","type":"Property","Name":"BlockMeshSize","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"string","type":"Property","Name":"CPU","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"int","type":"Property","Name":"CdnFailureCount","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"double","type":"Property","Name":"CdnResponceTime","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"int","type":"Property","Name":"CdnSuccessCount","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"int","type":"Property","Name":"CpuCount","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"int","type":"Property","Name":"CpuSpeed","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"int","type":"Property","Name":"DataModel","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"double","type":"Property","Name":"ElapsedTime","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"ErrorReporting","type":"Property","Name":"ErrorReporting","tags":[],"Class":"DebugSettings"},{"ValueType":"string","type":"Property","Name":"GfxCard","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"int","type":"Property","Name":"InstanceCount","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"bool","type":"Property","Name":"IsFmodProfilingEnabled","tags":[],"Class":"DebugSettings"},{"ValueType":"bool","type":"Property","Name":"IsProfilingEnabled","tags":[],"Class":"DebugSettings"},{"ValueType":"bool","type":"Property","Name":"IsScriptStackTracingEnabled","tags":[],"Class":"DebugSettings"},{"ValueType":"int","type":"Property","Name":"JobCount","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"double","type":"Property","Name":"LastCdnFailureTimeSpan","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"int","type":"Property","Name":"LuaRamLimit","tags":[],"Class":"DebugSettings"},{"ValueType":"int","type":"Property","Name":"NameDatabaseBytes","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"int","type":"Property","Name":"NameDatabaseSize","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"bool","type":"Property","Name":"OsIs64Bit","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"string","type":"Property","Name":"OsPlatform","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"int","type":"Property","Name":"OsPlatformId","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"string","type":"Property","Name":"OsVer","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"int","type":"Property","Name":"PageFaultsPerSecond","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"int","type":"Property","Name":"PageFileBytes","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"float","type":"Property","Name":"PixelShaderModel","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"int","type":"Property","Name":"PlayerCount","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"int","type":"Property","Name":"PrivateBytes","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"int","type":"Property","Name":"PrivateWorkingSetBytes","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"double","type":"Property","Name":"ProcessCores","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"int","type":"Property","Name":"ProcessorTime","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"double","type":"Property","Name":"ProfilingWindow","tags":[],"Class":"DebugSettings"},{"ValueType":"int","type":"Property","Name":"RAM","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"bool","type":"Property","Name":"ReportExtendedMachineConfiguration","tags":[],"Class":"DebugSettings"},{"ValueType":"bool","type":"Property","Name":"ReportSoundWarnings","tags":[],"Class":"DebugSettings"},{"ValueType":"string","type":"Property","Name":"Resolution","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"int","type":"Property","Name":"RobloxFailureCount","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"string","type":"Property","Name":"RobloxProductName","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"double","type":"Property","Name":"RobloxRespoceTime","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"int","type":"Property","Name":"RobloxSuccessCount","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"string","type":"Property","Name":"RobloxVersion","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"string","type":"Property","Name":"SIMD","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"string","type":"Property","Name":"SystemProductName","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"TickCountSampleMethod","type":"Property","Name":"TickCountPreciseOverride","tags":[],"Class":"DebugSettings"},{"ValueType":"int","type":"Property","Name":"TotalPhysicalMemory","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"int","type":"Property","Name":"TotalProcessorTime","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"float","type":"Property","Name":"VertexShaderModel","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"int","type":"Property","Name":"VideoMemory","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"int","type":"Property","Name":"VirtualBytes","tags":["readonly"],"Class":"DebugSettings"},{"ReturnType":"void","Arguments":[],"Name":"LegacyScriptMode","tags":["LocalUserSecurity","deprecated"],"Class":"DebugSettings","type":"Function"},{"ReturnType":"Tuple","Arguments":[],"Name":"ResetCdnFailureCounts","tags":["LocalUserSecurity"],"Class":"DebugSettings","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"value","Default":null}],"Name":"SetBlockingRemove","tags":["LocalUserSecurity"],"Class":"DebugSettings","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"DebuggerBreakpoint","tags":["notCreatable"]},{"ValueType":"string","type":"Property","Name":"Condition","tags":[],"Class":"DebuggerBreakpoint"},{"ValueType":"bool","type":"Property","Name":"IsEnabled","tags":[],"Class":"DebuggerBreakpoint"},{"ValueType":"int","type":"Property","Name":"Line","tags":["readonly"],"Class":"DebuggerBreakpoint"},{"Superclass":"Instance","type":"Class","Name":"DebuggerManager","tags":["notCreatable"]},{"ValueType":"bool","type":"Property","Name":"DebuggingEnabled","tags":["readonly"],"Class":"DebuggerManager"},{"ReturnType":"Instance","Arguments":[{"Type":"Instance","Name":"script","Default":null}],"Name":"AddDebugger","tags":[],"Class":"DebuggerManager","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"EnableDebugging","tags":["LocalUserSecurity"],"Class":"DebuggerManager","type":"Function"},{"ReturnType":"Objects","Arguments":[],"Name":"GetDebuggers","tags":[],"Class":"DebuggerManager","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Resume","tags":[],"Class":"DebuggerManager","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"StepIn","tags":[],"Class":"DebuggerManager","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"StepOut","tags":[],"Class":"DebuggerManager","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"StepOver","tags":[],"Class":"DebuggerManager","type":"Function"},{"Arguments":[{"Name":"debugger","Type":"Instance"}],"Name":"DebuggerAdded","tags":[],"Class":"DebuggerManager","type":"Event"},{"Arguments":[{"Name":"debugger","Type":"Instance"}],"Name":"DebuggerRemoved","tags":[],"Class":"DebuggerManager","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"DebuggerWatch","tags":[]},{"ValueType":"string","type":"Property","Name":"Expression","tags":[],"Class":"DebuggerWatch"},{"ReturnType":"void","Arguments":[],"Name":"CheckSyntax","tags":[],"Class":"DebuggerWatch","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"Dialog","tags":[]},{"ValueType":"float","type":"Property","Name":"ConversationDistance","tags":[],"Class":"Dialog"},{"ValueType":"string","type":"Property","Name":"GoodbyeDialog","tags":[],"Class":"Dialog"},{"ValueType":"bool","type":"Property","Name":"InUse","tags":[],"Class":"Dialog"},{"ValueType":"string","type":"Property","Name":"InitialPrompt","tags":[],"Class":"Dialog"},{"ValueType":"DialogPurpose","type":"Property","Name":"Purpose","tags":[],"Class":"Dialog"},{"ValueType":"DialogTone","type":"Property","Name":"Tone","tags":[],"Class":"Dialog"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"player","Default":null},{"Type":"Instance","Name":"dialogChoice","Default":null}],"Name":"SignalDialogChoiceSelected","tags":["RobloxScriptSecurity"],"Class":"Dialog","type":"Function"},{"Arguments":[{"Name":"player","Type":"Instance"},{"Name":"dialogChoice","Type":"Instance"}],"Name":"DialogChoiceSelected","tags":[],"Class":"Dialog","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"DialogChoice","tags":[]},{"ValueType":"string","type":"Property","Name":"GoodbyeDialog","tags":[],"Class":"DialogChoice"},{"ValueType":"string","type":"Property","Name":"ResponseDialog","tags":[],"Class":"DialogChoice"},{"ValueType":"string","type":"Property","Name":"UserDialog","tags":[],"Class":"DialogChoice"},{"Superclass":"Instance","type":"Class","Name":"DoubleConstrainedValue","tags":[]},{"ValueType":"double","type":"Property","Name":"ConstrainedValue","tags":["hidden"],"Class":"DoubleConstrainedValue"},{"ValueType":"double","type":"Property","Name":"MaxValue","tags":[],"Class":"DoubleConstrainedValue"},{"ValueType":"double","type":"Property","Name":"MinValue","tags":[],"Class":"DoubleConstrainedValue"},{"ValueType":"double","type":"Property","Name":"Value","tags":[],"Class":"DoubleConstrainedValue"},{"Arguments":[{"Name":"value","Type":"double"}],"Name":"Changed","tags":[],"Class":"DoubleConstrainedValue","type":"Event"},{"Arguments":[{"Name":"value","Type":"double"}],"Name":"changed","tags":["deprecated"],"Class":"DoubleConstrainedValue","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"Dragger","tags":[]},{"ReturnType":"void","Arguments":[{"Type":"Axis","Name":"axis","Default":"X"}],"Name":"AxisRotate","tags":[],"Class":"Dragger","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"mousePart","Default":null},{"Type":"Vector3","Name":"pointOnMousePart","Default":null},{"Type":"Objects","Name":"parts","Default":null}],"Name":"MouseDown","tags":[],"Class":"Dragger","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Ray","Name":"mouseRay","Default":null}],"Name":"MouseMove","tags":[],"Class":"Dragger","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"MouseUp","tags":[],"Class":"Dragger","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"Explosion","tags":[]},{"ValueType":"float","type":"Property","Name":"BlastPressure","tags":[],"Class":"Explosion"},{"ValueType":"float","type":"Property","Name":"BlastRadius","tags":[],"Class":"Explosion"},{"ValueType":"float","type":"Property","Name":"DestroyJointRadiusPercent","tags":[],"Class":"Explosion"},{"ValueType":"ExplosionType","type":"Property","Name":"ExplosionType","tags":[],"Class":"Explosion"},{"ValueType":"Vector3","type":"Property","Name":"Position","tags":[],"Class":"Explosion"},{"Arguments":[{"Name":"part","Type":"Instance"},{"Name":"distance","Type":"float"}],"Name":"Hit","tags":[],"Class":"Explosion","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"FaceInstance","tags":["notbrowsable"]},{"ValueType":"NormalId","type":"Property","Name":"Face","tags":[],"Class":"FaceInstance"},{"Superclass":"FaceInstance","type":"Class","Name":"Decal","tags":[]},{"ValueType":"float","type":"Property","Name":"LocalTransparencyModifier","tags":["hidden"],"Class":"Decal"},{"ValueType":"float","type":"Property","Name":"Shiny","tags":["deprecated"],"Class":"Decal"},{"ValueType":"float","type":"Property","Name":"Specular","tags":["deprecated"],"Class":"Decal"},{"ValueType":"Content","type":"Property","Name":"Texture","tags":[],"Class":"Decal"},{"ValueType":"float","type":"Property","Name":"Transparency","tags":[],"Class":"Decal"},{"Superclass":"Decal","type":"Class","Name":"Texture","tags":[]},{"ValueType":"float","type":"Property","Name":"StudsPerTileU","tags":[],"Class":"Texture"},{"ValueType":"float","type":"Property","Name":"StudsPerTileV","tags":[],"Class":"Texture"},{"Superclass":"Instance","type":"Class","Name":"Feature","tags":[]},{"ValueType":"NormalId","type":"Property","Name":"FaceId","tags":[],"Class":"Feature"},{"ValueType":"InOut","type":"Property","Name":"InOut","tags":[],"Class":"Feature"},{"ValueType":"LeftRight","type":"Property","Name":"LeftRight","tags":[],"Class":"Feature"},{"ValueType":"TopBottom","type":"Property","Name":"TopBottom","tags":[],"Class":"Feature"},{"Superclass":"Feature","type":"Class","Name":"Hole","tags":["deprecated"]},{"Superclass":"Feature","type":"Class","Name":"MotorFeature","tags":["deprecated"]},{"Superclass":"Instance","type":"Class","Name":"Fire","tags":[]},{"ValueType":"Color3","type":"Property","Name":"Color","tags":[],"Class":"Fire"},{"ValueType":"bool","type":"Property","Name":"Enabled","tags":[],"Class":"Fire"},{"ValueType":"float","type":"Property","Name":"Heat","tags":[],"Class":"Fire"},{"ValueType":"Color3","type":"Property","Name":"SecondaryColor","tags":[],"Class":"Fire"},{"ValueType":"float","type":"Property","Name":"Size","tags":[],"Class":"Fire"},{"ValueType":"float","type":"Property","Name":"size","tags":["deprecated"],"Class":"Fire"},{"Superclass":"Instance","type":"Class","Name":"FlagStandService","tags":[]},{"Superclass":"Instance","type":"Class","Name":"FlyweightService","tags":[]},{"Superclass":"FlyweightService","type":"Class","Name":"CSGDictionaryService","tags":[]},{"Superclass":"FlyweightService","type":"Class","Name":"NonReplicatedCSGDictionaryService","tags":[]},{"Superclass":"Instance","type":"Class","Name":"Folder","tags":[]},{"Superclass":"Instance","type":"Class","Name":"ForceField","tags":[]},{"Superclass":"Instance","type":"Class","Name":"FriendService","tags":["notCreatable"]},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"url","Default":null}],"Name":"SetBreakFriendUrl","tags":["LocalUserSecurity"],"Class":"FriendService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"url","Default":null}],"Name":"SetCreateFriendRequestUrl","tags":["LocalUserSecurity"],"Class":"FriendService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"url","Default":null}],"Name":"SetDeleteFriendRequestUrl","tags":["LocalUserSecurity"],"Class":"FriendService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"enable","Default":null}],"Name":"SetEnabled","tags":["LocalUserSecurity"],"Class":"FriendService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"url","Default":null}],"Name":"SetFriendsOnlineUrl","tags":["LocalUserSecurity"],"Class":"FriendService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"url","Default":null}],"Name":"SetGetFriendsUrl","tags":["LocalUserSecurity"],"Class":"FriendService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"url","Default":null}],"Name":"SetMakeFriendUrl","tags":["LocalUserSecurity"],"Class":"FriendService","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"FunctionalTest","tags":["deprecated"]},{"ValueType":"string","type":"Property","Name":"Description","tags":[],"Class":"FunctionalTest"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"message","Default":""}],"Name":"Error","tags":[],"Class":"FunctionalTest","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"message","Default":""}],"Name":"Failed","tags":[],"Class":"FunctionalTest","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"message","Default":""}],"Name":"Pass","tags":[],"Class":"FunctionalTest","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"message","Default":""}],"Name":"Passed","tags":[],"Class":"FunctionalTest","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"message","Default":""}],"Name":"Warn","tags":[],"Class":"FunctionalTest","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"GamePassService","tags":[]},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"playerHasPassUrl","Default":null}],"Name":"SetPlayerHasPassUrl","tags":["LocalUserSecurity"],"Class":"GamePassService","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"Instance","Name":"player","Default":null},{"Type":"int","Name":"gamePassId","Default":null}],"Name":"PlayerHasPass","tags":[],"Class":"GamePassService","type":"YieldFunction"},{"Superclass":"Instance","type":"Class","Name":"GameSettings","tags":["notbrowsable"]},{"ValueType":"float","type":"Property","Name":"BubbleChatLifetime","tags":[],"Class":"GameSettings"},{"ValueType":"int","type":"Property","Name":"BubbleChatMaxBubbles","tags":[],"Class":"GameSettings"},{"ValueType":"int","type":"Property","Name":"ChatHistory","tags":[],"Class":"GameSettings"},{"ValueType":"int","type":"Property","Name":"ChatScrollLength","tags":[],"Class":"GameSettings"},{"ValueType":"bool","type":"Property","Name":"CollisionSoundEnabled","tags":["deprecated"],"Class":"GameSettings"},{"ValueType":"float","type":"Property","Name":"CollisionSoundVolume","tags":["deprecated"],"Class":"GameSettings"},{"ValueType":"bool","type":"Property","Name":"HardwareMouse","tags":[],"Class":"GameSettings"},{"ValueType":"int","type":"Property","Name":"MaxCollisionSounds","tags":["deprecated"],"Class":"GameSettings"},{"ValueType":"int","type":"Property","Name":"ReportAbuseChatHistory","tags":[],"Class":"GameSettings"},{"ValueType":"bool","type":"Property","Name":"SoftwareSound","tags":[],"Class":"GameSettings"},{"ValueType":"bool","type":"Property","Name":"SoundEnabled","tags":[],"Class":"GameSettings"},{"ValueType":"bool","type":"Property","Name":"VideoCaptureEnabled","tags":[],"Class":"GameSettings"},{"ValueType":"VideoQualitySettings","type":"Property","Name":"VideoQuality","tags":[],"Class":"GameSettings"},{"Arguments":[{"Name":"recording","Type":"bool"}],"Name":"VideoRecordingChangeRequest","tags":["RobloxScriptSecurity"],"Class":"GameSettings","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"GamepadService","tags":[]},{"Superclass":"Instance","type":"Class","Name":"Geometry","tags":[]},{"Superclass":"Instance","type":"Class","Name":"GlobalDataStore","tags":[]},{"ReturnType":"Connection","Arguments":[{"Type":"string","Name":"key","Default":null},{"Type":"Function","Name":"callback","Default":null}],"Name":"OnUpdate","tags":[],"Class":"GlobalDataStore","type":"Function"},{"ReturnType":"Variant","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"GetAsync","tags":[],"Class":"GlobalDataStore","type":"YieldFunction"},{"ReturnType":"Variant","Arguments":[{"Type":"string","Name":"key","Default":null},{"Type":"int","Name":"delta","Default":"1"}],"Name":"IncrementAsync","tags":[],"Class":"GlobalDataStore","type":"YieldFunction"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null},{"Type":"Variant","Name":"value","Default":null}],"Name":"SetAsync","tags":[],"Class":"GlobalDataStore","type":"YieldFunction"},{"ReturnType":"Tuple","Arguments":[{"Type":"string","Name":"key","Default":null},{"Type":"Function","Name":"transformFunction","Default":null}],"Name":"UpdateAsync","tags":[],"Class":"GlobalDataStore","type":"YieldFunction"},{"Superclass":"GlobalDataStore","type":"Class","Name":"OrderedDataStore","tags":[]},{"ReturnType":"Instance","Arguments":[{"Type":"bool","Name":"ascending","Default":null},{"Type":"int","Name":"pagesize","Default":null},{"Type":"Variant","Name":"minValue","Default":null},{"Type":"Variant","Name":"maxValue","Default":null}],"Name":"GetSortedAsync","tags":[],"Class":"OrderedDataStore","type":"YieldFunction"},{"Superclass":"Instance","type":"Class","Name":"GroupService","tags":["notCreatable"]},{"ReturnType":"Instance","Arguments":[{"Type":"int","Name":"groupId","Default":null}],"Name":"GetAlliesAsync","tags":[],"Class":"GroupService","type":"YieldFunction"},{"ReturnType":"Instance","Arguments":[{"Type":"int","Name":"groupId","Default":null}],"Name":"GetEnemiesAsync","tags":[],"Class":"GroupService","type":"YieldFunction"},{"ReturnType":"Variant","Arguments":[{"Type":"int","Name":"groupId","Default":null}],"Name":"GetGroupInfoAsync","tags":[],"Class":"GroupService","type":"YieldFunction"},{"ReturnType":"Array","Arguments":[{"Type":"int","Name":"userId","Default":null}],"Name":"GetGroupsAsync","tags":[],"Class":"GroupService","type":"YieldFunction"},{"Superclass":"Instance","type":"Class","Name":"GuiBase","tags":[]},{"Superclass":"GuiBase","type":"Class","Name":"GuiBase2d","tags":["notbrowsable"]},{"ValueType":"Vector2","type":"Property","Name":"AbsolutePosition","tags":["readonly"],"Class":"GuiBase2d"},{"ValueType":"Vector2","type":"Property","Name":"AbsoluteSize","tags":["readonly"],"Class":"GuiBase2d"},{"Superclass":"GuiBase2d","type":"Class","Name":"GuiObject","tags":["notbrowsable"]},{"ValueType":"bool","type":"Property","Name":"Active","tags":[],"Class":"GuiObject"},{"ValueType":"BrickColor","type":"Property","Name":"BackgroundColor","tags":["deprecated","hidden"],"Class":"GuiObject"},{"ValueType":"Color3","type":"Property","Name":"BackgroundColor3","tags":[],"Class":"GuiObject"},{"ValueType":"float","type":"Property","Name":"BackgroundTransparency","tags":[],"Class":"GuiObject"},{"ValueType":"BrickColor","type":"Property","Name":"BorderColor","tags":["deprecated","hidden"],"Class":"GuiObject"},{"ValueType":"Color3","type":"Property","Name":"BorderColor3","tags":[],"Class":"GuiObject"},{"ValueType":"int","type":"Property","Name":"BorderSizePixel","tags":[],"Class":"GuiObject"},{"ValueType":"bool","type":"Property","Name":"ClipsDescendants","tags":[],"Class":"GuiObject"},{"ValueType":"bool","type":"Property","Name":"Draggable","tags":[],"Class":"GuiObject"},{"ValueType":"Object","type":"Property","Name":"NextSelectionDown","tags":[],"Class":"GuiObject"},{"ValueType":"Object","type":"Property","Name":"NextSelectionLeft","tags":[],"Class":"GuiObject"},{"ValueType":"Object","type":"Property","Name":"NextSelectionRight","tags":[],"Class":"GuiObject"},{"ValueType":"Object","type":"Property","Name":"NextSelectionUp","tags":[],"Class":"GuiObject"},{"ValueType":"UDim2","type":"Property","Name":"Position","tags":[],"Class":"GuiObject"},{"ValueType":"float","type":"Property","Name":"Rotation","tags":[],"Class":"GuiObject"},{"ValueType":"bool","type":"Property","Name":"Selectable","tags":[],"Class":"GuiObject"},{"ValueType":"Object","type":"Property","Name":"SelectionImageObject","tags":[],"Class":"GuiObject"},{"ValueType":"UDim2","type":"Property","Name":"Size","tags":[],"Class":"GuiObject"},{"ValueType":"SizeConstraint","type":"Property","Name":"SizeConstraint","tags":[],"Class":"GuiObject"},{"ValueType":"float","type":"Property","Name":"Transparency","tags":["hidden"],"Class":"GuiObject"},{"ValueType":"bool","type":"Property","Name":"Visible","tags":[],"Class":"GuiObject"},{"ValueType":"int","type":"Property","Name":"ZIndex","tags":[],"Class":"GuiObject"},{"ReturnType":"bool","Arguments":[{"Type":"UDim2","Name":"endPosition","Default":null},{"Type":"EasingDirection","Name":"easingDirection","Default":"Out"},{"Type":"EasingStyle","Name":"easingStyle","Default":"Quad"},{"Type":"float","Name":"time","Default":"1"},{"Type":"bool","Name":"override","Default":"false"},{"Type":"Function","Name":"callback","Default":"nil"}],"Name":"TweenPosition","tags":[],"Class":"GuiObject","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"UDim2","Name":"endSize","Default":null},{"Type":"EasingDirection","Name":"easingDirection","Default":"Out"},{"Type":"EasingStyle","Name":"easingStyle","Default":"Quad"},{"Type":"float","Name":"time","Default":"1"},{"Type":"bool","Name":"override","Default":"false"},{"Type":"Function","Name":"callback","Default":"nil"}],"Name":"TweenSize","tags":[],"Class":"GuiObject","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"UDim2","Name":"endSize","Default":null},{"Type":"UDim2","Name":"endPosition","Default":null},{"Type":"EasingDirection","Name":"easingDirection","Default":"Out"},{"Type":"EasingStyle","Name":"easingStyle","Default":"Quad"},{"Type":"float","Name":"time","Default":"1"},{"Type":"bool","Name":"override","Default":"false"},{"Type":"Function","Name":"callback","Default":"nil"}],"Name":"TweenSizeAndPosition","tags":[],"Class":"GuiObject","type":"Function"},{"Arguments":[{"Name":"initialPosition","Type":"UDim2"}],"Name":"DragBegin","tags":[],"Class":"GuiObject","type":"Event"},{"Arguments":[{"Name":"x","Type":"int"},{"Name":"y","Type":"int"}],"Name":"DragStopped","tags":[],"Class":"GuiObject","type":"Event"},{"Arguments":[{"Name":"input","Type":"Instance"}],"Name":"InputBegan","tags":[],"Class":"GuiObject","type":"Event"},{"Arguments":[{"Name":"input","Type":"Instance"}],"Name":"InputChanged","tags":[],"Class":"GuiObject","type":"Event"},{"Arguments":[{"Name":"input","Type":"Instance"}],"Name":"InputEnded","tags":[],"Class":"GuiObject","type":"Event"},{"Arguments":[{"Name":"x","Type":"int"},{"Name":"y","Type":"int"}],"Name":"MouseEnter","tags":[],"Class":"GuiObject","type":"Event"},{"Arguments":[{"Name":"x","Type":"int"},{"Name":"y","Type":"int"}],"Name":"MouseLeave","tags":[],"Class":"GuiObject","type":"Event"},{"Arguments":[{"Name":"x","Type":"int"},{"Name":"y","Type":"int"}],"Name":"MouseMoved","tags":[],"Class":"GuiObject","type":"Event"},{"Arguments":[{"Name":"x","Type":"int"},{"Name":"y","Type":"int"}],"Name":"MouseWheelBackward","tags":[],"Class":"GuiObject","type":"Event"},{"Arguments":[{"Name":"x","Type":"int"},{"Name":"y","Type":"int"}],"Name":"MouseWheelForward","tags":[],"Class":"GuiObject","type":"Event"},{"Arguments":[],"Name":"SelectionGained","tags":[],"Class":"GuiObject","type":"Event"},{"Arguments":[],"Name":"SelectionLost","tags":[],"Class":"GuiObject","type":"Event"},{"Arguments":[{"Name":"touchPositions","Type":"Array"},{"Name":"state","Type":"UserInputState"}],"Name":"TouchLongPress","tags":[],"Class":"GuiObject","type":"Event"},{"Arguments":[{"Name":"touchPositions","Type":"Array"},{"Name":"totalTranslation","Type":"Vector2"},{"Name":"velocity","Type":"Vector2"},{"Name":"state","Type":"UserInputState"}],"Name":"TouchPan","tags":[],"Class":"GuiObject","type":"Event"},{"Arguments":[{"Name":"touchPositions","Type":"Array"},{"Name":"scale","Type":"float"},{"Name":"velocity","Type":"float"},{"Name":"state","Type":"UserInputState"}],"Name":"TouchPinch","tags":[],"Class":"GuiObject","type":"Event"},{"Arguments":[{"Name":"touchPositions","Type":"Array"},{"Name":"rotation","Type":"float"},{"Name":"velocity","Type":"float"},{"Name":"state","Type":"UserInputState"}],"Name":"TouchRotate","tags":[],"Class":"GuiObject","type":"Event"},{"Arguments":[{"Name":"swipeDirection","Type":"SwipeDirection"},{"Name":"numberOfTouches","Type":"int"}],"Name":"TouchSwipe","tags":[],"Class":"GuiObject","type":"Event"},{"Arguments":[{"Name":"touchPositions","Type":"Array"}],"Name":"TouchTap","tags":[],"Class":"GuiObject","type":"Event"},{"Superclass":"GuiObject","type":"Class","Name":"Frame","tags":[]},{"ValueType":"FrameStyle","type":"Property","Name":"Style","tags":[],"Class":"Frame"},{"Superclass":"GuiObject","type":"Class","Name":"GuiButton","tags":["notbrowsable"]},{"ValueType":"bool","type":"Property","Name":"AutoButtonColor","tags":[],"Class":"GuiButton"},{"ValueType":"bool","type":"Property","Name":"Modal","tags":[],"Class":"GuiButton"},{"ValueType":"bool","type":"Property","Name":"Selected","tags":[],"Class":"GuiButton"},{"ValueType":"ButtonStyle","type":"Property","Name":"Style","tags":[],"Class":"GuiButton"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"verb","Default":null}],"Name":"SetVerb","tags":["RobloxScriptSecurity"],"Class":"GuiButton","type":"Function"},{"Arguments":[],"Name":"MouseButton1Click","tags":[],"Class":"GuiButton","type":"Event"},{"Arguments":[{"Name":"x","Type":"int"},{"Name":"y","Type":"int"}],"Name":"MouseButton1Down","tags":[],"Class":"GuiButton","type":"Event"},{"Arguments":[{"Name":"x","Type":"int"},{"Name":"y","Type":"int"}],"Name":"MouseButton1Up","tags":[],"Class":"GuiButton","type":"Event"},{"Arguments":[],"Name":"MouseButton2Click","tags":[],"Class":"GuiButton","type":"Event"},{"Arguments":[{"Name":"x","Type":"int"},{"Name":"y","Type":"int"}],"Name":"MouseButton2Down","tags":[],"Class":"GuiButton","type":"Event"},{"Arguments":[{"Name":"x","Type":"int"},{"Name":"y","Type":"int"}],"Name":"MouseButton2Up","tags":[],"Class":"GuiButton","type":"Event"},{"Superclass":"GuiButton","type":"Class","Name":"ImageButton","tags":[]},{"ValueType":"Content","type":"Property","Name":"Image","tags":[],"Class":"ImageButton"},{"ValueType":"Color3","type":"Property","Name":"ImageColor3","tags":[],"Class":"ImageButton"},{"ValueType":"Vector2","type":"Property","Name":"ImageRectOffset","tags":[],"Class":"ImageButton"},{"ValueType":"Vector2","type":"Property","Name":"ImageRectSize","tags":[],"Class":"ImageButton"},{"ValueType":"float","type":"Property","Name":"ImageTransparency","tags":[],"Class":"ImageButton"},{"ValueType":"ScaleType","type":"Property","Name":"ScaleType","tags":[],"Class":"ImageButton"},{"ValueType":"Rect2D","type":"Property","Name":"SliceCenter","tags":[],"Class":"ImageButton"},{"Superclass":"GuiButton","type":"Class","Name":"TextButton","tags":[]},{"ValueType":"Font","type":"Property","Name":"Font","tags":[],"Class":"TextButton"},{"ValueType":"FontSize","type":"Property","Name":"FontSize","tags":[],"Class":"TextButton"},{"ValueType":"string","type":"Property","Name":"Text","tags":[],"Class":"TextButton"},{"ValueType":"Vector2","type":"Property","Name":"TextBounds","tags":["readonly"],"Class":"TextButton"},{"ValueType":"BrickColor","type":"Property","Name":"TextColor","tags":["deprecated","hidden"],"Class":"TextButton"},{"ValueType":"Color3","type":"Property","Name":"TextColor3","tags":[],"Class":"TextButton"},{"ValueType":"bool","type":"Property","Name":"TextFits","tags":["readonly"],"Class":"TextButton"},{"ValueType":"bool","type":"Property","Name":"TextScaled","tags":[],"Class":"TextButton"},{"ValueType":"Color3","type":"Property","Name":"TextStrokeColor3","tags":[],"Class":"TextButton"},{"ValueType":"float","type":"Property","Name":"TextStrokeTransparency","tags":[],"Class":"TextButton"},{"ValueType":"float","type":"Property","Name":"TextTransparency","tags":[],"Class":"TextButton"},{"ValueType":"bool","type":"Property","Name":"TextWrap","tags":["deprecated"],"Class":"TextButton"},{"ValueType":"bool","type":"Property","Name":"TextWrapped","tags":[],"Class":"TextButton"},{"ValueType":"TextXAlignment","type":"Property","Name":"TextXAlignment","tags":[],"Class":"TextButton"},{"ValueType":"TextYAlignment","type":"Property","Name":"TextYAlignment","tags":[],"Class":"TextButton"},{"Superclass":"GuiObject","type":"Class","Name":"GuiLabel","tags":[]},{"Superclass":"GuiLabel","type":"Class","Name":"ImageLabel","tags":[]},{"ValueType":"Content","type":"Property","Name":"Image","tags":[],"Class":"ImageLabel"},{"ValueType":"Color3","type":"Property","Name":"ImageColor3","tags":[],"Class":"ImageLabel"},{"ValueType":"Vector2","type":"Property","Name":"ImageRectOffset","tags":[],"Class":"ImageLabel"},{"ValueType":"Vector2","type":"Property","Name":"ImageRectSize","tags":[],"Class":"ImageLabel"},{"ValueType":"float","type":"Property","Name":"ImageTransparency","tags":[],"Class":"ImageLabel"},{"ValueType":"ScaleType","type":"Property","Name":"ScaleType","tags":[],"Class":"ImageLabel"},{"ValueType":"Rect2D","type":"Property","Name":"SliceCenter","tags":[],"Class":"ImageLabel"},{"Superclass":"GuiLabel","type":"Class","Name":"TextLabel","tags":[]},{"ValueType":"Font","type":"Property","Name":"Font","tags":[],"Class":"TextLabel"},{"ValueType":"FontSize","type":"Property","Name":"FontSize","tags":[],"Class":"TextLabel"},{"ValueType":"string","type":"Property","Name":"Text","tags":[],"Class":"TextLabel"},{"ValueType":"Vector2","type":"Property","Name":"TextBounds","tags":["readonly"],"Class":"TextLabel"},{"ValueType":"BrickColor","type":"Property","Name":"TextColor","tags":["deprecated","hidden"],"Class":"TextLabel"},{"ValueType":"Color3","type":"Property","Name":"TextColor3","tags":[],"Class":"TextLabel"},{"ValueType":"bool","type":"Property","Name":"TextFits","tags":["readonly"],"Class":"TextLabel"},{"ValueType":"bool","type":"Property","Name":"TextScaled","tags":[],"Class":"TextLabel"},{"ValueType":"Color3","type":"Property","Name":"TextStrokeColor3","tags":[],"Class":"TextLabel"},{"ValueType":"float","type":"Property","Name":"TextStrokeTransparency","tags":[],"Class":"TextLabel"},{"ValueType":"float","type":"Property","Name":"TextTransparency","tags":[],"Class":"TextLabel"},{"ValueType":"bool","type":"Property","Name":"TextWrap","tags":["deprecated"],"Class":"TextLabel"},{"ValueType":"bool","type":"Property","Name":"TextWrapped","tags":[],"Class":"TextLabel"},{"ValueType":"TextXAlignment","type":"Property","Name":"TextXAlignment","tags":[],"Class":"TextLabel"},{"ValueType":"TextYAlignment","type":"Property","Name":"TextYAlignment","tags":[],"Class":"TextLabel"},{"Superclass":"GuiObject","type":"Class","Name":"Scale9Frame","tags":[]},{"ValueType":"Vector2int16","type":"Property","Name":"ScaleEdgeSize","tags":[],"Class":"Scale9Frame"},{"ValueType":"string","type":"Property","Name":"SlicePrefix","tags":[],"Class":"Scale9Frame"},{"Superclass":"GuiObject","type":"Class","Name":"ScrollingFrame","tags":[]},{"ValueType":"Vector2","type":"Property","Name":"AbsoluteWindowSize","tags":["readonly"],"Class":"ScrollingFrame"},{"ValueType":"Content","type":"Property","Name":"BottomImage","tags":[],"Class":"ScrollingFrame"},{"ValueType":"Vector2","type":"Property","Name":"CanvasPosition","tags":[],"Class":"ScrollingFrame"},{"ValueType":"UDim2","type":"Property","Name":"CanvasSize","tags":[],"Class":"ScrollingFrame"},{"ValueType":"Content","type":"Property","Name":"MidImage","tags":[],"Class":"ScrollingFrame"},{"ValueType":"int","type":"Property","Name":"ScrollBarThickness","tags":[],"Class":"ScrollingFrame"},{"ValueType":"bool","type":"Property","Name":"ScrollingEnabled","tags":[],"Class":"ScrollingFrame"},{"ValueType":"Content","type":"Property","Name":"TopImage","tags":[],"Class":"ScrollingFrame"},{"Superclass":"GuiObject","type":"Class","Name":"TextBox","tags":[]},{"ValueType":"bool","type":"Property","Name":"ClearTextOnFocus","tags":[],"Class":"TextBox"},{"ValueType":"Font","type":"Property","Name":"Font","tags":[],"Class":"TextBox"},{"ValueType":"FontSize","type":"Property","Name":"FontSize","tags":[],"Class":"TextBox"},{"ValueType":"bool","type":"Property","Name":"MultiLine","tags":[],"Class":"TextBox"},{"ValueType":"string","type":"Property","Name":"Text","tags":[],"Class":"TextBox"},{"ValueType":"Vector2","type":"Property","Name":"TextBounds","tags":["readonly"],"Class":"TextBox"},{"ValueType":"BrickColor","type":"Property","Name":"TextColor","tags":["deprecated","hidden"],"Class":"TextBox"},{"ValueType":"Color3","type":"Property","Name":"TextColor3","tags":[],"Class":"TextBox"},{"ValueType":"bool","type":"Property","Name":"TextFits","tags":["readonly"],"Class":"TextBox"},{"ValueType":"bool","type":"Property","Name":"TextScaled","tags":[],"Class":"TextBox"},{"ValueType":"Color3","type":"Property","Name":"TextStrokeColor3","tags":[],"Class":"TextBox"},{"ValueType":"float","type":"Property","Name":"TextStrokeTransparency","tags":[],"Class":"TextBox"},{"ValueType":"float","type":"Property","Name":"TextTransparency","tags":[],"Class":"TextBox"},{"ValueType":"bool","type":"Property","Name":"TextWrap","tags":["deprecated"],"Class":"TextBox"},{"ValueType":"bool","type":"Property","Name":"TextWrapped","tags":[],"Class":"TextBox"},{"ValueType":"TextXAlignment","type":"Property","Name":"TextXAlignment","tags":[],"Class":"TextBox"},{"ValueType":"TextYAlignment","type":"Property","Name":"TextYAlignment","tags":[],"Class":"TextBox"},{"ReturnType":"void","Arguments":[],"Name":"CaptureFocus","tags":[],"Class":"TextBox","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"IsFocused","tags":[],"Class":"TextBox","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"ReleaseFocus","tags":[],"Class":"TextBox","type":"Function"},{"Arguments":[{"Name":"enterPressed","Type":"bool"},{"Name":"inputThatCausedFocusLoss","Type":"Instance"}],"Name":"FocusLost","tags":[],"Class":"TextBox","type":"Event"},{"Arguments":[],"Name":"Focused","tags":[],"Class":"TextBox","type":"Event"},{"Superclass":"GuiBase2d","type":"Class","Name":"LayerCollector","tags":[]},{"Superclass":"LayerCollector","type":"Class","Name":"BillboardGui","tags":[]},{"ValueType":"bool","type":"Property","Name":"Active","tags":[],"Class":"BillboardGui"},{"ValueType":"Object","type":"Property","Name":"Adornee","tags":[],"Class":"BillboardGui"},{"ValueType":"bool","type":"Property","Name":"AlwaysOnTop","tags":[],"Class":"BillboardGui"},{"ValueType":"bool","type":"Property","Name":"Enabled","tags":[],"Class":"BillboardGui"},{"ValueType":"Vector3","type":"Property","Name":"ExtentsOffset","tags":[],"Class":"BillboardGui"},{"ValueType":"Object","type":"Property","Name":"PlayerToHideFrom","tags":[],"Class":"BillboardGui"},{"ValueType":"UDim2","type":"Property","Name":"Size","tags":[],"Class":"BillboardGui"},{"ValueType":"Vector2","type":"Property","Name":"SizeOffset","tags":[],"Class":"BillboardGui"},{"ValueType":"Vector3","type":"Property","Name":"StudsOffset","tags":[],"Class":"BillboardGui"},{"Superclass":"LayerCollector","type":"Class","Name":"ScreenGui","tags":[]},{"Superclass":"ScreenGui","type":"Class","Name":"GuiMain","tags":["deprecated"]},{"Superclass":"LayerCollector","type":"Class","Name":"SurfaceGui","tags":[]},{"ValueType":"bool","type":"Property","Name":"Active","tags":[],"Class":"SurfaceGui"},{"ValueType":"Object","type":"Property","Name":"Adornee","tags":[],"Class":"SurfaceGui"},{"ValueType":"bool","type":"Property","Name":"AlwaysOnTop","tags":[],"Class":"SurfaceGui"},{"ValueType":"Vector2","type":"Property","Name":"CanvasSize","tags":[],"Class":"SurfaceGui"},{"ValueType":"bool","type":"Property","Name":"Enabled","tags":[],"Class":"SurfaceGui"},{"ValueType":"NormalId","type":"Property","Name":"Face","tags":[],"Class":"SurfaceGui"},{"ValueType":"float","type":"Property","Name":"ToolPunchThroughDistance","tags":[],"Class":"SurfaceGui"},{"Superclass":"GuiBase","type":"Class","Name":"GuiBase3d","tags":[]},{"ValueType":"BrickColor","type":"Property","Name":"Color","tags":["deprecated","hidden"],"Class":"GuiBase3d"},{"ValueType":"Color3","type":"Property","Name":"Color3","tags":[],"Class":"GuiBase3d"},{"ValueType":"float","type":"Property","Name":"Transparency","tags":[],"Class":"GuiBase3d"},{"ValueType":"bool","type":"Property","Name":"Visible","tags":[],"Class":"GuiBase3d"},{"Superclass":"GuiBase3d","type":"Class","Name":"FloorWire","tags":["deprecated"]},{"ValueType":"float","type":"Property","Name":"CycleOffset","tags":[],"Class":"FloorWire"},{"ValueType":"Object","type":"Property","Name":"From","tags":[],"Class":"FloorWire"},{"ValueType":"float","type":"Property","Name":"StudsBetweenTextures","tags":[],"Class":"FloorWire"},{"ValueType":"Content","type":"Property","Name":"Texture","tags":[],"Class":"FloorWire"},{"ValueType":"Vector2","type":"Property","Name":"TextureSize","tags":[],"Class":"FloorWire"},{"ValueType":"Object","type":"Property","Name":"To","tags":[],"Class":"FloorWire"},{"ValueType":"float","type":"Property","Name":"Velocity","tags":[],"Class":"FloorWire"},{"ValueType":"float","type":"Property","Name":"WireRadius","tags":[],"Class":"FloorWire"},{"Superclass":"GuiBase3d","type":"Class","Name":"PVAdornment","tags":[]},{"ValueType":"Object","type":"Property","Name":"Adornee","tags":[],"Class":"PVAdornment"},{"Superclass":"PVAdornment","type":"Class","Name":"HandleAdornment","tags":[]},{"ValueType":"bool","type":"Property","Name":"AlwaysOnTop","tags":[],"Class":"HandleAdornment"},{"ValueType":"CoordinateFrame","type":"Property","Name":"CFrame","tags":[],"Class":"HandleAdornment"},{"ValueType":"Vector3","type":"Property","Name":"SizeRelativeOffset","tags":[],"Class":"HandleAdornment"},{"ValueType":"int","type":"Property","Name":"ZIndex","tags":[],"Class":"HandleAdornment"},{"Arguments":[],"Name":"MouseButton1Down","tags":[],"Class":"HandleAdornment","type":"Event"},{"Arguments":[],"Name":"MouseButton1Up","tags":[],"Class":"HandleAdornment","type":"Event"},{"Arguments":[],"Name":"MouseEnter","tags":[],"Class":"HandleAdornment","type":"Event"},{"Arguments":[],"Name":"MouseLeave","tags":[],"Class":"HandleAdornment","type":"Event"},{"Superclass":"HandleAdornment","type":"Class","Name":"BoxHandleAdornment","tags":[]},{"ValueType":"Vector3","type":"Property","Name":"Size","tags":[],"Class":"BoxHandleAdornment"},{"Superclass":"HandleAdornment","type":"Class","Name":"ConeHandleAdornment","tags":[]},{"ValueType":"float","type":"Property","Name":"Height","tags":[],"Class":"ConeHandleAdornment"},{"ValueType":"float","type":"Property","Name":"Radius","tags":[],"Class":"ConeHandleAdornment"},{"Superclass":"HandleAdornment","type":"Class","Name":"CylinderHandleAdornment","tags":[]},{"ValueType":"float","type":"Property","Name":"Height","tags":[],"Class":"CylinderHandleAdornment"},{"ValueType":"float","type":"Property","Name":"Radius","tags":[],"Class":"CylinderHandleAdornment"},{"Superclass":"HandleAdornment","type":"Class","Name":"ImageHandleAdornment","tags":[]},{"ValueType":"Content","type":"Property","Name":"Image","tags":[],"Class":"ImageHandleAdornment"},{"ValueType":"Vector2","type":"Property","Name":"Size","tags":[],"Class":"ImageHandleAdornment"},{"Superclass":"HandleAdornment","type":"Class","Name":"LineHandleAdornment","tags":[]},{"ValueType":"float","type":"Property","Name":"Length","tags":[],"Class":"LineHandleAdornment"},{"ValueType":"float","type":"Property","Name":"Thickness","tags":[],"Class":"LineHandleAdornment"},{"Superclass":"HandleAdornment","type":"Class","Name":"SphereHandleAdornment","tags":[]},{"ValueType":"float","type":"Property","Name":"Radius","tags":[],"Class":"SphereHandleAdornment"},{"Superclass":"PVAdornment","type":"Class","Name":"SelectionBox","tags":[]},{"ValueType":"float","type":"Property","Name":"LineThickness","tags":[],"Class":"SelectionBox"},{"ValueType":"BrickColor","type":"Property","Name":"SurfaceColor","tags":["deprecated","hidden"],"Class":"SelectionBox"},{"ValueType":"Color3","type":"Property","Name":"SurfaceColor3","tags":[],"Class":"SelectionBox"},{"ValueType":"float","type":"Property","Name":"SurfaceTransparency","tags":[],"Class":"SelectionBox"},{"Superclass":"PVAdornment","type":"Class","Name":"SelectionSphere","tags":[]},{"ValueType":"BrickColor","type":"Property","Name":"SurfaceColor","tags":["deprecated","hidden"],"Class":"SelectionSphere"},{"ValueType":"Color3","type":"Property","Name":"SurfaceColor3","tags":[],"Class":"SelectionSphere"},{"ValueType":"float","type":"Property","Name":"SurfaceTransparency","tags":[],"Class":"SelectionSphere"},{"Superclass":"GuiBase3d","type":"Class","Name":"PartAdornment","tags":[]},{"ValueType":"Object","type":"Property","Name":"Adornee","tags":[],"Class":"PartAdornment"},{"Superclass":"PartAdornment","type":"Class","Name":"HandlesBase","tags":[]},{"Superclass":"HandlesBase","type":"Class","Name":"ArcHandles","tags":[]},{"ValueType":"Axes","type":"Property","Name":"Axes","tags":[],"Class":"ArcHandles"},{"Arguments":[{"Name":"axis","Type":"Axis"}],"Name":"MouseButton1Down","tags":[],"Class":"ArcHandles","type":"Event"},{"Arguments":[{"Name":"axis","Type":"Axis"}],"Name":"MouseButton1Up","tags":[],"Class":"ArcHandles","type":"Event"},{"Arguments":[{"Name":"axis","Type":"Axis"},{"Name":"relativeAngle","Type":"float"},{"Name":"deltaRadius","Type":"float"}],"Name":"MouseDrag","tags":[],"Class":"ArcHandles","type":"Event"},{"Arguments":[{"Name":"axis","Type":"Axis"}],"Name":"MouseEnter","tags":[],"Class":"ArcHandles","type":"Event"},{"Arguments":[{"Name":"axis","Type":"Axis"}],"Name":"MouseLeave","tags":[],"Class":"ArcHandles","type":"Event"},{"Superclass":"HandlesBase","type":"Class","Name":"Handles","tags":[]},{"ValueType":"Faces","type":"Property","Name":"Faces","tags":[],"Class":"Handles"},{"ValueType":"HandlesStyle","type":"Property","Name":"Style","tags":[],"Class":"Handles"},{"Arguments":[{"Name":"face","Type":"NormalId"}],"Name":"MouseButton1Down","tags":[],"Class":"Handles","type":"Event"},{"Arguments":[{"Name":"face","Type":"NormalId"}],"Name":"MouseButton1Up","tags":[],"Class":"Handles","type":"Event"},{"Arguments":[{"Name":"face","Type":"NormalId"},{"Name":"distance","Type":"float"}],"Name":"MouseDrag","tags":[],"Class":"Handles","type":"Event"},{"Arguments":[{"Name":"face","Type":"NormalId"}],"Name":"MouseEnter","tags":[],"Class":"Handles","type":"Event"},{"Arguments":[{"Name":"face","Type":"NormalId"}],"Name":"MouseLeave","tags":[],"Class":"Handles","type":"Event"},{"Superclass":"PartAdornment","type":"Class","Name":"SurfaceSelection","tags":[]},{"ValueType":"NormalId","type":"Property","Name":"TargetSurface","tags":[],"Class":"SurfaceSelection"},{"Superclass":"GuiBase3d","type":"Class","Name":"SelectionLasso","tags":[]},{"ValueType":"Object","type":"Property","Name":"Humanoid","tags":[],"Class":"SelectionLasso"},{"Superclass":"SelectionLasso","type":"Class","Name":"SelectionPartLasso","tags":["deprecated"]},{"ValueType":"Object","type":"Property","Name":"Part","tags":[],"Class":"SelectionPartLasso"},{"Superclass":"SelectionLasso","type":"Class","Name":"SelectionPointLasso","tags":["deprecated"]},{"ValueType":"Vector3","type":"Property","Name":"Point","tags":[],"Class":"SelectionPointLasso"},{"Superclass":"GuiBase3d","type":"Class","Name":"TextureTrail","tags":["deprecated"]},{"ValueType":"float","type":"Property","Name":"CycleOffset","tags":["RobloxPlaceSecurity"],"Class":"TextureTrail"},{"ValueType":"Object","type":"Property","Name":"From","tags":["RobloxPlaceSecurity"],"Class":"TextureTrail"},{"ValueType":"float","type":"Property","Name":"StudsBetweenTextures","tags":["RobloxPlaceSecurity"],"Class":"TextureTrail"},{"ValueType":"Content","type":"Property","Name":"Texture","tags":["RobloxPlaceSecurity"],"Class":"TextureTrail"},{"ValueType":"Vector2","type":"Property","Name":"TextureSize","tags":["RobloxPlaceSecurity"],"Class":"TextureTrail"},{"ValueType":"Object","type":"Property","Name":"To","tags":["RobloxPlaceSecurity"],"Class":"TextureTrail"},{"ValueType":"float","type":"Property","Name":"Velocity","tags":["RobloxPlaceSecurity"],"Class":"TextureTrail"},{"Superclass":"Instance","type":"Class","Name":"GuiItem","tags":[]},{"Superclass":"GuiItem","type":"Class","Name":"Backpack","tags":[]},{"Superclass":"GuiItem","type":"Class","Name":"BackpackItem","tags":[]},{"ValueType":"Content","type":"Property","Name":"TextureId","tags":[],"Class":"BackpackItem"},{"Superclass":"BackpackItem","type":"Class","Name":"HopperBin","tags":["deprecated"]},{"ValueType":"bool","type":"Property","Name":"Active","tags":[],"Class":"HopperBin"},{"ValueType":"BinType","type":"Property","Name":"BinType","tags":[],"Class":"HopperBin"},{"ReturnType":"void","Arguments":[],"Name":"Disable","tags":["RobloxScriptSecurity"],"Class":"HopperBin","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"ToggleSelect","tags":["RobloxScriptSecurity"],"Class":"HopperBin","type":"Function"},{"Arguments":[],"Name":"Deselected","tags":[],"Class":"HopperBin","type":"Event"},{"Arguments":[{"Name":"mouse","Type":"Instance"}],"Name":"Selected","tags":[],"Class":"HopperBin","type":"Event"},{"Superclass":"BackpackItem","type":"Class","Name":"Tool","tags":[]},{"ValueType":"bool","type":"Property","Name":"CanBeDropped","tags":[],"Class":"Tool"},{"ValueType":"bool","type":"Property","Name":"Enabled","tags":[],"Class":"Tool"},{"ValueType":"CoordinateFrame","type":"Property","Name":"Grip","tags":[],"Class":"Tool"},{"ValueType":"Vector3","type":"Property","Name":"GripForward","tags":[],"Class":"Tool"},{"ValueType":"Vector3","type":"Property","Name":"GripPos","tags":[],"Class":"Tool"},{"ValueType":"Vector3","type":"Property","Name":"GripRight","tags":[],"Class":"Tool"},{"ValueType":"Vector3","type":"Property","Name":"GripUp","tags":[],"Class":"Tool"},{"ValueType":"bool","type":"Property","Name":"ManualActivationOnly","tags":[],"Class":"Tool"},{"ValueType":"bool","type":"Property","Name":"RequiresHandle","tags":[],"Class":"Tool"},{"ValueType":"string","type":"Property","Name":"ToolTip","tags":[],"Class":"Tool"},{"ReturnType":"void","Arguments":[],"Name":"Activate","tags":[],"Class":"Tool","type":"Function"},{"Arguments":[],"Name":"Activated","tags":[],"Class":"Tool","type":"Event"},{"Arguments":[],"Name":"Deactivated","tags":[],"Class":"Tool","type":"Event"},{"Arguments":[{"Name":"mouse","Type":"Instance"}],"Name":"Equipped","tags":[],"Class":"Tool","type":"Event"},{"Arguments":[],"Name":"Unequipped","tags":[],"Class":"Tool","type":"Event"},{"Superclass":"Tool","type":"Class","Name":"Flag","tags":["deprecated"]},{"ValueType":"BrickColor","type":"Property","Name":"TeamColor","tags":[],"Class":"Flag"},{"Superclass":"GuiItem","type":"Class","Name":"ButtonBindingWidget","tags":[]},{"Superclass":"GuiItem","type":"Class","Name":"GuiRoot","tags":["notCreatable"]},{"Superclass":"GuiItem","type":"Class","Name":"Hopper","tags":["deprecated"]},{"Superclass":"GuiItem","type":"Class","Name":"StarterPack","tags":[]},{"Superclass":"Instance","type":"Class","Name":"GuiService","tags":["notCreatable"]},{"ValueType":"bool","type":"Property","Name":"AutoSelectGuiEnabled","tags":[],"Class":"GuiService"},{"ValueType":"bool","type":"Property","Name":"CoreGuiNavigationEnabled","tags":[],"Class":"GuiService"},{"ValueType":"bool","type":"Property","Name":"GuiNavigationEnabled","tags":[],"Class":"GuiService"},{"ValueType":"bool","type":"Property","Name":"IsModalDialog","tags":["deprecated","readonly"],"Class":"GuiService"},{"ValueType":"bool","type":"Property","Name":"IsWindows","tags":["deprecated","readonly"],"Class":"GuiService"},{"ValueType":"bool","type":"Property","Name":"MenuIsOpen","tags":["readonly"],"Class":"GuiService"},{"ValueType":"bool","type":"Property","Name":"ScreenGuiEnabled","tags":["RobloxScriptSecurity"],"Class":"GuiService"},{"ValueType":"Object","type":"Property","Name":"SelectedCoreObject","tags":["RobloxScriptSecurity"],"Class":"GuiService"},{"ValueType":"Object","type":"Property","Name":"SelectedObject","tags":[],"Class":"GuiService"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"dialog","Default":null},{"Type":"CenterDialogType","Name":"centerDialogType","Default":null},{"Type":"Function","Name":"showFunction","Default":null},{"Type":"Function","Name":"hideFunction","Default":null}],"Name":"AddCenterDialog","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"AddKey","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"selectionName","Default":null},{"Type":"Instance","Name":"selectionParent","Default":null}],"Name":"AddSelectionParent","tags":[],"Class":"GuiService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"selectionName","Default":null},{"Type":"Tuple","Name":"selections","Default":null}],"Name":"AddSelectionTuple","tags":[],"Class":"GuiService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"SpecialKey","Name":"key","Default":null}],"Name":"AddSpecialKey","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"int","Arguments":[],"Name":"GetBrickCount","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"Vector3","Name":"position","Default":null}],"Name":"GetClosestDialogToPosition","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"string","Arguments":[],"Name":"GetErrorMessage","tags":["RobloxScriptSecurity","deprecated"],"Class":"GuiService","type":"Function"},{"ReturnType":"string","Arguments":[],"Name":"GetUiMessage","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"IsTenFootInterface","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"url","Default":null}],"Name":"OpenBrowserWindow","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"dialog","Default":null}],"Name":"RemoveCenterDialog","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"RemoveKey","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"selectionName","Default":null}],"Name":"RemoveSelectionGroup","tags":[],"Class":"GuiService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"SpecialKey","Name":"key","Default":null}],"Name":"RemoveSpecialKey","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"errorMessage","Default":null}],"Name":"SetErrorMessage","tags":["LocalUserSecurity","deprecated"],"Class":"GuiService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"x1","Default":null},{"Type":"int","Name":"y1","Default":null},{"Type":"int","Name":"x2","Default":null},{"Type":"int","Name":"y2","Default":null}],"Name":"SetGlobalGuiInset","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"open","Default":null}],"Name":"SetMenuIsOpen","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"UiMessageType","Name":"msgType","Default":null},{"Type":"string","Name":"uiMessage","Default":null}],"Name":"SetUiMessage","tags":["LocalUserSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"string","Name":"input","Default":null}],"Name":"ShowStatsBasedOnInputString","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"ToggleFullscreen","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"Vector2","Arguments":[],"Name":"GetScreenResolution","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"YieldFunction"},{"Arguments":[],"Name":"BrowserWindowClosed","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Event"},{"Arguments":[{"Name":"newErrorMessage","Type":"string"}],"Name":"ErrorMessageChanged","tags":["RobloxScriptSecurity","deprecated"],"Class":"GuiService","type":"Event"},{"Arguments":[],"Name":"EscapeKeyPressed","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Event"},{"Arguments":[{"Name":"key","Type":"string"},{"Name":"modifiers","Type":"string"}],"Name":"KeyPressed","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Event"},{"Arguments":[],"Name":"MenuClosed","tags":[],"Class":"GuiService","type":"Event"},{"Arguments":[],"Name":"MenuOpened","tags":[],"Class":"GuiService","type":"Event"},{"Arguments":[],"Name":"ShowLeaveConfirmation","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Event"},{"Arguments":[{"Name":"key","Type":"SpecialKey"},{"Name":"modifiers","Type":"string"}],"Name":"SpecialKeyPressed","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Event"},{"Arguments":[{"Name":"msgType","Type":"UiMessageType"},{"Name":"newUiMessage","Type":"string"}],"Name":"UiMessageChanged","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Event"},{"ReturnType":"void","Arguments":[{"Name":"title","Type":"string"},{"Name":"text","Type":"string"}],"Name":"SendCoreUiNotification","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Callback"},{"Superclass":"Instance","type":"Class","Name":"GuidRegistryService","tags":[]},{"Superclass":"Instance","type":"Class","Name":"HapticService","tags":["notCreatable"]},{"ReturnType":"Tuple","Arguments":[{"Type":"UserInputType","Name":"inputType","Default":null},{"Type":"VibrationMotor","Name":"vibrationMotor","Default":null}],"Name":"GetMotor","tags":[],"Class":"HapticService","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"UserInputType","Name":"inputType","Default":null},{"Type":"VibrationMotor","Name":"vibrationMotor","Default":null}],"Name":"IsMotorSupported","tags":[],"Class":"HapticService","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"UserInputType","Name":"inputType","Default":null}],"Name":"IsVibrationSupported","tags":[],"Class":"HapticService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"UserInputType","Name":"inputType","Default":null},{"Type":"VibrationMotor","Name":"vibrationMotor","Default":null},{"Type":"Tuple","Name":"vibrationValues","Default":null}],"Name":"SetMotor","tags":[],"Class":"HapticService","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"HttpRbxApiService","tags":["notCreatable"]},{"ReturnType":"string","Arguments":[{"Type":"string","Name":"apiUrlPath","Default":null},{"Type":"bool","Name":"useHttps","Default":"true"},{"Type":"ThrottlingPriority","Name":"priority","Default":"Default"}],"Name":"GetAsync","tags":["RobloxScriptSecurity"],"Class":"HttpRbxApiService","type":"YieldFunction"},{"ReturnType":"string","Arguments":[{"Type":"string","Name":"apiUrlPath","Default":null},{"Type":"string","Name":"data","Default":null},{"Type":"bool","Name":"useHttps","Default":"true"},{"Type":"ThrottlingPriority","Name":"priority","Default":"Default"},{"Type":"HttpContentType","Name":"content_type","Default":"ApplicationJson"}],"Name":"PostAsync","tags":["RobloxScriptSecurity"],"Class":"HttpRbxApiService","type":"YieldFunction"},{"Superclass":"Instance","type":"Class","Name":"HttpService","tags":["notCreatable"]},{"ValueType":"bool","type":"Property","Name":"HttpEnabled","tags":["LocalUserSecurity"],"Class":"HttpService"},{"ReturnType":"string","Arguments":[{"Type":"bool","Name":"wrapInCurlyBraces","Default":"true"}],"Name":"GenerateGUID","tags":[],"Class":"HttpService","type":"Function"},{"ReturnType":"Variant","Arguments":[{"Type":"string","Name":"input","Default":null}],"Name":"JSONDecode","tags":[],"Class":"HttpService","type":"Function"},{"ReturnType":"string","Arguments":[{"Type":"Variant","Name":"input","Default":null}],"Name":"JSONEncode","tags":[],"Class":"HttpService","type":"Function"},{"ReturnType":"string","Arguments":[{"Type":"string","Name":"input","Default":null}],"Name":"UrlEncode","tags":[],"Class":"HttpService","type":"Function"},{"ReturnType":"string","Arguments":[{"Type":"string","Name":"url","Default":null},{"Type":"bool","Name":"nocache","Default":"false"}],"Name":"GetAsync","tags":[],"Class":"HttpService","type":"YieldFunction"},{"ReturnType":"string","Arguments":[{"Type":"string","Name":"url","Default":null},{"Type":"string","Name":"data","Default":null},{"Type":"HttpContentType","Name":"content_type","Default":"ApplicationJson"},{"Type":"bool","Name":"compress","Default":"false"}],"Name":"PostAsync","tags":[],"Class":"HttpService","type":"YieldFunction"},{"Superclass":"Instance","type":"Class","Name":"Humanoid","tags":[]},{"ValueType":"bool","type":"Property","Name":"AutoJumpEnabled","tags":[],"Class":"Humanoid"},{"ValueType":"bool","type":"Property","Name":"AutoRotate","tags":[],"Class":"Humanoid"},{"ValueType":"Vector3","type":"Property","Name":"CameraOffset","tags":[],"Class":"Humanoid"},{"ValueType":"HumanoidDisplayDistanceType","type":"Property","Name":"DisplayDistanceType","tags":[],"Class":"Humanoid"},{"ValueType":"float","type":"Property","Name":"Health","tags":[],"Class":"Humanoid"},{"ValueType":"float","type":"Property","Name":"HealthDisplayDistance","tags":[],"Class":"Humanoid"},{"ValueType":"float","type":"Property","Name":"HipHeight","tags":[],"Class":"Humanoid"},{"ValueType":"bool","type":"Property","Name":"Jump","tags":[],"Class":"Humanoid"},{"ValueType":"float","type":"Property","Name":"JumpPower","tags":[],"Class":"Humanoid"},{"ValueType":"Object","type":"Property","Name":"LeftLeg","tags":[],"Class":"Humanoid"},{"ValueType":"float","type":"Property","Name":"MaxHealth","tags":[],"Class":"Humanoid"},{"ValueType":"float","type":"Property","Name":"MaxSlopeAngle","tags":[],"Class":"Humanoid"},{"ValueType":"Vector3","type":"Property","Name":"MoveDirection","tags":["readonly"],"Class":"Humanoid"},{"ValueType":"float","type":"Property","Name":"NameDisplayDistance","tags":[],"Class":"Humanoid"},{"ValueType":"NameOcclusion","type":"Property","Name":"NameOcclusion","tags":[],"Class":"Humanoid"},{"ValueType":"bool","type":"Property","Name":"PlatformStand","tags":[],"Class":"Humanoid"},{"ValueType":"HumanoidRigType","type":"Property","Name":"RigType","tags":[],"Class":"Humanoid"},{"ValueType":"Object","type":"Property","Name":"RightLeg","tags":[],"Class":"Humanoid"},{"ValueType":"Object","type":"Property","Name":"SeatPart","tags":["readonly"],"Class":"Humanoid"},{"ValueType":"bool","type":"Property","Name":"Sit","tags":[],"Class":"Humanoid"},{"ValueType":"Vector3","type":"Property","Name":"TargetPoint","tags":[],"Class":"Humanoid"},{"ValueType":"Object","type":"Property","Name":"Torso","tags":[],"Class":"Humanoid"},{"ValueType":"float","type":"Property","Name":"WalkSpeed","tags":[],"Class":"Humanoid"},{"ValueType":"Object","type":"Property","Name":"WalkToPart","tags":[],"Class":"Humanoid"},{"ValueType":"Vector3","type":"Property","Name":"WalkToPoint","tags":[],"Class":"Humanoid"},{"ValueType":"float","type":"Property","Name":"maxHealth","tags":["deprecated"],"Class":"Humanoid"},{"ReturnType":"bool","Arguments":[{"Type":"string","Name":"status","Default":null}],"Name":"AddCustomStatus","tags":["deprecated"],"Class":"Humanoid","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"Status","Name":"status","Default":"Poison"}],"Name":"AddStatus","tags":["deprecated"],"Class":"Humanoid","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"HumanoidStateType","Name":"state","Default":"None"}],"Name":"ChangeState","tags":[],"Class":"Humanoid","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"tool","Default":null}],"Name":"EquipTool","tags":[],"Class":"Humanoid","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetPlayingAnimationTracks","tags":[],"Class":"Humanoid","type":"Function"},{"ReturnType":"HumanoidStateType","Arguments":[],"Name":"GetState","tags":[],"Class":"Humanoid","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"HumanoidStateType","Name":"state","Default":null}],"Name":"GetStateEnabled","tags":[],"Class":"Humanoid","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetStatuses","tags":["deprecated"],"Class":"Humanoid","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"string","Name":"status","Default":null}],"Name":"HasCustomStatus","tags":["deprecated"],"Class":"Humanoid","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"Status","Name":"status","Default":"Poison"}],"Name":"HasStatus","tags":["deprecated"],"Class":"Humanoid","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"Instance","Name":"animation","Default":null}],"Name":"LoadAnimation","tags":[],"Class":"Humanoid","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector3","Name":"moveDirection","Default":null},{"Type":"bool","Name":"relativeToCamera","Default":"false"}],"Name":"Move","tags":[],"Class":"Humanoid","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector3","Name":"location","Default":null},{"Type":"Instance","Name":"part","Default":"nil"}],"Name":"MoveTo","tags":[],"Class":"Humanoid","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"string","Name":"status","Default":null}],"Name":"RemoveCustomStatus","tags":["deprecated"],"Class":"Humanoid","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"Status","Name":"status","Default":"Poison"}],"Name":"RemoveStatus","tags":["deprecated"],"Class":"Humanoid","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"enabled","Default":null}],"Name":"SetClickToWalkEnabled","tags":["RobloxScriptSecurity"],"Class":"Humanoid","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"HumanoidStateType","Name":"state","Default":null},{"Type":"bool","Name":"enabled","Default":null}],"Name":"SetStateEnabled","tags":[],"Class":"Humanoid","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"float","Name":"amount","Default":null}],"Name":"TakeDamage","tags":[],"Class":"Humanoid","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"UnequipTools","tags":[],"Class":"Humanoid","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"Instance","Name":"animation","Default":null}],"Name":"loadAnimation","tags":["deprecated"],"Class":"Humanoid","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"float","Name":"amount","Default":null}],"Name":"takeDamage","tags":["deprecated"],"Class":"Humanoid","type":"Function"},{"Arguments":[{"Name":"animationTrack","Type":"Instance"}],"Name":"AnimationPlayed","tags":[],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"speed","Type":"float"}],"Name":"Climbing","tags":[],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"status","Type":"string"}],"Name":"CustomStatusAdded","tags":["deprecated"],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"status","Type":"string"}],"Name":"CustomStatusRemoved","tags":["deprecated"],"Class":"Humanoid","type":"Event"},{"Arguments":[],"Name":"Died","tags":[],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"active","Type":"bool"}],"Name":"FallingDown","tags":[],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"active","Type":"bool"}],"Name":"FreeFalling","tags":[],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"active","Type":"bool"}],"Name":"GettingUp","tags":[],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"health","Type":"float"}],"Name":"HealthChanged","tags":[],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"active","Type":"bool"}],"Name":"Jumping","tags":[],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"reached","Type":"bool"}],"Name":"MoveToFinished","tags":[],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"active","Type":"bool"}],"Name":"PlatformStanding","tags":[],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"active","Type":"bool"}],"Name":"Ragdoll","tags":[],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"speed","Type":"float"}],"Name":"Running","tags":[],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"active","Type":"bool"},{"Name":"currentSeatPart","Type":"Instance"}],"Name":"Seated","tags":[],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"old","Type":"HumanoidStateType"},{"Name":"new","Type":"HumanoidStateType"}],"Name":"StateChanged","tags":[],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"state","Type":"HumanoidStateType"},{"Name":"isEnabled","Type":"bool"}],"Name":"StateEnabledChanged","tags":[],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"status","Type":"Status"}],"Name":"StatusAdded","tags":["deprecated"],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"status","Type":"Status"}],"Name":"StatusRemoved","tags":["deprecated"],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"active","Type":"bool"}],"Name":"Strafing","tags":[],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"speed","Type":"float"}],"Name":"Swimming","tags":[],"Class":"Humanoid","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"InputObject","tags":["notCreatable"]},{"ValueType":"Vector3","type":"Property","Name":"Delta","tags":[],"Class":"InputObject"},{"ValueType":"KeyCode","type":"Property","Name":"KeyCode","tags":[],"Class":"InputObject"},{"ValueType":"Vector3","type":"Property","Name":"Position","tags":[],"Class":"InputObject"},{"ValueType":"UserInputState","type":"Property","Name":"UserInputState","tags":[],"Class":"InputObject"},{"ValueType":"UserInputType","type":"Property","Name":"UserInputType","tags":[],"Class":"InputObject"},{"Superclass":"Instance","type":"Class","Name":"InsertService","tags":["notCreatable"]},{"ValueType":"bool","type":"Property","Name":"AllowInsertFreeModels","tags":[],"Class":"InsertService"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"assetId","Default":null}],"Name":"ApproveAssetId","tags":["deprecated"],"Class":"InsertService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"assetVersionId","Default":null}],"Name":"ApproveAssetVersionId","tags":["deprecated"],"Class":"InsertService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"instance","Default":null}],"Name":"Insert","tags":["deprecated"],"Class":"InsertService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"enable","Default":null},{"Type":"bool","Name":"user","Default":"false"}],"Name":"SetAdvancedResults","tags":["LocalUserSecurity"],"Class":"InsertService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"assetUrl","Default":null}],"Name":"SetAssetUrl","tags":["LocalUserSecurity"],"Class":"InsertService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"assetVersionUrl","Default":null}],"Name":"SetAssetVersionUrl","tags":["LocalUserSecurity"],"Class":"InsertService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"baseSetsUrl","Default":null}],"Name":"SetBaseCategoryUrl","tags":["LocalUserSecurity"],"Class":"InsertService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"baseSetsUrl","Default":null}],"Name":"SetBaseSetsUrl","tags":["LocalUserSecurity"],"Class":"InsertService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"collectionUrl","Default":null}],"Name":"SetCollectionUrl","tags":["LocalUserSecurity"],"Class":"InsertService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"freeDecalUrl","Default":null}],"Name":"SetFreeDecalUrl","tags":["LocalUserSecurity"],"Class":"InsertService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"freeModelUrl","Default":null}],"Name":"SetFreeModelUrl","tags":["LocalUserSecurity"],"Class":"InsertService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"float","Name":"trustLevel","Default":null}],"Name":"SetTrustLevel","tags":["LocalUserSecurity"],"Class":"InsertService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"userSetsUrl","Default":null}],"Name":"SetUserCategoryUrl","tags":["LocalUserSecurity"],"Class":"InsertService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"userSetsUrl","Default":null}],"Name":"SetUserSetsUrl","tags":["LocalUserSecurity"],"Class":"InsertService","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetBaseCategories","tags":["deprecated"],"Class":"InsertService","type":"YieldFunction"},{"ReturnType":"Array","Arguments":[],"Name":"GetBaseSets","tags":[],"Class":"InsertService","type":"YieldFunction"},{"ReturnType":"Array","Arguments":[{"Type":"int","Name":"categoryId","Default":null}],"Name":"GetCollection","tags":[],"Class":"InsertService","type":"YieldFunction"},{"ReturnType":"Array","Arguments":[{"Type":"string","Name":"searchText","Default":null},{"Type":"int","Name":"pageNum","Default":null}],"Name":"GetFreeDecals","tags":[],"Class":"InsertService","type":"YieldFunction"},{"ReturnType":"Array","Arguments":[{"Type":"string","Name":"searchText","Default":null},{"Type":"int","Name":"pageNum","Default":null}],"Name":"GetFreeModels","tags":[],"Class":"InsertService","type":"YieldFunction"},{"ReturnType":"int","Arguments":[{"Type":"int","Name":"assetId","Default":null}],"Name":"GetLatestAssetVersionAsync","tags":[],"Class":"InsertService","type":"YieldFunction"},{"ReturnType":"Array","Arguments":[{"Type":"int","Name":"userId","Default":null}],"Name":"GetUserCategories","tags":["deprecated"],"Class":"InsertService","type":"YieldFunction"},{"ReturnType":"Array","Arguments":[{"Type":"int","Name":"userId","Default":null}],"Name":"GetUserSets","tags":[],"Class":"InsertService","type":"YieldFunction"},{"ReturnType":"Instance","Arguments":[{"Type":"int","Name":"assetId","Default":null}],"Name":"LoadAsset","tags":[],"Class":"InsertService","type":"YieldFunction"},{"ReturnType":"Instance","Arguments":[{"Type":"int","Name":"assetVersionId","Default":null}],"Name":"LoadAssetVersion","tags":[],"Class":"InsertService","type":"YieldFunction"},{"ReturnType":"Instance","Arguments":[{"Type":"int","Name":"assetId","Default":null}],"Name":"loadAsset","tags":["deprecated"],"Class":"InsertService","type":"YieldFunction"},{"Superclass":"Instance","type":"Class","Name":"InstancePacketCache","tags":[]},{"Superclass":"Instance","type":"Class","Name":"IntConstrainedValue","tags":[]},{"ValueType":"int","type":"Property","Name":"ConstrainedValue","tags":["hidden"],"Class":"IntConstrainedValue"},{"ValueType":"int","type":"Property","Name":"MaxValue","tags":[],"Class":"IntConstrainedValue"},{"ValueType":"int","type":"Property","Name":"MinValue","tags":[],"Class":"IntConstrainedValue"},{"ValueType":"int","type":"Property","Name":"Value","tags":[],"Class":"IntConstrainedValue"},{"Arguments":[{"Name":"value","Type":"int"}],"Name":"Changed","tags":[],"Class":"IntConstrainedValue","type":"Event"},{"Arguments":[{"Name":"value","Type":"int"}],"Name":"changed","tags":["deprecated"],"Class":"IntConstrainedValue","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"IntValue","tags":[]},{"ValueType":"int","type":"Property","Name":"Value","tags":[],"Class":"IntValue"},{"Arguments":[{"Name":"value","Type":"int"}],"Name":"Changed","tags":[],"Class":"IntValue","type":"Event"},{"Arguments":[{"Name":"value","Type":"int"}],"Name":"changed","tags":["deprecated"],"Class":"IntValue","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"JointInstance","tags":[]},{"ValueType":"CoordinateFrame","type":"Property","Name":"C0","tags":[],"Class":"JointInstance"},{"ValueType":"CoordinateFrame","type":"Property","Name":"C1","tags":[],"Class":"JointInstance"},{"ValueType":"Object","type":"Property","Name":"Part0","tags":[],"Class":"JointInstance"},{"ValueType":"Object","type":"Property","Name":"Part1","tags":[],"Class":"JointInstance"},{"ValueType":"Object","type":"Property","Name":"part1","tags":["deprecated","hidden"],"Class":"JointInstance"},{"Superclass":"JointInstance","type":"Class","Name":"DynamicRotate","tags":[]},{"ValueType":"float","type":"Property","Name":"BaseAngle","tags":[],"Class":"DynamicRotate"},{"Superclass":"DynamicRotate","type":"Class","Name":"RotateP","tags":[]},{"Superclass":"DynamicRotate","type":"Class","Name":"RotateV","tags":[]},{"Superclass":"JointInstance","type":"Class","Name":"Glue","tags":[]},{"ValueType":"Vector3","type":"Property","Name":"F0","tags":[],"Class":"Glue"},{"ValueType":"Vector3","type":"Property","Name":"F1","tags":[],"Class":"Glue"},{"ValueType":"Vector3","type":"Property","Name":"F2","tags":[],"Class":"Glue"},{"ValueType":"Vector3","type":"Property","Name":"F3","tags":[],"Class":"Glue"},{"Superclass":"JointInstance","type":"Class","Name":"ManualSurfaceJointInstance","tags":[]},{"Superclass":"ManualSurfaceJointInstance","type":"Class","Name":"ManualGlue","tags":[]},{"Superclass":"ManualSurfaceJointInstance","type":"Class","Name":"ManualWeld","tags":[]},{"Superclass":"JointInstance","type":"Class","Name":"Motor","tags":[]},{"ValueType":"float","type":"Property","Name":"CurrentAngle","tags":[],"Class":"Motor"},{"ValueType":"float","type":"Property","Name":"DesiredAngle","tags":[],"Class":"Motor"},{"ValueType":"float","type":"Property","Name":"MaxVelocity","tags":[],"Class":"Motor"},{"ReturnType":"void","Arguments":[{"Type":"float","Name":"value","Default":null}],"Name":"SetDesiredAngle","tags":[],"Class":"Motor","type":"Function"},{"Superclass":"Motor","type":"Class","Name":"Motor6D","tags":[]},{"Superclass":"JointInstance","type":"Class","Name":"Rotate","tags":[]},{"Superclass":"JointInstance","type":"Class","Name":"Snap","tags":[]},{"Superclass":"JointInstance","type":"Class","Name":"VelocityMotor","tags":[]},{"ValueType":"float","type":"Property","Name":"CurrentAngle","tags":[],"Class":"VelocityMotor"},{"ValueType":"float","type":"Property","Name":"DesiredAngle","tags":[],"Class":"VelocityMotor"},{"ValueType":"Object","type":"Property","Name":"Hole","tags":[],"Class":"VelocityMotor"},{"ValueType":"float","type":"Property","Name":"MaxVelocity","tags":[],"Class":"VelocityMotor"},{"Superclass":"JointInstance","type":"Class","Name":"Weld","tags":[]},{"Superclass":"Instance","type":"Class","Name":"JointsService","tags":["notCreatable"]},{"ReturnType":"void","Arguments":[],"Name":"ClearJoinAfterMoveJoints","tags":[],"Class":"JointsService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"CreateJoinAfterMoveJoints","tags":[],"Class":"JointsService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"joinInstance","Default":null}],"Name":"SetJoinAfterMoveInstance","tags":[],"Class":"JointsService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"joinTarget","Default":null}],"Name":"SetJoinAfterMoveTarget","tags":[],"Class":"JointsService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"ShowPermissibleJoints","tags":[],"Class":"JointsService","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"Keyframe","tags":[]},{"ValueType":"float","type":"Property","Name":"Time","tags":[],"Class":"Keyframe"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"pose","Default":null}],"Name":"AddPose","tags":[],"Class":"Keyframe","type":"Function"},{"ReturnType":"Objects","Arguments":[],"Name":"GetPoses","tags":[],"Class":"Keyframe","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"pose","Default":null}],"Name":"RemovePose","tags":[],"Class":"Keyframe","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"KeyframeSequence","tags":[]},{"ValueType":"bool","type":"Property","Name":"Loop","tags":[],"Class":"KeyframeSequence"},{"ValueType":"AnimationPriority","type":"Property","Name":"Priority","tags":[],"Class":"KeyframeSequence"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"keyframe","Default":null}],"Name":"AddKeyframe","tags":[],"Class":"KeyframeSequence","type":"Function"},{"ReturnType":"Objects","Arguments":[],"Name":"GetKeyframes","tags":[],"Class":"KeyframeSequence","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"keyframe","Default":null}],"Name":"RemoveKeyframe","tags":[],"Class":"KeyframeSequence","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"KeyframeSequenceProvider","tags":[]},{"ReturnType":"Instance","Arguments":[{"Type":"Content","Name":"assetId","Default":null}],"Name":"GetKeyframeSequence","tags":[],"Class":"KeyframeSequenceProvider","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"int","Name":"assetId","Default":null},{"Type":"bool","Name":"useCache","Default":null}],"Name":"GetKeyframeSequenceById","tags":[],"Class":"KeyframeSequenceProvider","type":"Function"},{"ReturnType":"Content","Arguments":[{"Type":"Instance","Name":"keyframeSequence","Default":null}],"Name":"RegisterActiveKeyframeSequence","tags":[],"Class":"KeyframeSequenceProvider","type":"Function"},{"ReturnType":"Content","Arguments":[{"Type":"Instance","Name":"keyframeSequence","Default":null}],"Name":"RegisterKeyframeSequence","tags":[],"Class":"KeyframeSequenceProvider","type":"Function"},{"ReturnType":"Dictionary","Arguments":[{"Type":"int","Name":"userId","Default":null},{"Type":"int","Name":"page","Default":"1"}],"Name":"GetAnimations","tags":[],"Class":"KeyframeSequenceProvider","type":"YieldFunction"},{"Superclass":"Instance","type":"Class","Name":"Light","tags":[]},{"ValueType":"float","type":"Property","Name":"Brightness","tags":[],"Class":"Light"},{"ValueType":"Color3","type":"Property","Name":"Color","tags":[],"Class":"Light"},{"ValueType":"bool","type":"Property","Name":"Enabled","tags":[],"Class":"Light"},{"ValueType":"bool","type":"Property","Name":"Shadows","tags":[],"Class":"Light"},{"Superclass":"Light","type":"Class","Name":"PointLight","tags":[]},{"ValueType":"float","type":"Property","Name":"Range","tags":[],"Class":"PointLight"},{"Superclass":"Light","type":"Class","Name":"SpotLight","tags":[]},{"ValueType":"float","type":"Property","Name":"Angle","tags":[],"Class":"SpotLight"},{"ValueType":"NormalId","type":"Property","Name":"Face","tags":[],"Class":"SpotLight"},{"ValueType":"float","type":"Property","Name":"Range","tags":[],"Class":"SpotLight"},{"Superclass":"Light","type":"Class","Name":"SurfaceLight","tags":[]},{"ValueType":"float","type":"Property","Name":"Angle","tags":[],"Class":"SurfaceLight"},{"ValueType":"NormalId","type":"Property","Name":"Face","tags":[],"Class":"SurfaceLight"},{"ValueType":"float","type":"Property","Name":"Range","tags":[],"Class":"SurfaceLight"},{"Superclass":"Instance","type":"Class","Name":"Lighting","tags":["notCreatable"]},{"ValueType":"Color3","type":"Property","Name":"Ambient","tags":[],"Class":"Lighting"},{"ValueType":"float","type":"Property","Name":"Brightness","tags":[],"Class":"Lighting"},{"ValueType":"Color3","type":"Property","Name":"ColorShift_Bottom","tags":[],"Class":"Lighting"},{"ValueType":"Color3","type":"Property","Name":"ColorShift_Top","tags":[],"Class":"Lighting"},{"ValueType":"Color3","type":"Property","Name":"FogColor","tags":[],"Class":"Lighting"},{"ValueType":"float","type":"Property","Name":"FogEnd","tags":[],"Class":"Lighting"},{"ValueType":"float","type":"Property","Name":"FogStart","tags":[],"Class":"Lighting"},{"ValueType":"float","type":"Property","Name":"GeographicLatitude","tags":[],"Class":"Lighting"},{"ValueType":"bool","type":"Property","Name":"GlobalShadows","tags":[],"Class":"Lighting"},{"ValueType":"Color3","type":"Property","Name":"OutdoorAmbient","tags":[],"Class":"Lighting"},{"ValueType":"bool","type":"Property","Name":"Outlines","tags":[],"Class":"Lighting"},{"ValueType":"Color3","type":"Property","Name":"ShadowColor","tags":[],"Class":"Lighting"},{"ValueType":"string","type":"Property","Name":"TimeOfDay","tags":[],"Class":"Lighting"},{"ReturnType":"double","Arguments":[],"Name":"GetMinutesAfterMidnight","tags":[],"Class":"Lighting","type":"Function"},{"ReturnType":"Vector3","Arguments":[],"Name":"GetMoonDirection","tags":[],"Class":"Lighting","type":"Function"},{"ReturnType":"float","Arguments":[],"Name":"GetMoonPhase","tags":[],"Class":"Lighting","type":"Function"},{"ReturnType":"Vector3","Arguments":[],"Name":"GetSunDirection","tags":[],"Class":"Lighting","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"double","Name":"minutes","Default":null}],"Name":"SetMinutesAfterMidnight","tags":[],"Class":"Lighting","type":"Function"},{"ReturnType":"double","Arguments":[],"Name":"getMinutesAfterMidnight","tags":["deprecated"],"Class":"Lighting","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"double","Name":"minutes","Default":null}],"Name":"setMinutesAfterMidnight","tags":["deprecated"],"Class":"Lighting","type":"Function"},{"Arguments":[{"Name":"skyboxChanged","Type":"bool"}],"Name":"LightingChanged","tags":[],"Class":"Lighting","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"LocalWorkspace","tags":["notCreatable"]},{"Superclass":"Instance","type":"Class","Name":"LogService","tags":["notCreatable"]},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"source","Default":null}],"Name":"ExecuteScript","tags":["RobloxScriptSecurity"],"Class":"LogService","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetLogHistory","tags":[],"Class":"LogService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"RequestServerOutput","tags":["RobloxScriptSecurity"],"Class":"LogService","type":"Function"},{"Arguments":[{"Name":"message","Type":"string"},{"Name":"messageType","Type":"MessageType"}],"Name":"MessageOut","tags":[],"Class":"LogService","type":"Event"},{"Arguments":[{"Name":"message","Type":"string"},{"Name":"messageType","Type":"MessageType"},{"Name":"timestamp","Type":"int"}],"Name":"ServerMessageOut","tags":["RobloxScriptSecurity"],"Class":"LogService","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"LoginService","tags":[]},{"ReturnType":"void","Arguments":[],"Name":"Logout","tags":["RobloxSecurity"],"Class":"LoginService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"PromptLogin","tags":["RobloxSecurity"],"Class":"LoginService","type":"Function"},{"Arguments":[{"Name":"loginError","Type":"string"}],"Name":"LoginFailed","tags":["RobloxSecurity"],"Class":"LoginService","type":"Event"},{"Arguments":[{"Name":"username","Type":"string"}],"Name":"LoginSucceeded","tags":["RobloxSecurity"],"Class":"LoginService","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"LuaSettings","tags":[]},{"ValueType":"bool","type":"Property","Name":"AreScriptStartsReported","tags":[],"Class":"LuaSettings"},{"ValueType":"double","type":"Property","Name":"DefaultWaitTime","tags":[],"Class":"LuaSettings"},{"ValueType":"int","type":"Property","Name":"GcFrequency","tags":[],"Class":"LuaSettings"},{"ValueType":"int","type":"Property","Name":"GcLimit","tags":[],"Class":"LuaSettings"},{"ValueType":"int","type":"Property","Name":"GcPause","tags":[],"Class":"LuaSettings"},{"ValueType":"int","type":"Property","Name":"GcStepMul","tags":[],"Class":"LuaSettings"},{"ValueType":"float","type":"Property","Name":"WaitingThreadsBudget","tags":[],"Class":"LuaSettings"},{"Superclass":"Instance","type":"Class","Name":"LuaSourceContainer","tags":[]},{"Superclass":"LuaSourceContainer","type":"Class","Name":"BaseScript","tags":[]},{"ValueType":"bool","type":"Property","Name":"Disabled","tags":[],"Class":"BaseScript"},{"ValueType":"Content","type":"Property","Name":"LinkedSource","tags":[],"Class":"BaseScript"},{"Superclass":"BaseScript","type":"Class","Name":"CoreScript","tags":["notCreatable"]},{"Superclass":"BaseScript","type":"Class","Name":"Script","tags":[]},{"ValueType":"ProtectedString","type":"Property","Name":"Source","tags":["PluginSecurity"],"Class":"Script"},{"ReturnType":"string","Arguments":[],"Name":"GetHash","tags":["RobloxPlaceSecurity"],"Class":"Script","type":"Function"},{"Superclass":"Script","type":"Class","Name":"LocalScript","tags":[]},{"Superclass":"LuaSourceContainer","type":"Class","Name":"ModuleScript","tags":[]},{"ValueType":"Content","type":"Property","Name":"LinkedSource","tags":[],"Class":"ModuleScript"},{"ValueType":"ProtectedString","type":"Property","Name":"Source","tags":["PluginSecurity"],"Class":"ModuleScript"},{"Superclass":"Instance","type":"Class","Name":"LuaWebService","tags":[]},{"Superclass":"Instance","type":"Class","Name":"MarketplaceService","tags":["notCreatable"]},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"player","Default":null},{"Type":"string","Name":"productId","Default":null}],"Name":"PromptNativePurchase","tags":["RobloxScriptSecurity"],"Class":"MarketplaceService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"player","Default":null},{"Type":"int","Name":"productId","Default":null},{"Type":"bool","Name":"equipIfPurchased","Default":"true"},{"Type":"CurrencyType","Name":"currencyType","Default":"Default"}],"Name":"PromptProductPurchase","tags":[],"Class":"MarketplaceService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"player","Default":null},{"Type":"int","Name":"assetId","Default":null},{"Type":"bool","Name":"equipIfPurchased","Default":"true"},{"Type":"CurrencyType","Name":"currencyType","Default":"Default"}],"Name":"PromptPurchase","tags":[],"Class":"MarketplaceService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"player","Default":null},{"Type":"string","Name":"productId","Default":null}],"Name":"PromptThirdPartyPurchase","tags":["RobloxPlaceSecurity"],"Class":"MarketplaceService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"assetId","Default":null},{"Type":"int","Name":"robuxAmount","Default":null}],"Name":"ReportAssetSale","tags":["RobloxScriptSecurity"],"Class":"MarketplaceService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"ReportRobuxUpsellStarted","tags":["RobloxScriptSecurity"],"Class":"MarketplaceService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"ticket","Default":null},{"Type":"int","Name":"playerId","Default":null},{"Type":"int","Name":"productId","Default":null}],"Name":"SignalClientPurchaseSuccess","tags":["RobloxScriptSecurity"],"Class":"MarketplaceService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"userId","Default":null},{"Type":"int","Name":"productId","Default":null},{"Type":"bool","Name":"success","Default":null}],"Name":"SignalPromptProductPurchaseFinished","tags":["RobloxScriptSecurity"],"Class":"MarketplaceService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"player","Default":null},{"Type":"int","Name":"assetId","Default":null},{"Type":"bool","Name":"success","Default":null}],"Name":"SignalPromptPurchaseFinished","tags":["RobloxScriptSecurity"],"Class":"MarketplaceService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"value","Default":null}],"Name":"SignalServerLuaDialogClosed","tags":["RobloxScriptSecurity"],"Class":"MarketplaceService","type":"Function"},{"ReturnType":"Instance","Arguments":[],"Name":"GetDeveloperProductsAsync","tags":[],"Class":"MarketplaceService","type":"YieldFunction"},{"ReturnType":"Dictionary","Arguments":[{"Type":"int","Name":"assetId","Default":null},{"Type":"InfoType","Name":"infoType","Default":"Asset"}],"Name":"GetProductInfo","tags":[],"Class":"MarketplaceService","type":"YieldFunction"},{"ReturnType":"bool","Arguments":[{"Type":"Instance","Name":"player","Default":null},{"Type":"int","Name":"assetId","Default":null}],"Name":"PlayerOwnsAsset","tags":[],"Class":"MarketplaceService","type":"YieldFunction"},{"Arguments":[{"Name":"arguments","Type":"Tuple"}],"Name":"ClientLuaDialogRequested","tags":["RobloxScriptSecurity"],"Class":"MarketplaceService","type":"Event"},{"Arguments":[{"Name":"ticket","Type":"string"},{"Name":"playerId","Type":"int"},{"Name":"productId","Type":"int"}],"Name":"ClientPurchaseSuccess","tags":["RobloxScriptSecurity"],"Class":"MarketplaceService","type":"Event"},{"Arguments":[{"Name":"player","Type":"Instance"},{"Name":"productId","Type":"string"},{"Name":"wasPurchased","Type":"bool"}],"Name":"NativePurchaseFinished","tags":["RobloxScriptSecurity"],"Class":"MarketplaceService","type":"Event"},{"Arguments":[{"Name":"userId","Type":"int"},{"Name":"productId","Type":"int"},{"Name":"isPurchased","Type":"bool"}],"Name":"PromptProductPurchaseFinished","tags":["deprecated"],"Class":"MarketplaceService","type":"Event"},{"Arguments":[{"Name":"player","Type":"Instance"},{"Name":"productId","Type":"int"},{"Name":"equipIfPurchased","Type":"bool"},{"Name":"currencyType","Type":"CurrencyType"}],"Name":"PromptProductPurchaseRequested","tags":["RobloxScriptSecurity"],"Class":"MarketplaceService","type":"Event"},{"Arguments":[{"Name":"player","Type":"Instance"},{"Name":"assetId","Type":"int"},{"Name":"isPurchased","Type":"bool"}],"Name":"PromptPurchaseFinished","tags":[],"Class":"MarketplaceService","type":"Event"},{"Arguments":[{"Name":"player","Type":"Instance"},{"Name":"assetId","Type":"int"},{"Name":"equipIfPurchased","Type":"bool"},{"Name":"currencyType","Type":"CurrencyType"}],"Name":"PromptPurchaseRequested","tags":["RobloxScriptSecurity"],"Class":"MarketplaceService","type":"Event"},{"Arguments":[{"Name":"serverResponseTable","Type":"Dictionary"}],"Name":"ServerPurchaseVerification","tags":["RobloxScriptSecurity"],"Class":"MarketplaceService","type":"Event"},{"Arguments":[{"Name":"player","Type":"Instance"},{"Name":"productId","Type":"string"},{"Name":"receipt","Type":"string"},{"Name":"wasPurchased","Type":"bool"}],"Name":"ThirdPartyPurchaseFinished","tags":["RobloxPlaceSecurity"],"Class":"MarketplaceService","type":"Event"},{"ReturnType":"ProductPurchaseDecision","Arguments":[{"Name":"receiptInfo","Type":"Dictionary"}],"Name":"ProcessReceipt","tags":[],"Class":"MarketplaceService","type":"Callback"},{"Superclass":"Instance","type":"Class","Name":"Message","tags":["deprecated"]},{"ValueType":"string","type":"Property","Name":"Text","tags":[],"Class":"Message"},{"Superclass":"Message","type":"Class","Name":"Hint","tags":["deprecated"]},{"Superclass":"Instance","type":"Class","Name":"Mouse","tags":[]},{"ValueType":"CoordinateFrame","type":"Property","Name":"Hit","tags":["readonly"],"Class":"Mouse"},{"ValueType":"Content","type":"Property","Name":"Icon","tags":[],"Class":"Mouse"},{"ValueType":"CoordinateFrame","type":"Property","Name":"Origin","tags":["readonly"],"Class":"Mouse"},{"ValueType":"Object","type":"Property","Name":"Target","tags":["readonly"],"Class":"Mouse"},{"ValueType":"Object","type":"Property","Name":"TargetFilter","tags":[],"Class":"Mouse"},{"ValueType":"NormalId","type":"Property","Name":"TargetSurface","tags":["readonly"],"Class":"Mouse"},{"ValueType":"Ray","type":"Property","Name":"UnitRay","tags":["readonly"],"Class":"Mouse"},{"ValueType":"int","type":"Property","Name":"ViewSizeX","tags":["readonly"],"Class":"Mouse"},{"ValueType":"int","type":"Property","Name":"ViewSizeY","tags":["readonly"],"Class":"Mouse"},{"ValueType":"int","type":"Property","Name":"X","tags":["readonly"],"Class":"Mouse"},{"ValueType":"int","type":"Property","Name":"Y","tags":["readonly"],"Class":"Mouse"},{"ValueType":"CoordinateFrame","type":"Property","Name":"hit","tags":["deprecated","hidden","readonly"],"Class":"Mouse"},{"ValueType":"Object","type":"Property","Name":"target","tags":["deprecated","readonly"],"Class":"Mouse"},{"Arguments":[],"Name":"Button1Down","tags":[],"Class":"Mouse","type":"Event"},{"Arguments":[],"Name":"Button1Up","tags":[],"Class":"Mouse","type":"Event"},{"Arguments":[],"Name":"Button2Down","tags":[],"Class":"Mouse","type":"Event"},{"Arguments":[],"Name":"Button2Up","tags":[],"Class":"Mouse","type":"Event"},{"Arguments":[],"Name":"Idle","tags":[],"Class":"Mouse","type":"Event"},{"Arguments":[{"Name":"key","Type":"string"}],"Name":"KeyDown","tags":["deprecated"],"Class":"Mouse","type":"Event"},{"Arguments":[{"Name":"key","Type":"string"}],"Name":"KeyUp","tags":["deprecated"],"Class":"Mouse","type":"Event"},{"Arguments":[],"Name":"Move","tags":[],"Class":"Mouse","type":"Event"},{"Arguments":[],"Name":"WheelBackward","tags":[],"Class":"Mouse","type":"Event"},{"Arguments":[],"Name":"WheelForward","tags":[],"Class":"Mouse","type":"Event"},{"Arguments":[{"Name":"key","Type":"string"}],"Name":"keyDown","tags":["deprecated"],"Class":"Mouse","type":"Event"},{"Superclass":"Mouse","type":"Class","Name":"PlayerMouse","tags":[]},{"Superclass":"Mouse","type":"Class","Name":"PluginMouse","tags":[]},{"Arguments":[{"Name":"instances","Type":"Objects"}],"Name":"DragEnter","tags":["PluginSecurity"],"Class":"PluginMouse","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"NetworkMarker","tags":["notbrowsable"]},{"Arguments":[],"Name":"Received","tags":[],"Class":"NetworkMarker","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"NetworkPeer","tags":["notbrowsable"]},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"limit","Default":null}],"Name":"SetOutgoingKBPSLimit","tags":["PluginSecurity"],"Class":"NetworkPeer","type":"Function"},{"Superclass":"NetworkPeer","type":"Class","Name":"NetworkClient","tags":["notCreatable"]},{"ValueType":"string","type":"Property","Name":"Ticket","tags":[],"Class":"NetworkClient"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"blockDuration","Default":"3000"}],"Name":"Disconnect","tags":["LocalUserSecurity"],"Class":"NetworkClient","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"int","Name":"userId","Default":null},{"Type":"string","Name":"server","Default":null},{"Type":"int","Name":"serverPort","Default":null},{"Type":"int","Name":"clientPort","Default":"0"},{"Type":"int","Name":"threadSleepTime","Default":"30"}],"Name":"PlayerConnect","tags":["PluginSecurity"],"Class":"NetworkClient","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"gameSessionID","Default":null}],"Name":"SetGameSessionID","tags":["RobloxSecurity"],"Class":"NetworkClient","type":"Function"},{"Arguments":[{"Name":"peer","Type":"string"},{"Name":"replicator","Type":"Instance"}],"Name":"ConnectionAccepted","tags":[],"Class":"NetworkClient","type":"Event"},{"Arguments":[{"Name":"peer","Type":"string"},{"Name":"code","Type":"int"},{"Name":"reason","Type":"string"}],"Name":"ConnectionFailed","tags":[],"Class":"NetworkClient","type":"Event"},{"Arguments":[{"Name":"peer","Type":"string"}],"Name":"ConnectionRejected","tags":[],"Class":"NetworkClient","type":"Event"},{"Superclass":"NetworkPeer","type":"Class","Name":"NetworkServer","tags":["notCreatable"]},{"ValueType":"int","type":"Property","Name":"Port","tags":["readonly"],"Class":"NetworkServer"},{"ReturnType":"void","Arguments":[],"Name":"ConfigureAsCloudEditServer","tags":["RobloxSecurity"],"Class":"NetworkServer","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"ConfigureAsTeamTestServer","tags":["RobloxSecurity"],"Class":"NetworkServer","type":"Function"},{"ReturnType":"int","Arguments":[],"Name":"GetClientCount","tags":["LocalUserSecurity"],"Class":"NetworkServer","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"value","Default":null}],"Name":"SetIsPlayerAuthenticationRequired","tags":["RobloxSecurity"],"Class":"NetworkServer","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"port","Default":"0"},{"Type":"int","Name":"threadSleepTime","Default":"20"}],"Name":"Start","tags":["PluginSecurity"],"Class":"NetworkServer","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"blockDuration","Default":"1000"}],"Name":"Stop","tags":["LocalUserSecurity"],"Class":"NetworkServer","type":"Function"},{"Arguments":[{"Name":"peer","Type":"Instance"},{"Name":"result","Type":"FilterResult"},{"Name":"instance","Type":"Instance"},{"Name":"member","Type":"string"}],"Name":"DataBasicFiltered","tags":["LocalUserSecurity"],"Class":"NetworkServer","type":"Event"},{"Arguments":[{"Name":"peer","Type":"Instance"},{"Name":"result","Type":"FilterResult"},{"Name":"instance","Type":"Instance"},{"Name":"member","Type":"string"}],"Name":"DataCustomFiltered","tags":["LocalUserSecurity"],"Class":"NetworkServer","type":"Event"},{"Arguments":[{"Name":"peer","Type":"string"},{"Name":"replicator","Type":"Instance"}],"Name":"IncommingConnection","tags":["RobloxScriptSecurity"],"Class":"NetworkServer","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"NetworkReplicator","tags":["notCreatable"]},{"ValueType":"string","type":"Property","Name":"MachineAddress","tags":["LocalUserSecurity","readonly"],"Class":"NetworkReplicator"},{"ValueType":"int","type":"Property","Name":"Port","tags":["LocalUserSecurity","readonly"],"Class":"NetworkReplicator"},{"ReturnType":"void","Arguments":[],"Name":"CloseConnection","tags":["LocalUserSecurity"],"Class":"NetworkReplicator","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"DisableProcessPackets","tags":["LocalUserSecurity"],"Class":"NetworkReplicator","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"EnableProcessPackets","tags":["LocalUserSecurity"],"Class":"NetworkReplicator","type":"Function"},{"ReturnType":"Instance","Arguments":[],"Name":"GetPlayer","tags":[],"Class":"NetworkReplicator","type":"Function"},{"ReturnType":"string","Arguments":[{"Type":"int","Name":"verbosityLevel","Default":"0"}],"Name":"GetRakStatsString","tags":["PluginSecurity"],"Class":"NetworkReplicator","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"RequestCharacter","tags":["LocalUserSecurity"],"Class":"NetworkReplicator","type":"Function"},{"ReturnType":"Instance","Arguments":[],"Name":"SendMarker","tags":["LocalUserSecurity"],"Class":"NetworkReplicator","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"double","Name":"seconds","Default":null}],"Name":"SetPropSyncExpiration","tags":["LocalUserSecurity"],"Class":"NetworkReplicator","type":"Function"},{"Arguments":[{"Name":"peer","Type":"string"},{"Name":"lostConnection","Type":"bool"}],"Name":"Disconnection","tags":["LocalUserSecurity"],"Class":"NetworkReplicator","type":"Event"},{"Superclass":"NetworkReplicator","type":"Class","Name":"ClientReplicator","tags":["notCreatable"]},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"request","Default":null}],"Name":"RequestServerStats","tags":["RobloxScriptSecurity"],"Class":"ClientReplicator","type":"Function"},{"Arguments":[{"Name":"stats","Type":"Dictionary"}],"Name":"StatsReceived","tags":["RobloxScriptSecurity"],"Class":"ClientReplicator","type":"Event"},{"Superclass":"NetworkReplicator","type":"Class","Name":"ServerReplicator","tags":["notCreatable"]},{"ReturnType":"void","Arguments":[],"Name":"PreventTerrainChanges","tags":["RobloxPlaceSecurity"],"Class":"ServerReplicator","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"value","Default":null}],"Name":"SetBasicFilteringEnabled","tags":["RobloxPlaceSecurity"],"Class":"ServerReplicator","type":"Function"},{"Arguments":[{"Name":"userId","Type":"int"},{"Name":"isAuthenticated","Type":"bool"},{"Name":"protocolVersion","Type":"int"}],"Name":"TicketProcessed","tags":[],"Class":"ServerReplicator","type":"Event"},{"ReturnType":"FilterResult","Arguments":[{"Name":"deletingItem","Type":"Instance"}],"Name":"DeleteFilter","tags":["RobloxPlaceSecurity","noyield"],"Class":"ServerReplicator","type":"Callback"},{"ReturnType":"FilterResult","Arguments":[{"Name":"firingItem","Type":"Instance"},{"Name":"event","Type":"string"}],"Name":"EventFilter","tags":["RobloxPlaceSecurity","noyield"],"Class":"ServerReplicator","type":"Callback"},{"ReturnType":"FilterResult","Arguments":[{"Name":"newItem","Type":"Instance"},{"Name":"parent","Type":"Instance"}],"Name":"NewFilter","tags":["RobloxPlaceSecurity","noyield"],"Class":"ServerReplicator","type":"Callback"},{"ReturnType":"FilterResult","Arguments":[{"Name":"changingItem","Type":"Instance"},{"Name":"member","Type":"string"},{"Name":"value","Type":"Variant"}],"Name":"PropertyFilter","tags":["RobloxPlaceSecurity","noyield"],"Class":"ServerReplicator","type":"Callback"},{"Superclass":"Instance","type":"Class","Name":"NetworkSettings","tags":["notbrowsable"]},{"ValueType":"bool","type":"Property","Name":"ArePhysicsRejectionsReported","tags":[],"Class":"NetworkSettings"},{"ValueType":"int","type":"Property","Name":"CanSendPacketBufferLimit","tags":[],"Class":"NetworkSettings"},{"ValueType":"float","type":"Property","Name":"ClientPhysicsSendRate","tags":[],"Class":"NetworkSettings"},{"ValueType":"float","type":"Property","Name":"DataGCRate","tags":[],"Class":"NetworkSettings"},{"ValueType":"int","type":"Property","Name":"DataMtuAdjust","tags":[],"Class":"NetworkSettings"},{"ValueType":"PacketPriority","type":"Property","Name":"DataSendPriority","tags":["hidden"],"Class":"NetworkSettings"},{"ValueType":"float","type":"Property","Name":"DataSendRate","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"EnableHeavyCompression","tags":["hidden"],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"ExperimentalPhysicsEnabled","tags":[],"Class":"NetworkSettings"},{"ValueType":"int","type":"Property","Name":"ExtraMemoryUsed","tags":["PluginSecurity","hidden"],"Class":"NetworkSettings"},{"ValueType":"float","type":"Property","Name":"FreeMemoryMBytes","tags":["PluginSecurity","hidden","readonly"],"Class":"NetworkSettings"},{"ValueType":"float","type":"Property","Name":"FreeMemoryPoolMBytes","tags":["PluginSecurity","hidden","readonly"],"Class":"NetworkSettings"},{"ValueType":"double","type":"Property","Name":"IncommingReplicationLag","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"IsQueueErrorComputed","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"IsThrottledByCongestionControl","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"IsThrottledByOutgoingBandwidthLimit","tags":[],"Class":"NetworkSettings"},{"ValueType":"int","type":"Property","Name":"MaxDataModelSendBuffer","tags":["deprecated"],"Class":"NetworkSettings"},{"ValueType":"float","type":"Property","Name":"NetworkOwnerRate","tags":[],"Class":"NetworkSettings"},{"ValueType":"int","type":"Property","Name":"PhysicsMtuAdjust","tags":[],"Class":"NetworkSettings"},{"ValueType":"PhysicsReceiveMethod","type":"Property","Name":"PhysicsReceive","tags":[],"Class":"NetworkSettings"},{"ValueType":"PhysicsSendMethod","type":"Property","Name":"PhysicsSend","tags":[],"Class":"NetworkSettings"},{"ValueType":"PacketPriority","type":"Property","Name":"PhysicsSendPriority","tags":["hidden"],"Class":"NetworkSettings"},{"ValueType":"float","type":"Property","Name":"PhysicsSendRate","tags":[],"Class":"NetworkSettings"},{"ValueType":"int","type":"Property","Name":"PreferredClientPort","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"PrintBits","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"PrintEvents","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"PrintFilters","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"PrintInstances","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"PrintPhysicsErrors","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"PrintProperties","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"PrintSplitMessage","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"PrintStreamInstanceQuota","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"PrintTouches","tags":[],"Class":"NetworkSettings"},{"ValueType":"double","type":"Property","Name":"ReceiveRate","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"RenderStreamedRegions","tags":[],"Class":"NetworkSettings"},{"ValueType":"string","type":"Property","Name":"ReportStatURL","tags":["deprecated","hidden"],"Class":"NetworkSettings"},{"ValueType":"int","type":"Property","Name":"SendPacketBufferLimit","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"ShowActiveAnimationAsset","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"ShowPartMovementWayPoint","tags":[],"Class":"NetworkSettings"},{"ValueType":"int","type":"Property","Name":"TotalNumMovementWayPoint","tags":[],"Class":"NetworkSettings"},{"ValueType":"float","type":"Property","Name":"TouchSendRate","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"TrackDataTypes","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"TrackPhysicsDetails","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"UseInstancePacketCache","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"UsePhysicsPacketCache","tags":[],"Class":"NetworkSettings"},{"ValueType":"int","type":"Property","Name":"WaitingForCharacterLogRate","tags":["deprecated","hidden"],"Class":"NetworkSettings"},{"Superclass":"Instance","type":"Class","Name":"NotificationService","tags":["notCreatable"]},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"userId","Default":null}],"Name":"CancelAllNotification","tags":["RobloxPlaceSecurity"],"Class":"NotificationService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"userId","Default":null},{"Type":"int","Name":"alertId","Default":null}],"Name":"CancelNotification","tags":["RobloxPlaceSecurity"],"Class":"NotificationService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"userId","Default":null},{"Type":"int","Name":"alertId","Default":null},{"Type":"string","Name":"alertMsg","Default":null},{"Type":"int","Name":"minutesToFire","Default":null}],"Name":"ScheduleNotification","tags":["RobloxPlaceSecurity"],"Class":"NotificationService","type":"Function"},{"ReturnType":"Array","Arguments":[{"Type":"int","Name":"userId","Default":null}],"Name":"GetScheduledNotifications","tags":["RobloxPlaceSecurity"],"Class":"NotificationService","type":"YieldFunction"},{"Superclass":"Instance","type":"Class","Name":"NumberValue","tags":[]},{"ValueType":"double","type":"Property","Name":"Value","tags":[],"Class":"NumberValue"},{"Arguments":[{"Name":"value","Type":"double"}],"Name":"Changed","tags":[],"Class":"NumberValue","type":"Event"},{"Arguments":[{"Name":"value","Type":"double"}],"Name":"changed","tags":["deprecated"],"Class":"NumberValue","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"ObjectValue","tags":[]},{"ValueType":"Object","type":"Property","Name":"Value","tags":[],"Class":"ObjectValue"},{"Arguments":[{"Name":"value","Type":"Instance"}],"Name":"Changed","tags":[],"Class":"ObjectValue","type":"Event"},{"Arguments":[{"Name":"value","Type":"Instance"}],"Name":"changed","tags":["deprecated"],"Class":"ObjectValue","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"OneQuarterClusterPacketCacheBase","tags":[]},{"Superclass":"Instance","type":"Class","Name":"PVInstance","tags":["notbrowsable"]},{"ValueType":"CoordinateFrame","type":"Property","Name":"CoordinateFrame","tags":["deprecated","writeonly"],"Class":"PVInstance"},{"Superclass":"PVInstance","type":"Class","Name":"BasePart","tags":["notbrowsable"]},{"ValueType":"bool","type":"Property","Name":"Anchored","tags":[],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"BackParamA","tags":[],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"BackParamB","tags":[],"Class":"BasePart"},{"ValueType":"SurfaceType","type":"Property","Name":"BackSurface","tags":[],"Class":"BasePart"},{"ValueType":"InputType","type":"Property","Name":"BackSurfaceInput","tags":[],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"BottomParamA","tags":[],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"BottomParamB","tags":[],"Class":"BasePart"},{"ValueType":"SurfaceType","type":"Property","Name":"BottomSurface","tags":[],"Class":"BasePart"},{"ValueType":"InputType","type":"Property","Name":"BottomSurfaceInput","tags":[],"Class":"BasePart"},{"ValueType":"BrickColor","type":"Property","Name":"BrickColor","tags":[],"Class":"BasePart"},{"ValueType":"CoordinateFrame","type":"Property","Name":"CFrame","tags":[],"Class":"BasePart"},{"ValueType":"bool","type":"Property","Name":"CanCollide","tags":[],"Class":"BasePart"},{"ValueType":"Color3","type":"Property","Name":"Color","tags":["deprecated"],"Class":"BasePart"},{"ValueType":"PhysicalProperties","type":"Property","Name":"CustomPhysicalProperties","tags":[],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"Elasticity","tags":[],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"Friction","tags":[],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"FrontParamA","tags":[],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"FrontParamB","tags":[],"Class":"BasePart"},{"ValueType":"SurfaceType","type":"Property","Name":"FrontSurface","tags":[],"Class":"BasePart"},{"ValueType":"InputType","type":"Property","Name":"FrontSurfaceInput","tags":[],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"LeftParamA","tags":[],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"LeftParamB","tags":[],"Class":"BasePart"},{"ValueType":"SurfaceType","type":"Property","Name":"LeftSurface","tags":[],"Class":"BasePart"},{"ValueType":"InputType","type":"Property","Name":"LeftSurfaceInput","tags":[],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"LocalTransparencyModifier","tags":["hidden"],"Class":"BasePart"},{"ValueType":"bool","type":"Property","Name":"Locked","tags":[],"Class":"BasePart"},{"ValueType":"Material","type":"Property","Name":"Material","tags":[],"Class":"BasePart"},{"ValueType":"Vector3","type":"Property","Name":"Position","tags":[],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"ReceiveAge","tags":["hidden","readonly"],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"Reflectance","tags":[],"Class":"BasePart"},{"ValueType":"int","type":"Property","Name":"ResizeIncrement","tags":["readonly"],"Class":"BasePart"},{"ValueType":"Faces","type":"Property","Name":"ResizeableFaces","tags":["readonly"],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"RightParamA","tags":[],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"RightParamB","tags":[],"Class":"BasePart"},{"ValueType":"SurfaceType","type":"Property","Name":"RightSurface","tags":[],"Class":"BasePart"},{"ValueType":"InputType","type":"Property","Name":"RightSurfaceInput","tags":[],"Class":"BasePart"},{"ValueType":"Vector3","type":"Property","Name":"RotVelocity","tags":[],"Class":"BasePart"},{"ValueType":"Vector3","type":"Property","Name":"Rotation","tags":[],"Class":"BasePart"},{"ValueType":"Vector3","type":"Property","Name":"Size","tags":[],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"SpecificGravity","tags":["readonly"],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"TopParamA","tags":[],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"TopParamB","tags":[],"Class":"BasePart"},{"ValueType":"SurfaceType","type":"Property","Name":"TopSurface","tags":[],"Class":"BasePart"},{"ValueType":"InputType","type":"Property","Name":"TopSurfaceInput","tags":[],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"Transparency","tags":[],"Class":"BasePart"},{"ValueType":"Vector3","type":"Property","Name":"Velocity","tags":[],"Class":"BasePart"},{"ValueType":"BrickColor","type":"Property","Name":"brickColor","tags":["deprecated"],"Class":"BasePart"},{"ReturnType":"void","Arguments":[],"Name":"BreakJoints","tags":[],"Class":"BasePart","type":"Function"},{"ReturnType":"Tuple","Arguments":[],"Name":"CanSetNetworkOwnership","tags":[],"Class":"BasePart","type":"Function"},{"ReturnType":"Objects","Arguments":[{"Type":"bool","Name":"recursive","Default":"false"}],"Name":"GetConnectedParts","tags":[],"Class":"BasePart","type":"Function"},{"ReturnType":"float","Arguments":[],"Name":"GetMass","tags":[],"Class":"BasePart","type":"Function"},{"ReturnType":"Instance","Arguments":[],"Name":"GetNetworkOwner","tags":[],"Class":"BasePart","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"GetNetworkOwnershipAuto","tags":[],"Class":"BasePart","type":"Function"},{"ReturnType":"CoordinateFrame","Arguments":[],"Name":"GetRenderCFrame","tags":[],"Class":"BasePart","type":"Function"},{"ReturnType":"Instance","Arguments":[],"Name":"GetRootPart","tags":[],"Class":"BasePart","type":"Function"},{"ReturnType":"Objects","Arguments":[],"Name":"GetTouchingParts","tags":[],"Class":"BasePart","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"IsGrounded","tags":[],"Class":"BasePart","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"MakeJoints","tags":[],"Class":"BasePart","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"NormalId","Name":"normalId","Default":null},{"Type":"int","Name":"deltaAmount","Default":null}],"Name":"Resize","tags":[],"Class":"BasePart","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"playerInstance","Default":"nil"}],"Name":"SetNetworkOwner","tags":[],"Class":"BasePart","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"SetNetworkOwnershipAuto","tags":[],"Class":"BasePart","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"breakJoints","tags":["deprecated"],"Class":"BasePart","type":"Function"},{"ReturnType":"float","Arguments":[],"Name":"getMass","tags":["deprecated"],"Class":"BasePart","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"makeJoints","tags":["deprecated"],"Class":"BasePart","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"NormalId","Name":"normalId","Default":null},{"Type":"int","Name":"deltaAmount","Default":null}],"Name":"resize","tags":["deprecated"],"Class":"BasePart","type":"Function"},{"Arguments":[{"Name":"part","Type":"Instance"}],"Name":"LocalSimulationTouched","tags":["deprecated"],"Class":"BasePart","type":"Event"},{"Arguments":[],"Name":"OutfitChanged","tags":["deprecated"],"Class":"BasePart","type":"Event"},{"Arguments":[{"Name":"otherPart","Type":"Instance"}],"Name":"StoppedTouching","tags":["deprecated"],"Class":"BasePart","type":"Event"},{"Arguments":[{"Name":"otherPart","Type":"Instance"}],"Name":"TouchEnded","tags":[],"Class":"BasePart","type":"Event"},{"Arguments":[{"Name":"otherPart","Type":"Instance"}],"Name":"Touched","tags":[],"Class":"BasePart","type":"Event"},{"Arguments":[{"Name":"otherPart","Type":"Instance"}],"Name":"touched","tags":["deprecated"],"Class":"BasePart","type":"Event"},{"Superclass":"BasePart","type":"Class","Name":"CornerWedgePart","tags":[]},{"Superclass":"BasePart","type":"Class","Name":"FormFactorPart","tags":[]},{"ValueType":"FormFactor","type":"Property","Name":"FormFactor","tags":["deprecated"],"Class":"FormFactorPart"},{"ValueType":"FormFactor","type":"Property","Name":"formFactor","tags":["deprecated","hidden"],"Class":"FormFactorPart"},{"Superclass":"FormFactorPart","type":"Class","Name":"Part","tags":[]},{"ValueType":"PartType","type":"Property","Name":"Shape","tags":[],"Class":"Part"},{"Superclass":"Part","type":"Class","Name":"FlagStand","tags":["deprecated"]},{"ValueType":"BrickColor","type":"Property","Name":"TeamColor","tags":[],"Class":"FlagStand"},{"Arguments":[{"Name":"player","Type":"Instance"}],"Name":"FlagCaptured","tags":[],"Class":"FlagStand","type":"Event"},{"Superclass":"Part","type":"Class","Name":"Platform","tags":[]},{"Superclass":"Part","type":"Class","Name":"Seat","tags":[]},{"ValueType":"bool","type":"Property","Name":"Disabled","tags":[],"Class":"Seat"},{"ValueType":"Object","type":"Property","Name":"Occupant","tags":["readonly"],"Class":"Seat"},{"Superclass":"Part","type":"Class","Name":"SkateboardPlatform","tags":["deprecated"]},{"ValueType":"Object","type":"Property","Name":"Controller","tags":["readonly"],"Class":"SkateboardPlatform"},{"ValueType":"Object","type":"Property","Name":"ControllingHumanoid","tags":["readonly"],"Class":"SkateboardPlatform"},{"ValueType":"int","type":"Property","Name":"Steer","tags":[],"Class":"SkateboardPlatform"},{"ValueType":"bool","type":"Property","Name":"StickyWheels","tags":[],"Class":"SkateboardPlatform"},{"ValueType":"int","type":"Property","Name":"Throttle","tags":[],"Class":"SkateboardPlatform"},{"ReturnType":"void","Arguments":[{"Type":"Vector3","Name":"impulseWorld","Default":null}],"Name":"ApplySpecificImpulse","tags":[],"Class":"SkateboardPlatform","type":"Function"},{"Arguments":[{"Name":"humanoid","Type":"Instance"},{"Name":"skateboardController","Type":"Instance"}],"Name":"Equipped","tags":[],"Class":"SkateboardPlatform","type":"Event"},{"Arguments":[{"Name":"newState","Type":"MoveState"},{"Name":"oldState","Type":"MoveState"}],"Name":"MoveStateChanged","tags":[],"Class":"SkateboardPlatform","type":"Event"},{"Arguments":[{"Name":"humanoid","Type":"Instance"}],"Name":"Unequipped","tags":[],"Class":"SkateboardPlatform","type":"Event"},{"Arguments":[{"Name":"humanoid","Type":"Instance"},{"Name":"skateboardController","Type":"Instance"}],"Name":"equipped","tags":["deprecated"],"Class":"SkateboardPlatform","type":"Event"},{"Arguments":[{"Name":"humanoid","Type":"Instance"}],"Name":"unequipped","tags":["deprecated"],"Class":"SkateboardPlatform","type":"Event"},{"Superclass":"Part","type":"Class","Name":"SpawnLocation","tags":[]},{"ValueType":"bool","type":"Property","Name":"AllowTeamChangeOnTouch","tags":[],"Class":"SpawnLocation"},{"ValueType":"int","type":"Property","Name":"Duration","tags":[],"Class":"SpawnLocation"},{"ValueType":"bool","type":"Property","Name":"Enabled","tags":[],"Class":"SpawnLocation"},{"ValueType":"bool","type":"Property","Name":"Neutral","tags":[],"Class":"SpawnLocation"},{"ValueType":"BrickColor","type":"Property","Name":"TeamColor","tags":[],"Class":"SpawnLocation"},{"Superclass":"FormFactorPart","type":"Class","Name":"WedgePart","tags":[]},{"Superclass":"BasePart","type":"Class","Name":"MeshPart","tags":[]},{"ValueType":"Material","type":"Property","Name":"Material","tags":["deprecated","readonly"],"Class":"MeshPart"},{"ValueType":"Content","type":"Property","Name":"TextureID","tags":[],"Class":"MeshPart"},{"Superclass":"BasePart","type":"Class","Name":"ParallelRampPart","tags":["deprecated","notbrowsable"]},{"Superclass":"BasePart","type":"Class","Name":"PartOperation","tags":[]},{"ValueType":"bool","type":"Property","Name":"UsePartColor","tags":[],"Class":"PartOperation"},{"Superclass":"PartOperation","type":"Class","Name":"NegateOperation","tags":[]},{"Superclass":"PartOperation","type":"Class","Name":"UnionOperation","tags":[]},{"Superclass":"BasePart","type":"Class","Name":"PrismPart","tags":["deprecated","notbrowsable"]},{"ValueType":"PrismSides","type":"Property","Name":"Sides","tags":[],"Class":"PrismPart"},{"Superclass":"BasePart","type":"Class","Name":"PyramidPart","tags":["deprecated","notbrowsable"]},{"ValueType":"PyramidSides","type":"Property","Name":"Sides","tags":[],"Class":"PyramidPart"},{"Superclass":"BasePart","type":"Class","Name":"RightAngleRampPart","tags":["deprecated","notbrowsable"]},{"Superclass":"BasePart","type":"Class","Name":"Terrain","tags":["notCreatable"]},{"ValueType":"bool","type":"Property","Name":"IsSmooth","tags":["readonly"],"Class":"Terrain"},{"ValueType":"Region3int16","type":"Property","Name":"MaxExtents","tags":["readonly"],"Class":"Terrain"},{"ValueType":"Color3","type":"Property","Name":"WaterColor","tags":[],"Class":"Terrain"},{"ValueType":"float","type":"Property","Name":"WaterTransparency","tags":[],"Class":"Terrain"},{"ValueType":"float","type":"Property","Name":"WaterWaveSize","tags":[],"Class":"Terrain"},{"ValueType":"float","type":"Property","Name":"WaterWaveSpeed","tags":[],"Class":"Terrain"},{"ReturnType":"bool","Arguments":[{"Type":"int","Name":"x","Default":null},{"Type":"int","Name":"y","Default":null},{"Type":"int","Name":"z","Default":null}],"Name":"AutowedgeCell","tags":[],"Class":"Terrain","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Region3int16","Name":"region","Default":null}],"Name":"AutowedgeCells","tags":[],"Class":"Terrain","type":"Function"},{"ReturnType":"Vector3","Arguments":[{"Type":"int","Name":"x","Default":null},{"Type":"int","Name":"y","Default":null},{"Type":"int","Name":"z","Default":null}],"Name":"CellCenterToWorld","tags":[],"Class":"Terrain","type":"Function"},{"ReturnType":"Vector3","Arguments":[{"Type":"int","Name":"x","Default":null},{"Type":"int","Name":"y","Default":null},{"Type":"int","Name":"z","Default":null}],"Name":"CellCornerToWorld","tags":[],"Class":"Terrain","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Clear","tags":[],"Class":"Terrain","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"ConvertToSmooth","tags":["PluginSecurity"],"Class":"Terrain","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"Region3int16","Name":"region","Default":null}],"Name":"CopyRegion","tags":[],"Class":"Terrain","type":"Function"},{"ReturnType":"int","Arguments":[],"Name":"CountCells","tags":[],"Class":"Terrain","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector3","Name":"center","Default":null},{"Type":"float","Name":"radius","Default":null},{"Type":"Material","Name":"material","Default":null}],"Name":"FillBall","tags":[],"Class":"Terrain","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"CoordinateFrame","Name":"cframe","Default":null},{"Type":"Vector3","Name":"size","Default":null},{"Type":"Material","Name":"material","Default":null}],"Name":"FillBlock","tags":[],"Class":"Terrain","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Region3","Name":"region","Default":null},{"Type":"float","Name":"resolution","Default":null},{"Type":"Material","Name":"material","Default":null}],"Name":"FillRegion","tags":[],"Class":"Terrain","type":"Function"},{"ReturnType":"Tuple","Arguments":[{"Type":"int","Name":"x","Default":null},{"Type":"int","Name":"y","Default":null},{"Type":"int","Name":"z","Default":null}],"Name":"GetCell","tags":[],"Class":"Terrain","type":"Function"},{"ReturnType":"Tuple","Arguments":[{"Type":"int","Name":"x","Default":null},{"Type":"int","Name":"y","Default":null},{"Type":"int","Name":"z","Default":null}],"Name":"GetWaterCell","tags":[],"Class":"Terrain","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"region","Default":null},{"Type":"Vector3int16","Name":"corner","Default":null},{"Type":"bool","Name":"pasteEmptyCells","Default":null}],"Name":"PasteRegion","tags":[],"Class":"Terrain","type":"Function"},{"ReturnType":"Tuple","Arguments":[{"Type":"Region3","Name":"region","Default":null},{"Type":"float","Name":"resolution","Default":null}],"Name":"ReadVoxels","tags":[],"Class":"Terrain","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"x","Default":null},{"Type":"int","Name":"y","Default":null},{"Type":"int","Name":"z","Default":null},{"Type":"CellMaterial","Name":"material","Default":null},{"Type":"CellBlock","Name":"block","Default":null},{"Type":"CellOrientation","Name":"orientation","Default":null}],"Name":"SetCell","tags":[],"Class":"Terrain","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Region3int16","Name":"region","Default":null},{"Type":"CellMaterial","Name":"material","Default":null},{"Type":"CellBlock","Name":"block","Default":null},{"Type":"CellOrientation","Name":"orientation","Default":null}],"Name":"SetCells","tags":[],"Class":"Terrain","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"x","Default":null},{"Type":"int","Name":"y","Default":null},{"Type":"int","Name":"z","Default":null},{"Type":"WaterForce","Name":"force","Default":null},{"Type":"WaterDirection","Name":"direction","Default":null}],"Name":"SetWaterCell","tags":[],"Class":"Terrain","type":"Function"},{"ReturnType":"Vector3","Arguments":[{"Type":"Vector3","Name":"position","Default":null}],"Name":"WorldToCell","tags":[],"Class":"Terrain","type":"Function"},{"ReturnType":"Vector3","Arguments":[{"Type":"Vector3","Name":"position","Default":null}],"Name":"WorldToCellPreferEmpty","tags":[],"Class":"Terrain","type":"Function"},{"ReturnType":"Vector3","Arguments":[{"Type":"Vector3","Name":"position","Default":null}],"Name":"WorldToCellPreferSolid","tags":[],"Class":"Terrain","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Region3","Name":"region","Default":null},{"Type":"float","Name":"resolution","Default":null},{"Type":"Array","Name":"materials","Default":null},{"Type":"Array","Name":"occupancy","Default":null}],"Name":"WriteVoxels","tags":[],"Class":"Terrain","type":"Function"},{"Superclass":"BasePart","type":"Class","Name":"TrussPart","tags":[]},{"ValueType":"Style","type":"Property","Name":"Style","tags":[],"Class":"TrussPart"},{"Superclass":"BasePart","type":"Class","Name":"VehicleSeat","tags":[]},{"ValueType":"int","type":"Property","Name":"AreHingesDetected","tags":["readonly"],"Class":"VehicleSeat"},{"ValueType":"bool","type":"Property","Name":"Disabled","tags":[],"Class":"VehicleSeat"},{"ValueType":"bool","type":"Property","Name":"HeadsUpDisplay","tags":[],"Class":"VehicleSeat"},{"ValueType":"float","type":"Property","Name":"MaxSpeed","tags":[],"Class":"VehicleSeat"},{"ValueType":"Object","type":"Property","Name":"Occupant","tags":["readonly"],"Class":"VehicleSeat"},{"ValueType":"int","type":"Property","Name":"Steer","tags":[],"Class":"VehicleSeat"},{"ValueType":"int","type":"Property","Name":"Throttle","tags":[],"Class":"VehicleSeat"},{"ValueType":"float","type":"Property","Name":"Torque","tags":[],"Class":"VehicleSeat"},{"ValueType":"float","type":"Property","Name":"TurnSpeed","tags":[],"Class":"VehicleSeat"},{"Superclass":"PVInstance","type":"Class","Name":"Model","tags":[]},{"ValueType":"Object","type":"Property","Name":"PrimaryPart","tags":[],"Class":"Model"},{"ReturnType":"void","Arguments":[],"Name":"BreakJoints","tags":[],"Class":"Model","type":"Function"},{"ReturnType":"Vector3","Arguments":[],"Name":"GetExtentsSize","tags":[],"Class":"Model","type":"Function"},{"ReturnType":"CoordinateFrame","Arguments":[],"Name":"GetModelCFrame","tags":["deprecated"],"Class":"Model","type":"Function"},{"ReturnType":"Vector3","Arguments":[],"Name":"GetModelSize","tags":["deprecated"],"Class":"Model","type":"Function"},{"ReturnType":"CoordinateFrame","Arguments":[],"Name":"GetPrimaryPartCFrame","tags":[],"Class":"Model","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"MakeJoints","tags":[],"Class":"Model","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector3","Name":"position","Default":null}],"Name":"MoveTo","tags":[],"Class":"Model","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"ResetOrientationToIdentity","tags":["deprecated"],"Class":"Model","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"SetIdentityOrientation","tags":["deprecated"],"Class":"Model","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"CoordinateFrame","Name":"cframe","Default":null}],"Name":"SetPrimaryPartCFrame","tags":[],"Class":"Model","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector3","Name":"delta","Default":null}],"Name":"TranslateBy","tags":[],"Class":"Model","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"breakJoints","tags":["deprecated"],"Class":"Model","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"makeJoints","tags":["deprecated"],"Class":"Model","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector3","Name":"location","Default":null}],"Name":"move","tags":["deprecated"],"Class":"Model","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector3","Name":"location","Default":null}],"Name":"moveTo","tags":["deprecated"],"Class":"Model","type":"Function"},{"Superclass":"Model","type":"Class","Name":"RootInstance","tags":["notbrowsable"]},{"Superclass":"RootInstance","type":"Class","Name":"Workspace","tags":[]},{"ValueType":"bool","type":"Property","Name":"AllowThirdPartySales","tags":[],"Class":"Workspace"},{"ValueType":"Object","type":"Property","Name":"CurrentCamera","tags":[],"Class":"Workspace"},{"ValueType":"double","type":"Property","Name":"DistributedGameTime","tags":[],"Class":"Workspace"},{"ValueType":"bool","type":"Property","Name":"FilteringEnabled","tags":[],"Class":"Workspace"},{"ValueType":"float","type":"Property","Name":"Gravity","tags":[],"Class":"Workspace"},{"ValueType":"bool","type":"Property","Name":"StreamingEnabled","tags":[],"Class":"Workspace"},{"ValueType":"Object","type":"Property","Name":"Terrain","tags":["readonly"],"Class":"Workspace"},{"ReturnType":"void","Arguments":[{"Type":"Objects","Name":"objects","Default":null}],"Name":"BreakJoints","tags":["PluginSecurity"],"Class":"Workspace","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"ExperimentalSolverIsEnabled","tags":["LocalUserSecurity"],"Class":"Workspace","type":"Function"},{"ReturnType":"Tuple","Arguments":[{"Type":"Ray","Name":"ray","Default":null},{"Type":"Instance","Name":"ignoreDescendentsInstance","Default":"nil"},{"Type":"bool","Name":"terrainCellsAreCubes","Default":"false"},{"Type":"bool","Name":"ignoreWater","Default":"false"}],"Name":"FindPartOnRay","tags":[],"Class":"Workspace","type":"Function"},{"ReturnType":"Tuple","Arguments":[{"Type":"Ray","Name":"ray","Default":null},{"Type":"Objects","Name":"ignoreDescendentsTable","Default":null},{"Type":"bool","Name":"terrainCellsAreCubes","Default":"false"},{"Type":"bool","Name":"ignoreWater","Default":"false"}],"Name":"FindPartOnRayWithIgnoreList","tags":[],"Class":"Workspace","type":"Function"},{"ReturnType":"Objects","Arguments":[{"Type":"Region3","Name":"region","Default":null},{"Type":"Instance","Name":"ignoreDescendentsInstance","Default":"nil"},{"Type":"int","Name":"maxParts","Default":"20"}],"Name":"FindPartsInRegion3","tags":[],"Class":"Workspace","type":"Function"},{"ReturnType":"Objects","Arguments":[{"Type":"Region3","Name":"region","Default":null},{"Type":"Objects","Name":"ignoreDescendentsTable","Default":null},{"Type":"int","Name":"maxParts","Default":"20"}],"Name":"FindPartsInRegion3WithIgnoreList","tags":[],"Class":"Workspace","type":"Function"},{"ReturnType":"int","Arguments":[],"Name":"GetNumAwakeParts","tags":[],"Class":"Workspace","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"GetPhysicsAnalyzerBreakOnIssue","tags":["PluginSecurity"],"Class":"Workspace","type":"Function"},{"ReturnType":"Objects","Arguments":[{"Type":"int","Name":"index","Default":null}],"Name":"GetPhysicsAnalyzerIssue","tags":["PluginSecurity"],"Class":"Workspace","type":"Function"},{"ReturnType":"int","Arguments":[],"Name":"GetPhysicsThrottling","tags":[],"Class":"Workspace","type":"Function"},{"ReturnType":"double","Arguments":[],"Name":"GetRealPhysicsFPS","tags":[],"Class":"Workspace","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"Region3","Name":"region","Default":null},{"Type":"Instance","Name":"ignoreDescendentsInstance","Default":"nil"}],"Name":"IsRegion3Empty","tags":[],"Class":"Workspace","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"Region3","Name":"region","Default":null},{"Type":"Objects","Name":"ignoreDescendentsTable","Default":null}],"Name":"IsRegion3EmptyWithIgnoreList","tags":[],"Class":"Workspace","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Objects","Name":"objects","Default":null},{"Type":"JointCreationMode","Name":"jointType","Default":null}],"Name":"JoinToOutsiders","tags":[],"Class":"Workspace","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Objects","Name":"objects","Default":null}],"Name":"MakeJoints","tags":["PluginSecurity"],"Class":"Workspace","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"PGSIsEnabled","tags":[],"Class":"Workspace","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"enable","Default":null}],"Name":"SetPhysicsAnalyzerBreakOnIssue","tags":["PluginSecurity"],"Class":"Workspace","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"value","Default":null}],"Name":"SetPhysicsThrottleEnabled","tags":["LocalUserSecurity"],"Class":"Workspace","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Objects","Name":"objects","Default":null}],"Name":"UnjoinFromOutsiders","tags":[],"Class":"Workspace","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"ZoomToExtents","tags":["PluginSecurity"],"Class":"Workspace","type":"Function"},{"ReturnType":"Tuple","Arguments":[{"Type":"Ray","Name":"ray","Default":null},{"Type":"Instance","Name":"ignoreDescendentsInstance","Default":"nil"},{"Type":"bool","Name":"terrainCellsAreCubes","Default":"false"},{"Type":"bool","Name":"ignoreWater","Default":"false"}],"Name":"findPartOnRay","tags":["deprecated"],"Class":"Workspace","type":"Function"},{"ReturnType":"Objects","Arguments":[{"Type":"Region3","Name":"region","Default":null},{"Type":"Instance","Name":"ignoreDescendentsInstance","Default":"nil"},{"Type":"int","Name":"maxParts","Default":"20"}],"Name":"findPartsInRegion3","tags":["deprecated"],"Class":"Workspace","type":"Function"},{"Arguments":[{"Name":"count","Type":"int"}],"Name":"PhysicsAnalyzerIssuesFound","tags":["PluginSecurity"],"Class":"Workspace","type":"Event"},{"Superclass":"Model","type":"Class","Name":"Status","tags":["deprecated","notCreatable"]},{"Superclass":"Instance","type":"Class","Name":"Pages","tags":[]},{"ValueType":"bool","type":"Property","Name":"IsFinished","tags":["readonly"],"Class":"Pages"},{"ReturnType":"Array","Arguments":[],"Name":"GetCurrentPage","tags":[],"Class":"Pages","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"AdvanceToNextPageAsync","tags":[],"Class":"Pages","type":"YieldFunction"},{"Superclass":"Pages","type":"Class","Name":"DataStorePages","tags":[]},{"Superclass":"Pages","type":"Class","Name":"FriendPages","tags":[]},{"Superclass":"Pages","type":"Class","Name":"StandardPages","tags":[]},{"Superclass":"Instance","type":"Class","Name":"PartOperationAsset","tags":[]},{"Superclass":"Instance","type":"Class","Name":"ParticleEmitter","tags":[]},{"ValueType":"Vector3","type":"Property","Name":"Acceleration","tags":[],"Class":"ParticleEmitter"},{"ValueType":"ColorSequence","type":"Property","Name":"Color","tags":[],"Class":"ParticleEmitter"},{"ValueType":"float","type":"Property","Name":"Drag","tags":[],"Class":"ParticleEmitter"},{"ValueType":"NormalId","type":"Property","Name":"EmissionDirection","tags":[],"Class":"ParticleEmitter"},{"ValueType":"bool","type":"Property","Name":"Enabled","tags":[],"Class":"ParticleEmitter"},{"ValueType":"NumberRange","type":"Property","Name":"Lifetime","tags":[],"Class":"ParticleEmitter"},{"ValueType":"float","type":"Property","Name":"LightEmission","tags":[],"Class":"ParticleEmitter"},{"ValueType":"bool","type":"Property","Name":"LockedToPart","tags":[],"Class":"ParticleEmitter"},{"ValueType":"float","type":"Property","Name":"Rate","tags":[],"Class":"ParticleEmitter"},{"ValueType":"NumberRange","type":"Property","Name":"RotSpeed","tags":[],"Class":"ParticleEmitter"},{"ValueType":"NumberRange","type":"Property","Name":"Rotation","tags":[],"Class":"ParticleEmitter"},{"ValueType":"NumberSequence","type":"Property","Name":"Size","tags":[],"Class":"ParticleEmitter"},{"ValueType":"NumberRange","type":"Property","Name":"Speed","tags":[],"Class":"ParticleEmitter"},{"ValueType":"Content","type":"Property","Name":"Texture","tags":[],"Class":"ParticleEmitter"},{"ValueType":"NumberSequence","type":"Property","Name":"Transparency","tags":[],"Class":"ParticleEmitter"},{"ValueType":"float","type":"Property","Name":"VelocityInheritance","tags":[],"Class":"ParticleEmitter"},{"ValueType":"float","type":"Property","Name":"VelocitySpread","tags":[],"Class":"ParticleEmitter"},{"ValueType":"float","type":"Property","Name":"ZOffset","tags":[],"Class":"ParticleEmitter"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"particleCount","Default":"16"}],"Name":"Emit","tags":[],"Class":"ParticleEmitter","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"Path","tags":[]},{"ValueType":"PathStatus","type":"Property","Name":"Status","tags":["readonly"],"Class":"Path"},{"ReturnType":"Array","Arguments":[],"Name":"GetPointCoordinates","tags":[],"Class":"Path","type":"Function"},{"ReturnType":"int","Arguments":[{"Type":"int","Name":"start","Default":null}],"Name":"CheckOcclusionAsync","tags":[],"Class":"Path","type":"YieldFunction"},{"Superclass":"Instance","type":"Class","Name":"PathfindingService","tags":["notCreatable"]},{"ValueType":"float","type":"Property","Name":"EmptyCutoff","tags":[],"Class":"PathfindingService"},{"ReturnType":"Instance","Arguments":[{"Type":"Vector3","Name":"start","Default":null},{"Type":"Vector3","Name":"finish","Default":null},{"Type":"float","Name":"maxDistance","Default":null}],"Name":"ComputeRawPathAsync","tags":[],"Class":"PathfindingService","type":"YieldFunction"},{"ReturnType":"Instance","Arguments":[{"Type":"Vector3","Name":"start","Default":null},{"Type":"Vector3","Name":"finish","Default":null},{"Type":"float","Name":"maxDistance","Default":null}],"Name":"ComputeSmoothPathAsync","tags":[],"Class":"PathfindingService","type":"YieldFunction"},{"Superclass":"Instance","type":"Class","Name":"PersonalServerService","tags":[]},{"ValueType":"string","type":"Property","Name":"RoleSets","tags":["RobloxScriptSecurity"],"Class":"PersonalServerService"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"player","Default":null}],"Name":"Demote","tags":["RobloxScriptSecurity"],"Class":"PersonalServerService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"player","Default":null}],"Name":"Promote","tags":["RobloxScriptSecurity"],"Class":"PersonalServerService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"personalServerGetRankUrl","Default":null}],"Name":"SetPersonalServerGetRankUrl","tags":["LocalUserSecurity"],"Class":"PersonalServerService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"personalServerRoleSetsUrl","Default":null}],"Name":"SetPersonalServerRoleSetsUrl","tags":["LocalUserSecurity"],"Class":"PersonalServerService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"personalServerSetRankUrl","Default":null}],"Name":"SetPersonalServerSetRankUrl","tags":["LocalUserSecurity"],"Class":"PersonalServerService","type":"Function"},{"ReturnType":"string","Arguments":[{"Type":"int","Name":"placeId","Default":null}],"Name":"GetRoleSets","tags":["RobloxScriptSecurity"],"Class":"PersonalServerService","type":"YieldFunction"},{"Superclass":"Instance","type":"Class","Name":"PhysicsPacketCache","tags":[]},{"Superclass":"Instance","type":"Class","Name":"PhysicsService","tags":[]},{"Superclass":"Instance","type":"Class","Name":"PhysicsSettings","tags":[]},{"ValueType":"bool","type":"Property","Name":"AllowSleep","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"AreAnchorsShown","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"AreAssembliesShown","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"AreAttachmentsShown","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"AreAwakePartsHighlighted","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"AreBodyTypesShown","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"AreConstraintsShown","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"AreContactPointsShown","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"AreJointCoordinatesShown","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"AreMechanismsShown","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"AreModelCoordsShown","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"AreOwnersShown","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"ArePartCoordsShown","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"AreRegionsShown","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"AreUnalignedPartsShown","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"AreWorldCoordsShown","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"IsReceiveAgeShown","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"IsTreeShown","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"ParallelPhysics","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"PhysicsAnalyzerEnabled","tags":["PluginSecurity","readonly"],"Class":"PhysicsSettings"},{"ValueType":"EnviromentalPhysicsThrottle","type":"Property","Name":"PhysicsEnvironmentalThrottle","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"ShowDecompositionGeometry","tags":[],"Class":"PhysicsSettings"},{"ValueType":"double","type":"Property","Name":"ThrottleAdjustTime","tags":[],"Class":"PhysicsSettings"},{"Superclass":"Instance","type":"Class","Name":"Player","tags":[]},{"ValueType":"int","type":"Property","Name":"AccountAge","tags":["readonly"],"Class":"Player"},{"ValueType":"bool","type":"Property","Name":"AppearanceDidLoad","tags":["RobloxScriptSecurity","deprecated","readonly"],"Class":"Player"},{"ValueType":"bool","type":"Property","Name":"AutoJumpEnabled","tags":[],"Class":"Player"},{"ValueType":"float","type":"Property","Name":"CameraMaxZoomDistance","tags":[],"Class":"Player"},{"ValueType":"float","type":"Property","Name":"CameraMinZoomDistance","tags":[],"Class":"Player"},{"ValueType":"CameraMode","type":"Property","Name":"CameraMode","tags":[],"Class":"Player"},{"ValueType":"bool","type":"Property","Name":"CanLoadCharacterAppearance","tags":[],"Class":"Player"},{"ValueType":"Object","type":"Property","Name":"Character","tags":[],"Class":"Player"},{"ValueType":"string","type":"Property","Name":"CharacterAppearance","tags":["notbrowsable"],"Class":"Player"},{"ValueType":"ChatMode","type":"Property","Name":"ChatMode","tags":["RobloxScriptSecurity","readonly"],"Class":"Player"},{"ValueType":"int","type":"Property","Name":"DataComplexity","tags":["readonly"],"Class":"Player"},{"ValueType":"int","type":"Property","Name":"DataComplexityLimit","tags":["LocalUserSecurity"],"Class":"Player"},{"ValueType":"bool","type":"Property","Name":"DataReady","tags":["readonly"],"Class":"Player"},{"ValueType":"DevCameraOcclusionMode","type":"Property","Name":"DevCameraOcclusionMode","tags":[],"Class":"Player"},{"ValueType":"DevComputerCameraMovementMode","type":"Property","Name":"DevComputerCameraMode","tags":[],"Class":"Player"},{"ValueType":"DevComputerMovementMode","type":"Property","Name":"DevComputerMovementMode","tags":[],"Class":"Player"},{"ValueType":"bool","type":"Property","Name":"DevEnableMouseLock","tags":[],"Class":"Player"},{"ValueType":"DevTouchCameraMovementMode","type":"Property","Name":"DevTouchCameraMode","tags":[],"Class":"Player"},{"ValueType":"DevTouchMovementMode","type":"Property","Name":"DevTouchMovementMode","tags":[],"Class":"Player"},{"ValueType":"int","type":"Property","Name":"FollowUserId","tags":["readonly"],"Class":"Player"},{"ValueType":"bool","type":"Property","Name":"Guest","tags":["RobloxScriptSecurity","readonly"],"Class":"Player"},{"ValueType":"bool","type":"Property","Name":"HasBuildTools","tags":["RobloxScriptSecurity"],"Class":"Player"},{"ValueType":"float","type":"Property","Name":"HealthDisplayDistance","tags":[],"Class":"Player"},{"ValueType":"float","type":"Property","Name":"MaximumSimulationRadius","tags":["LocalUserSecurity"],"Class":"Player"},{"ValueType":"MembershipType","type":"Property","Name":"MembershipType","tags":["readonly"],"Class":"Player"},{"ValueType":"float","type":"Property","Name":"NameDisplayDistance","tags":[],"Class":"Player"},{"ValueType":"bool","type":"Property","Name":"Neutral","tags":[],"Class":"Player"},{"ValueType":"int","type":"Property","Name":"PersonalServerRank","tags":["RobloxScriptSecurity"],"Class":"Player"},{"ValueType":"Object","type":"Property","Name":"RespawnLocation","tags":[],"Class":"Player"},{"ValueType":"float","type":"Property","Name":"SimulationRadius","tags":["LocalUserSecurity"],"Class":"Player"},{"ValueType":"BrickColor","type":"Property","Name":"TeamColor","tags":[],"Class":"Player"},{"ValueType":"bool","type":"Property","Name":"Teleported","tags":["RobloxScriptSecurity","hidden","readonly"],"Class":"Player"},{"ValueType":"bool","type":"Property","Name":"TeleportedIn","tags":["RobloxScriptSecurity"],"Class":"Player"},{"ValueType":"int","type":"Property","Name":"UserId","tags":[],"Class":"Player"},{"ValueType":"string","type":"Property","Name":"VRDevice","tags":["RobloxScriptSecurity"],"Class":"Player"},{"ValueType":"int","type":"Property","Name":"userId","tags":["deprecated"],"Class":"Player"},{"ReturnType":"void","Arguments":[],"Name":"ClearCharacterAppearance","tags":[],"Class":"Player","type":"Function"},{"ReturnType":"float","Arguments":[{"Type":"Vector3","Name":"point","Default":null}],"Name":"DistanceFromCharacter","tags":[],"Class":"Player","type":"Function"},{"ReturnType":"FriendStatus","Arguments":[{"Type":"Instance","Name":"player","Default":null}],"Name":"GetFriendStatus","tags":["RobloxScriptSecurity"],"Class":"Player","type":"Function"},{"ReturnType":"string","Arguments":[],"Name":"GetGameSessionID","tags":["RobloxSecurity"],"Class":"Player","type":"Function"},{"ReturnType":"Instance","Arguments":[],"Name":"GetMouse","tags":[],"Class":"Player","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"GetUnder13","tags":["RobloxScriptSecurity"],"Class":"Player","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"HasAppearanceLoaded","tags":[],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"JumpCharacter","tags":["RobloxScriptSecurity"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"message","Default":""}],"Name":"Kick","tags":[],"Class":"Player","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"LoadBoolean","tags":[],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"inGame","Default":"true"}],"Name":"LoadCharacter","tags":[],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"assetInstance","Default":null}],"Name":"LoadCharacterAppearance","tags":[],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"LoadData","tags":["LocalUserSecurity"],"Class":"Player","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"LoadInstance","tags":[],"Class":"Player","type":"Function"},{"ReturnType":"double","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"LoadNumber","tags":[],"Class":"Player","type":"Function"},{"ReturnType":"string","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"LoadString","tags":[],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector3","Name":"walkDirection","Default":null},{"Type":"bool","Name":"relativeToCamera","Default":"false"}],"Name":"Move","tags":[],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector2","Name":"walkDirection","Default":null},{"Type":"float","Name":"maxWalkDelta","Default":null}],"Name":"MoveCharacter","tags":["RobloxScriptSecurity"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"RemoveCharacter","tags":["LocalUserSecurity"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"player","Default":null}],"Name":"RequestFriendship","tags":["RobloxScriptSecurity"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"player","Default":null}],"Name":"RevokeFriendship","tags":["RobloxScriptSecurity"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null},{"Type":"bool","Name":"value","Default":null}],"Name":"SaveBoolean","tags":[],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"SaveData","tags":["LocalUserSecurity"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null},{"Type":"Instance","Name":"value","Default":null}],"Name":"SaveInstance","tags":[],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"SaveLeaderboardData","tags":["LocalUserSecurity"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null},{"Type":"double","Name":"value","Default":null}],"Name":"SaveNumber","tags":[],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null},{"Type":"string","Name":"value","Default":null}],"Name":"SaveString","tags":[],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"accountAge","Default":null}],"Name":"SetAccountAge","tags":["PluginSecurity"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"MembershipType","Name":"membershipType","Default":null}],"Name":"SetMembershipType","tags":["RobloxScriptSecurity"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"value","Default":null}],"Name":"SetSuperSafeChat","tags":["PluginSecurity"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"value","Default":null}],"Name":"SetUnder13","tags":["RobloxSecurity","deprecated"],"Class":"Player","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"loadBoolean","tags":["deprecated"],"Class":"Player","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"loadInstance","tags":["deprecated"],"Class":"Player","type":"Function"},{"ReturnType":"double","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"loadNumber","tags":["deprecated"],"Class":"Player","type":"Function"},{"ReturnType":"string","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"loadString","tags":["deprecated"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null},{"Type":"bool","Name":"value","Default":null}],"Name":"saveBoolean","tags":["deprecated"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null},{"Type":"Instance","Name":"value","Default":null}],"Name":"saveInstance","tags":["deprecated"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null},{"Type":"double","Name":"value","Default":null}],"Name":"saveNumber","tags":["deprecated"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null},{"Type":"string","Name":"value","Default":null}],"Name":"saveString","tags":["deprecated"],"Class":"Player","type":"Function"},{"ReturnType":"Array","Arguments":[{"Type":"int","Name":"maxFriends","Default":"200"}],"Name":"GetFriendsOnline","tags":[],"Class":"Player","type":"YieldFunction"},{"ReturnType":"int","Arguments":[{"Type":"int","Name":"groupId","Default":null}],"Name":"GetRankInGroup","tags":[],"Class":"Player","type":"YieldFunction"},{"ReturnType":"string","Arguments":[{"Type":"int","Name":"groupId","Default":null}],"Name":"GetRoleInGroup","tags":[],"Class":"Player","type":"YieldFunction"},{"ReturnType":"string","Arguments":[],"Name":"GetWebPersonalServerRank","tags":["LocalUserSecurity","backend"],"Class":"Player","type":"YieldFunction"},{"ReturnType":"bool","Arguments":[{"Type":"int","Name":"userId","Default":null}],"Name":"IsBestFriendsWith","tags":["deprecated"],"Class":"Player","type":"YieldFunction"},{"ReturnType":"bool","Arguments":[{"Type":"int","Name":"userId","Default":null}],"Name":"IsFriendsWith","tags":[],"Class":"Player","type":"YieldFunction"},{"ReturnType":"bool","Arguments":[{"Type":"int","Name":"groupId","Default":null}],"Name":"IsInGroup","tags":[],"Class":"Player","type":"YieldFunction"},{"ReturnType":"bool","Arguments":[{"Type":"int","Name":"rank","Default":null}],"Name":"SetWebPersonalServerRank","tags":["WritePlayerSecurity"],"Class":"Player","type":"YieldFunction"},{"ReturnType":"bool","Arguments":[],"Name":"WaitForDataReady","tags":[],"Class":"Player","type":"YieldFunction"},{"ReturnType":"bool","Arguments":[{"Type":"int","Name":"userId","Default":null}],"Name":"isFriendsWith","tags":["deprecated"],"Class":"Player","type":"YieldFunction"},{"ReturnType":"bool","Arguments":[],"Name":"waitForDataReady","tags":["deprecated"],"Class":"Player","type":"YieldFunction"},{"Arguments":[{"Name":"character","Type":"Instance"}],"Name":"CharacterAdded","tags":[],"Class":"Player","type":"Event"},{"Arguments":[{"Name":"character","Type":"Instance"}],"Name":"CharacterAppearanceLoaded","tags":[],"Class":"Player","type":"Event"},{"Arguments":[{"Name":"character","Type":"Instance"}],"Name":"CharacterRemoving","tags":[],"Class":"Player","type":"Event"},{"Arguments":[{"Name":"message","Type":"string"},{"Name":"recipient","Type":"Instance"}],"Name":"Chatted","tags":[],"Class":"Player","type":"Event"},{"Arguments":[{"Name":"player","Type":"Instance"},{"Name":"friendStatus","Type":"FriendStatus"}],"Name":"FriendStatusChanged","tags":["RobloxScriptSecurity"],"Class":"Player","type":"Event"},{"Arguments":[{"Name":"time","Type":"double"}],"Name":"Idled","tags":[],"Class":"Player","type":"Event"},{"Arguments":[{"Name":"teleportState","Type":"TeleportState"},{"Name":"placeId","Type":"int"},{"Name":"spawnName","Type":"string"}],"Name":"OnTeleport","tags":[],"Class":"Player","type":"Event"},{"Arguments":[{"Name":"radius","Type":"float"}],"Name":"SimulationRadiusChanged","tags":["LocalUserSecurity"],"Class":"Player","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"PlayerScripts","tags":["notCreatable"]},{"Superclass":"Instance","type":"Class","Name":"Players","tags":[]},{"ValueType":"bool","type":"Property","Name":"BubbleChat","tags":["readonly"],"Class":"Players"},{"ValueType":"bool","type":"Property","Name":"CharacterAutoLoads","tags":[],"Class":"Players"},{"ValueType":"bool","type":"Property","Name":"ClassicChat","tags":["readonly"],"Class":"Players"},{"ValueType":"Object","type":"Property","Name":"LocalPlayer","tags":["readonly"],"Class":"Players"},{"ValueType":"int","type":"Property","Name":"MaxPlayers","tags":["readonly"],"Class":"Players"},{"ValueType":"int","type":"Property","Name":"MaxPlayersInternal","tags":["LocalUserSecurity"],"Class":"Players"},{"ValueType":"int","type":"Property","Name":"NumPlayers","tags":["readonly"],"Class":"Players"},{"ValueType":"int","type":"Property","Name":"PreferredPlayers","tags":["readonly"],"Class":"Players"},{"ValueType":"int","type":"Property","Name":"PreferredPlayersInternal","tags":["LocalUserSecurity"],"Class":"Players"},{"ValueType":"Object","type":"Property","Name":"localPlayer","tags":["deprecated","hidden","readonly"],"Class":"Players"},{"ValueType":"int","type":"Property","Name":"numPlayers","tags":["deprecated","hidden","readonly"],"Class":"Players"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"AddLeaderboardKey","tags":["LocalUserSecurity"],"Class":"Players","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"message","Default":null}],"Name":"Chat","tags":["PluginSecurity"],"Class":"Players","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"int","Name":"userId","Default":null},{"Type":"bool","Name":"isTeleport","Default":"false"}],"Name":"CreateLocalPlayer","tags":["PluginSecurity"],"Class":"Players","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"int","Name":"userID","Default":null}],"Name":"GetPlayerByID","tags":["LocalUserSecurity","deprecated"],"Class":"Players","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"int","Name":"userId","Default":null}],"Name":"GetPlayerById","tags":["LocalUserSecurity"],"Class":"Players","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"int","Name":"userId","Default":null}],"Name":"GetPlayerByUserId","tags":[],"Class":"Players","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"Instance","Name":"character","Default":null}],"Name":"GetPlayerFromCharacter","tags":[],"Class":"Players","type":"Function"},{"ReturnType":"Objects","Arguments":[],"Name":"GetPlayers","tags":[],"Class":"Players","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"GetUseCoreScriptHealthBar","tags":["RobloxScriptSecurity"],"Class":"Players","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"player","Default":null},{"Type":"string","Name":"reason","Default":null},{"Type":"string","Name":"optionalMessage","Default":null}],"Name":"ReportAbuse","tags":["LocalUserSecurity"],"Class":"Players","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"url","Default":null}],"Name":"SetAbuseReportUrl","tags":["RobloxSecurity"],"Class":"Players","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"url","Default":null}],"Name":"SetBuildUserPermissionsUrl","tags":["RobloxSecurity"],"Class":"Players","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"url","Default":null}],"Name":"SetChatFilterUrl","tags":["RobloxSecurity"],"Class":"Players","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"ChatStyle","Name":"style","Default":"Classic"}],"Name":"SetChatStyle","tags":["PluginSecurity"],"Class":"Players","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"url","Default":null}],"Name":"SetLoadDataUrl","tags":["LocalUserSecurity"],"Class":"Players","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"url","Default":null}],"Name":"SetSaveDataUrl","tags":["LocalUserSecurity"],"Class":"Players","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"url","Default":null}],"Name":"SetSaveLeaderboardDataUrl","tags":["LocalUserSecurity"],"Class":"Players","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"url","Default":null}],"Name":"SetSysStatsUrl","tags":["LocalUserSecurity"],"Class":"Players","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"urlId","Default":null}],"Name":"SetSysStatsUrlId","tags":["LocalUserSecurity"],"Class":"Players","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"message","Default":null}],"Name":"TeamChat","tags":["PluginSecurity"],"Class":"Players","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"message","Default":null},{"Type":"Instance","Name":"player","Default":null}],"Name":"WhisperChat","tags":["LocalUserSecurity"],"Class":"Players","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"Instance","Name":"character","Default":null}],"Name":"getPlayerFromCharacter","tags":["deprecated"],"Class":"Players","type":"Function"},{"ReturnType":"Objects","Arguments":[],"Name":"getPlayers","tags":["deprecated"],"Class":"Players","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"Instance","Name":"character","Default":null}],"Name":"playerFromCharacter","tags":["deprecated"],"Class":"Players","type":"Function"},{"ReturnType":"Objects","Arguments":[],"Name":"players","tags":["deprecated"],"Class":"Players","type":"Function"},{"ReturnType":"string","Arguments":[{"Type":"int","Name":"blockerUserId","Default":null},{"Type":"int","Name":"blockeeUserId","Default":null}],"Name":"BlockUser","tags":["RobloxScriptSecurity"],"Class":"Players","type":"YieldFunction"},{"ReturnType":"Instance","Arguments":[{"Type":"int","Name":"userId","Default":null}],"Name":"GetCharacterAppearanceAsync","tags":[],"Class":"Players","type":"YieldFunction"},{"ReturnType":"Instance","Arguments":[{"Type":"int","Name":"userId","Default":null}],"Name":"GetFriendsAsync","tags":[],"Class":"Players","type":"YieldFunction"},{"ReturnType":"string","Arguments":[{"Type":"int","Name":"userId","Default":null}],"Name":"GetNameFromUserIdAsync","tags":[],"Class":"Players","type":"YieldFunction"},{"ReturnType":"int","Arguments":[{"Type":"string","Name":"userName","Default":null}],"Name":"GetUserIdFromNameAsync","tags":[],"Class":"Players","type":"YieldFunction"},{"ReturnType":"string","Arguments":[{"Type":"int","Name":"exblockerUserId","Default":null},{"Type":"int","Name":"exblockeeUserId","Default":null}],"Name":"UnblockUser","tags":["RobloxScriptSecurity"],"Class":"Players","type":"YieldFunction"},{"Arguments":[{"Name":"player","Type":"Instance"},{"Name":"player","Type":"Instance"},{"Name":"friendRequestEvent","Type":"FriendRequestEvent"}],"Name":"FriendRequestEvent","tags":["RobloxScriptSecurity"],"Class":"Players","type":"Event"},{"Arguments":[{"Name":"message","Type":"string"}],"Name":"GameAnnounce","tags":["RobloxScriptSecurity"],"Class":"Players","type":"Event"},{"Arguments":[{"Name":"player","Type":"Instance"}],"Name":"PlayerAdded","tags":[],"Class":"Players","type":"Event"},{"Arguments":[{"Name":"player","Type":"Instance"}],"Name":"PlayerAddedEarly","tags":["LocalUserSecurity"],"Class":"Players","type":"Event"},{"Arguments":[{"Name":"chatType","Type":"PlayerChatType"},{"Name":"player","Type":"Instance"},{"Name":"message","Type":"string"},{"Name":"targetPlayer","Type":"Instance"}],"Name":"PlayerChatted","tags":["LocalUserSecurity"],"Class":"Players","type":"Event"},{"Arguments":[{"Name":"player","Type":"Instance"}],"Name":"PlayerRemoving","tags":[],"Class":"Players","type":"Event"},{"Arguments":[{"Name":"player","Type":"Instance"}],"Name":"PlayerRemovingLate","tags":["LocalUserSecurity"],"Class":"Players","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"Plugin","tags":[]},{"ValueType":"bool","type":"Property","Name":"CollisionEnabled","tags":["readonly"],"Class":"Plugin"},{"ValueType":"float","type":"Property","Name":"GridSize","tags":["readonly"],"Class":"Plugin"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"exclusiveMouse","Default":null}],"Name":"Activate","tags":["PluginSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"name","Default":null}],"Name":"CreateToolbar","tags":["PluginSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"JointCreationMode","Arguments":[],"Name":"GetJoinMode","tags":["PluginSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"Instance","Arguments":[],"Name":"GetMouse","tags":["PluginSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"Variant","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"GetSetting","tags":["PluginSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"int","Arguments":[],"Name":"GetStudioUserId","tags":["PluginSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"Objects","Arguments":[{"Type":"Objects","Name":"objects","Default":null}],"Name":"Negate","tags":["PluginSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"script","Default":null},{"Type":"int","Name":"lineNumber","Default":"0"}],"Name":"OpenScript","tags":["PluginSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"url","Default":null}],"Name":"OpenWikiPage","tags":["PluginSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"SaveSelectedToRoblox","tags":["PluginSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"Objects","Arguments":[{"Type":"Objects","Name":"objects","Default":null}],"Name":"Separate","tags":["PluginSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null},{"Type":"Variant","Name":"value","Default":null}],"Name":"SetSetting","tags":["PluginSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"Objects","Name":"objects","Default":null}],"Name":"Union","tags":["PluginSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"int","Arguments":[{"Type":"string","Name":"assetType","Default":null}],"Name":"PromptForExistingAssetId","tags":["PluginSecurity"],"Class":"Plugin","type":"YieldFunction"},{"Arguments":[],"Name":"Deactivation","tags":["PluginSecurity"],"Class":"Plugin","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"PluginManager","tags":[]},{"ReturnType":"Instance","Arguments":[],"Name":"CreatePlugin","tags":["PluginSecurity"],"Class":"PluginManager","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"filePath","Default":""}],"Name":"ExportPlace","tags":["PluginSecurity"],"Class":"PluginManager","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"filePath","Default":""}],"Name":"ExportSelection","tags":["PluginSecurity"],"Class":"PluginManager","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"PointsService","tags":["notCreatable"]},{"ReturnType":"int","Arguments":[],"Name":"GetAwardablePoints","tags":["deprecated"],"Class":"PointsService","type":"Function"},{"ReturnType":"Tuple","Arguments":[{"Type":"int","Name":"userId","Default":null},{"Type":"int","Name":"amount","Default":null}],"Name":"AwardPoints","tags":[],"Class":"PointsService","type":"YieldFunction"},{"ReturnType":"int","Arguments":[{"Type":"int","Name":"userId","Default":null}],"Name":"GetGamePointBalance","tags":[],"Class":"PointsService","type":"YieldFunction"},{"ReturnType":"int","Arguments":[{"Type":"int","Name":"userId","Default":null}],"Name":"GetPointBalance","tags":["deprecated"],"Class":"PointsService","type":"YieldFunction"},{"Arguments":[{"Name":"userId","Type":"int"},{"Name":"pointsAwarded","Type":"int"},{"Name":"userBalanceInGame","Type":"int"},{"Name":"userTotalBalance","Type":"int"}],"Name":"PointsAwarded","tags":[],"Class":"PointsService","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"Pose","tags":[]},{"ValueType":"CoordinateFrame","type":"Property","Name":"CFrame","tags":[],"Class":"Pose"},{"ValueType":"PoseEasingDirection","type":"Property","Name":"EasingDirection","tags":[],"Class":"Pose"},{"ValueType":"PoseEasingStyle","type":"Property","Name":"EasingStyle","tags":[],"Class":"Pose"},{"ValueType":"float","type":"Property","Name":"MaskWeight","tags":[],"Class":"Pose"},{"ValueType":"float","type":"Property","Name":"Weight","tags":[],"Class":"Pose"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"pose","Default":null}],"Name":"AddSubPose","tags":[],"Class":"Pose","type":"Function"},{"ReturnType":"Objects","Arguments":[],"Name":"GetSubPoses","tags":[],"Class":"Pose","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"pose","Default":null}],"Name":"RemoveSubPose","tags":[],"Class":"Pose","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"PostEffect","tags":[]},{"ValueType":"bool","type":"Property","Name":"Enabled","tags":[],"Class":"PostEffect"},{"Superclass":"PostEffect","type":"Class","Name":"BloomEffect","tags":[]},{"ValueType":"float","type":"Property","Name":"Intensity","tags":[],"Class":"BloomEffect"},{"ValueType":"float","type":"Property","Name":"Size","tags":[],"Class":"BloomEffect"},{"ValueType":"float","type":"Property","Name":"Threshold","tags":[],"Class":"BloomEffect"},{"Superclass":"PostEffect","type":"Class","Name":"BlurEffect","tags":[]},{"ValueType":"float","type":"Property","Name":"Size","tags":[],"Class":"BlurEffect"},{"Superclass":"PostEffect","type":"Class","Name":"ColorCorrectionEffect","tags":[]},{"ValueType":"float","type":"Property","Name":"Brightness","tags":[],"Class":"ColorCorrectionEffect"},{"ValueType":"float","type":"Property","Name":"Contrast","tags":[],"Class":"ColorCorrectionEffect"},{"ValueType":"float","type":"Property","Name":"Saturation","tags":[],"Class":"ColorCorrectionEffect"},{"ValueType":"Color3","type":"Property","Name":"TintColor","tags":[],"Class":"ColorCorrectionEffect"},{"Superclass":"PostEffect","type":"Class","Name":"SunRaysEffect","tags":[]},{"ValueType":"float","type":"Property","Name":"Intensity","tags":[],"Class":"SunRaysEffect"},{"ValueType":"float","type":"Property","Name":"Spread","tags":[],"Class":"SunRaysEffect"},{"Superclass":"Instance","type":"Class","Name":"RayValue","tags":[]},{"ValueType":"Ray","type":"Property","Name":"Value","tags":[],"Class":"RayValue"},{"Arguments":[{"Name":"value","Type":"Ray"}],"Name":"Changed","tags":[],"Class":"RayValue","type":"Event"},{"Arguments":[{"Name":"value","Type":"Ray"}],"Name":"changed","tags":["deprecated"],"Class":"RayValue","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"ReflectionMetadata","tags":[]},{"Superclass":"Instance","type":"Class","Name":"ReflectionMetadataCallbacks","tags":[]},{"Superclass":"Instance","type":"Class","Name":"ReflectionMetadataClasses","tags":[]},{"Superclass":"Instance","type":"Class","Name":"ReflectionMetadataEnums","tags":[]},{"Superclass":"Instance","type":"Class","Name":"ReflectionMetadataEvents","tags":[]},{"Superclass":"Instance","type":"Class","Name":"ReflectionMetadataFunctions","tags":[]},{"Superclass":"Instance","type":"Class","Name":"ReflectionMetadataItem","tags":[]},{"ValueType":"bool","type":"Property","Name":"Browsable","tags":[],"Class":"ReflectionMetadataItem"},{"ValueType":"bool","type":"Property","Name":"Deprecated","tags":[],"Class":"ReflectionMetadataItem"},{"ValueType":"bool","type":"Property","Name":"IsBackend","tags":[],"Class":"ReflectionMetadataItem"},{"ValueType":"double","type":"Property","Name":"UIMaximum","tags":[],"Class":"ReflectionMetadataItem"},{"ValueType":"double","type":"Property","Name":"UIMinimum","tags":[],"Class":"ReflectionMetadataItem"},{"ValueType":"string","type":"Property","Name":"summary","tags":[],"Class":"ReflectionMetadataItem"},{"Superclass":"ReflectionMetadataItem","type":"Class","Name":"ReflectionMetadataClass","tags":[]},{"ValueType":"int","type":"Property","Name":"ExplorerImageIndex","tags":[],"Class":"ReflectionMetadataClass"},{"ValueType":"int","type":"Property","Name":"ExplorerOrder","tags":[],"Class":"ReflectionMetadataClass"},{"ValueType":"bool","type":"Property","Name":"Insertable","tags":[],"Class":"ReflectionMetadataClass"},{"ValueType":"string","type":"Property","Name":"PreferredParent","tags":[],"Class":"ReflectionMetadataClass"},{"Superclass":"ReflectionMetadataItem","type":"Class","Name":"ReflectionMetadataEnum","tags":[]},{"Superclass":"ReflectionMetadataItem","type":"Class","Name":"ReflectionMetadataEnumItem","tags":[]},{"Superclass":"ReflectionMetadataItem","type":"Class","Name":"ReflectionMetadataMember","tags":[]},{"Superclass":"Instance","type":"Class","Name":"ReflectionMetadataProperties","tags":[]},{"Superclass":"Instance","type":"Class","Name":"ReflectionMetadataYieldFunctions","tags":[]},{"Superclass":"Instance","type":"Class","Name":"RemoteEvent","tags":[]},{"ReturnType":"void","Arguments":[{"Type":"Tuple","Name":"arguments","Default":null}],"Name":"FireAllClients","tags":[],"Class":"RemoteEvent","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"player","Default":null},{"Type":"Tuple","Name":"arguments","Default":null}],"Name":"FireClient","tags":[],"Class":"RemoteEvent","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Tuple","Name":"arguments","Default":null}],"Name":"FireServer","tags":[],"Class":"RemoteEvent","type":"Function"},{"Arguments":[{"Name":"arguments","Type":"Tuple"}],"Name":"OnClientEvent","tags":[],"Class":"RemoteEvent","type":"Event"},{"Arguments":[{"Name":"player","Type":"Instance"},{"Name":"arguments","Type":"Tuple"}],"Name":"OnServerEvent","tags":[],"Class":"RemoteEvent","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"RemoteFunction","tags":[]},{"ReturnType":"Tuple","Arguments":[{"Type":"Instance","Name":"player","Default":null},{"Type":"Tuple","Name":"arguments","Default":null}],"Name":"InvokeClient","tags":[],"Class":"RemoteFunction","type":"YieldFunction"},{"ReturnType":"Tuple","Arguments":[{"Type":"Tuple","Name":"arguments","Default":null}],"Name":"InvokeServer","tags":[],"Class":"RemoteFunction","type":"YieldFunction"},{"ReturnType":"Tuple","Arguments":[{"Name":"arguments","Type":"Tuple"}],"Name":"OnClientInvoke","tags":[],"Class":"RemoteFunction","type":"Callback"},{"ReturnType":"Tuple","Arguments":[{"Name":"player","Type":"Instance"},{"Name":"arguments","Type":"Tuple"}],"Name":"OnServerInvoke","tags":[],"Class":"RemoteFunction","type":"Callback"},{"Superclass":"Instance","type":"Class","Name":"RenderHooksService","tags":[]},{"ReturnType":"void","Arguments":[],"Name":"CaptureMetrics","tags":["LocalUserSecurity"],"Class":"RenderHooksService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"qId","Default":null}],"Name":"DisableQueue","tags":["LocalUserSecurity"],"Class":"RenderHooksService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"enabled","Default":null}],"Name":"EnableAdorns","tags":["LocalUserSecurity"],"Class":"RenderHooksService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"qId","Default":null}],"Name":"EnableQueue","tags":["LocalUserSecurity"],"Class":"RenderHooksService","type":"Function"},{"ReturnType":"double","Arguments":[],"Name":"GetDeltaAve","tags":["LocalUserSecurity"],"Class":"RenderHooksService","type":"Function"},{"ReturnType":"double","Arguments":[],"Name":"GetGPUDelay","tags":["LocalUserSecurity"],"Class":"RenderHooksService","type":"Function"},{"ReturnType":"double","Arguments":[],"Name":"GetPresentTime","tags":["LocalUserSecurity"],"Class":"RenderHooksService","type":"Function"},{"ReturnType":"double","Arguments":[],"Name":"GetRenderAve","tags":["LocalUserSecurity"],"Class":"RenderHooksService","type":"Function"},{"ReturnType":"double","Arguments":[],"Name":"GetRenderConfMax","tags":["LocalUserSecurity"],"Class":"RenderHooksService","type":"Function"},{"ReturnType":"double","Arguments":[],"Name":"GetRenderConfMin","tags":["LocalUserSecurity"],"Class":"RenderHooksService","type":"Function"},{"ReturnType":"double","Arguments":[],"Name":"GetRenderStd","tags":["LocalUserSecurity"],"Class":"RenderHooksService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"PrintScene","tags":["LocalUserSecurity"],"Class":"RenderHooksService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"ReloadShaders","tags":["LocalUserSecurity"],"Class":"RenderHooksService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"width","Default":null},{"Type":"int","Name":"height","Default":null}],"Name":"ResizeWindow","tags":["LocalUserSecurity"],"Class":"RenderHooksService","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"RenderSettings","tags":["notbrowsable"]},{"ValueType":"AASamples","type":"Property","Name":"AASamples","tags":[],"Class":"RenderSettings"},{"ValueType":"Antialiasing","type":"Property","Name":"Antialiasing","tags":[],"Class":"RenderSettings"},{"ValueType":"int","type":"Property","Name":"AutoFRMLevel","tags":[],"Class":"RenderSettings"},{"ValueType":"bool","type":"Property","Name":"DebugDisableInterpolation","tags":[],"Class":"RenderSettings"},{"ValueType":"bool","type":"Property","Name":"EagerBulkExecution","tags":[],"Class":"RenderSettings"},{"ValueType":"QualityLevel","type":"Property","Name":"EditQualityLevel","tags":[],"Class":"RenderSettings"},{"ValueType":"bool","type":"Property","Name":"EnableFRM","tags":["hidden"],"Class":"RenderSettings"},{"ValueType":"bool","type":"Property","Name":"ExportMergeByMaterial","tags":[],"Class":"RenderSettings"},{"ValueType":"FramerateManagerMode","type":"Property","Name":"FrameRateManager","tags":[],"Class":"RenderSettings"},{"ValueType":"GraphicsMode","type":"Property","Name":"GraphicsMode","tags":[],"Class":"RenderSettings"},{"ValueType":"bool","type":"Property","Name":"IsAggregationShown","tags":[],"Class":"RenderSettings"},{"ValueType":"bool","type":"Property","Name":"IsSynchronizedWithPhysics","tags":[],"Class":"RenderSettings"},{"ValueType":"int","type":"Property","Name":"MeshCacheSize","tags":[],"Class":"RenderSettings"},{"ValueType":"QualityLevel","type":"Property","Name":"QualityLevel","tags":[],"Class":"RenderSettings"},{"ValueType":"bool","type":"Property","Name":"ReloadAssets","tags":[],"Class":"RenderSettings"},{"ValueType":"Resolution","type":"Property","Name":"Resolution","tags":[],"Class":"RenderSettings"},{"ValueType":"bool","type":"Property","Name":"ShowBoundingBoxes","tags":[],"Class":"RenderSettings"},{"ValueType":"bool","type":"Property","Name":"ShowInterpolationpath","tags":[],"Class":"RenderSettings"},{"ValueType":"int","type":"Property","Name":"TextureCacheSize","tags":[],"Class":"RenderSettings"},{"ReturnType":"int","Arguments":[],"Name":"GetMaxQualityLevel","tags":[],"Class":"RenderSettings","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"ReplicatedFirst","tags":["notCreatable"]},{"ReturnType":"bool","Arguments":[],"Name":"IsDefaultLoadingGuiRemoved","tags":["RobloxScriptSecurity"],"Class":"ReplicatedFirst","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"IsFinishedReplicating","tags":["RobloxScriptSecurity"],"Class":"ReplicatedFirst","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"RemoveDefaultLoadingScreen","tags":[],"Class":"ReplicatedFirst","type":"Function"},{"Arguments":[],"Name":"FinishedReplicating","tags":["RobloxScriptSecurity"],"Class":"ReplicatedFirst","type":"Event"},{"Arguments":[],"Name":"RemoveDefaultLoadingGuiSignal","tags":["RobloxScriptSecurity"],"Class":"ReplicatedFirst","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"ReplicatedStorage","tags":["notCreatable"]},{"Superclass":"Instance","type":"Class","Name":"RobloxReplicatedStorage","tags":["notCreatable","notbrowsable"]},{"Superclass":"Instance","type":"Class","Name":"RunService","tags":[]},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"name","Default":null},{"Type":"int","Name":"priority","Default":null},{"Type":"Function","Name":"function","Default":null}],"Name":"BindToRenderStep","tags":[],"Class":"RunService","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"IsClient","tags":[],"Class":"RunService","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"IsRunMode","tags":[],"Class":"RunService","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"IsRunning","tags":["RobloxScriptSecurity"],"Class":"RunService","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"IsServer","tags":[],"Class":"RunService","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"IsStudio","tags":[],"Class":"RunService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Pause","tags":["PluginSecurity"],"Class":"RunService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Reset","tags":["PluginSecurity","deprecated"],"Class":"RunService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Run","tags":["PluginSecurity"],"Class":"RunService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Stop","tags":["PluginSecurity"],"Class":"RunService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"name","Default":null}],"Name":"UnbindFromRenderStep","tags":[],"Class":"RunService","type":"Function"},{"Arguments":[{"Name":"step","Type":"double"}],"Name":"Heartbeat","tags":[],"Class":"RunService","type":"Event"},{"Arguments":[{"Name":"step","Type":"double"}],"Name":"RenderStepped","tags":[],"Class":"RunService","type":"Event"},{"Arguments":[{"Name":"time","Type":"double"},{"Name":"step","Type":"double"}],"Name":"Stepped","tags":[],"Class":"RunService","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"RuntimeScriptService","tags":["notCreatable"]},{"Superclass":"Instance","type":"Class","Name":"ScriptContext","tags":["notCreatable"]},{"ValueType":"bool","type":"Property","Name":"ScriptsDisabled","tags":["LocalUserSecurity"],"Class":"ScriptContext"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"assetId","Default":null},{"Type":"Instance","Name":"parent","Default":null},{"Type":"string","Name":"name","Default":null}],"Name":"AddCoreScript","tags":["RobloxScriptSecurity"],"Class":"ScriptContext","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"name","Default":null},{"Type":"Instance","Name":"parent","Default":null}],"Name":"AddCoreScriptLocal","tags":["RobloxScriptSecurity"],"Class":"ScriptContext","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"assetId","Default":null}],"Name":"AddStarterScript","tags":["LocalUserSecurity"],"Class":"ScriptContext","type":"Function"},{"ReturnType":"Tuple","Arguments":[{"Type":"bool","Name":"clearHighwaterMark","Default":"true"}],"Name":"GetHeapStats","tags":["RobloxScriptSecurity"],"Class":"ScriptContext","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetScriptStats","tags":["RobloxScriptSecurity"],"Class":"ScriptContext","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"enable","Default":"false"}],"Name":"SetCollectScriptStats","tags":["RobloxScriptSecurity"],"Class":"ScriptContext","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"double","Name":"seconds","Default":null}],"Name":"SetTimeout","tags":["PluginSecurity"],"Class":"ScriptContext","type":"Function"},{"Arguments":[{"Name":"object","Type":"Instance"},{"Name":"member","Type":"string"},{"Name":"script","Type":"Instance"}],"Name":"CamelCaseViolation","tags":["RobloxScriptSecurity"],"Class":"ScriptContext","type":"Event"},{"Arguments":[{"Name":"message","Type":"string"},{"Name":"stackTrace","Type":"string"},{"Name":"script","Type":"Instance"}],"Name":"Error","tags":[],"Class":"ScriptContext","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"ScriptDebugger","tags":["notCreatable"]},{"ValueType":"int","type":"Property","Name":"CurrentLine","tags":["readonly"],"Class":"ScriptDebugger"},{"ValueType":"bool","type":"Property","Name":"IsDebugging","tags":["readonly"],"Class":"ScriptDebugger"},{"ValueType":"bool","type":"Property","Name":"IsPaused","tags":["readonly"],"Class":"ScriptDebugger"},{"ValueType":"Object","type":"Property","Name":"Script","tags":["readonly"],"Class":"ScriptDebugger"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"expression","Default":null}],"Name":"AddWatch","tags":[],"Class":"ScriptDebugger","type":"Function"},{"ReturnType":"Objects","Arguments":[],"Name":"GetBreakpoints","tags":[],"Class":"ScriptDebugger","type":"Function"},{"ReturnType":"Map","Arguments":[],"Name":"GetGlobals","tags":[],"Class":"ScriptDebugger","type":"Function"},{"ReturnType":"Map","Arguments":[{"Type":"int","Name":"stackFrame","Default":"0"}],"Name":"GetLocals","tags":[],"Class":"ScriptDebugger","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetStack","tags":[],"Class":"ScriptDebugger","type":"Function"},{"ReturnType":"Map","Arguments":[{"Type":"int","Name":"stackFrame","Default":"0"}],"Name":"GetUpvalues","tags":[],"Class":"ScriptDebugger","type":"Function"},{"ReturnType":"Variant","Arguments":[{"Type":"Instance","Name":"watch","Default":null}],"Name":"GetWatchValue","tags":[],"Class":"ScriptDebugger","type":"Function"},{"ReturnType":"Objects","Arguments":[],"Name":"GetWatches","tags":[],"Class":"ScriptDebugger","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Resume","tags":["deprecated"],"Class":"ScriptDebugger","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"int","Name":"line","Default":null}],"Name":"SetBreakpoint","tags":[],"Class":"ScriptDebugger","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"name","Default":null},{"Type":"Variant","Name":"value","Default":null}],"Name":"SetGlobal","tags":[],"Class":"ScriptDebugger","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"name","Default":null},{"Type":"Variant","Name":"value","Default":null},{"Type":"int","Name":"stackFrame","Default":"0"}],"Name":"SetLocal","tags":[],"Class":"ScriptDebugger","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"name","Default":null},{"Type":"Variant","Name":"value","Default":null},{"Type":"int","Name":"stackFrame","Default":"0"}],"Name":"SetUpvalue","tags":[],"Class":"ScriptDebugger","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"StepIn","tags":["deprecated"],"Class":"ScriptDebugger","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"StepOut","tags":["deprecated"],"Class":"ScriptDebugger","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"StepOver","tags":["deprecated"],"Class":"ScriptDebugger","type":"Function"},{"Arguments":[{"Name":"breakpoint","Type":"Instance"}],"Name":"BreakpointAdded","tags":[],"Class":"ScriptDebugger","type":"Event"},{"Arguments":[{"Name":"breakpoint","Type":"Instance"}],"Name":"BreakpointRemoved","tags":[],"Class":"ScriptDebugger","type":"Event"},{"Arguments":[{"Name":"line","Type":"int"}],"Name":"EncounteredBreak","tags":[],"Class":"ScriptDebugger","type":"Event"},{"Arguments":[],"Name":"Resuming","tags":[],"Class":"ScriptDebugger","type":"Event"},{"Arguments":[{"Name":"watch","Type":"Instance"}],"Name":"WatchAdded","tags":[],"Class":"ScriptDebugger","type":"Event"},{"Arguments":[{"Name":"watch","Type":"Instance"}],"Name":"WatchRemoved","tags":[],"Class":"ScriptDebugger","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"ScriptInformationProvider","tags":[]},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"access","Default":null}],"Name":"SetAccessKey","tags":["RobloxSecurity"],"Class":"ScriptInformationProvider","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"url","Default":null}],"Name":"SetAssetUrl","tags":["LocalUserSecurity"],"Class":"ScriptInformationProvider","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"ScriptService","tags":[]},{"Superclass":"Instance","type":"Class","Name":"Selection","tags":[]},{"ReturnType":"Objects","Arguments":[],"Name":"Get","tags":["PluginSecurity"],"Class":"Selection","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Objects","Name":"selection","Default":null}],"Name":"Set","tags":["PluginSecurity"],"Class":"Selection","type":"Function"},{"Arguments":[],"Name":"SelectionChanged","tags":[],"Class":"Selection","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"ServerScriptService","tags":["notCreatable"]},{"Superclass":"Instance","type":"Class","Name":"ServerStorage","tags":["notCreatable"]},{"Superclass":"Instance","type":"Class","Name":"ServiceProvider","tags":["notbrowsable"]},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"className","Default":null}],"Name":"FindService","tags":[],"Class":"ServiceProvider","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"className","Default":null}],"Name":"GetService","tags":[],"Class":"ServiceProvider","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"className","Default":null}],"Name":"getService","tags":["deprecated"],"Class":"ServiceProvider","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"className","Default":null}],"Name":"service","tags":["deprecated"],"Class":"ServiceProvider","type":"Function"},{"Arguments":[],"Name":"Close","tags":[],"Class":"ServiceProvider","type":"Event"},{"Arguments":[],"Name":"CloseLate","tags":["LocalUserSecurity"],"Class":"ServiceProvider","type":"Event"},{"Arguments":[{"Name":"service","Type":"Instance"}],"Name":"ServiceAdded","tags":[],"Class":"ServiceProvider","type":"Event"},{"Arguments":[{"Name":"service","Type":"Instance"}],"Name":"ServiceRemoving","tags":[],"Class":"ServiceProvider","type":"Event"},{"Superclass":"ServiceProvider","type":"Class","Name":"DataModel","tags":[]},{"ValueType":"int","type":"Property","Name":"CreatorId","tags":["readonly"],"Class":"DataModel"},{"ValueType":"CreatorType","type":"Property","Name":"CreatorType","tags":["readonly"],"Class":"DataModel"},{"ValueType":"GearGenreSetting","type":"Property","Name":"GearGenreSetting","tags":["readonly"],"Class":"DataModel"},{"ValueType":"Genre","type":"Property","Name":"Genre","tags":["readonly"],"Class":"DataModel"},{"ValueType":"bool","type":"Property","Name":"IsPersonalServer","tags":["RobloxScriptSecurity"],"Class":"DataModel"},{"ValueType":"string","type":"Property","Name":"JobId","tags":["readonly"],"Class":"DataModel"},{"ValueType":"bool","type":"Property","Name":"LocalSaveEnabled","tags":["RobloxScriptSecurity","readonly"],"Class":"DataModel"},{"ValueType":"int","type":"Property","Name":"PlaceId","tags":["readonly"],"Class":"DataModel"},{"ValueType":"int","type":"Property","Name":"PlaceVersion","tags":["readonly"],"Class":"DataModel"},{"ValueType":"string","type":"Property","Name":"VIPServerId","tags":["readonly"],"Class":"DataModel"},{"ValueType":"int","type":"Property","Name":"VIPServerOwnerId","tags":["readonly"],"Class":"DataModel"},{"ValueType":"Object","type":"Property","Name":"Workspace","tags":["readonly"],"Class":"DataModel"},{"ValueType":"Object","type":"Property","Name":"lighting","tags":["deprecated","readonly"],"Class":"DataModel"},{"ValueType":"Object","type":"Property","Name":"workspace","tags":["deprecated","readonly"],"Class":"DataModel"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"displayName","Default":null},{"Type":"string","Name":"stat","Default":null}],"Name":"AddStat","tags":["LocalUserSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"ClearMessage","tags":["LocalUserSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"localSave","Default":null}],"Name":"FinishShutdown","tags":["RobloxScriptSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"double","Arguments":[{"Type":"string","Name":"jobname","Default":null},{"Type":"double","Name":"greaterThan","Default":null}],"Name":"GetJobIntervalPeakFraction","tags":["PluginSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"double","Arguments":[{"Type":"string","Name":"jobname","Default":null},{"Type":"double","Name":"greaterThan","Default":null}],"Name":"GetJobTimePeakFraction","tags":["PluginSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetJobsExtendedStats","tags":["PluginSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetJobsInfo","tags":["PluginSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"string","Arguments":[],"Name":"GetMessage","tags":[],"Class":"DataModel","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"GetRemoteBuildMode","tags":[],"Class":"DataModel","type":"Function"},{"ReturnType":"string","Arguments":[{"Type":"string","Name":"url","Default":null},{"Type":"bool","Name":"synchronous","Default":"false"}],"Name":"HttpGet","tags":["RobloxScriptSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"string","Arguments":[{"Type":"string","Name":"url","Default":null},{"Type":"string","Name":"data","Default":null},{"Type":"bool","Name":"synchronous","Default":"false"},{"Type":"string","Name":"contentType","Default":"*/*"}],"Name":"HttpPost","tags":["RobloxScriptSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"GearType","Name":"gearType","Default":null}],"Name":"IsGearTypeAllowed","tags":[],"Class":"DataModel","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"IsLoaded","tags":[],"Class":"DataModel","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Content","Name":"url","Default":null}],"Name":"Load","tags":["LocalUserSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"assetID","Default":null}],"Name":"LoadGame","tags":["LocalUserSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"LoadPlugins","tags":["RobloxSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"assetID","Default":null}],"Name":"LoadWorld","tags":["LocalUserSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"stat","Default":null}],"Name":"RemoveStat","tags":["LocalUserSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"category","Default":null},{"Type":"string","Name":"action","Default":"custom"},{"Type":"string","Name":"label","Default":"none"},{"Type":"int","Name":"value","Default":"0"}],"Name":"ReportInGoogleAnalytics","tags":["RobloxScriptSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"id","Default":null},{"Type":"string","Name":"key1","Default":null},{"Type":"string","Name":"value1","Default":null},{"Type":"string","Name":"key2","Default":null},{"Type":"string","Name":"value2","Default":null}],"Name":"ReportMeasurement","tags":["RobloxScriptSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Content","Name":"url","Default":null}],"Name":"Save","tags":["RobloxSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"SaveStats","tags":["LocalUserSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"ServerSave","tags":["LocalUserSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"creatorID","Default":null},{"Type":"CreatorType","Name":"creatorType","Default":null}],"Name":"SetCreatorID","tags":["PluginSecurity","deprecated"],"Class":"DataModel","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"creatorId","Default":null},{"Type":"CreatorType","Name":"creatorType","Default":null}],"Name":"SetCreatorId","tags":["PluginSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"GearGenreSetting","Name":"genreRestriction","Default":null},{"Type":"int","Name":"allowedGenres","Default":null}],"Name":"SetGearSettings","tags":["PluginSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Genre","Name":"genre","Default":null}],"Name":"SetGenre","tags":["PluginSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"double","Name":"seconds","Default":null}],"Name":"SetJobsExtendedStatsWindow","tags":["LocalUserSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"message","Default":null}],"Name":"SetMessage","tags":["LocalUserSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"SetMessageBrickCount","tags":["LocalUserSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"placeID","Default":null},{"Type":"bool","Name":"robloxPlace","Default":"false"}],"Name":"SetPlaceID","tags":["PluginSecurity","deprecated"],"Class":"DataModel","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"placeId","Default":null},{"Type":"bool","Name":"robloxPlace","Default":"false"}],"Name":"SetPlaceId","tags":["PluginSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"placeId","Default":null}],"Name":"SetPlaceVersion","tags":["PluginSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"buildModeEnabled","Default":null}],"Name":"SetRemoteBuildMode","tags":["LocalUserSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"info","Default":null}],"Name":"SetScreenshotInfo","tags":["LocalUserSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"url","Default":null}],"Name":"SetServerSaveUrl","tags":["LocalUserSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"universeId","Default":null}],"Name":"SetUniverseId","tags":["PluginSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"newId","Default":null}],"Name":"SetVIPServerId","tags":["LocalUserSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"newId","Default":null}],"Name":"SetVIPServerOwnerId","tags":["LocalUserSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"info","Default":null}],"Name":"SetVideoInfo","tags":["LocalUserSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Shutdown","tags":["LocalUserSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"ToggleTools","tags":["LocalUserSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"string","Arguments":[{"Type":"string","Name":"url","Default":null}],"Name":"HttpGetAsync","tags":["RobloxScriptSecurity"],"Class":"DataModel","type":"YieldFunction"},{"ReturnType":"string","Arguments":[{"Type":"string","Name":"url","Default":null},{"Type":"string","Name":"data","Default":null},{"Type":"string","Name":"contentType","Default":"*/*"}],"Name":"HttpPostAsync","tags":["RobloxScriptSecurity"],"Class":"DataModel","type":"YieldFunction"},{"ReturnType":"bool","Arguments":[{"Type":"SaveFilter","Name":"saveFilter","Default":"SaveAll"}],"Name":"SavePlace","tags":[],"Class":"DataModel","type":"YieldFunction"},{"ReturnType":"bool","Arguments":[],"Name":"SaveToRoblox","tags":["RobloxScriptSecurity"],"Class":"DataModel","type":"YieldFunction"},{"Arguments":[],"Name":"AllowedGearTypeChanged","tags":[],"Class":"DataModel","type":"Event"},{"Arguments":[{"Name":"betterQuality","Type":"bool"}],"Name":"GraphicsQualityChangeRequest","tags":[],"Class":"DataModel","type":"Event"},{"Arguments":[{"Name":"object","Type":"Instance"},{"Name":"descriptor","Type":"Property"}],"Name":"ItemChanged","tags":[],"Class":"DataModel","type":"Event"},{"Arguments":[],"Name":"Loaded","tags":[],"Class":"DataModel","type":"Event"},{"ReturnType":"Tuple","Arguments":[],"Name":"OnClose","tags":[],"Class":"DataModel","type":"Callback"},{"ReturnType":"bool","Arguments":[],"Name":"RequestShutdown","tags":["RobloxScriptSecurity","noyield"],"Class":"DataModel","type":"Callback"},{"Superclass":"ServiceProvider","type":"Class","Name":"GenericSettings","tags":[]},{"Superclass":"GenericSettings","type":"Class","Name":"GlobalSettings","tags":["notbrowsable"]},{"ReturnType":"bool","Arguments":[{"Type":"string","Name":"name","Default":null}],"Name":"GetFFlag","tags":[],"Class":"GlobalSettings","type":"Function"},{"ReturnType":"string","Arguments":[{"Type":"string","Name":"name","Default":null}],"Name":"GetFVariable","tags":[],"Class":"GlobalSettings","type":"Function"},{"ReturnType":"Dictionary","Arguments":[],"Name":"GetFVariables","tags":["RobloxScriptSecurity"],"Class":"GlobalSettings","type":"Function"},{"Superclass":"GenericSettings","type":"Class","Name":"UserSettings","tags":[]},{"ReturnType":"bool","Arguments":[{"Type":"string","Name":"name","Default":null}],"Name":"IsUserFeatureEnabled","tags":[],"Class":"UserSettings","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Reset","tags":[],"Class":"UserSettings","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"Sky","tags":[]},{"ValueType":"bool","type":"Property","Name":"CelestialBodiesShown","tags":[],"Class":"Sky"},{"ValueType":"Content","type":"Property","Name":"SkyboxBk","tags":[],"Class":"Sky"},{"ValueType":"Content","type":"Property","Name":"SkyboxDn","tags":[],"Class":"Sky"},{"ValueType":"Content","type":"Property","Name":"SkyboxFt","tags":[],"Class":"Sky"},{"ValueType":"Content","type":"Property","Name":"SkyboxLf","tags":[],"Class":"Sky"},{"ValueType":"Content","type":"Property","Name":"SkyboxRt","tags":[],"Class":"Sky"},{"ValueType":"Content","type":"Property","Name":"SkyboxUp","tags":[],"Class":"Sky"},{"ValueType":"int","type":"Property","Name":"StarCount","tags":[],"Class":"Sky"},{"Superclass":"Instance","type":"Class","Name":"Smoke","tags":[]},{"ValueType":"Color3","type":"Property","Name":"Color","tags":[],"Class":"Smoke"},{"ValueType":"bool","type":"Property","Name":"Enabled","tags":[],"Class":"Smoke"},{"ValueType":"float","type":"Property","Name":"Opacity","tags":[],"Class":"Smoke"},{"ValueType":"float","type":"Property","Name":"RiseVelocity","tags":[],"Class":"Smoke"},{"ValueType":"float","type":"Property","Name":"Size","tags":[],"Class":"Smoke"},{"Superclass":"Instance","type":"Class","Name":"SocialService","tags":[]},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"bestFriendUrl","Default":null}],"Name":"SetBestFriendUrl","tags":["LocalUserSecurity"],"Class":"SocialService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"friendUrl","Default":null}],"Name":"SetFriendUrl","tags":["LocalUserSecurity"],"Class":"SocialService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"groupRankUrl","Default":null}],"Name":"SetGroupRankUrl","tags":["LocalUserSecurity"],"Class":"SocialService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"groupRoleUrl","Default":null}],"Name":"SetGroupRoleUrl","tags":["LocalUserSecurity"],"Class":"SocialService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"groupUrl","Default":null}],"Name":"SetGroupUrl","tags":["LocalUserSecurity"],"Class":"SocialService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"stuffUrl","Default":null}],"Name":"SetPackageContentsUrl","tags":["LocalUserSecurity"],"Class":"SocialService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"stuffUrl","Default":null}],"Name":"SetStuffUrl","tags":["LocalUserSecurity"],"Class":"SocialService","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"Sound","tags":[]},{"ValueType":"bool","type":"Property","Name":"IsPaused","tags":["readonly"],"Class":"Sound"},{"ValueType":"bool","type":"Property","Name":"IsPlaying","tags":["readonly"],"Class":"Sound"},{"ValueType":"bool","type":"Property","Name":"Looped","tags":[],"Class":"Sound"},{"ValueType":"float","type":"Property","Name":"MaxDistance","tags":[],"Class":"Sound"},{"ValueType":"float","type":"Property","Name":"MinDistance","tags":[],"Class":"Sound"},{"ValueType":"float","type":"Property","Name":"Pitch","tags":[],"Class":"Sound"},{"ValueType":"bool","type":"Property","Name":"PlayOnRemove","tags":[],"Class":"Sound"},{"ValueType":"Content","type":"Property","Name":"SoundId","tags":[],"Class":"Sound"},{"ValueType":"double","type":"Property","Name":"TimeLength","tags":["readonly"],"Class":"Sound"},{"ValueType":"double","type":"Property","Name":"TimePosition","tags":[],"Class":"Sound"},{"ValueType":"float","type":"Property","Name":"Volume","tags":[],"Class":"Sound"},{"ValueType":"bool","type":"Property","Name":"isPlaying","tags":["deprecated","readonly"],"Class":"Sound"},{"ReturnType":"void","Arguments":[],"Name":"Pause","tags":[],"Class":"Sound","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Play","tags":[],"Class":"Sound","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Resume","tags":[],"Class":"Sound","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Stop","tags":[],"Class":"Sound","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"pause","tags":["deprecated"],"Class":"Sound","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"play","tags":["deprecated"],"Class":"Sound","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"stop","tags":["deprecated"],"Class":"Sound","type":"Function"},{"Arguments":[{"Name":"soundId","Type":"string"},{"Name":"numOfTimesLooped","Type":"int"}],"Name":"DidLoop","tags":[],"Class":"Sound","type":"Event"},{"Arguments":[{"Name":"soundId","Type":"string"}],"Name":"Ended","tags":[],"Class":"Sound","type":"Event"},{"Arguments":[{"Name":"soundId","Type":"string"}],"Name":"Paused","tags":[],"Class":"Sound","type":"Event"},{"Arguments":[{"Name":"soundId","Type":"string"}],"Name":"Played","tags":[],"Class":"Sound","type":"Event"},{"Arguments":[{"Name":"soundId","Type":"string"}],"Name":"Stopped","tags":[],"Class":"Sound","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"SoundService","tags":["notCreatable"]},{"ValueType":"ReverbType","type":"Property","Name":"AmbientReverb","tags":[],"Class":"SoundService"},{"ValueType":"float","type":"Property","Name":"DistanceFactor","tags":[],"Class":"SoundService"},{"ValueType":"float","type":"Property","Name":"DopplerScale","tags":[],"Class":"SoundService"},{"ValueType":"float","type":"Property","Name":"RolloffScale","tags":[],"Class":"SoundService"},{"ReturnType":"Tuple","Arguments":[],"Name":"GetListener","tags":[],"Class":"SoundService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"SoundType","Name":"sound","Default":null}],"Name":"PlayStockSound","tags":["RobloxScriptSecurity"],"Class":"SoundService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"ListenerType","Name":"listenerType","Default":null},{"Type":"Tuple","Name":"listener","Default":null}],"Name":"SetListener","tags":[],"Class":"SoundService","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"Sparkles","tags":[]},{"ValueType":"Color3","type":"Property","Name":"Color","tags":["hidden"],"Class":"Sparkles"},{"ValueType":"bool","type":"Property","Name":"Enabled","tags":[],"Class":"Sparkles"},{"ValueType":"Color3","type":"Property","Name":"SparkleColor","tags":[],"Class":"Sparkles"},{"Superclass":"Instance","type":"Class","Name":"SpawnerService","tags":[]},{"Superclass":"Instance","type":"Class","Name":"StarterGear","tags":[]},{"Superclass":"Instance","type":"Class","Name":"StarterPlayer","tags":[]},{"ValueType":"bool","type":"Property","Name":"AutoJumpEnabled","tags":[],"Class":"StarterPlayer"},{"ValueType":"float","type":"Property","Name":"CameraMaxZoomDistance","tags":[],"Class":"StarterPlayer"},{"ValueType":"float","type":"Property","Name":"CameraMinZoomDistance","tags":[],"Class":"StarterPlayer"},{"ValueType":"CameraMode","type":"Property","Name":"CameraMode","tags":[],"Class":"StarterPlayer"},{"ValueType":"DevCameraOcclusionMode","type":"Property","Name":"DevCameraOcclusionMode","tags":[],"Class":"StarterPlayer"},{"ValueType":"DevComputerCameraMovementMode","type":"Property","Name":"DevComputerCameraMovementMode","tags":[],"Class":"StarterPlayer"},{"ValueType":"DevComputerMovementMode","type":"Property","Name":"DevComputerMovementMode","tags":[],"Class":"StarterPlayer"},{"ValueType":"DevTouchCameraMovementMode","type":"Property","Name":"DevTouchCameraMovementMode","tags":[],"Class":"StarterPlayer"},{"ValueType":"DevTouchMovementMode","type":"Property","Name":"DevTouchMovementMode","tags":[],"Class":"StarterPlayer"},{"ValueType":"bool","type":"Property","Name":"EnableMouseLockOption","tags":[],"Class":"StarterPlayer"},{"ValueType":"float","type":"Property","Name":"HealthDisplayDistance","tags":[],"Class":"StarterPlayer"},{"ValueType":"bool","type":"Property","Name":"LoadCharacterAppearance","tags":[],"Class":"StarterPlayer"},{"ValueType":"float","type":"Property","Name":"NameDisplayDistance","tags":[],"Class":"StarterPlayer"},{"Superclass":"Instance","type":"Class","Name":"StarterPlayerScripts","tags":[]},{"Superclass":"StarterPlayerScripts","type":"Class","Name":"StarterCharacterScripts","tags":[]},{"Superclass":"Instance","type":"Class","Name":"Stats","tags":["notCreatable"]},{"ValueType":"double","type":"Property","Name":"MinReportInterval","tags":["RobloxScriptSecurity"],"Class":"Stats"},{"ValueType":"string","type":"Property","Name":"ReporterType","tags":["RobloxScriptSecurity"],"Class":"Stats"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"category","Default":null},{"Type":"Dictionary","Name":"data","Default":null}],"Name":"Report","tags":["RobloxScriptSecurity"],"Class":"Stats","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"ReportJobsStepWindow","tags":["RobloxScriptSecurity"],"Class":"Stats","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"includeJobs","Default":"false"}],"Name":"ReportTaskScheduler","tags":["RobloxScriptSecurity"],"Class":"Stats","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"url","Default":null}],"Name":"SetReportUrl","tags":["RobloxScriptSecurity"],"Class":"Stats","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"StatsItem","tags":[]},{"ReturnType":"double","Arguments":[],"Name":"GetValue","tags":["PluginSecurity"],"Class":"StatsItem","type":"Function"},{"ReturnType":"string","Arguments":[],"Name":"GetValueString","tags":["PluginSecurity"],"Class":"StatsItem","type":"Function"},{"Superclass":"StatsItem","type":"Class","Name":"ProfilingItem","tags":[]},{"ReturnType":"Tuple","Arguments":[{"Type":"double","Name":"window","Default":"0"}],"Name":"GetTimes","tags":["PluginSecurity"],"Class":"ProfilingItem","type":"Function"},{"ReturnType":"Tuple","Arguments":[{"Type":"int","Name":"frames","Default":"1"}],"Name":"GetTimesForFrames","tags":["PluginSecurity"],"Class":"ProfilingItem","type":"Function"},{"Superclass":"StatsItem","type":"Class","Name":"RunningAverageItemDouble","tags":[]},{"Superclass":"StatsItem","type":"Class","Name":"RunningAverageItemInt","tags":[]},{"Superclass":"StatsItem","type":"Class","Name":"RunningAverageTimeIntervalItem","tags":[]},{"Superclass":"StatsItem","type":"Class","Name":"TotalCountTimeIntervalItem","tags":[]},{"Superclass":"Instance","type":"Class","Name":"StringValue","tags":[]},{"ValueType":"string","type":"Property","Name":"Value","tags":[],"Class":"StringValue"},{"Arguments":[{"Name":"value","Type":"string"}],"Name":"Changed","tags":[],"Class":"StringValue","type":"Event"},{"Arguments":[{"Name":"value","Type":"string"}],"Name":"changed","tags":["deprecated"],"Class":"StringValue","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"StudioTool","tags":[]},{"ValueType":"bool","type":"Property","Name":"Enabled","tags":[],"Class":"StudioTool"},{"Arguments":[],"Name":"Activated","tags":[],"Class":"StudioTool","type":"Event"},{"Arguments":[],"Name":"Deactivated","tags":[],"Class":"StudioTool","type":"Event"},{"Arguments":[{"Name":"mouse","Type":"Instance"}],"Name":"Equipped","tags":[],"Class":"StudioTool","type":"Event"},{"Arguments":[],"Name":"Unequipped","tags":[],"Class":"StudioTool","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"TaskScheduler","tags":[]},{"ValueType":"bool","type":"Property","Name":"AreArbitersThrottled","tags":[],"Class":"TaskScheduler"},{"ValueType":"ConcurrencyModel","type":"Property","Name":"Concurrency","tags":[],"Class":"TaskScheduler"},{"ValueType":"double","type":"Property","Name":"NumRunningJobs","tags":["readonly"],"Class":"TaskScheduler"},{"ValueType":"double","type":"Property","Name":"NumSleepingJobs","tags":["readonly"],"Class":"TaskScheduler"},{"ValueType":"double","type":"Property","Name":"NumWaitingJobs","tags":["readonly"],"Class":"TaskScheduler"},{"ValueType":"PriorityMethod","type":"Property","Name":"PriorityMethod","tags":[],"Class":"TaskScheduler"},{"ValueType":"double","type":"Property","Name":"SchedulerDutyCycle","tags":["readonly"],"Class":"TaskScheduler"},{"ValueType":"double","type":"Property","Name":"SchedulerRate","tags":["readonly"],"Class":"TaskScheduler"},{"ValueType":"SleepAdjustMethod","type":"Property","Name":"SleepAdjustMethod","tags":[],"Class":"TaskScheduler"},{"ValueType":"double","type":"Property","Name":"ThreadAffinity","tags":["readonly"],"Class":"TaskScheduler"},{"ValueType":"ThreadPoolConfig","type":"Property","Name":"ThreadPoolConfig","tags":[],"Class":"TaskScheduler"},{"ValueType":"int","type":"Property","Name":"ThreadPoolSize","tags":["readonly"],"Class":"TaskScheduler"},{"ValueType":"double","type":"Property","Name":"ThrottledJobSleepTime","tags":[],"Class":"TaskScheduler"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"exclusive","Default":"true"},{"Type":"double","Name":"fps","Default":"30"}],"Name":"AddDummyJob","tags":["LocalUserSecurity"],"Class":"TaskScheduler","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"double","Name":"timeSlice","Default":null},{"Type":"int","Name":"numShare","Default":null}],"Name":"SetThreadShare","tags":["LocalUserSecurity","deprecated"],"Class":"TaskScheduler","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"Team","tags":[]},{"ValueType":"bool","type":"Property","Name":"AutoAssignable","tags":[],"Class":"Team"},{"ValueType":"bool","type":"Property","Name":"AutoColorCharacters","tags":["deprecated"],"Class":"Team"},{"ValueType":"int","type":"Property","Name":"Score","tags":["deprecated"],"Class":"Team"},{"ValueType":"BrickColor","type":"Property","Name":"TeamColor","tags":[],"Class":"Team"},{"Superclass":"Instance","type":"Class","Name":"Teams","tags":["notCreatable"]},{"ReturnType":"Objects","Arguments":[],"Name":"GetTeams","tags":[],"Class":"Teams","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"RebalanceTeams","tags":["deprecated"],"Class":"Teams","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"TeleportService","tags":[]},{"ValueType":"bool","type":"Property","Name":"CustomizedTeleportUI","tags":["deprecated"],"Class":"TeleportService"},{"ReturnType":"Variant","Arguments":[],"Name":"GetLocalPlayerTeleportData","tags":[],"Class":"TeleportService","type":"Function"},{"ReturnType":"Variant","Arguments":[{"Type":"string","Name":"setting","Default":null}],"Name":"GetTeleportSetting","tags":[],"Class":"TeleportService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"setting","Default":null},{"Type":"Variant","Name":"value","Default":null}],"Name":"SetTeleportSetting","tags":[],"Class":"TeleportService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"placeId","Default":null},{"Type":"Instance","Name":"player","Default":"nil"},{"Type":"Variant","Name":"teleportData","Default":null},{"Type":"Instance","Name":"customLoadingScreen","Default":"nil"}],"Name":"Teleport","tags":[],"Class":"TeleportService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"TeleportCancel","tags":["RobloxScriptSecurity"],"Class":"TeleportService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"placeId","Default":null},{"Type":"string","Name":"instanceId","Default":null},{"Type":"Instance","Name":"player","Default":"nil"},{"Type":"string","Name":"spawnName","Default":""},{"Type":"Variant","Name":"teleportData","Default":null},{"Type":"Instance","Name":"customLoadingScreen","Default":"nil"}],"Name":"TeleportToPlaceInstance","tags":[],"Class":"TeleportService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"placeId","Default":null},{"Type":"string","Name":"reservedServerAccessCode","Default":null},{"Type":"Objects","Name":"players","Default":null},{"Type":"string","Name":"spawnName","Default":""},{"Type":"Variant","Name":"teleportData","Default":null},{"Type":"Instance","Name":"customLoadingScreen","Default":"nil"}],"Name":"TeleportToPrivateServer","tags":[],"Class":"TeleportService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"placeId","Default":null},{"Type":"string","Name":"spawnName","Default":null},{"Type":"Instance","Name":"player","Default":"nil"},{"Type":"Variant","Name":"teleportData","Default":null},{"Type":"Instance","Name":"customLoadingScreen","Default":"nil"}],"Name":"TeleportToSpawnByName","tags":[],"Class":"TeleportService","type":"Function"},{"ReturnType":"Tuple","Arguments":[{"Type":"int","Name":"userId","Default":null}],"Name":"GetPlayerPlaceInstanceAsync","tags":[],"Class":"TeleportService","type":"YieldFunction"},{"ReturnType":"string","Arguments":[{"Type":"int","Name":"placeId","Default":null}],"Name":"ReserveServer","tags":[],"Class":"TeleportService","type":"YieldFunction"},{"Arguments":[{"Name":"loadingGui","Type":"Instance"},{"Name":"dataTable","Type":"Variant"}],"Name":"LocalPlayerArrivedFromTeleport","tags":[],"Class":"TeleportService","type":"Event"},{"ReturnType":"bool","Arguments":[{"Name":"message","Type":"string"},{"Name":"placeId","Type":"int"},{"Name":"spawnName","Type":"string"}],"Name":"ConfirmationCallback","tags":["RobloxScriptSecurity","noyield"],"Class":"TeleportService","type":"Callback"},{"ReturnType":"void","Arguments":[{"Name":"message","Type":"string"}],"Name":"ErrorCallback","tags":["RobloxScriptSecurity","noyield"],"Class":"TeleportService","type":"Callback"},{"Superclass":"Instance","type":"Class","Name":"TerrainRegion","tags":[]},{"ValueType":"bool","type":"Property","Name":"IsSmooth","tags":["readonly"],"Class":"TerrainRegion"},{"ValueType":"Vector3","type":"Property","Name":"SizeInCells","tags":["readonly"],"Class":"TerrainRegion"},{"ReturnType":"void","Arguments":[],"Name":"ConvertToSmooth","tags":["PluginSecurity"],"Class":"TerrainRegion","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"TestService","tags":[]},{"ValueType":"bool","type":"Property","Name":"AutoRuns","tags":[],"Class":"TestService"},{"ValueType":"string","type":"Property","Name":"Description","tags":[],"Class":"TestService"},{"ValueType":"int","type":"Property","Name":"ErrorCount","tags":["readonly"],"Class":"TestService"},{"ValueType":"bool","type":"Property","Name":"Is30FpsThrottleEnabled","tags":[],"Class":"TestService"},{"ValueType":"bool","type":"Property","Name":"IsPhysicsEnvironmentalThrottled","tags":[],"Class":"TestService"},{"ValueType":"bool","type":"Property","Name":"IsSleepAllowed","tags":[],"Class":"TestService"},{"ValueType":"int","type":"Property","Name":"NumberOfPlayers","tags":[],"Class":"TestService"},{"ValueType":"double","type":"Property","Name":"SimulateSecondsLag","tags":[],"Class":"TestService"},{"ValueType":"int","type":"Property","Name":"TestCount","tags":["readonly"],"Class":"TestService"},{"ValueType":"double","type":"Property","Name":"Timeout","tags":[],"Class":"TestService"},{"ValueType":"int","type":"Property","Name":"WarnCount","tags":["readonly"],"Class":"TestService"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"condition","Default":null},{"Type":"string","Name":"description","Default":null},{"Type":"Instance","Name":"source","Default":"nil"},{"Type":"int","Name":"line","Default":"0"}],"Name":"Check","tags":[],"Class":"TestService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"text","Default":null},{"Type":"Instance","Name":"source","Default":"nil"},{"Type":"int","Name":"line","Default":"0"}],"Name":"Checkpoint","tags":[],"Class":"TestService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Done","tags":[],"Class":"TestService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"description","Default":null},{"Type":"Instance","Name":"source","Default":"nil"},{"Type":"int","Name":"line","Default":"0"}],"Name":"Error","tags":[],"Class":"TestService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"description","Default":null},{"Type":"Instance","Name":"source","Default":"nil"},{"Type":"int","Name":"line","Default":"0"}],"Name":"Fail","tags":[],"Class":"TestService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"text","Default":null},{"Type":"Instance","Name":"source","Default":"nil"},{"Type":"int","Name":"line","Default":"0"}],"Name":"Message","tags":[],"Class":"TestService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"condition","Default":null},{"Type":"string","Name":"description","Default":null},{"Type":"Instance","Name":"source","Default":"nil"},{"Type":"int","Name":"line","Default":"0"}],"Name":"Require","tags":[],"Class":"TestService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"condition","Default":null},{"Type":"string","Name":"description","Default":null},{"Type":"Instance","Name":"source","Default":"nil"},{"Type":"int","Name":"line","Default":"0"}],"Name":"Warn","tags":[],"Class":"TestService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Run","tags":["PluginSecurity"],"Class":"TestService","type":"YieldFunction"},{"Arguments":[{"Name":"condition","Type":"bool"},{"Name":"text","Type":"string"},{"Name":"script","Type":"Instance"},{"Name":"line","Type":"int"}],"Name":"ServerCollectConditionalResult","tags":[],"Class":"TestService","type":"Event"},{"Arguments":[{"Name":"text","Type":"string"},{"Name":"script","Type":"Instance"},{"Name":"line","Type":"int"}],"Name":"ServerCollectResult","tags":[],"Class":"TestService","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"TextService","tags":["notCreatable"]},{"ReturnType":"Vector2","Arguments":[{"Type":"string","Name":"string","Default":null},{"Type":"int","Name":"fontSize","Default":null},{"Type":"Font","Name":"font","Default":null},{"Type":"Vector2","Name":"frameSize","Default":null}],"Name":"GetTextSize","tags":["RobloxScriptSecurity"],"Class":"TextService","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"TimerService","tags":["notCreatable"]},{"Superclass":"Instance","type":"Class","Name":"Toolbar","tags":[]},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"text","Default":null},{"Type":"string","Name":"tooltip","Default":null},{"Type":"string","Name":"iconname","Default":null}],"Name":"CreateButton","tags":["PluginSecurity"],"Class":"Toolbar","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"TouchInputService","tags":[]},{"Superclass":"Instance","type":"Class","Name":"TouchTransmitter","tags":["notCreatable","notbrowsable"]},{"Superclass":"Instance","type":"Class","Name":"TweenService","tags":[]},{"Superclass":"Instance","type":"Class","Name":"UserGameSettings","tags":[]},{"ValueType":"bool","type":"Property","Name":"AllTutorialsDisabled","tags":["RobloxScriptSecurity"],"Class":"UserGameSettings"},{"ValueType":"CustomCameraMode","type":"Property","Name":"CameraMode","tags":["RobloxScriptSecurity"],"Class":"UserGameSettings"},{"ValueType":"ComputerCameraMovementMode","type":"Property","Name":"ComputerCameraMovementMode","tags":[],"Class":"UserGameSettings"},{"ValueType":"ComputerMovementMode","type":"Property","Name":"ComputerMovementMode","tags":[],"Class":"UserGameSettings"},{"ValueType":"ControlMode","type":"Property","Name":"ControlMode","tags":[],"Class":"UserGameSettings"},{"ValueType":"bool","type":"Property","Name":"Fullscreen","tags":["RobloxScriptSecurity"],"Class":"UserGameSettings"},{"ValueType":"UploadSetting","type":"Property","Name":"ImageUploadPromptBehavior","tags":["RobloxScriptSecurity"],"Class":"UserGameSettings"},{"ValueType":"float","type":"Property","Name":"MasterVolume","tags":[],"Class":"UserGameSettings"},{"ValueType":"float","type":"Property","Name":"MouseSensitivity","tags":[],"Class":"UserGameSettings"},{"ValueType":"RotationType","type":"Property","Name":"RotationType","tags":[],"Class":"UserGameSettings"},{"ValueType":"SavedQualitySetting","type":"Property","Name":"SavedQualityLevel","tags":[],"Class":"UserGameSettings"},{"ValueType":"TouchCameraMovementMode","type":"Property","Name":"TouchCameraMovementMode","tags":[],"Class":"UserGameSettings"},{"ValueType":"TouchMovementMode","type":"Property","Name":"TouchMovementMode","tags":[],"Class":"UserGameSettings"},{"ValueType":"bool","type":"Property","Name":"UsedHideHudShortcut","tags":["RobloxScriptSecurity"],"Class":"UserGameSettings"},{"ValueType":"int","type":"Property","Name":"VRRotationIntensity","tags":["RobloxScriptSecurity"],"Class":"UserGameSettings"},{"ValueType":"UploadSetting","type":"Property","Name":"VideoUploadPromptBehavior","tags":["RobloxScriptSecurity"],"Class":"UserGameSettings"},{"ReturnType":"bool","Arguments":[{"Type":"string","Name":"tutorialId","Default":null}],"Name":"GetTutorialState","tags":["RobloxScriptSecurity"],"Class":"UserGameSettings","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"InFullScreen","tags":[],"Class":"UserGameSettings","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"InStudioMode","tags":[],"Class":"UserGameSettings","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"tutorialId","Default":null},{"Type":"bool","Name":"value","Default":null}],"Name":"SetTutorialState","tags":["RobloxScriptSecurity"],"Class":"UserGameSettings","type":"Function"},{"Arguments":[{"Name":"isFullscreen","Type":"bool"}],"Name":"FullscreenChanged","tags":[],"Class":"UserGameSettings","type":"Event"},{"Arguments":[{"Name":"isStudioMode","Type":"bool"}],"Name":"StudioModeChanged","tags":[],"Class":"UserGameSettings","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"UserInputService","tags":["notCreatable"]},{"ValueType":"bool","type":"Property","Name":"AccelerometerEnabled","tags":["readonly"],"Class":"UserInputService"},{"ValueType":"bool","type":"Property","Name":"GamepadEnabled","tags":["readonly"],"Class":"UserInputService"},{"ValueType":"bool","type":"Property","Name":"GyroscopeEnabled","tags":["readonly"],"Class":"UserInputService"},{"ValueType":"bool","type":"Property","Name":"KeyboardEnabled","tags":["readonly"],"Class":"UserInputService"},{"ValueType":"bool","type":"Property","Name":"ModalEnabled","tags":[],"Class":"UserInputService"},{"ValueType":"MouseBehavior","type":"Property","Name":"MouseBehavior","tags":[],"Class":"UserInputService"},{"ValueType":"bool","type":"Property","Name":"MouseEnabled","tags":["readonly"],"Class":"UserInputService"},{"ValueType":"bool","type":"Property","Name":"MouseIconEnabled","tags":[],"Class":"UserInputService"},{"ValueType":"OverrideMouseIconBehavior","type":"Property","Name":"OverrideMouseIconBehavior","tags":["RobloxScriptSecurity"],"Class":"UserInputService"},{"ValueType":"bool","type":"Property","Name":"TouchEnabled","tags":["readonly"],"Class":"UserInputService"},{"ValueType":"CoordinateFrame","type":"Property","Name":"UserHeadCFrame","tags":["deprecated","readonly"],"Class":"UserInputService"},{"ValueType":"bool","type":"Property","Name":"VREnabled","tags":["readonly"],"Class":"UserInputService"},{"ReturnType":"bool","Arguments":[{"Type":"UserInputType","Name":"gamepadNum","Default":null},{"Type":"KeyCode","Name":"gamepadKeyCode","Default":null}],"Name":"GamepadSupports","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetConnectedGamepads","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"Instance","Arguments":[],"Name":"GetDeviceAcceleration","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"Instance","Arguments":[],"Name":"GetDeviceGravity","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"Tuple","Arguments":[],"Name":"GetDeviceRotation","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"Instance","Arguments":[],"Name":"GetFocusedTextBox","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"UserInputType","Name":"gamepadNum","Default":null}],"Name":"GetGamepadConnected","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"Array","Arguments":[{"Type":"UserInputType","Name":"gamepadNum","Default":null}],"Name":"GetGamepadState","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetKeysPressed","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"UserInputType","Arguments":[],"Name":"GetLastInputType","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetNavigationGamepads","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"Platform","Arguments":[],"Name":"GetPlatform","tags":["RobloxScriptSecurity"],"Class":"UserInputService","type":"Function"},{"ReturnType":"Array","Arguments":[{"Type":"UserInputType","Name":"gamepadNum","Default":null}],"Name":"GetSupportedGamepadKeyCodes","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"CoordinateFrame","Arguments":[{"Type":"UserCFrame","Name":"type","Default":null}],"Name":"GetUserCFrame","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"KeyCode","Name":"keyCode","Default":null}],"Name":"IsKeyDown","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"UserInputType","Name":"gamepadEnum","Default":null}],"Name":"IsNavigationGamepad","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"RecenterUserHeadCFrame","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"UserInputType","Name":"gamepadEnum","Default":null},{"Type":"bool","Name":"enabled","Default":null}],"Name":"SetNavigationGamepad","tags":[],"Class":"UserInputService","type":"Function"},{"Arguments":[{"Name":"acceleration","Type":"Instance"}],"Name":"DeviceAccelerationChanged","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"gravity","Type":"Instance"}],"Name":"DeviceGravityChanged","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"rotation","Type":"Instance"},{"Name":"cframe","Type":"CoordinateFrame"}],"Name":"DeviceRotationChanged","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"gamepadNum","Type":"UserInputType"}],"Name":"GamepadConnected","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"gamepadNum","Type":"UserInputType"}],"Name":"GamepadDisconnected","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"input","Type":"Instance"},{"Name":"gameProcessedEvent","Type":"bool"}],"Name":"InputBegan","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"input","Type":"Instance"},{"Name":"gameProcessedEvent","Type":"bool"}],"Name":"InputChanged","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"input","Type":"Instance"},{"Name":"gameProcessedEvent","Type":"bool"}],"Name":"InputEnded","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[],"Name":"JumpRequest","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"lastInputType","Type":"UserInputType"}],"Name":"LastInputTypeChanged","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"textboxReleased","Type":"Instance"}],"Name":"TextBoxFocusReleased","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"textboxFocused","Type":"Instance"}],"Name":"TextBoxFocused","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"touch","Type":"Instance"},{"Name":"gameProcessedEvent","Type":"bool"}],"Name":"TouchEnded","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"touchPositions","Type":"Array"},{"Name":"state","Type":"UserInputState"},{"Name":"gameProcessedEvent","Type":"bool"}],"Name":"TouchLongPress","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"touch","Type":"Instance"},{"Name":"gameProcessedEvent","Type":"bool"}],"Name":"TouchMoved","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"touchPositions","Type":"Array"},{"Name":"totalTranslation","Type":"Vector2"},{"Name":"velocity","Type":"Vector2"},{"Name":"state","Type":"UserInputState"},{"Name":"gameProcessedEvent","Type":"bool"}],"Name":"TouchPan","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"touchPositions","Type":"Array"},{"Name":"scale","Type":"float"},{"Name":"velocity","Type":"float"},{"Name":"state","Type":"UserInputState"},{"Name":"gameProcessedEvent","Type":"bool"}],"Name":"TouchPinch","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"touchPositions","Type":"Array"},{"Name":"rotation","Type":"float"},{"Name":"velocity","Type":"float"},{"Name":"state","Type":"UserInputState"},{"Name":"gameProcessedEvent","Type":"bool"}],"Name":"TouchRotate","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"touch","Type":"Instance"},{"Name":"gameProcessedEvent","Type":"bool"}],"Name":"TouchStarted","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"swipeDirection","Type":"SwipeDirection"},{"Name":"numberOfTouches","Type":"int"},{"Name":"gameProcessedEvent","Type":"bool"}],"Name":"TouchSwipe","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"touchPositions","Type":"Array"},{"Name":"gameProcessedEvent","Type":"bool"}],"Name":"TouchTap","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"type","Type":"UserCFrame"},{"Name":"value","Type":"CoordinateFrame"}],"Name":"UserCFrameChanged","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[],"Name":"WindowFocusReleased","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[],"Name":"WindowFocused","tags":[],"Class":"UserInputService","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"Vector3Value","tags":[]},{"ValueType":"Vector3","type":"Property","Name":"Value","tags":[],"Class":"Vector3Value"},{"Arguments":[{"Name":"value","Type":"Vector3"}],"Name":"Changed","tags":[],"Class":"Vector3Value","type":"Event"},{"Arguments":[{"Name":"value","Type":"Vector3"}],"Name":"changed","tags":["deprecated"],"Class":"Vector3Value","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"VirtualUser","tags":["notCreatable"]},{"ReturnType":"void","Arguments":[{"Type":"Vector2","Name":"position","Default":null},{"Type":"CoordinateFrame","Name":"camera","Default":"Identity"}],"Name":"Button1Down","tags":["LocalUserSecurity"],"Class":"VirtualUser","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector2","Name":"position","Default":null},{"Type":"CoordinateFrame","Name":"camera","Default":"Identity"}],"Name":"Button1Up","tags":["LocalUserSecurity"],"Class":"VirtualUser","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector2","Name":"position","Default":null},{"Type":"CoordinateFrame","Name":"camera","Default":"Identity"}],"Name":"Button2Down","tags":["LocalUserSecurity"],"Class":"VirtualUser","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector2","Name":"position","Default":null},{"Type":"CoordinateFrame","Name":"camera","Default":"Identity"}],"Name":"Button2Up","tags":["LocalUserSecurity"],"Class":"VirtualUser","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"CaptureController","tags":["LocalUserSecurity"],"Class":"VirtualUser","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector2","Name":"position","Default":null},{"Type":"CoordinateFrame","Name":"camera","Default":"Identity"}],"Name":"ClickButton1","tags":["LocalUserSecurity"],"Class":"VirtualUser","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector2","Name":"position","Default":null},{"Type":"CoordinateFrame","Name":"camera","Default":"Identity"}],"Name":"ClickButton2","tags":["LocalUserSecurity"],"Class":"VirtualUser","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector2","Name":"position","Default":null},{"Type":"CoordinateFrame","Name":"camera","Default":"Identity"}],"Name":"MoveMouse","tags":["LocalUserSecurity"],"Class":"VirtualUser","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"SetKeyDown","tags":["LocalUserSecurity"],"Class":"VirtualUser","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"SetKeyUp","tags":["LocalUserSecurity"],"Class":"VirtualUser","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"StartRecording","tags":["LocalUserSecurity"],"Class":"VirtualUser","type":"Function"},{"ReturnType":"string","Arguments":[],"Name":"StopRecording","tags":["LocalUserSecurity"],"Class":"VirtualUser","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"TypeKey","tags":["LocalUserSecurity"],"Class":"VirtualUser","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"Visit","tags":["notCreatable"]},{"ReturnType":"string","Arguments":[],"Name":"GetUploadUrl","tags":["RobloxSecurity"],"Class":"Visit","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"pingUrl","Default":null},{"Type":"int","Name":"interval","Default":null}],"Name":"SetPing","tags":["RobloxSecurity"],"Class":"Visit","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"url","Default":null}],"Name":"SetUploadUrl","tags":["RobloxSecurity"],"Class":"Visit","type":"Function"},{"type":"Enum","Name":"AASamples","tags":[]},{"type":"EnumItem","Name":"None","tags":[],"Value":1,"Enum":"AASamples"},{"type":"EnumItem","Name":"4","tags":[],"Value":4,"Enum":"AASamples"},{"type":"EnumItem","Name":"8","tags":[],"Value":8,"Enum":"AASamples"},{"type":"Enum","Name":"AccessType","tags":[]},{"type":"EnumItem","Name":"Me","tags":[],"Value":0,"Enum":"AccessType"},{"type":"EnumItem","Name":"Friends","tags":[],"Value":1,"Enum":"AccessType"},{"type":"EnumItem","Name":"Everyone","tags":[],"Value":2,"Enum":"AccessType"},{"type":"EnumItem","Name":"InviteOnly","tags":[],"Value":3,"Enum":"AccessType"},{"type":"Enum","Name":"ActionType","tags":[]},{"type":"EnumItem","Name":"Nothing","tags":[],"Value":0,"Enum":"ActionType"},{"type":"EnumItem","Name":"Pause","tags":[],"Value":1,"Enum":"ActionType"},{"type":"EnumItem","Name":"Lose","tags":[],"Value":2,"Enum":"ActionType"},{"type":"EnumItem","Name":"Draw","tags":[],"Value":3,"Enum":"ActionType"},{"type":"EnumItem","Name":"Win","tags":[],"Value":4,"Enum":"ActionType"},{"type":"Enum","Name":"ActuatorType","tags":[]},{"type":"EnumItem","Name":"None","tags":[],"Value":0,"Enum":"ActuatorType"},{"type":"EnumItem","Name":"Motor","tags":[],"Value":1,"Enum":"ActuatorType"},{"type":"EnumItem","Name":"Servo","tags":[],"Value":2,"Enum":"ActuatorType"},{"type":"Enum","Name":"AnimationPriority","tags":[]},{"type":"EnumItem","Name":"Idle","tags":[],"Value":0,"Enum":"AnimationPriority"},{"type":"EnumItem","Name":"Movement","tags":[],"Value":1,"Enum":"AnimationPriority"},{"type":"EnumItem","Name":"Action","tags":[],"Value":2,"Enum":"AnimationPriority"},{"type":"EnumItem","Name":"Core","tags":[],"Value":1000,"Enum":"AnimationPriority"},{"type":"Enum","Name":"Antialiasing","tags":[]},{"type":"EnumItem","Name":"Automatic","tags":[],"Value":0,"Enum":"Antialiasing"},{"type":"EnumItem","Name":"Off","tags":[],"Value":2,"Enum":"Antialiasing"},{"type":"EnumItem","Name":"On","tags":[],"Value":1,"Enum":"Antialiasing"},{"type":"Enum","Name":"Axis","tags":[]},{"type":"EnumItem","Name":"X","tags":[],"Value":0,"Enum":"Axis"},{"type":"EnumItem","Name":"Y","tags":[],"Value":1,"Enum":"Axis"},{"type":"EnumItem","Name":"Z","tags":[],"Value":2,"Enum":"Axis"},{"type":"Enum","Name":"BinType","tags":[]},{"type":"EnumItem","Name":"Script","tags":[],"Value":0,"Enum":"BinType"},{"type":"EnumItem","Name":"GameTool","tags":[],"Value":1,"Enum":"BinType"},{"type":"EnumItem","Name":"Grab","tags":[],"Value":2,"Enum":"BinType"},{"type":"EnumItem","Name":"Clone","tags":[],"Value":3,"Enum":"BinType"},{"type":"EnumItem","Name":"Hammer","tags":[],"Value":4,"Enum":"BinType"},{"type":"Enum","Name":"BodyPart","tags":[]},{"type":"EnumItem","Name":"Head","tags":[],"Value":0,"Enum":"BodyPart"},{"type":"EnumItem","Name":"Torso","tags":[],"Value":1,"Enum":"BodyPart"},{"type":"EnumItem","Name":"LeftArm","tags":[],"Value":2,"Enum":"BodyPart"},{"type":"EnumItem","Name":"RightArm","tags":[],"Value":3,"Enum":"BodyPart"},{"type":"EnumItem","Name":"LeftLeg","tags":[],"Value":4,"Enum":"BodyPart"},{"type":"EnumItem","Name":"RightLeg","tags":[],"Value":5,"Enum":"BodyPart"},{"type":"Enum","Name":"Button","tags":[]},{"type":"EnumItem","Name":"Jump","tags":[],"Value":32,"Enum":"Button"},{"type":"EnumItem","Name":"Dismount","tags":[],"Value":8,"Enum":"Button"},{"type":"Enum","Name":"ButtonStyle","tags":[]},{"type":"EnumItem","Name":"Custom","tags":[],"Value":0,"Enum":"ButtonStyle"},{"type":"EnumItem","Name":"RobloxButtonDefault","tags":[],"Value":1,"Enum":"ButtonStyle"},{"type":"EnumItem","Name":"RobloxButton","tags":[],"Value":2,"Enum":"ButtonStyle"},{"type":"EnumItem","Name":"RobloxRoundButton","tags":[],"Value":3,"Enum":"ButtonStyle"},{"type":"EnumItem","Name":"RobloxRoundDefaultButton","tags":[],"Value":4,"Enum":"ButtonStyle"},{"type":"EnumItem","Name":"RobloxRoundDropdownButton","tags":[],"Value":5,"Enum":"ButtonStyle"},{"type":"Enum","Name":"CameraMode","tags":[]},{"type":"EnumItem","Name":"Classic","tags":[],"Value":0,"Enum":"CameraMode"},{"type":"EnumItem","Name":"LockFirstPerson","tags":[],"Value":1,"Enum":"CameraMode"},{"type":"Enum","Name":"CameraPanMode","tags":[]},{"type":"EnumItem","Name":"Classic","tags":[],"Value":0,"Enum":"CameraPanMode"},{"type":"EnumItem","Name":"EdgeBump","tags":[],"Value":1,"Enum":"CameraPanMode"},{"type":"Enum","Name":"CameraType","tags":[]},{"type":"EnumItem","Name":"Fixed","tags":[],"Value":0,"Enum":"CameraType"},{"type":"EnumItem","Name":"Watch","tags":[],"Value":2,"Enum":"CameraType"},{"type":"EnumItem","Name":"Attach","tags":[],"Value":1,"Enum":"CameraType"},{"type":"EnumItem","Name":"Track","tags":[],"Value":3,"Enum":"CameraType"},{"type":"EnumItem","Name":"Follow","tags":[],"Value":4,"Enum":"CameraType"},{"type":"EnumItem","Name":"Custom","tags":[],"Value":5,"Enum":"CameraType"},{"type":"EnumItem","Name":"Scriptable","tags":[],"Value":6,"Enum":"CameraType"},{"type":"Enum","Name":"CellBlock","tags":[]},{"type":"EnumItem","Name":"Solid","tags":[],"Value":0,"Enum":"CellBlock"},{"type":"EnumItem","Name":"VerticalWedge","tags":[],"Value":1,"Enum":"CellBlock"},{"type":"EnumItem","Name":"CornerWedge","tags":[],"Value":2,"Enum":"CellBlock"},{"type":"EnumItem","Name":"InverseCornerWedge","tags":[],"Value":3,"Enum":"CellBlock"},{"type":"EnumItem","Name":"HorizontalWedge","tags":[],"Value":4,"Enum":"CellBlock"},{"type":"Enum","Name":"CellMaterial","tags":[]},{"type":"EnumItem","Name":"Empty","tags":[],"Value":0,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"Grass","tags":[],"Value":1,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"Sand","tags":[],"Value":2,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"Brick","tags":[],"Value":3,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"Granite","tags":[],"Value":4,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"Asphalt","tags":[],"Value":5,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"Iron","tags":[],"Value":6,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"Aluminum","tags":[],"Value":7,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"Gold","tags":[],"Value":8,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"WoodPlank","tags":[],"Value":9,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"WoodLog","tags":[],"Value":10,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"Gravel","tags":[],"Value":11,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"CinderBlock","tags":[],"Value":12,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"MossyStone","tags":[],"Value":13,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"Cement","tags":[],"Value":14,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"RedPlastic","tags":[],"Value":15,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"BluePlastic","tags":[],"Value":16,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"Water","tags":[],"Value":17,"Enum":"CellMaterial"},{"type":"Enum","Name":"CellOrientation","tags":[]},{"type":"EnumItem","Name":"NegZ","tags":[],"Value":0,"Enum":"CellOrientation"},{"type":"EnumItem","Name":"X","tags":[],"Value":1,"Enum":"CellOrientation"},{"type":"EnumItem","Name":"Z","tags":[],"Value":2,"Enum":"CellOrientation"},{"type":"EnumItem","Name":"NegX","tags":[],"Value":3,"Enum":"CellOrientation"},{"type":"Enum","Name":"CenterDialogType","tags":[]},{"type":"EnumItem","Name":"UnsolicitedDialog","tags":[],"Value":1,"Enum":"CenterDialogType"},{"type":"EnumItem","Name":"PlayerInitiatedDialog","tags":[],"Value":2,"Enum":"CenterDialogType"},{"type":"EnumItem","Name":"ModalDialog","tags":[],"Value":3,"Enum":"CenterDialogType"},{"type":"EnumItem","Name":"QuitDialog","tags":[],"Value":4,"Enum":"CenterDialogType"},{"type":"Enum","Name":"ChatColor","tags":[]},{"type":"EnumItem","Name":"Blue","tags":[],"Value":0,"Enum":"ChatColor"},{"type":"EnumItem","Name":"Green","tags":[],"Value":1,"Enum":"ChatColor"},{"type":"EnumItem","Name":"Red","tags":[],"Value":2,"Enum":"ChatColor"},{"type":"Enum","Name":"ChatMode","tags":[]},{"type":"EnumItem","Name":"Menu","tags":[],"Value":0,"Enum":"ChatMode"},{"type":"EnumItem","Name":"TextAndMenu","tags":[],"Value":1,"Enum":"ChatMode"},{"type":"Enum","Name":"ChatStyle","tags":[]},{"type":"EnumItem","Name":"Classic","tags":[],"Value":0,"Enum":"ChatStyle"},{"type":"EnumItem","Name":"Bubble","tags":[],"Value":1,"Enum":"ChatStyle"},{"type":"EnumItem","Name":"ClassicAndBubble","tags":[],"Value":2,"Enum":"ChatStyle"},{"type":"Enum","Name":"CollisionFidelity","tags":[]},{"type":"EnumItem","Name":"Default","tags":[],"Value":0,"Enum":"CollisionFidelity"},{"type":"EnumItem","Name":"Hull","tags":[],"Value":1,"Enum":"CollisionFidelity"},{"type":"EnumItem","Name":"Box","tags":[],"Value":2,"Enum":"CollisionFidelity"},{"type":"Enum","Name":"ComputerCameraMovementMode","tags":[]},{"type":"EnumItem","Name":"Default","tags":[],"Value":0,"Enum":"ComputerCameraMovementMode"},{"type":"EnumItem","Name":"Follow","tags":[],"Value":2,"Enum":"ComputerCameraMovementMode"},{"type":"EnumItem","Name":"Classic","tags":[],"Value":1,"Enum":"ComputerCameraMovementMode"},{"type":"Enum","Name":"ComputerMovementMode","tags":[]},{"type":"EnumItem","Name":"Default","tags":[],"Value":0,"Enum":"ComputerMovementMode"},{"type":"EnumItem","Name":"KeyboardMouse","tags":[],"Value":1,"Enum":"ComputerMovementMode"},{"type":"EnumItem","Name":"ClickToMove","tags":[],"Value":2,"Enum":"ComputerMovementMode"},{"type":"Enum","Name":"ConcurrencyModel","tags":[]},{"type":"EnumItem","Name":"Serial","tags":[],"Value":0,"Enum":"ConcurrencyModel"},{"type":"EnumItem","Name":"Safe","tags":[],"Value":1,"Enum":"ConcurrencyModel"},{"type":"EnumItem","Name":"Logical","tags":[],"Value":2,"Enum":"ConcurrencyModel"},{"type":"EnumItem","Name":"Empirical","tags":[],"Value":3,"Enum":"ConcurrencyModel"},{"type":"Enum","Name":"ControlMode","tags":[]},{"type":"EnumItem","Name":"MouseLockSwitch","tags":[],"Value":1,"Enum":"ControlMode"},{"type":"EnumItem","Name":"Classic","tags":[],"Value":0,"Enum":"ControlMode"},{"type":"Enum","Name":"CoreGuiType","tags":[]},{"type":"EnumItem","Name":"PlayerList","tags":[],"Value":0,"Enum":"CoreGuiType"},{"type":"EnumItem","Name":"Health","tags":[],"Value":1,"Enum":"CoreGuiType"},{"type":"EnumItem","Name":"Backpack","tags":[],"Value":2,"Enum":"CoreGuiType"},{"type":"EnumItem","Name":"Chat","tags":[],"Value":3,"Enum":"CoreGuiType"},{"type":"EnumItem","Name":"All","tags":[],"Value":4,"Enum":"CoreGuiType"},{"type":"Enum","Name":"CreatorType","tags":[]},{"type":"EnumItem","Name":"User","tags":[],"Value":0,"Enum":"CreatorType"},{"type":"EnumItem","Name":"Group","tags":[],"Value":1,"Enum":"CreatorType"},{"type":"Enum","Name":"CurrencyType","tags":[]},{"type":"EnumItem","Name":"Default","tags":[],"Value":0,"Enum":"CurrencyType"},{"type":"EnumItem","Name":"Robux","tags":[],"Value":1,"Enum":"CurrencyType"},{"type":"EnumItem","Name":"Tix","tags":[],"Value":2,"Enum":"CurrencyType"},{"type":"Enum","Name":"CustomCameraMode","tags":[]},{"type":"EnumItem","Name":"Default","tags":[],"Value":0,"Enum":"CustomCameraMode"},{"type":"EnumItem","Name":"Follow","tags":[],"Value":2,"Enum":"CustomCameraMode"},{"type":"EnumItem","Name":"Classic","tags":[],"Value":1,"Enum":"CustomCameraMode"},{"type":"Enum","Name":"DevCameraOcclusionMode","tags":[]},{"type":"EnumItem","Name":"Zoom","tags":[],"Value":0,"Enum":"DevCameraOcclusionMode"},{"type":"EnumItem","Name":"Invisicam","tags":[],"Value":1,"Enum":"DevCameraOcclusionMode"},{"type":"Enum","Name":"DevComputerCameraMovementMode","tags":[]},{"type":"EnumItem","Name":"UserChoice","tags":[],"Value":0,"Enum":"DevComputerCameraMovementMode"},{"type":"EnumItem","Name":"Classic","tags":[],"Value":1,"Enum":"DevComputerCameraMovementMode"},{"type":"EnumItem","Name":"Follow","tags":[],"Value":2,"Enum":"DevComputerCameraMovementMode"},{"type":"Enum","Name":"DevComputerMovementMode","tags":[]},{"type":"EnumItem","Name":"UserChoice","tags":[],"Value":0,"Enum":"DevComputerMovementMode"},{"type":"EnumItem","Name":"KeyboardMouse","tags":[],"Value":1,"Enum":"DevComputerMovementMode"},{"type":"EnumItem","Name":"ClickToMove","tags":[],"Value":2,"Enum":"DevComputerMovementMode"},{"type":"EnumItem","Name":"Scriptable","tags":[],"Value":3,"Enum":"DevComputerMovementMode"},{"type":"Enum","Name":"DevTouchCameraMovementMode","tags":[]},{"type":"EnumItem","Name":"UserChoice","tags":[],"Value":0,"Enum":"DevTouchCameraMovementMode"},{"type":"EnumItem","Name":"Classic","tags":[],"Value":1,"Enum":"DevTouchCameraMovementMode"},{"type":"EnumItem","Name":"Follow","tags":[],"Value":2,"Enum":"DevTouchCameraMovementMode"},{"type":"Enum","Name":"DevTouchMovementMode","tags":[]},{"type":"EnumItem","Name":"UserChoice","tags":[],"Value":0,"Enum":"DevTouchMovementMode"},{"type":"EnumItem","Name":"Thumbstick","tags":[],"Value":1,"Enum":"DevTouchMovementMode"},{"type":"EnumItem","Name":"DPad","tags":[],"Value":2,"Enum":"DevTouchMovementMode"},{"type":"EnumItem","Name":"Thumbpad","tags":[],"Value":3,"Enum":"DevTouchMovementMode"},{"type":"EnumItem","Name":"ClickToMove","tags":[],"Value":4,"Enum":"DevTouchMovementMode"},{"type":"EnumItem","Name":"Scriptable","tags":[],"Value":5,"Enum":"DevTouchMovementMode"},{"type":"Enum","Name":"DialogPurpose","tags":[]},{"type":"EnumItem","Name":"Quest","tags":[],"Value":0,"Enum":"DialogPurpose"},{"type":"EnumItem","Name":"Help","tags":[],"Value":1,"Enum":"DialogPurpose"},{"type":"EnumItem","Name":"Shop","tags":[],"Value":2,"Enum":"DialogPurpose"},{"type":"Enum","Name":"DialogTone","tags":[]},{"type":"EnumItem","Name":"Neutral","tags":[],"Value":0,"Enum":"DialogTone"},{"type":"EnumItem","Name":"Friendly","tags":[],"Value":1,"Enum":"DialogTone"},{"type":"EnumItem","Name":"Enemy","tags":[],"Value":2,"Enum":"DialogTone"},{"type":"Enum","Name":"EasingDirection","tags":[]},{"type":"EnumItem","Name":"In","tags":[],"Value":0,"Enum":"EasingDirection"},{"type":"EnumItem","Name":"Out","tags":[],"Value":1,"Enum":"EasingDirection"},{"type":"EnumItem","Name":"InOut","tags":[],"Value":2,"Enum":"EasingDirection"},{"type":"Enum","Name":"EasingStyle","tags":[]},{"type":"EnumItem","Name":"Linear","tags":[],"Value":0,"Enum":"EasingStyle"},{"type":"EnumItem","Name":"Sine","tags":[],"Value":1,"Enum":"EasingStyle"},{"type":"EnumItem","Name":"Back","tags":[],"Value":2,"Enum":"EasingStyle"},{"type":"EnumItem","Name":"Quad","tags":[],"Value":3,"Enum":"EasingStyle"},{"type":"EnumItem","Name":"Quart","tags":[],"Value":4,"Enum":"EasingStyle"},{"type":"EnumItem","Name":"Quint","tags":[],"Value":5,"Enum":"EasingStyle"},{"type":"EnumItem","Name":"Bounce","tags":[],"Value":6,"Enum":"EasingStyle"},{"type":"EnumItem","Name":"Elastic","tags":[],"Value":7,"Enum":"EasingStyle"},{"type":"Enum","Name":"EnviromentalPhysicsThrottle","tags":[]},{"type":"EnumItem","Name":"DefaultAuto","tags":[],"Value":0,"Enum":"EnviromentalPhysicsThrottle"},{"type":"EnumItem","Name":"Disabled","tags":[],"Value":1,"Enum":"EnviromentalPhysicsThrottle"},{"type":"EnumItem","Name":"Always","tags":[],"Value":2,"Enum":"EnviromentalPhysicsThrottle"},{"type":"EnumItem","Name":"Skip2","tags":[],"Value":3,"Enum":"EnviromentalPhysicsThrottle"},{"type":"EnumItem","Name":"Skip4","tags":[],"Value":4,"Enum":"EnviromentalPhysicsThrottle"},{"type":"EnumItem","Name":"Skip8","tags":[],"Value":5,"Enum":"EnviromentalPhysicsThrottle"},{"type":"EnumItem","Name":"Skip16","tags":[],"Value":6,"Enum":"EnviromentalPhysicsThrottle"},{"type":"Enum","Name":"ErrorReporting","tags":[]},{"type":"EnumItem","Name":"DontReport","tags":[],"Value":0,"Enum":"ErrorReporting"},{"type":"EnumItem","Name":"Prompt","tags":[],"Value":1,"Enum":"ErrorReporting"},{"type":"EnumItem","Name":"Report","tags":[],"Value":2,"Enum":"ErrorReporting"},{"type":"Enum","Name":"ExplosionType","tags":[]},{"type":"EnumItem","Name":"NoCraters","tags":[],"Value":0,"Enum":"ExplosionType"},{"type":"EnumItem","Name":"Craters","tags":[],"Value":1,"Enum":"ExplosionType"},{"type":"EnumItem","Name":"CratersAndDebris","tags":[],"Value":2,"Enum":"ExplosionType"},{"type":"Enum","Name":"FilterResult","tags":[]},{"type":"EnumItem","Name":"Rejected","tags":[],"Value":1,"Enum":"FilterResult"},{"type":"EnumItem","Name":"Accepted","tags":[],"Value":0,"Enum":"FilterResult"},{"type":"Enum","Name":"Font","tags":[]},{"type":"EnumItem","Name":"Legacy","tags":[],"Value":0,"Enum":"Font"},{"type":"EnumItem","Name":"Arial","tags":[],"Value":1,"Enum":"Font"},{"type":"EnumItem","Name":"ArialBold","tags":[],"Value":2,"Enum":"Font"},{"type":"EnumItem","Name":"SourceSans","tags":[],"Value":3,"Enum":"Font"},{"type":"EnumItem","Name":"SourceSansBold","tags":[],"Value":4,"Enum":"Font"},{"type":"EnumItem","Name":"SourceSansLight","tags":[],"Value":5,"Enum":"Font"},{"type":"EnumItem","Name":"SourceSansItalic","tags":[],"Value":6,"Enum":"Font"},{"type":"Enum","Name":"FontSize","tags":[]},{"type":"EnumItem","Name":"Size8","tags":[],"Value":0,"Enum":"FontSize"},{"type":"EnumItem","Name":"Size9","tags":[],"Value":1,"Enum":"FontSize"},{"type":"EnumItem","Name":"Size10","tags":[],"Value":2,"Enum":"FontSize"},{"type":"EnumItem","Name":"Size11","tags":[],"Value":3,"Enum":"FontSize"},{"type":"EnumItem","Name":"Size12","tags":[],"Value":4,"Enum":"FontSize"},{"type":"EnumItem","Name":"Size14","tags":[],"Value":5,"Enum":"FontSize"},{"type":"EnumItem","Name":"Size18","tags":[],"Value":6,"Enum":"FontSize"},{"type":"EnumItem","Name":"Size24","tags":[],"Value":7,"Enum":"FontSize"},{"type":"EnumItem","Name":"Size36","tags":[],"Value":8,"Enum":"FontSize"},{"type":"EnumItem","Name":"Size48","tags":[],"Value":9,"Enum":"FontSize"},{"type":"EnumItem","Name":"Size28","tags":[],"Value":10,"Enum":"FontSize"},{"type":"EnumItem","Name":"Size32","tags":[],"Value":11,"Enum":"FontSize"},{"type":"EnumItem","Name":"Size42","tags":[],"Value":12,"Enum":"FontSize"},{"type":"EnumItem","Name":"Size60","tags":[],"Value":13,"Enum":"FontSize"},{"type":"EnumItem","Name":"Size96","tags":[],"Value":14,"Enum":"FontSize"},{"type":"Enum","Name":"FormFactor","tags":[]},{"type":"EnumItem","Name":"Symmetric","tags":[],"Value":0,"Enum":"FormFactor"},{"type":"EnumItem","Name":"Brick","tags":[],"Value":1,"Enum":"FormFactor"},{"type":"EnumItem","Name":"Plate","tags":[],"Value":2,"Enum":"FormFactor"},{"type":"EnumItem","Name":"Custom","tags":[],"Value":3,"Enum":"FormFactor"},{"type":"Enum","Name":"FrameStyle","tags":[]},{"type":"EnumItem","Name":"Custom","tags":[],"Value":0,"Enum":"FrameStyle"},{"type":"EnumItem","Name":"ChatBlue","tags":[],"Value":1,"Enum":"FrameStyle"},{"type":"EnumItem","Name":"RobloxSquare","tags":[],"Value":2,"Enum":"FrameStyle"},{"type":"EnumItem","Name":"RobloxRound","tags":[],"Value":3,"Enum":"FrameStyle"},{"type":"EnumItem","Name":"ChatGreen","tags":[],"Value":4,"Enum":"FrameStyle"},{"type":"EnumItem","Name":"ChatRed","tags":[],"Value":5,"Enum":"FrameStyle"},{"type":"EnumItem","Name":"DropShadow","tags":[],"Value":6,"Enum":"FrameStyle"},{"type":"Enum","Name":"FramerateManagerMode","tags":[]},{"type":"EnumItem","Name":"Automatic","tags":[],"Value":0,"Enum":"FramerateManagerMode"},{"type":"EnumItem","Name":"On","tags":[],"Value":1,"Enum":"FramerateManagerMode"},{"type":"EnumItem","Name":"Off","tags":[],"Value":2,"Enum":"FramerateManagerMode"},{"type":"Enum","Name":"FriendRequestEvent","tags":[]},{"type":"EnumItem","Name":"Issue","tags":[],"Value":0,"Enum":"FriendRequestEvent"},{"type":"EnumItem","Name":"Revoke","tags":[],"Value":1,"Enum":"FriendRequestEvent"},{"type":"EnumItem","Name":"Accept","tags":[],"Value":2,"Enum":"FriendRequestEvent"},{"type":"EnumItem","Name":"Deny","tags":[],"Value":3,"Enum":"FriendRequestEvent"},{"type":"Enum","Name":"FriendStatus","tags":[]},{"type":"EnumItem","Name":"Unknown","tags":[],"Value":0,"Enum":"FriendStatus"},{"type":"EnumItem","Name":"NotFriend","tags":[],"Value":1,"Enum":"FriendStatus"},{"type":"EnumItem","Name":"Friend","tags":[],"Value":2,"Enum":"FriendStatus"},{"type":"EnumItem","Name":"FriendRequestSent","tags":[],"Value":3,"Enum":"FriendStatus"},{"type":"EnumItem","Name":"FriendRequestReceived","tags":[],"Value":4,"Enum":"FriendStatus"},{"type":"Enum","Name":"FunctionalTestResult","tags":[]},{"type":"EnumItem","Name":"Passed","tags":[],"Value":0,"Enum":"FunctionalTestResult"},{"type":"EnumItem","Name":"Warning","tags":[],"Value":1,"Enum":"FunctionalTestResult"},{"type":"EnumItem","Name":"Error","tags":[],"Value":2,"Enum":"FunctionalTestResult"},{"type":"Enum","Name":"GearGenreSetting","tags":[]},{"type":"EnumItem","Name":"AllGenres","tags":[],"Value":0,"Enum":"GearGenreSetting"},{"type":"EnumItem","Name":"MatchingGenreOnly","tags":[],"Value":1,"Enum":"GearGenreSetting"},{"type":"Enum","Name":"GearType","tags":[]},{"type":"EnumItem","Name":"MeleeWeapons","tags":[],"Value":0,"Enum":"GearType"},{"type":"EnumItem","Name":"RangedWeapons","tags":[],"Value":1,"Enum":"GearType"},{"type":"EnumItem","Name":"Explosives","tags":[],"Value":2,"Enum":"GearType"},{"type":"EnumItem","Name":"PowerUps","tags":[],"Value":3,"Enum":"GearType"},{"type":"EnumItem","Name":"NavigationEnhancers","tags":[],"Value":4,"Enum":"GearType"},{"type":"EnumItem","Name":"MusicalInstruments","tags":[],"Value":5,"Enum":"GearType"},{"type":"EnumItem","Name":"SocialItems","tags":[],"Value":6,"Enum":"GearType"},{"type":"EnumItem","Name":"BuildingTools","tags":[],"Value":7,"Enum":"GearType"},{"type":"EnumItem","Name":"Transport","tags":[],"Value":8,"Enum":"GearType"},{"type":"Enum","Name":"Genre","tags":[]},{"type":"EnumItem","Name":"All","tags":[],"Value":0,"Enum":"Genre"},{"type":"EnumItem","Name":"TownAndCity","tags":[],"Value":1,"Enum":"Genre"},{"type":"EnumItem","Name":"Fantasy","tags":[],"Value":2,"Enum":"Genre"},{"type":"EnumItem","Name":"SciFi","tags":[],"Value":3,"Enum":"Genre"},{"type":"EnumItem","Name":"Ninja","tags":[],"Value":4,"Enum":"Genre"},{"type":"EnumItem","Name":"Scary","tags":[],"Value":5,"Enum":"Genre"},{"type":"EnumItem","Name":"Pirate","tags":[],"Value":6,"Enum":"Genre"},{"type":"EnumItem","Name":"Adventure","tags":[],"Value":7,"Enum":"Genre"},{"type":"EnumItem","Name":"Sports","tags":[],"Value":8,"Enum":"Genre"},{"type":"EnumItem","Name":"Funny","tags":[],"Value":9,"Enum":"Genre"},{"type":"EnumItem","Name":"WildWest","tags":[],"Value":10,"Enum":"Genre"},{"type":"EnumItem","Name":"War","tags":[],"Value":11,"Enum":"Genre"},{"type":"EnumItem","Name":"SkatePark","tags":[],"Value":12,"Enum":"Genre"},{"type":"EnumItem","Name":"Tutorial","tags":[],"Value":13,"Enum":"Genre"},{"type":"Enum","Name":"GraphicsMode","tags":[]},{"type":"EnumItem","Name":"Automatic","tags":[],"Value":1,"Enum":"GraphicsMode"},{"type":"EnumItem","Name":"Direct3D9","tags":[],"Value":3,"Enum":"GraphicsMode"},{"type":"EnumItem","Name":"Direct3D11","tags":[],"Value":2,"Enum":"GraphicsMode"},{"type":"EnumItem","Name":"OpenGL","tags":[],"Value":4,"Enum":"GraphicsMode"},{"type":"EnumItem","Name":"NoGraphics","tags":[],"Value":5,"Enum":"GraphicsMode"},{"type":"Enum","Name":"HandlesStyle","tags":[]},{"type":"EnumItem","Name":"Resize","tags":[],"Value":0,"Enum":"HandlesStyle"},{"type":"EnumItem","Name":"Movement","tags":[],"Value":1,"Enum":"HandlesStyle"},{"type":"Enum","Name":"HttpContentType","tags":[]},{"type":"EnumItem","Name":"ApplicationJson","tags":[],"Value":0,"Enum":"HttpContentType"},{"type":"EnumItem","Name":"ApplicationXml","tags":[],"Value":1,"Enum":"HttpContentType"},{"type":"EnumItem","Name":"ApplicationUrlEncoded","tags":[],"Value":2,"Enum":"HttpContentType"},{"type":"EnumItem","Name":"TextPlain","tags":[],"Value":3,"Enum":"HttpContentType"},{"type":"EnumItem","Name":"TextXml","tags":[],"Value":4,"Enum":"HttpContentType"},{"type":"Enum","Name":"HumanoidDisplayDistanceType","tags":[]},{"type":"EnumItem","Name":"Viewer","tags":[],"Value":0,"Enum":"HumanoidDisplayDistanceType"},{"type":"EnumItem","Name":"Subject","tags":[],"Value":1,"Enum":"HumanoidDisplayDistanceType"},{"type":"EnumItem","Name":"None","tags":[],"Value":2,"Enum":"HumanoidDisplayDistanceType"},{"type":"Enum","Name":"HumanoidRigType","tags":[]},{"type":"EnumItem","Name":"R6","tags":[],"Value":0,"Enum":"HumanoidRigType"},{"type":"EnumItem","Name":"R15","tags":[],"Value":1,"Enum":"HumanoidRigType"},{"type":"Enum","Name":"HumanoidStateType","tags":[]},{"type":"EnumItem","Name":"FallingDown","tags":[],"Value":0,"Enum":"HumanoidStateType"},{"type":"EnumItem","Name":"Running","tags":[],"Value":8,"Enum":"HumanoidStateType"},{"type":"EnumItem","Name":"RunningNoPhysics","tags":[],"Value":10,"Enum":"HumanoidStateType"},{"type":"EnumItem","Name":"Climbing","tags":[],"Value":12,"Enum":"HumanoidStateType"},{"type":"EnumItem","Name":"StrafingNoPhysics","tags":[],"Value":11,"Enum":"HumanoidStateType"},{"type":"EnumItem","Name":"Ragdoll","tags":[],"Value":1,"Enum":"HumanoidStateType"},{"type":"EnumItem","Name":"GettingUp","tags":[],"Value":2,"Enum":"HumanoidStateType"},{"type":"EnumItem","Name":"Jumping","tags":[],"Value":3,"Enum":"HumanoidStateType"},{"type":"EnumItem","Name":"Landed","tags":[],"Value":7,"Enum":"HumanoidStateType"},{"type":"EnumItem","Name":"Flying","tags":[],"Value":6,"Enum":"HumanoidStateType"},{"type":"EnumItem","Name":"Freefall","tags":[],"Value":5,"Enum":"HumanoidStateType"},{"type":"EnumItem","Name":"Seated","tags":[],"Value":13,"Enum":"HumanoidStateType"},{"type":"EnumItem","Name":"PlatformStanding","tags":[],"Value":14,"Enum":"HumanoidStateType"},{"type":"EnumItem","Name":"Dead","tags":[],"Value":15,"Enum":"HumanoidStateType"},{"type":"EnumItem","Name":"Swimming","tags":[],"Value":4,"Enum":"HumanoidStateType"},{"type":"EnumItem","Name":"Physics","tags":[],"Value":16,"Enum":"HumanoidStateType"},{"type":"EnumItem","Name":"None","tags":[],"Value":18,"Enum":"HumanoidStateType"},{"type":"Enum","Name":"InOut","tags":[]},{"type":"EnumItem","Name":"Edge","tags":[],"Value":0,"Enum":"InOut"},{"type":"EnumItem","Name":"Inset","tags":[],"Value":1,"Enum":"InOut"},{"type":"EnumItem","Name":"Center","tags":[],"Value":2,"Enum":"InOut"},{"type":"Enum","Name":"InfoType","tags":[]},{"type":"EnumItem","Name":"Asset","tags":[],"Value":0,"Enum":"InfoType"},{"type":"EnumItem","Name":"Product","tags":[],"Value":1,"Enum":"InfoType"},{"type":"Enum","Name":"InputType","tags":[]},{"type":"EnumItem","Name":"NoInput","tags":[],"Value":0,"Enum":"InputType"},{"type":"EnumItem","Name":"LeftTread","tags":[],"Value":1,"Enum":"InputType"},{"type":"EnumItem","Name":"RightTread","tags":[],"Value":2,"Enum":"InputType"},{"type":"EnumItem","Name":"Steer","tags":[],"Value":3,"Enum":"InputType"},{"type":"EnumItem","Name":"Throtle","tags":[],"Value":4,"Enum":"InputType"},{"type":"EnumItem","Name":"UpDown","tags":[],"Value":6,"Enum":"InputType"},{"type":"EnumItem","Name":"Action1","tags":[],"Value":7,"Enum":"InputType"},{"type":"EnumItem","Name":"Action2","tags":[],"Value":8,"Enum":"InputType"},{"type":"EnumItem","Name":"Action3","tags":[],"Value":9,"Enum":"InputType"},{"type":"EnumItem","Name":"Action4","tags":[],"Value":10,"Enum":"InputType"},{"type":"EnumItem","Name":"Action5","tags":[],"Value":11,"Enum":"InputType"},{"type":"EnumItem","Name":"Constant","tags":[],"Value":12,"Enum":"InputType"},{"type":"EnumItem","Name":"Sin","tags":[],"Value":13,"Enum":"InputType"},{"type":"Enum","Name":"JointCreationMode","tags":[]},{"type":"EnumItem","Name":"All","tags":[],"Value":0,"Enum":"JointCreationMode"},{"type":"EnumItem","Name":"Surface","tags":[],"Value":1,"Enum":"JointCreationMode"},{"type":"EnumItem","Name":"None","tags":[],"Value":2,"Enum":"JointCreationMode"},{"type":"Enum","Name":"JointType","tags":[]},{"type":"EnumItem","Name":"None","tags":[],"Value":22,"Enum":"JointType"},{"type":"EnumItem","Name":"Rotate","tags":[],"Value":6,"Enum":"JointType"},{"type":"EnumItem","Name":"RotateP","tags":[],"Value":7,"Enum":"JointType"},{"type":"EnumItem","Name":"RotateV","tags":[],"Value":8,"Enum":"JointType"},{"type":"EnumItem","Name":"Glue","tags":[],"Value":9,"Enum":"JointType"},{"type":"EnumItem","Name":"Weld","tags":[],"Value":1,"Enum":"JointType"},{"type":"EnumItem","Name":"Snap","tags":[],"Value":3,"Enum":"JointType"},{"type":"Enum","Name":"KeyCode","tags":[]},{"type":"EnumItem","Name":"Unknown","tags":[],"Value":0,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Backspace","tags":[],"Value":8,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Tab","tags":[],"Value":9,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Clear","tags":[],"Value":12,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Return","tags":[],"Value":13,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Pause","tags":[],"Value":19,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Escape","tags":[],"Value":27,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Space","tags":[],"Value":32,"Enum":"KeyCode"},{"type":"EnumItem","Name":"QuotedDouble","tags":[],"Value":34,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Hash","tags":[],"Value":35,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Dollar","tags":[],"Value":36,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Percent","tags":[],"Value":37,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Ampersand","tags":[],"Value":38,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Quote","tags":[],"Value":39,"Enum":"KeyCode"},{"type":"EnumItem","Name":"LeftParenthesis","tags":[],"Value":40,"Enum":"KeyCode"},{"type":"EnumItem","Name":"RightParenthesis","tags":[],"Value":41,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Asterisk","tags":[],"Value":42,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Plus","tags":[],"Value":43,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Comma","tags":[],"Value":44,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Minus","tags":[],"Value":45,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Period","tags":[],"Value":46,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Slash","tags":[],"Value":47,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Zero","tags":[],"Value":48,"Enum":"KeyCode"},{"type":"EnumItem","Name":"One","tags":[],"Value":49,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Two","tags":[],"Value":50,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Three","tags":[],"Value":51,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Four","tags":[],"Value":52,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Five","tags":[],"Value":53,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Six","tags":[],"Value":54,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Seven","tags":[],"Value":55,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Eight","tags":[],"Value":56,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Nine","tags":[],"Value":57,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Colon","tags":[],"Value":58,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Semicolon","tags":[],"Value":59,"Enum":"KeyCode"},{"type":"EnumItem","Name":"LessThan","tags":[],"Value":60,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Equals","tags":[],"Value":61,"Enum":"KeyCode"},{"type":"EnumItem","Name":"GreaterThan","tags":[],"Value":62,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Question","tags":[],"Value":63,"Enum":"KeyCode"},{"type":"EnumItem","Name":"At","tags":[],"Value":64,"Enum":"KeyCode"},{"type":"EnumItem","Name":"LeftBracket","tags":[],"Value":91,"Enum":"KeyCode"},{"type":"EnumItem","Name":"BackSlash","tags":[],"Value":92,"Enum":"KeyCode"},{"type":"EnumItem","Name":"RightBracket","tags":[],"Value":93,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Caret","tags":[],"Value":94,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Underscore","tags":[],"Value":95,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Backquote","tags":[],"Value":96,"Enum":"KeyCode"},{"type":"EnumItem","Name":"A","tags":[],"Value":97,"Enum":"KeyCode"},{"type":"EnumItem","Name":"B","tags":[],"Value":98,"Enum":"KeyCode"},{"type":"EnumItem","Name":"C","tags":[],"Value":99,"Enum":"KeyCode"},{"type":"EnumItem","Name":"D","tags":[],"Value":100,"Enum":"KeyCode"},{"type":"EnumItem","Name":"E","tags":[],"Value":101,"Enum":"KeyCode"},{"type":"EnumItem","Name":"F","tags":[],"Value":102,"Enum":"KeyCode"},{"type":"EnumItem","Name":"G","tags":[],"Value":103,"Enum":"KeyCode"},{"type":"EnumItem","Name":"H","tags":[],"Value":104,"Enum":"KeyCode"},{"type":"EnumItem","Name":"I","tags":[],"Value":105,"Enum":"KeyCode"},{"type":"EnumItem","Name":"J","tags":[],"Value":106,"Enum":"KeyCode"},{"type":"EnumItem","Name":"K","tags":[],"Value":107,"Enum":"KeyCode"},{"type":"EnumItem","Name":"L","tags":[],"Value":108,"Enum":"KeyCode"},{"type":"EnumItem","Name":"M","tags":[],"Value":109,"Enum":"KeyCode"},{"type":"EnumItem","Name":"N","tags":[],"Value":110,"Enum":"KeyCode"},{"type":"EnumItem","Name":"O","tags":[],"Value":111,"Enum":"KeyCode"},{"type":"EnumItem","Name":"P","tags":[],"Value":112,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Q","tags":[],"Value":113,"Enum":"KeyCode"},{"type":"EnumItem","Name":"R","tags":[],"Value":114,"Enum":"KeyCode"},{"type":"EnumItem","Name":"S","tags":[],"Value":115,"Enum":"KeyCode"},{"type":"EnumItem","Name":"T","tags":[],"Value":116,"Enum":"KeyCode"},{"type":"EnumItem","Name":"U","tags":[],"Value":117,"Enum":"KeyCode"},{"type":"EnumItem","Name":"V","tags":[],"Value":118,"Enum":"KeyCode"},{"type":"EnumItem","Name":"W","tags":[],"Value":119,"Enum":"KeyCode"},{"type":"EnumItem","Name":"X","tags":[],"Value":120,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Y","tags":[],"Value":121,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Z","tags":[],"Value":122,"Enum":"KeyCode"},{"type":"EnumItem","Name":"LeftCurly","tags":[],"Value":123,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Pipe","tags":[],"Value":124,"Enum":"KeyCode"},{"type":"EnumItem","Name":"RightCurly","tags":[],"Value":125,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Tilde","tags":[],"Value":126,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Delete","tags":[],"Value":127,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadZero","tags":[],"Value":256,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadOne","tags":[],"Value":257,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadTwo","tags":[],"Value":258,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadThree","tags":[],"Value":259,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadFour","tags":[],"Value":260,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadFive","tags":[],"Value":261,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadSix","tags":[],"Value":262,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadSeven","tags":[],"Value":263,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadEight","tags":[],"Value":264,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadNine","tags":[],"Value":265,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadPeriod","tags":[],"Value":266,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadDivide","tags":[],"Value":267,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadMultiply","tags":[],"Value":268,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadMinus","tags":[],"Value":269,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadPlus","tags":[],"Value":270,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadEnter","tags":[],"Value":271,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadEquals","tags":[],"Value":272,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Up","tags":[],"Value":273,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Down","tags":[],"Value":274,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Right","tags":[],"Value":275,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Left","tags":[],"Value":276,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Insert","tags":[],"Value":277,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Home","tags":[],"Value":278,"Enum":"KeyCode"},{"type":"EnumItem","Name":"End","tags":[],"Value":279,"Enum":"KeyCode"},{"type":"EnumItem","Name":"PageUp","tags":[],"Value":280,"Enum":"KeyCode"},{"type":"EnumItem","Name":"PageDown","tags":[],"Value":281,"Enum":"KeyCode"},{"type":"EnumItem","Name":"LeftShift","tags":[],"Value":304,"Enum":"KeyCode"},{"type":"EnumItem","Name":"RightShift","tags":[],"Value":303,"Enum":"KeyCode"},{"type":"EnumItem","Name":"LeftMeta","tags":[],"Value":310,"Enum":"KeyCode"},{"type":"EnumItem","Name":"RightMeta","tags":[],"Value":309,"Enum":"KeyCode"},{"type":"EnumItem","Name":"LeftAlt","tags":[],"Value":308,"Enum":"KeyCode"},{"type":"EnumItem","Name":"RightAlt","tags":[],"Value":307,"Enum":"KeyCode"},{"type":"EnumItem","Name":"LeftControl","tags":[],"Value":306,"Enum":"KeyCode"},{"type":"EnumItem","Name":"RightControl","tags":[],"Value":305,"Enum":"KeyCode"},{"type":"EnumItem","Name":"CapsLock","tags":[],"Value":301,"Enum":"KeyCode"},{"type":"EnumItem","Name":"NumLock","tags":[],"Value":300,"Enum":"KeyCode"},{"type":"EnumItem","Name":"ScrollLock","tags":[],"Value":302,"Enum":"KeyCode"},{"type":"EnumItem","Name":"LeftSuper","tags":[],"Value":311,"Enum":"KeyCode"},{"type":"EnumItem","Name":"RightSuper","tags":[],"Value":312,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Mode","tags":[],"Value":313,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Compose","tags":[],"Value":314,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Help","tags":[],"Value":315,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Print","tags":[],"Value":316,"Enum":"KeyCode"},{"type":"EnumItem","Name":"SysReq","tags":[],"Value":317,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Break","tags":[],"Value":318,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Menu","tags":[],"Value":319,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Power","tags":[],"Value":320,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Euro","tags":[],"Value":321,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Undo","tags":[],"Value":322,"Enum":"KeyCode"},{"type":"EnumItem","Name":"F1","tags":[],"Value":282,"Enum":"KeyCode"},{"type":"EnumItem","Name":"F2","tags":[],"Value":283,"Enum":"KeyCode"},{"type":"EnumItem","Name":"F3","tags":[],"Value":284,"Enum":"KeyCode"},{"type":"EnumItem","Name":"F4","tags":[],"Value":285,"Enum":"KeyCode"},{"type":"EnumItem","Name":"F5","tags":[],"Value":286,"Enum":"KeyCode"},{"type":"EnumItem","Name":"F6","tags":[],"Value":287,"Enum":"KeyCode"},{"type":"EnumItem","Name":"F7","tags":[],"Value":288,"Enum":"KeyCode"},{"type":"EnumItem","Name":"F8","tags":[],"Value":289,"Enum":"KeyCode"},{"type":"EnumItem","Name":"F9","tags":[],"Value":290,"Enum":"KeyCode"},{"type":"EnumItem","Name":"F10","tags":[],"Value":291,"Enum":"KeyCode"},{"type":"EnumItem","Name":"F11","tags":[],"Value":292,"Enum":"KeyCode"},{"type":"EnumItem","Name":"F12","tags":[],"Value":293,"Enum":"KeyCode"},{"type":"EnumItem","Name":"F13","tags":[],"Value":294,"Enum":"KeyCode"},{"type":"EnumItem","Name":"F14","tags":[],"Value":295,"Enum":"KeyCode"},{"type":"EnumItem","Name":"F15","tags":[],"Value":296,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World0","tags":[],"Value":160,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World1","tags":[],"Value":161,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World2","tags":[],"Value":162,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World3","tags":[],"Value":163,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World4","tags":[],"Value":164,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World5","tags":[],"Value":165,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World6","tags":[],"Value":166,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World7","tags":[],"Value":167,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World8","tags":[],"Value":168,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World9","tags":[],"Value":169,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World10","tags":[],"Value":170,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World11","tags":[],"Value":171,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World12","tags":[],"Value":172,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World13","tags":[],"Value":173,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World14","tags":[],"Value":174,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World15","tags":[],"Value":175,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World16","tags":[],"Value":176,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World17","tags":[],"Value":177,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World18","tags":[],"Value":178,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World19","tags":[],"Value":179,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World20","tags":[],"Value":180,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World21","tags":[],"Value":181,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World22","tags":[],"Value":182,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World23","tags":[],"Value":183,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World24","tags":[],"Value":184,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World25","tags":[],"Value":185,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World26","tags":[],"Value":186,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World27","tags":[],"Value":187,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World28","tags":[],"Value":188,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World29","tags":[],"Value":189,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World30","tags":[],"Value":190,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World31","tags":[],"Value":191,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World32","tags":[],"Value":192,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World33","tags":[],"Value":193,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World34","tags":[],"Value":194,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World35","tags":[],"Value":195,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World36","tags":[],"Value":196,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World37","tags":[],"Value":197,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World38","tags":[],"Value":198,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World39","tags":[],"Value":199,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World40","tags":[],"Value":200,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World41","tags":[],"Value":201,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World42","tags":[],"Value":202,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World43","tags":[],"Value":203,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World44","tags":[],"Value":204,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World45","tags":[],"Value":205,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World46","tags":[],"Value":206,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World47","tags":[],"Value":207,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World48","tags":[],"Value":208,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World49","tags":[],"Value":209,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World50","tags":[],"Value":210,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World51","tags":[],"Value":211,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World52","tags":[],"Value":212,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World53","tags":[],"Value":213,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World54","tags":[],"Value":214,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World55","tags":[],"Value":215,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World56","tags":[],"Value":216,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World57","tags":[],"Value":217,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World58","tags":[],"Value":218,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World59","tags":[],"Value":219,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World60","tags":[],"Value":220,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World61","tags":[],"Value":221,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World62","tags":[],"Value":222,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World63","tags":[],"Value":223,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World64","tags":[],"Value":224,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World65","tags":[],"Value":225,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World66","tags":[],"Value":226,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World67","tags":[],"Value":227,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World68","tags":[],"Value":228,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World69","tags":[],"Value":229,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World70","tags":[],"Value":230,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World71","tags":[],"Value":231,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World72","tags":[],"Value":232,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World73","tags":[],"Value":233,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World74","tags":[],"Value":234,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World75","tags":[],"Value":235,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World76","tags":[],"Value":236,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World77","tags":[],"Value":237,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World78","tags":[],"Value":238,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World79","tags":[],"Value":239,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World80","tags":[],"Value":240,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World81","tags":[],"Value":241,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World82","tags":[],"Value":242,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World83","tags":[],"Value":243,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World84","tags":[],"Value":244,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World85","tags":[],"Value":245,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World86","tags":[],"Value":246,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World87","tags":[],"Value":247,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World88","tags":[],"Value":248,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World89","tags":[],"Value":249,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World90","tags":[],"Value":250,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World91","tags":[],"Value":251,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World92","tags":[],"Value":252,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World93","tags":[],"Value":253,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World94","tags":[],"Value":254,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World95","tags":[],"Value":255,"Enum":"KeyCode"},{"type":"EnumItem","Name":"ButtonX","tags":[],"Value":1000,"Enum":"KeyCode"},{"type":"EnumItem","Name":"ButtonY","tags":[],"Value":1001,"Enum":"KeyCode"},{"type":"EnumItem","Name":"ButtonA","tags":[],"Value":1002,"Enum":"KeyCode"},{"type":"EnumItem","Name":"ButtonB","tags":[],"Value":1003,"Enum":"KeyCode"},{"type":"EnumItem","Name":"ButtonR1","tags":[],"Value":1004,"Enum":"KeyCode"},{"type":"EnumItem","Name":"ButtonL1","tags":[],"Value":1005,"Enum":"KeyCode"},{"type":"EnumItem","Name":"ButtonR2","tags":[],"Value":1006,"Enum":"KeyCode"},{"type":"EnumItem","Name":"ButtonL2","tags":[],"Value":1007,"Enum":"KeyCode"},{"type":"EnumItem","Name":"ButtonR3","tags":[],"Value":1008,"Enum":"KeyCode"},{"type":"EnumItem","Name":"ButtonL3","tags":[],"Value":1009,"Enum":"KeyCode"},{"type":"EnumItem","Name":"ButtonStart","tags":[],"Value":1010,"Enum":"KeyCode"},{"type":"EnumItem","Name":"ButtonSelect","tags":[],"Value":1011,"Enum":"KeyCode"},{"type":"EnumItem","Name":"DPadLeft","tags":[],"Value":1012,"Enum":"KeyCode"},{"type":"EnumItem","Name":"DPadRight","tags":[],"Value":1013,"Enum":"KeyCode"},{"type":"EnumItem","Name":"DPadUp","tags":[],"Value":1014,"Enum":"KeyCode"},{"type":"EnumItem","Name":"DPadDown","tags":[],"Value":1015,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Thumbstick1","tags":[],"Value":1016,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Thumbstick2","tags":[],"Value":1017,"Enum":"KeyCode"},{"type":"Enum","Name":"KeywordFilterType","tags":[]},{"type":"EnumItem","Name":"Include","tags":[],"Value":0,"Enum":"KeywordFilterType"},{"type":"EnumItem","Name":"Exclude","tags":[],"Value":1,"Enum":"KeywordFilterType"},{"type":"Enum","Name":"LeftRight","tags":[]},{"type":"EnumItem","Name":"Left","tags":[],"Value":0,"Enum":"LeftRight"},{"type":"EnumItem","Name":"Center","tags":[],"Value":1,"Enum":"LeftRight"},{"type":"EnumItem","Name":"Right","tags":[],"Value":2,"Enum":"LeftRight"},{"type":"Enum","Name":"LevelOfDetailSetting","tags":[]},{"type":"EnumItem","Name":"High","tags":[],"Value":2,"Enum":"LevelOfDetailSetting"},{"type":"EnumItem","Name":"Medium","tags":[],"Value":1,"Enum":"LevelOfDetailSetting"},{"type":"EnumItem","Name":"Low","tags":[],"Value":0,"Enum":"LevelOfDetailSetting"},{"type":"Enum","Name":"ListenerType","tags":[]},{"type":"EnumItem","Name":"Camera","tags":[],"Value":0,"Enum":"ListenerType"},{"type":"EnumItem","Name":"CFrame","tags":[],"Value":1,"Enum":"ListenerType"},{"type":"EnumItem","Name":"ObjectPosition","tags":[],"Value":2,"Enum":"ListenerType"},{"type":"EnumItem","Name":"ObjectCFrame","tags":[],"Value":3,"Enum":"ListenerType"},{"type":"Enum","Name":"Material","tags":[]},{"type":"EnumItem","Name":"Plastic","tags":[],"Value":256,"Enum":"Material"},{"type":"EnumItem","Name":"Wood","tags":[],"Value":512,"Enum":"Material"},{"type":"EnumItem","Name":"Slate","tags":[],"Value":800,"Enum":"Material"},{"type":"EnumItem","Name":"Concrete","tags":[],"Value":816,"Enum":"Material"},{"type":"EnumItem","Name":"CorrodedMetal","tags":[],"Value":1040,"Enum":"Material"},{"type":"EnumItem","Name":"DiamondPlate","tags":[],"Value":1056,"Enum":"Material"},{"type":"EnumItem","Name":"Foil","tags":[],"Value":1072,"Enum":"Material"},{"type":"EnumItem","Name":"Grass","tags":[],"Value":1280,"Enum":"Material"},{"type":"EnumItem","Name":"Ice","tags":[],"Value":1536,"Enum":"Material"},{"type":"EnumItem","Name":"Marble","tags":[],"Value":784,"Enum":"Material"},{"type":"EnumItem","Name":"Granite","tags":[],"Value":832,"Enum":"Material"},{"type":"EnumItem","Name":"Brick","tags":[],"Value":848,"Enum":"Material"},{"type":"EnumItem","Name":"Pebble","tags":[],"Value":864,"Enum":"Material"},{"type":"EnumItem","Name":"Sand","tags":[],"Value":1296,"Enum":"Material"},{"type":"EnumItem","Name":"Fabric","tags":[],"Value":1312,"Enum":"Material"},{"type":"EnumItem","Name":"SmoothPlastic","tags":[],"Value":272,"Enum":"Material"},{"type":"EnumItem","Name":"Metal","tags":[],"Value":1088,"Enum":"Material"},{"type":"EnumItem","Name":"WoodPlanks","tags":[],"Value":528,"Enum":"Material"},{"type":"EnumItem","Name":"Cobblestone","tags":[],"Value":880,"Enum":"Material"},{"type":"EnumItem","Name":"Air","tags":["notbrowsable"],"Value":1792,"Enum":"Material"},{"type":"EnumItem","Name":"Water","tags":["notbrowsable"],"Value":2048,"Enum":"Material"},{"type":"EnumItem","Name":"Rock","tags":["notbrowsable"],"Value":896,"Enum":"Material"},{"type":"EnumItem","Name":"Glacier","tags":["notbrowsable"],"Value":1552,"Enum":"Material"},{"type":"EnumItem","Name":"Snow","tags":["notbrowsable"],"Value":1328,"Enum":"Material"},{"type":"EnumItem","Name":"Sandstone","tags":["notbrowsable"],"Value":912,"Enum":"Material"},{"type":"EnumItem","Name":"Mud","tags":["notbrowsable"],"Value":1344,"Enum":"Material"},{"type":"EnumItem","Name":"Basalt","tags":["notbrowsable"],"Value":788,"Enum":"Material"},{"type":"EnumItem","Name":"Ground","tags":["notbrowsable"],"Value":1360,"Enum":"Material"},{"type":"EnumItem","Name":"CrackedLava","tags":["notbrowsable"],"Value":804,"Enum":"Material"},{"type":"EnumItem","Name":"Neon","tags":[],"Value":288,"Enum":"Material"},{"type":"EnumItem","Name":"Asphalt","tags":["notbrowsable"],"Value":1376,"Enum":"Material"},{"type":"EnumItem","Name":"LeafyGrass","tags":["notbrowsable"],"Value":1284,"Enum":"Material"},{"type":"EnumItem","Name":"Salt","tags":["notbrowsable"],"Value":1392,"Enum":"Material"},{"type":"EnumItem","Name":"Limestone","tags":["notbrowsable"],"Value":820,"Enum":"Material"},{"type":"EnumItem","Name":"Pavement","tags":["notbrowsable"],"Value":836,"Enum":"Material"},{"type":"Enum","Name":"MembershipType","tags":[]},{"type":"EnumItem","Name":"None","tags":[],"Value":0,"Enum":"MembershipType"},{"type":"EnumItem","Name":"BuildersClub","tags":[],"Value":1,"Enum":"MembershipType"},{"type":"EnumItem","Name":"TurboBuildersClub","tags":[],"Value":2,"Enum":"MembershipType"},{"type":"EnumItem","Name":"OutrageousBuildersClub","tags":[],"Value":3,"Enum":"MembershipType"},{"type":"Enum","Name":"MeshType","tags":[]},{"type":"EnumItem","Name":"Head","tags":[],"Value":0,"Enum":"MeshType"},{"type":"EnumItem","Name":"Torso","tags":[],"Value":1,"Enum":"MeshType"},{"type":"EnumItem","Name":"Wedge","tags":[],"Value":2,"Enum":"MeshType"},{"type":"EnumItem","Name":"Prism","tags":["deprecated"],"Value":7,"Enum":"MeshType"},{"type":"EnumItem","Name":"Pyramid","tags":["deprecated"],"Value":8,"Enum":"MeshType"},{"type":"EnumItem","Name":"ParallelRamp","tags":["deprecated"],"Value":9,"Enum":"MeshType"},{"type":"EnumItem","Name":"RightAngleRamp","tags":["deprecated"],"Value":10,"Enum":"MeshType"},{"type":"EnumItem","Name":"CornerWedge","tags":["deprecated"],"Value":11,"Enum":"MeshType"},{"type":"EnumItem","Name":"Brick","tags":[],"Value":6,"Enum":"MeshType"},{"type":"EnumItem","Name":"Sphere","tags":[],"Value":3,"Enum":"MeshType"},{"type":"EnumItem","Name":"Cylinder","tags":[],"Value":4,"Enum":"MeshType"},{"type":"EnumItem","Name":"FileMesh","tags":[],"Value":5,"Enum":"MeshType"},{"type":"Enum","Name":"MessageType","tags":[]},{"type":"EnumItem","Name":"MessageOutput","tags":[],"Value":0,"Enum":"MessageType"},{"type":"EnumItem","Name":"MessageInfo","tags":[],"Value":1,"Enum":"MessageType"},{"type":"EnumItem","Name":"MessageWarning","tags":[],"Value":2,"Enum":"MessageType"},{"type":"EnumItem","Name":"MessageError","tags":[],"Value":3,"Enum":"MessageType"},{"type":"Enum","Name":"MouseBehavior","tags":[]},{"type":"EnumItem","Name":"Default","tags":[],"Value":0,"Enum":"MouseBehavior"},{"type":"EnumItem","Name":"LockCenter","tags":[],"Value":1,"Enum":"MouseBehavior"},{"type":"EnumItem","Name":"LockCurrentPosition","tags":[],"Value":2,"Enum":"MouseBehavior"},{"type":"Enum","Name":"MoveState","tags":[]},{"type":"EnumItem","Name":"Stopped","tags":[],"Value":0,"Enum":"MoveState"},{"type":"EnumItem","Name":"Coasting","tags":[],"Value":1,"Enum":"MoveState"},{"type":"EnumItem","Name":"Pushing","tags":[],"Value":2,"Enum":"MoveState"},{"type":"EnumItem","Name":"Stopping","tags":[],"Value":3,"Enum":"MoveState"},{"type":"EnumItem","Name":"AirFree","tags":[],"Value":4,"Enum":"MoveState"},{"type":"Enum","Name":"NameOcclusion","tags":[]},{"type":"EnumItem","Name":"OccludeAll","tags":[],"Value":2,"Enum":"NameOcclusion"},{"type":"EnumItem","Name":"EnemyOcclusion","tags":[],"Value":1,"Enum":"NameOcclusion"},{"type":"EnumItem","Name":"NoOcclusion","tags":[],"Value":0,"Enum":"NameOcclusion"},{"type":"Enum","Name":"NetworkOwnership","tags":[]},{"type":"EnumItem","Name":"Automatic","tags":[],"Value":0,"Enum":"NetworkOwnership"},{"type":"EnumItem","Name":"Manual","tags":[],"Value":1,"Enum":"NetworkOwnership"},{"type":"Enum","Name":"NormalId","tags":[]},{"type":"EnumItem","Name":"Top","tags":[],"Value":1,"Enum":"NormalId"},{"type":"EnumItem","Name":"Bottom","tags":[],"Value":4,"Enum":"NormalId"},{"type":"EnumItem","Name":"Back","tags":[],"Value":2,"Enum":"NormalId"},{"type":"EnumItem","Name":"Front","tags":[],"Value":5,"Enum":"NormalId"},{"type":"EnumItem","Name":"Right","tags":[],"Value":0,"Enum":"NormalId"},{"type":"EnumItem","Name":"Left","tags":[],"Value":3,"Enum":"NormalId"},{"type":"Enum","Name":"OverrideMouseIconBehavior","tags":[]},{"type":"EnumItem","Name":"None","tags":[],"Value":0,"Enum":"OverrideMouseIconBehavior"},{"type":"EnumItem","Name":"ForceShow","tags":[],"Value":1,"Enum":"OverrideMouseIconBehavior"},{"type":"EnumItem","Name":"ForceHide","tags":[],"Value":2,"Enum":"OverrideMouseIconBehavior"},{"type":"Enum","Name":"PacketPriority","tags":[]},{"type":"EnumItem","Name":"IMMEDIATE_PRIORITY","tags":[],"Value":0,"Enum":"PacketPriority"},{"type":"EnumItem","Name":"HIGH_PRIORITY","tags":[],"Value":1,"Enum":"PacketPriority"},{"type":"EnumItem","Name":"MEDIUM_PRIORITY","tags":[],"Value":2,"Enum":"PacketPriority"},{"type":"EnumItem","Name":"LOW_PRIORITY","tags":[],"Value":3,"Enum":"PacketPriority"},{"type":"Enum","Name":"PacketReliability","tags":[]},{"type":"EnumItem","Name":"UNRELIABLE","tags":[],"Value":0,"Enum":"PacketReliability"},{"type":"EnumItem","Name":"UNRELIABLE_SEQUENCED","tags":[],"Value":1,"Enum":"PacketReliability"},{"type":"EnumItem","Name":"RELIABLE","tags":[],"Value":2,"Enum":"PacketReliability"},{"type":"EnumItem","Name":"RELIABLE_ORDERED","tags":[],"Value":3,"Enum":"PacketReliability"},{"type":"EnumItem","Name":"RELIABLE_SEQUENCED","tags":[],"Value":4,"Enum":"PacketReliability"},{"type":"Enum","Name":"PartType","tags":[]},{"type":"EnumItem","Name":"Ball","tags":[],"Value":0,"Enum":"PartType"},{"type":"EnumItem","Name":"Block","tags":[],"Value":1,"Enum":"PartType"},{"type":"EnumItem","Name":"Cylinder","tags":[],"Value":2,"Enum":"PartType"},{"type":"Enum","Name":"PathStatus","tags":[]},{"type":"EnumItem","Name":"Success","tags":[],"Value":0,"Enum":"PathStatus"},{"type":"EnumItem","Name":"ClosestNoPath","tags":[],"Value":1,"Enum":"PathStatus"},{"type":"EnumItem","Name":"ClosestOutOfRange","tags":[],"Value":2,"Enum":"PathStatus"},{"type":"EnumItem","Name":"FailStartNotEmpty","tags":[],"Value":3,"Enum":"PathStatus"},{"type":"EnumItem","Name":"FailFinishNotEmpty","tags":[],"Value":4,"Enum":"PathStatus"},{"type":"Enum","Name":"PhysicalPropertiesMode","tags":[]},{"type":"EnumItem","Name":"Default","tags":[],"Value":1,"Enum":"PhysicalPropertiesMode"},{"type":"EnumItem","Name":"Legacy","tags":[],"Value":0,"Enum":"PhysicalPropertiesMode"},{"type":"EnumItem","Name":"New","tags":[],"Value":2,"Enum":"PhysicalPropertiesMode"},{"type":"Enum","Name":"PhysicsReceiveMethod","tags":[]},{"type":"EnumItem","Name":"Direct","tags":[],"Value":0,"Enum":"PhysicsReceiveMethod"},{"type":"EnumItem","Name":"Interpolation","tags":[],"Value":1,"Enum":"PhysicsReceiveMethod"},{"type":"Enum","Name":"PhysicsSendMethod","tags":[]},{"type":"EnumItem","Name":"ErrorComputation","tags":[],"Value":0,"Enum":"PhysicsSendMethod"},{"type":"EnumItem","Name":"ErrorComputation2","tags":[],"Value":1,"Enum":"PhysicsSendMethod"},{"type":"EnumItem","Name":"RoundRobin","tags":[],"Value":2,"Enum":"PhysicsSendMethod"},{"type":"EnumItem","Name":"TopNErrors","tags":[],"Value":3,"Enum":"PhysicsSendMethod"},{"type":"Enum","Name":"Platform","tags":[]},{"type":"EnumItem","Name":"Windows","tags":[],"Value":0,"Enum":"Platform"},{"type":"EnumItem","Name":"OSX","tags":[],"Value":1,"Enum":"Platform"},{"type":"EnumItem","Name":"IOS","tags":[],"Value":2,"Enum":"Platform"},{"type":"EnumItem","Name":"Android","tags":[],"Value":3,"Enum":"Platform"},{"type":"EnumItem","Name":"XBoxOne","tags":[],"Value":4,"Enum":"Platform"},{"type":"EnumItem","Name":"PS4","tags":[],"Value":5,"Enum":"Platform"},{"type":"EnumItem","Name":"PS3","tags":[],"Value":6,"Enum":"Platform"},{"type":"EnumItem","Name":"XBox360","tags":[],"Value":7,"Enum":"Platform"},{"type":"EnumItem","Name":"WiiU","tags":[],"Value":8,"Enum":"Platform"},{"type":"EnumItem","Name":"NX","tags":[],"Value":9,"Enum":"Platform"},{"type":"EnumItem","Name":"Ouya","tags":[],"Value":10,"Enum":"Platform"},{"type":"EnumItem","Name":"AndroidTV","tags":[],"Value":11,"Enum":"Platform"},{"type":"EnumItem","Name":"Chromecast","tags":[],"Value":12,"Enum":"Platform"},{"type":"EnumItem","Name":"Linux","tags":[],"Value":13,"Enum":"Platform"},{"type":"EnumItem","Name":"SteamOS","tags":[],"Value":14,"Enum":"Platform"},{"type":"EnumItem","Name":"WebOS","tags":[],"Value":15,"Enum":"Platform"},{"type":"EnumItem","Name":"DOS","tags":[],"Value":16,"Enum":"Platform"},{"type":"EnumItem","Name":"BeOS","tags":[],"Value":17,"Enum":"Platform"},{"type":"EnumItem","Name":"UWP","tags":[],"Value":18,"Enum":"Platform"},{"type":"EnumItem","Name":"None","tags":[],"Value":19,"Enum":"Platform"},{"type":"Enum","Name":"PlayerActions","tags":[]},{"type":"EnumItem","Name":"CharacterForward","tags":[],"Value":0,"Enum":"PlayerActions"},{"type":"EnumItem","Name":"CharacterBackward","tags":[],"Value":1,"Enum":"PlayerActions"},{"type":"EnumItem","Name":"CharacterLeft","tags":[],"Value":2,"Enum":"PlayerActions"},{"type":"EnumItem","Name":"CharacterRight","tags":[],"Value":3,"Enum":"PlayerActions"},{"type":"EnumItem","Name":"CharacterJump","tags":[],"Value":4,"Enum":"PlayerActions"},{"type":"Enum","Name":"PlayerChatType","tags":[]},{"type":"EnumItem","Name":"All","tags":[],"Value":0,"Enum":"PlayerChatType"},{"type":"EnumItem","Name":"Team","tags":[],"Value":1,"Enum":"PlayerChatType"},{"type":"EnumItem","Name":"Whisper","tags":[],"Value":2,"Enum":"PlayerChatType"},{"type":"Enum","Name":"PoseEasingDirection","tags":[]},{"type":"EnumItem","Name":"Out","tags":[],"Value":1,"Enum":"PoseEasingDirection"},{"type":"EnumItem","Name":"InOut","tags":[],"Value":2,"Enum":"PoseEasingDirection"},{"type":"EnumItem","Name":"In","tags":[],"Value":0,"Enum":"PoseEasingDirection"},{"type":"Enum","Name":"PoseEasingStyle","tags":[]},{"type":"EnumItem","Name":"Linear","tags":[],"Value":0,"Enum":"PoseEasingStyle"},{"type":"EnumItem","Name":"Constant","tags":[],"Value":1,"Enum":"PoseEasingStyle"},{"type":"EnumItem","Name":"Elastic","tags":[],"Value":2,"Enum":"PoseEasingStyle"},{"type":"EnumItem","Name":"Cubic","tags":[],"Value":3,"Enum":"PoseEasingStyle"},{"type":"EnumItem","Name":"Bounce","tags":[],"Value":4,"Enum":"PoseEasingStyle"},{"type":"Enum","Name":"PriorityMethod","tags":[]},{"type":"EnumItem","Name":"LastError","tags":[],"Value":0,"Enum":"PriorityMethod"},{"type":"EnumItem","Name":"AccumulatedError","tags":[],"Value":1,"Enum":"PriorityMethod"},{"type":"EnumItem","Name":"FIFO","tags":[],"Value":2,"Enum":"PriorityMethod"},{"type":"Enum","Name":"PrismSides","tags":[]},{"type":"EnumItem","Name":"3","tags":[],"Value":3,"Enum":"PrismSides"},{"type":"EnumItem","Name":"5","tags":[],"Value":5,"Enum":"PrismSides"},{"type":"EnumItem","Name":"6","tags":[],"Value":6,"Enum":"PrismSides"},{"type":"EnumItem","Name":"8","tags":[],"Value":8,"Enum":"PrismSides"},{"type":"EnumItem","Name":"10","tags":[],"Value":10,"Enum":"PrismSides"},{"type":"EnumItem","Name":"20","tags":[],"Value":20,"Enum":"PrismSides"},{"type":"Enum","Name":"PrivilegeType","tags":[]},{"type":"EnumItem","Name":"Owner","tags":[],"Value":255,"Enum":"PrivilegeType"},{"type":"EnumItem","Name":"Admin","tags":[],"Value":240,"Enum":"PrivilegeType"},{"type":"EnumItem","Name":"Member","tags":[],"Value":128,"Enum":"PrivilegeType"},{"type":"EnumItem","Name":"Visitor","tags":[],"Value":10,"Enum":"PrivilegeType"},{"type":"EnumItem","Name":"Banned","tags":[],"Value":0,"Enum":"PrivilegeType"},{"type":"Enum","Name":"ProductPurchaseDecision","tags":[]},{"type":"EnumItem","Name":"NotProcessedYet","tags":[],"Value":0,"Enum":"ProductPurchaseDecision"},{"type":"EnumItem","Name":"PurchaseGranted","tags":[],"Value":1,"Enum":"ProductPurchaseDecision"},{"type":"Enum","Name":"PyramidSides","tags":[]},{"type":"EnumItem","Name":"3","tags":[],"Value":3,"Enum":"PyramidSides"},{"type":"EnumItem","Name":"4","tags":[],"Value":4,"Enum":"PyramidSides"},{"type":"EnumItem","Name":"5","tags":[],"Value":5,"Enum":"PyramidSides"},{"type":"EnumItem","Name":"6","tags":[],"Value":6,"Enum":"PyramidSides"},{"type":"EnumItem","Name":"8","tags":[],"Value":8,"Enum":"PyramidSides"},{"type":"EnumItem","Name":"10","tags":[],"Value":10,"Enum":"PyramidSides"},{"type":"EnumItem","Name":"20","tags":[],"Value":20,"Enum":"PyramidSides"},{"type":"Enum","Name":"QualityLevel","tags":[]},{"type":"EnumItem","Name":"Automatic","tags":[],"Value":0,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level01","tags":[],"Value":1,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level02","tags":[],"Value":2,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level03","tags":[],"Value":3,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level04","tags":[],"Value":4,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level05","tags":[],"Value":5,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level06","tags":[],"Value":6,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level07","tags":[],"Value":7,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level08","tags":[],"Value":8,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level09","tags":[],"Value":9,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level10","tags":[],"Value":10,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level11","tags":[],"Value":11,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level12","tags":[],"Value":12,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level13","tags":[],"Value":13,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level14","tags":[],"Value":14,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level15","tags":[],"Value":15,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level16","tags":[],"Value":16,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level17","tags":[],"Value":17,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level18","tags":[],"Value":18,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level19","tags":[],"Value":19,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level20","tags":[],"Value":20,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level21","tags":[],"Value":21,"Enum":"QualityLevel"},{"type":"Enum","Name":"RenderPriority","tags":[]},{"type":"EnumItem","Name":"First","tags":[],"Value":0,"Enum":"RenderPriority"},{"type":"EnumItem","Name":"Input","tags":[],"Value":100,"Enum":"RenderPriority"},{"type":"EnumItem","Name":"Camera","tags":[],"Value":200,"Enum":"RenderPriority"},{"type":"EnumItem","Name":"Character","tags":[],"Value":300,"Enum":"RenderPriority"},{"type":"EnumItem","Name":"Last","tags":[],"Value":2000,"Enum":"RenderPriority"},{"type":"Enum","Name":"Resolution","tags":[]},{"type":"EnumItem","Name":"Automatic","tags":[],"Value":0,"Enum":"Resolution"},{"type":"EnumItem","Name":"720x526","tags":[],"Value":1,"Enum":"Resolution"},{"type":"EnumItem","Name":"800x600","tags":[],"Value":2,"Enum":"Resolution"},{"type":"EnumItem","Name":"1024x600","tags":[],"Value":3,"Enum":"Resolution"},{"type":"EnumItem","Name":"1024x768","tags":[],"Value":4,"Enum":"Resolution"},{"type":"EnumItem","Name":"1280x720","tags":[],"Value":5,"Enum":"Resolution"},{"type":"EnumItem","Name":"1280x768","tags":[],"Value":6,"Enum":"Resolution"},{"type":"EnumItem","Name":"1152x864","tags":[],"Value":7,"Enum":"Resolution"},{"type":"EnumItem","Name":"1280x800","tags":[],"Value":8,"Enum":"Resolution"},{"type":"EnumItem","Name":"1360x768","tags":[],"Value":9,"Enum":"Resolution"},{"type":"EnumItem","Name":"1280x960","tags":[],"Value":10,"Enum":"Resolution"},{"type":"EnumItem","Name":"1280x1024","tags":[],"Value":11,"Enum":"Resolution"},{"type":"EnumItem","Name":"1440x900","tags":[],"Value":12,"Enum":"Resolution"},{"type":"EnumItem","Name":"1600x900","tags":[],"Value":13,"Enum":"Resolution"},{"type":"EnumItem","Name":"1600x1024","tags":[],"Value":14,"Enum":"Resolution"},{"type":"EnumItem","Name":"1600x1200","tags":[],"Value":15,"Enum":"Resolution"},{"type":"EnumItem","Name":"1680x1050","tags":[],"Value":16,"Enum":"Resolution"},{"type":"EnumItem","Name":"1920x1080","tags":[],"Value":17,"Enum":"Resolution"},{"type":"EnumItem","Name":"1920x1200","tags":[],"Value":18,"Enum":"Resolution"},{"type":"Enum","Name":"ReverbType","tags":[]},{"type":"EnumItem","Name":"NoReverb","tags":[],"Value":0,"Enum":"ReverbType"},{"type":"EnumItem","Name":"GenericReverb","tags":[],"Value":1,"Enum":"ReverbType"},{"type":"EnumItem","Name":"PaddedCell","tags":[],"Value":2,"Enum":"ReverbType"},{"type":"EnumItem","Name":"Room","tags":[],"Value":3,"Enum":"ReverbType"},{"type":"EnumItem","Name":"Bathroom","tags":[],"Value":4,"Enum":"ReverbType"},{"type":"EnumItem","Name":"LivingRoom","tags":[],"Value":5,"Enum":"ReverbType"},{"type":"EnumItem","Name":"StoneRoom","tags":[],"Value":6,"Enum":"ReverbType"},{"type":"EnumItem","Name":"Auditorium","tags":[],"Value":7,"Enum":"ReverbType"},{"type":"EnumItem","Name":"ConcertHall","tags":[],"Value":8,"Enum":"ReverbType"},{"type":"EnumItem","Name":"Cave","tags":[],"Value":9,"Enum":"ReverbType"},{"type":"EnumItem","Name":"Arena","tags":[],"Value":10,"Enum":"ReverbType"},{"type":"EnumItem","Name":"Hangar","tags":[],"Value":11,"Enum":"ReverbType"},{"type":"EnumItem","Name":"CarpettedHallway","tags":[],"Value":12,"Enum":"ReverbType"},{"type":"EnumItem","Name":"Hallway","tags":[],"Value":13,"Enum":"ReverbType"},{"type":"EnumItem","Name":"StoneCorridor","tags":[],"Value":14,"Enum":"ReverbType"},{"type":"EnumItem","Name":"Alley","tags":[],"Value":15,"Enum":"ReverbType"},{"type":"EnumItem","Name":"Forest","tags":[],"Value":16,"Enum":"ReverbType"},{"type":"EnumItem","Name":"City","tags":[],"Value":17,"Enum":"ReverbType"},{"type":"EnumItem","Name":"Mountains","tags":[],"Value":18,"Enum":"ReverbType"},{"type":"EnumItem","Name":"Quarry","tags":[],"Value":19,"Enum":"ReverbType"},{"type":"EnumItem","Name":"Plain","tags":[],"Value":20,"Enum":"ReverbType"},{"type":"EnumItem","Name":"ParkingLot","tags":[],"Value":21,"Enum":"ReverbType"},{"type":"EnumItem","Name":"SewerPipe","tags":[],"Value":22,"Enum":"ReverbType"},{"type":"EnumItem","Name":"UnderWater","tags":[],"Value":23,"Enum":"ReverbType"},{"type":"Enum","Name":"RollOffMode","tags":[]},{"type":"EnumItem","Name":"Inverse","tags":[],"Value":0,"Enum":"RollOffMode"},{"type":"EnumItem","Name":"Linear","tags":[],"Value":1,"Enum":"RollOffMode"},{"type":"Enum","Name":"RotationType","tags":[]},{"type":"EnumItem","Name":"MovementRelative","tags":[],"Value":0,"Enum":"RotationType"},{"type":"EnumItem","Name":"CameraRelative","tags":[],"Value":1,"Enum":"RotationType"},{"type":"Enum","Name":"RuntimeUndoBehavior","tags":[]},{"type":"EnumItem","Name":"Aggregate","tags":[],"Value":0,"Enum":"RuntimeUndoBehavior"},{"type":"EnumItem","Name":"Snapshot","tags":[],"Value":1,"Enum":"RuntimeUndoBehavior"},{"type":"EnumItem","Name":"Hybrid","tags":[],"Value":2,"Enum":"RuntimeUndoBehavior"},{"type":"Enum","Name":"SaveFilter","tags":[]},{"type":"EnumItem","Name":"SaveAll","tags":[],"Value":2,"Enum":"SaveFilter"},{"type":"EnumItem","Name":"SaveWorld","tags":[],"Value":0,"Enum":"SaveFilter"},{"type":"EnumItem","Name":"SaveGame","tags":[],"Value":1,"Enum":"SaveFilter"},{"type":"Enum","Name":"SavedQualitySetting","tags":[]},{"type":"EnumItem","Name":"Automatic","tags":[],"Value":0,"Enum":"SavedQualitySetting"},{"type":"EnumItem","Name":"QualityLevel1","tags":[],"Value":1,"Enum":"SavedQualitySetting"},{"type":"EnumItem","Name":"QualityLevel2","tags":[],"Value":2,"Enum":"SavedQualitySetting"},{"type":"EnumItem","Name":"QualityLevel3","tags":[],"Value":3,"Enum":"SavedQualitySetting"},{"type":"EnumItem","Name":"QualityLevel4","tags":[],"Value":4,"Enum":"SavedQualitySetting"},{"type":"EnumItem","Name":"QualityLevel5","tags":[],"Value":5,"Enum":"SavedQualitySetting"},{"type":"EnumItem","Name":"QualityLevel6","tags":[],"Value":6,"Enum":"SavedQualitySetting"},{"type":"EnumItem","Name":"QualityLevel7","tags":[],"Value":7,"Enum":"SavedQualitySetting"},{"type":"EnumItem","Name":"QualityLevel8","tags":[],"Value":8,"Enum":"SavedQualitySetting"},{"type":"EnumItem","Name":"QualityLevel9","tags":[],"Value":9,"Enum":"SavedQualitySetting"},{"type":"EnumItem","Name":"QualityLevel10","tags":[],"Value":10,"Enum":"SavedQualitySetting"},{"type":"Enum","Name":"ScaleType","tags":[]},{"type":"EnumItem","Name":"Stretch","tags":[],"Value":0,"Enum":"ScaleType"},{"type":"EnumItem","Name":"Slice","tags":[],"Value":1,"Enum":"ScaleType"},{"type":"Enum","Name":"SizeConstraint","tags":[]},{"type":"EnumItem","Name":"RelativeXY","tags":[],"Value":0,"Enum":"SizeConstraint"},{"type":"EnumItem","Name":"RelativeXX","tags":[],"Value":1,"Enum":"SizeConstraint"},{"type":"EnumItem","Name":"RelativeYY","tags":[],"Value":2,"Enum":"SizeConstraint"},{"type":"Enum","Name":"SleepAdjustMethod","tags":[]},{"type":"EnumItem","Name":"None","tags":[],"Value":0,"Enum":"SleepAdjustMethod"},{"type":"EnumItem","Name":"LastSample","tags":[],"Value":1,"Enum":"SleepAdjustMethod"},{"type":"EnumItem","Name":"AverageInterval","tags":[],"Value":2,"Enum":"SleepAdjustMethod"},{"type":"Enum","Name":"SoundType","tags":[]},{"type":"EnumItem","Name":"NoSound","tags":[],"Value":0,"Enum":"SoundType"},{"type":"EnumItem","Name":"Boing","tags":[],"Value":1,"Enum":"SoundType"},{"type":"EnumItem","Name":"Bomb","tags":[],"Value":2,"Enum":"SoundType"},{"type":"EnumItem","Name":"Break","tags":[],"Value":3,"Enum":"SoundType"},{"type":"EnumItem","Name":"Click","tags":[],"Value":4,"Enum":"SoundType"},{"type":"EnumItem","Name":"Clock","tags":[],"Value":5,"Enum":"SoundType"},{"type":"EnumItem","Name":"Slingshot","tags":[],"Value":6,"Enum":"SoundType"},{"type":"EnumItem","Name":"Page","tags":[],"Value":7,"Enum":"SoundType"},{"type":"EnumItem","Name":"Ping","tags":[],"Value":8,"Enum":"SoundType"},{"type":"EnumItem","Name":"Snap","tags":[],"Value":9,"Enum":"SoundType"},{"type":"EnumItem","Name":"Splat","tags":[],"Value":10,"Enum":"SoundType"},{"type":"EnumItem","Name":"Step","tags":[],"Value":11,"Enum":"SoundType"},{"type":"EnumItem","Name":"StepOn","tags":[],"Value":12,"Enum":"SoundType"},{"type":"EnumItem","Name":"Swoosh","tags":[],"Value":13,"Enum":"SoundType"},{"type":"EnumItem","Name":"Victory","tags":[],"Value":14,"Enum":"SoundType"},{"type":"Enum","Name":"SpecialKey","tags":[]},{"type":"EnumItem","Name":"Insert","tags":[],"Value":0,"Enum":"SpecialKey"},{"type":"EnumItem","Name":"Home","tags":[],"Value":1,"Enum":"SpecialKey"},{"type":"EnumItem","Name":"End","tags":[],"Value":2,"Enum":"SpecialKey"},{"type":"EnumItem","Name":"PageUp","tags":[],"Value":3,"Enum":"SpecialKey"},{"type":"EnumItem","Name":"PageDown","tags":[],"Value":4,"Enum":"SpecialKey"},{"type":"EnumItem","Name":"ChatHotkey","tags":[],"Value":5,"Enum":"SpecialKey"},{"type":"Enum","Name":"Status","tags":[]},{"type":"EnumItem","Name":"Poison","tags":["deprecated"],"Value":0,"Enum":"Status"},{"type":"EnumItem","Name":"Confusion","tags":["deprecated"],"Value":1,"Enum":"Status"},{"type":"Enum","Name":"Stuff","tags":[]},{"type":"EnumItem","Name":"Heads","tags":[],"Value":0,"Enum":"Stuff"},{"type":"EnumItem","Name":"Faces","tags":[],"Value":1,"Enum":"Stuff"},{"type":"EnumItem","Name":"Hats","tags":[],"Value":2,"Enum":"Stuff"},{"type":"EnumItem","Name":"TShirts","tags":[],"Value":3,"Enum":"Stuff"},{"type":"EnumItem","Name":"Shirts","tags":[],"Value":4,"Enum":"Stuff"},{"type":"EnumItem","Name":"Pants","tags":[],"Value":5,"Enum":"Stuff"},{"type":"EnumItem","Name":"Gears","tags":[],"Value":6,"Enum":"Stuff"},{"type":"EnumItem","Name":"Torsos","tags":[],"Value":7,"Enum":"Stuff"},{"type":"EnumItem","Name":"LeftArms","tags":[],"Value":8,"Enum":"Stuff"},{"type":"EnumItem","Name":"RightArms","tags":[],"Value":9,"Enum":"Stuff"},{"type":"EnumItem","Name":"LeftLegs","tags":[],"Value":10,"Enum":"Stuff"},{"type":"EnumItem","Name":"RightLegs","tags":[],"Value":11,"Enum":"Stuff"},{"type":"EnumItem","Name":"Bodies","tags":[],"Value":12,"Enum":"Stuff"},{"type":"EnumItem","Name":"Costumes","tags":[],"Value":13,"Enum":"Stuff"},{"type":"Enum","Name":"Style","tags":[]},{"type":"EnumItem","Name":"AlternatingSupports","tags":[],"Value":0,"Enum":"Style"},{"type":"EnumItem","Name":"BridgeStyleSupports","tags":[],"Value":1,"Enum":"Style"},{"type":"EnumItem","Name":"NoSupports","tags":[],"Value":2,"Enum":"Style"},{"type":"Enum","Name":"SurfaceConstraint","tags":[]},{"type":"EnumItem","Name":"None","tags":[],"Value":0,"Enum":"SurfaceConstraint"},{"type":"EnumItem","Name":"Hinge","tags":[],"Value":1,"Enum":"SurfaceConstraint"},{"type":"EnumItem","Name":"SteppingMotor","tags":[],"Value":2,"Enum":"SurfaceConstraint"},{"type":"EnumItem","Name":"Motor","tags":[],"Value":3,"Enum":"SurfaceConstraint"},{"type":"Enum","Name":"SurfaceType","tags":[]},{"type":"EnumItem","Name":"Smooth","tags":[],"Value":0,"Enum":"SurfaceType"},{"type":"EnumItem","Name":"Glue","tags":[],"Value":1,"Enum":"SurfaceType"},{"type":"EnumItem","Name":"Weld","tags":[],"Value":2,"Enum":"SurfaceType"},{"type":"EnumItem","Name":"Studs","tags":[],"Value":3,"Enum":"SurfaceType"},{"type":"EnumItem","Name":"Inlet","tags":[],"Value":4,"Enum":"SurfaceType"},{"type":"EnumItem","Name":"Universal","tags":[],"Value":5,"Enum":"SurfaceType"},{"type":"EnumItem","Name":"Hinge","tags":[],"Value":6,"Enum":"SurfaceType"},{"type":"EnumItem","Name":"Motor","tags":[],"Value":7,"Enum":"SurfaceType"},{"type":"EnumItem","Name":"SteppingMotor","tags":[],"Value":8,"Enum":"SurfaceType"},{"type":"EnumItem","Name":"Unjoinable","tags":[],"Value":9,"Enum":"SurfaceType"},{"type":"EnumItem","Name":"SmoothNoOutlines","tags":[],"Value":10,"Enum":"SurfaceType"},{"type":"Enum","Name":"SwipeDirection","tags":[]},{"type":"EnumItem","Name":"Right","tags":[],"Value":0,"Enum":"SwipeDirection"},{"type":"EnumItem","Name":"Left","tags":[],"Value":1,"Enum":"SwipeDirection"},{"type":"EnumItem","Name":"Up","tags":[],"Value":2,"Enum":"SwipeDirection"},{"type":"EnumItem","Name":"Down","tags":[],"Value":3,"Enum":"SwipeDirection"},{"type":"EnumItem","Name":"None","tags":[],"Value":4,"Enum":"SwipeDirection"},{"type":"Enum","Name":"TeleportState","tags":[]},{"type":"EnumItem","Name":"RequestedFromServer","tags":[],"Value":0,"Enum":"TeleportState"},{"type":"EnumItem","Name":"Started","tags":[],"Value":1,"Enum":"TeleportState"},{"type":"EnumItem","Name":"WaitingForServer","tags":[],"Value":2,"Enum":"TeleportState"},{"type":"EnumItem","Name":"Failed","tags":[],"Value":3,"Enum":"TeleportState"},{"type":"EnumItem","Name":"InProgress","tags":[],"Value":4,"Enum":"TeleportState"},{"type":"Enum","Name":"TeleportType","tags":[]},{"type":"EnumItem","Name":"ToPlace","tags":[],"Value":0,"Enum":"TeleportType"},{"type":"EnumItem","Name":"ToInstance","tags":[],"Value":1,"Enum":"TeleportType"},{"type":"EnumItem","Name":"ToReservedServer","tags":[],"Value":2,"Enum":"TeleportType"},{"type":"Enum","Name":"TextXAlignment","tags":[]},{"type":"EnumItem","Name":"Left","tags":[],"Value":0,"Enum":"TextXAlignment"},{"type":"EnumItem","Name":"Center","tags":[],"Value":2,"Enum":"TextXAlignment"},{"type":"EnumItem","Name":"Right","tags":[],"Value":1,"Enum":"TextXAlignment"},{"type":"Enum","Name":"TextYAlignment","tags":[]},{"type":"EnumItem","Name":"Top","tags":[],"Value":0,"Enum":"TextYAlignment"},{"type":"EnumItem","Name":"Center","tags":[],"Value":1,"Enum":"TextYAlignment"},{"type":"EnumItem","Name":"Bottom","tags":[],"Value":2,"Enum":"TextYAlignment"},{"type":"Enum","Name":"ThreadPoolConfig","tags":[]},{"type":"EnumItem","Name":"Auto","tags":[],"Value":0,"Enum":"ThreadPoolConfig"},{"type":"EnumItem","Name":"PerCore1","tags":[],"Value":101,"Enum":"ThreadPoolConfig"},{"type":"EnumItem","Name":"PerCore2","tags":[],"Value":102,"Enum":"ThreadPoolConfig"},{"type":"EnumItem","Name":"PerCore3","tags":[],"Value":103,"Enum":"ThreadPoolConfig"},{"type":"EnumItem","Name":"PerCore4","tags":[],"Value":104,"Enum":"ThreadPoolConfig"},{"type":"EnumItem","Name":"Threads1","tags":[],"Value":1,"Enum":"ThreadPoolConfig"},{"type":"EnumItem","Name":"Threads2","tags":[],"Value":2,"Enum":"ThreadPoolConfig"},{"type":"EnumItem","Name":"Threads3","tags":[],"Value":3,"Enum":"ThreadPoolConfig"},{"type":"EnumItem","Name":"Threads4","tags":[],"Value":4,"Enum":"ThreadPoolConfig"},{"type":"EnumItem","Name":"Threads8","tags":[],"Value":8,"Enum":"ThreadPoolConfig"},{"type":"EnumItem","Name":"Threads16","tags":[],"Value":16,"Enum":"ThreadPoolConfig"},{"type":"Enum","Name":"ThrottlingPriority","tags":[]},{"type":"EnumItem","Name":"Extreme","tags":[],"Value":2,"Enum":"ThrottlingPriority"},{"type":"EnumItem","Name":"ElevatedOnServer","tags":[],"Value":1,"Enum":"ThrottlingPriority"},{"type":"EnumItem","Name":"Default","tags":[],"Value":0,"Enum":"ThrottlingPriority"},{"type":"Enum","Name":"TickCountSampleMethod","tags":[]},{"type":"EnumItem","Name":"Fast","tags":[],"Value":0,"Enum":"TickCountSampleMethod"},{"type":"EnumItem","Name":"Benchmark","tags":[],"Value":1,"Enum":"TickCountSampleMethod"},{"type":"EnumItem","Name":"Precise","tags":[],"Value":2,"Enum":"TickCountSampleMethod"},{"type":"Enum","Name":"TopBottom","tags":[]},{"type":"EnumItem","Name":"Top","tags":[],"Value":0,"Enum":"TopBottom"},{"type":"EnumItem","Name":"Center","tags":[],"Value":1,"Enum":"TopBottom"},{"type":"EnumItem","Name":"Bottom","tags":[],"Value":2,"Enum":"TopBottom"},{"type":"Enum","Name":"TouchCameraMovementMode","tags":[]},{"type":"EnumItem","Name":"Default","tags":[],"Value":0,"Enum":"TouchCameraMovementMode"},{"type":"EnumItem","Name":"Follow","tags":[],"Value":2,"Enum":"TouchCameraMovementMode"},{"type":"EnumItem","Name":"Classic","tags":[],"Value":1,"Enum":"TouchCameraMovementMode"},{"type":"Enum","Name":"TouchMovementMode","tags":[]},{"type":"EnumItem","Name":"Default","tags":[],"Value":0,"Enum":"TouchMovementMode"},{"type":"EnumItem","Name":"Thumbstick","tags":[],"Value":1,"Enum":"TouchMovementMode"},{"type":"EnumItem","Name":"DPad","tags":[],"Value":2,"Enum":"TouchMovementMode"},{"type":"EnumItem","Name":"Thumbpad","tags":[],"Value":3,"Enum":"TouchMovementMode"},{"type":"EnumItem","Name":"ClickToMove","tags":[],"Value":4,"Enum":"TouchMovementMode"},{"type":"Enum","Name":"TweenStatus","tags":[]},{"type":"EnumItem","Name":"Canceled","tags":[],"Value":0,"Enum":"TweenStatus"},{"type":"EnumItem","Name":"Completed","tags":[],"Value":1,"Enum":"TweenStatus"},{"type":"Enum","Name":"UiMessageType","tags":[]},{"type":"EnumItem","Name":"UiMessageError","tags":[],"Value":0,"Enum":"UiMessageType"},{"type":"EnumItem","Name":"UiMessageInfo","tags":[],"Value":1,"Enum":"UiMessageType"},{"type":"Enum","Name":"UploadSetting","tags":[]},{"type":"EnumItem","Name":"Never","tags":[],"Value":0,"Enum":"UploadSetting"},{"type":"EnumItem","Name":"Ask","tags":[],"Value":1,"Enum":"UploadSetting"},{"type":"EnumItem","Name":"Always","tags":[],"Value":2,"Enum":"UploadSetting"},{"type":"Enum","Name":"UserCFrame","tags":[]},{"type":"EnumItem","Name":"Head","tags":[],"Value":0,"Enum":"UserCFrame"},{"type":"EnumItem","Name":"LeftHand","tags":[],"Value":1,"Enum":"UserCFrame"},{"type":"EnumItem","Name":"RightHand","tags":[],"Value":2,"Enum":"UserCFrame"},{"type":"Enum","Name":"UserInputState","tags":[]},{"type":"EnumItem","Name":"Begin","tags":[],"Value":0,"Enum":"UserInputState"},{"type":"EnumItem","Name":"Change","tags":[],"Value":1,"Enum":"UserInputState"},{"type":"EnumItem","Name":"End","tags":[],"Value":2,"Enum":"UserInputState"},{"type":"EnumItem","Name":"Cancel","tags":[],"Value":3,"Enum":"UserInputState"},{"type":"EnumItem","Name":"None","tags":[],"Value":4,"Enum":"UserInputState"},{"type":"Enum","Name":"UserInputType","tags":[]},{"type":"EnumItem","Name":"MouseButton1","tags":[],"Value":0,"Enum":"UserInputType"},{"type":"EnumItem","Name":"MouseButton2","tags":[],"Value":1,"Enum":"UserInputType"},{"type":"EnumItem","Name":"MouseButton3","tags":[],"Value":2,"Enum":"UserInputType"},{"type":"EnumItem","Name":"MouseWheel","tags":[],"Value":3,"Enum":"UserInputType"},{"type":"EnumItem","Name":"MouseMovement","tags":[],"Value":4,"Enum":"UserInputType"},{"type":"EnumItem","Name":"Touch","tags":[],"Value":7,"Enum":"UserInputType"},{"type":"EnumItem","Name":"Keyboard","tags":[],"Value":8,"Enum":"UserInputType"},{"type":"EnumItem","Name":"Focus","tags":[],"Value":9,"Enum":"UserInputType"},{"type":"EnumItem","Name":"Accelerometer","tags":[],"Value":10,"Enum":"UserInputType"},{"type":"EnumItem","Name":"Gyro","tags":[],"Value":11,"Enum":"UserInputType"},{"type":"EnumItem","Name":"Gamepad1","tags":[],"Value":12,"Enum":"UserInputType"},{"type":"EnumItem","Name":"Gamepad2","tags":[],"Value":13,"Enum":"UserInputType"},{"type":"EnumItem","Name":"Gamepad3","tags":[],"Value":14,"Enum":"UserInputType"},{"type":"EnumItem","Name":"Gamepad4","tags":[],"Value":15,"Enum":"UserInputType"},{"type":"EnumItem","Name":"Gamepad5","tags":[],"Value":16,"Enum":"UserInputType"},{"type":"EnumItem","Name":"Gamepad6","tags":[],"Value":17,"Enum":"UserInputType"},{"type":"EnumItem","Name":"Gamepad7","tags":[],"Value":18,"Enum":"UserInputType"},{"type":"EnumItem","Name":"Gamepad8","tags":[],"Value":19,"Enum":"UserInputType"},{"type":"EnumItem","Name":"TextInput","tags":[],"Value":20,"Enum":"UserInputType"},{"type":"EnumItem","Name":"None","tags":[],"Value":21,"Enum":"UserInputType"},{"type":"Enum","Name":"VibrationMotor","tags":[]},{"type":"EnumItem","Name":"Large","tags":[],"Value":0,"Enum":"VibrationMotor"},{"type":"EnumItem","Name":"Small","tags":[],"Value":1,"Enum":"VibrationMotor"},{"type":"EnumItem","Name":"LeftTrigger","tags":[],"Value":2,"Enum":"VibrationMotor"},{"type":"EnumItem","Name":"RightTrigger","tags":[],"Value":3,"Enum":"VibrationMotor"},{"type":"EnumItem","Name":"LeftHand","tags":[],"Value":4,"Enum":"VibrationMotor"},{"type":"EnumItem","Name":"RightHand","tags":[],"Value":5,"Enum":"VibrationMotor"},{"type":"Enum","Name":"VideoQualitySettings","tags":[]},{"type":"EnumItem","Name":"LowResolution","tags":[],"Value":0,"Enum":"VideoQualitySettings"},{"type":"EnumItem","Name":"MediumResolution","tags":[],"Value":1,"Enum":"VideoQualitySettings"},{"type":"EnumItem","Name":"HighResolution","tags":[],"Value":2,"Enum":"VideoQualitySettings"},{"type":"Enum","Name":"WaterDirection","tags":[]},{"type":"EnumItem","Name":"NegX","tags":[],"Value":0,"Enum":"WaterDirection"},{"type":"EnumItem","Name":"X","tags":[],"Value":1,"Enum":"WaterDirection"},{"type":"EnumItem","Name":"NegY","tags":[],"Value":2,"Enum":"WaterDirection"},{"type":"EnumItem","Name":"Y","tags":[],"Value":3,"Enum":"WaterDirection"},{"type":"EnumItem","Name":"NegZ","tags":[],"Value":4,"Enum":"WaterDirection"},{"type":"EnumItem","Name":"Z","tags":[],"Value":5,"Enum":"WaterDirection"},{"type":"Enum","Name":"WaterForce","tags":[]},{"type":"EnumItem","Name":"None","tags":[],"Value":0,"Enum":"WaterForce"},{"type":"EnumItem","Name":"Small","tags":[],"Value":1,"Enum":"WaterForce"},{"type":"EnumItem","Name":"Medium","tags":[],"Value":2,"Enum":"WaterForce"},{"type":"EnumItem","Name":"Strong","tags":[],"Value":3,"Enum":"WaterForce"},{"type":"EnumItem","Name":"Max","tags":[],"Value":4,"Enum":"WaterForce"}]
        ]===]
            return rawApiJson
        end
        
        function getCurrentApiJson()
            local jsonStr = nil
            if readfile and getelysianpath then
                if readfile(getelysianpath().."Xpl0rerApi.txt") then
                    print("Api found in folder!")
                    jsonStr = readfile(getelysianpath().."Xpl0rerApi.txt")
                    return jsonStr
                end
            end
            local success, err = pcall(function()
                jsonStr = httpGet(apiUrl)
                print("Fetched json successfully")
            end)
            if success then
                print("Returning json")
                --print(jsonStr:sub(1,500))
                return jsonStr
            else
                print("Error fetching json: " .. tostring(err))
                print("Falling back to local copy")
                return getLocalApiJson()
            end
        end
        
        function splitStringIntoChunks(jsonStr)
            -- Splits up a string into a table with a given size
            local t = {}
            for i = 1, math.ceil(string.len(jsonStr)/maxChunkSize) do
                local str = jsonStr:sub((i-1)*maxChunkSize+1, i*maxChunkSize)
                table.insert(t, str)
            end
            return t
        end
        
        local jsonToParse = getCurrentApiJson()
        local apiChunks = splitStringIntoChunks(jsonToParse)
        
        function getRbxApi()
        --[[
            Api.Classes
            Api.Enums
            Api.GetProperties(className)
            Api.IsEnum(valueType)
        --]]
        
        -- Services
        local HttpService = game:GetService("HttpService")
        local ServerStorage = game:GetService("ServerStorage")
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        
        -- Remotes
        --local Remotes = ReplicatedStorage:WaitForChild("OnlineStudio"):WaitForChild("Remotes")
        --local GetApiJsonFunction = Remotes:WaitForChild("GetApiJson")
        
        -- Functions
        local JsonDecode = function(s) return HttpService:JSONDecode(s) end
        
        local function GetApiRemoteFunction(index)
            if (apiChunks[index]) then 
                return apiChunks[index], #apiChunks
            else
                print("Bad index for GetApiJson")
                return nil
            end
        end
        
        local function getApiJson()
            local apiTable = {}
            local firstPage, pageCount = GetApiRemoteFunction(1)
            table.insert(apiTable, firstPage)
            for i = 2, pageCount do
                --print("Fetching API page # " .. tostring(i))
                local result = GetApiRemoteFunction(i)
                table.insert(apiTable, result)
            end
            return table.concat(apiTable)
        end
        
        local json = getApiJson()
        local apiDump =  JsonDecode(json)
        
        local Classes = {}
        local Enums = {}
        
        local function sortAlphabetic(t, property)
            table.sort(t, 
                function(x,y) return x[property] < y[property]
            end)
        end
        
        local function isEnum(name)
            return Enums[name] ~= nil
        end
        
        local function getProperties(className)
            local class = Classes[className]
            local properties = {}
            
            if not class then return properties end
            
            while class do
                for _,property in pairs(class.Properties) do
                    table.insert(properties, property)
                end
                class = Classes[class.Superclass]
            end
            
            sortAlphabetic(properties, "Name")
        
            return properties
        end
        
        for _,item in pairs(apiDump) do
            local itemType = item.type
        -- Classes --
            if (itemType == 'Class') then
                Classes[item.Name] = item
                item.Properties = {}
                item.Functions = {}
                item.YieldFunctions = {}
                item.Events = {}
                item.Callbacks = {}
        -- Members --
            elseif (itemType == 'Property') then
                table.insert(Classes[item.Class].Properties, item)
            elseif (itemType == 'Function') then
                table.insert(Classes[item.Class].Functions, item)
            elseif (itemType == 'YieldFunction') then
                table.insert(Classes[item.Class].YieldFunctions, item)
            elseif (itemType == 'Event') then
                table.insert(Classes[item.Class].Events, item)
            elseif (itemType == 'Callback') then
                table.insert(Classes[item.Class].Callbacks, item)
        -- Enums --
            elseif (itemType == 'Enum') then
                Enums[item.Name] = item
                item.EnumItems = {}
            elseif (itemType == 'EnumItem') then
                Enums[item.Enum].EnumItems[item.Name] = item
            end
        end
        
        return {
            Classes = Classes;
            Enums = Enums;
            GetProperties = getProperties;
            IsEnum = isEnum;
        }
        end
        
        -- Modules
        local Permissions = {CanEdit = true}
        local RbxApi = getRbxApi()
        
        --[[
            RbxApi.Classes
            RbxApi.Enums
            RbxApi.GetProperties(className)
            RbxApi.IsEnum(valueType)
        --]]
        
        -- Styles
        
        local function CreateColor3(r, g, b) return Color3.new(r/255,g/255,b/255) end
        
        local Styles = {
            Font = Enum.Font.Arial;
            Margin = 5;
            Black = CreateColor3(0,0,0);
            White = CreateColor3(255,255,255);
        }
        
        local Row = {
            Font = Styles.Font;
            FontSize = Enum.FontSize.Size14;
            TextXAlignment = Enum.TextXAlignment.Left;
            TextColor = Styles.Black;
            TextColorOver = Styles.White;
            TextLockedColor = CreateColor3(120,120,120);
            Height = 24;
            BorderColor = CreateColor3(216,216,216);
            BackgroundColor = Styles.White;
            BackgroundColorAlternate = CreateColor3(246,246,246);
            BackgroundColorMouseover = CreateColor3(211,224,244);
            TitleMarginLeft = 15;
        }
        
        local DropDown = {
            Font = Styles.Font;
            FontSize = Enum.FontSize.Size14;
            TextColor = CreateColor3(0,0,0);
            TextColorOver = Styles.White;
            TextXAlignment = Enum.TextXAlignment.Left;
            Height = 16;
            BackColor = Styles.White;
            BackColorOver = CreateColor3(86,125,188);
            BorderColor = CreateColor3(216,216,216);
            BorderSizePixel = 2;
            ArrowColor = CreateColor3(160,160,160);
            ArrowColorOver = Styles.Black;
        }
        
        local BrickColors = {
            BoxSize = 13;
            BorderSizePixel = 1;
            BorderColor = CreateColor3(160,160,160);
            FrameColor = CreateColor3(160,160,160);
            Size = 20;
            Padding = 4;
            ColorsPerRow = 8;
            OuterBorder = 1;
            OuterBorderColor = Styles.Black;
        }
        
        wait(1)
        
        local Gui = D_E_X
        local PropertiesFrame = Gui:WaitForChild("PropertiesFrame")
        local ExplorerFrame = Gui:WaitForChild("ExplorerPanel")
        
        local bindGetSelection = ExplorerFrame.GetSelection
        local bindSelectionChanged = ExplorerFrame.SelectionChanged
        local bindGetApi = PropertiesFrame.GetApi
        local bindGetAwait = PropertiesFrame.GetAwaiting
        local bindSetAwait = PropertiesFrame.SetAwaiting
        
        local ContentUrl = ContentProvider.BaseUrl .. "asset/?id="
        
        local SettingsRemote = Gui:WaitForChild("SettingsPanel"):WaitForChild("GetSetting")
        
        local propertiesSearch = PropertiesFrame.Header.TextBox
        
        local AwaitingObjectValue = false
        local AwaitingObjectObj
        local AwaitingObjectProp
        
        function searchingProperties()
            if propertiesSearch.Text ~= "" and propertiesSearch.Text ~= "Search Properties" then
                return true
            end
            return false
        end
        
        local function GetSelection()
            local selection = bindGetSelection:Invoke()
            if #selection == 0 then
                return nil
            else
                return selection
            end 
        end
        
        -- Number
        
        local function Round(number, decimalPlaces)
            return tonumber(string.format("%." .. (decimalPlaces or 0) .. "f", number))
        end
        
        -- Strings
        
        local function Split(str, delimiter)
            local start = 1
            local t = {}
            while true do
                local pos = string.find (str, delimiter, start, true)
                if not pos then
                    break
                end
                table.insert (t, string.sub (str, start, pos - 1))
                start = pos + string.len (delimiter)
            end
            table.insert (t, string.sub (str, start))
            return t
        end
        
        -- Data Type Handling
        
        local function ToString(value, type)
            if type == "float" then
                return tostring(Round(value,2))
            elseif type == "Content" then
                if string.find(value,"/asset") then
                    local match = string.find(value, "=") + 1
                    local id = string.sub(value, match)
                    return id
                else
                    return tostring(value)
                end
            elseif type == "Vector2" then
                local x = value.x
                local y = value.y
                return string.format("%g, %g", x,y)
            elseif type == "Vector3" then
                local x = value.x
                local y = value.y
                local z = value.z
                return string.format("%g, %g, %g", x,y,z)
            elseif type == "Color3" then
                local r = value.r
                local g = value.g
                local b = value.b
                return string.format("%d, %d, %d", r*255,g*255,b*255)
            elseif type == "UDim2" then
                local xScale = value.X.Scale
                local xOffset = value.X.Offset
                local yScale = value.Y.Scale
                local yOffset = value.Y.Offset
                return string.format("{%d, %d}, {%d, %d}", xScale, xOffset, yScale, yOffset)
            else
                return tostring(value)
            end
        end
        
        local function ToValue(value,type)
            if type == "Vector2" then
                local list = Split(value,",")
                if #list < 2 then return nil end
                local x = tonumber(list[1]) or 0
                local y = tonumber(list[2]) or 0
                return Vector2.new(x,y)
            elseif type == "Vector3" then
                local list = Split(value,",")
                if #list < 3 then return nil end
                local x = tonumber(list[1]) or 0
                local y = tonumber(list[2]) or 0
                local z = tonumber(list[3]) or 0
                return Vector3.new(x,y,z)
            elseif type == "Color3" then
                local list = Split(value,",")
                if #list < 3 then return nil end
                local r = tonumber(list[1]) or 0
                local g = tonumber(list[2]) or 0
                local b = tonumber(list[3]) or 0
                return Color3.new(r/255,g/255, b/255)
            elseif type == "UDim2" then
                local list = Split(string.gsub(string.gsub(value, "{", ""),"}",""),",")
                if #list < 4 then return nil end
                local xScale = tonumber(list[1]) or 0
                local xOffset = tonumber(list[2]) or 0
                local yScale = tonumber(list[3]) or 0
                local yOffset = tonumber(list[4]) or 0
                return UDim2.new(xScale, xOffset, yScale, yOffset)
            elseif type == "Content" then
                if tonumber(value) ~= nil then
                    value = ContentUrl .. value
                end
                return value
            elseif type == "float" or type == "int" or type == "double" then
                return tonumber(value)
            elseif type == "string" then
                return value
            elseif type == "NumberRange" then
                local list = Split(value,",")
                if #list == 1 then
                    if tonumber(list[1]) == nil then return nil end
                    local newVal = tonumber(list[1]) or 0
                    return NumberRange.new(newVal)
                end
                if #list < 2 then return nil end
                local x = tonumber(list[1]) or 0
                local y = tonumber(list[2]) or 0
                return NumberRange.new(x,y)
            else
                return nil
            end
        end
        
        
        -- Tables
        
        local function CopyTable(T)
          local t2 = {}
          for k,v in pairs(T) do
            t2[k] = v
          end
          return t2
        end
        
        local function SortTable(T)
            table.sort(T, 
                function(x,y) return x.Name < y.Name
            end)
        end
        
        -- Spritesheet
        local Sprite = {
            Width = 13;
            Height = 13;
        }
        
        local Spritesheet = {
            Image = "http://www.roblox.com/asset/?id=128896947";
            Height = 256;
            Width = 256;
        }
        
        local Images = {
            "unchecked",
            "checked",
            "unchecked_over",
            "checked_over",
            "unchecked_disabled",
            "checked_disabled"
        }
        
        local function SpritePosition(spriteName)
            local x = 0
            local y = 0
            for i,v in pairs(Images) do
                if (v == spriteName) then
                    return {x, y}
                end
                x = x + Sprite.Height
                if (x + Sprite.Width) > Spritesheet.Width then
                    x = 0
                    y = y + Sprite.Height
                end
            end
        end
        
        local function GetCheckboxImageName(checked, readOnly, mouseover)
            if checked then
                if readOnly then
                    return "checked_disabled"
                elseif mouseover then
                    return "checked_over"
                else
                    return "checked"
                end
            else
                if readOnly then
                    return "unchecked_disabled"
                elseif mouseover then
                    return "unchecked_over"
                else
                    return "unchecked"
                end
            end
        end
        
        local MAP_ID = 418720155
        
        -- Gui Controls --
        
        ---- IconMap ----
        -- Image size: 256px x 256px
        -- Icon size: 16px x 16px
        -- Padding between each icon: 2px
        -- Padding around image edge: 1px
        -- Total icons: 14 x 14 (196)
        local Icon do
            local iconMap = 'http://www.roblox.com/asset/?id=' .. MAP_ID
            game:GetService('ContentProvider'):Preload(iconMap)
            local iconDehash do
                -- 14 x 14, 0-based input, 0-based output
                local f=math.floor
                function iconDehash(h)
                    return f(h/14%14),f(h%14)
                end
            end
        
            function Icon(IconFrame,index)
                local row,col = iconDehash(index)
                local mapSize = Vector2.new(256,256)
                local pad,border = 2,1
                local iconSize = 16
        
                local class = 'Frame'
                if type(IconFrame) == 'string' then
                    class = IconFrame
                    IconFrame = nil
                end
        
                if not IconFrame then
                    IconFrame = Create(class,{
                        Name = "Icon";
                        BackgroundTransparency = 1;
                        ClipsDescendants = true;
                        Create('ImageLabel',{
                            Name = "IconMap";
                            Active = false;
                            BackgroundTransparency = 1;
                            Image = iconMap;
                            Size = UDim2.new(mapSize.x/iconSize,0,mapSize.y/iconSize,0);
                        });
                    })
                end
        
                IconFrame.IconMap.Position = UDim2.new(-col - (pad*(col+1) + border)/iconSize,0,-row - (pad*(row+1) + border)/iconSize,0)
                return IconFrame
            end
        end
        
        local function CreateCell()
            local tableCell = Instance.new("Frame")
            tableCell.Size = UDim2.new(0.5, -1, 1, 0)
            tableCell.BackgroundColor3 = Row.BackgroundColor
            tableCell.BorderColor3 = Row.BorderColor
            return tableCell
        end
            
        local function CreateLabel(readOnly)
            local label = Instance.new("TextLabel")
            label.Font = Row.Font
            label.FontSize = Row.FontSize
            label.TextXAlignment = Row.TextXAlignment
            label.BackgroundTransparency = 1
            
            if readOnly then
                label.TextColor3 = Row.TextLockedColor
            else
                label.TextColor3 = Row.TextColor
            end
            return label
        end
        
        local function CreateTextButton(readOnly, onClick)
            local button = Instance.new("TextButton")
            button.Font = Row.Font
            button.FontSize = Row.FontSize
            button.TextXAlignment = Row.TextXAlignment
            button.BackgroundTransparency = 1
            if readOnly then
                button.TextColor3 = Row.TextLockedColor
            else
                button.TextColor3 = Row.TextColor
                button.MouseButton1Click:connect(function()
                    onClick()
                end)
            end
            return button
        end
        
        local function CreateObject(readOnly)
            local button = Instance.new("TextButton")
            button.Font = Row.Font
            button.FontSize = Row.FontSize
            button.TextXAlignment = Row.TextXAlignment
            button.BackgroundTransparency = 1
            if readOnly then
                button.TextColor3 = Row.TextLockedColor
            else
                button.TextColor3 = Row.TextColor
            end
            local cancel = Create(Icon('ImageButton',177),{
                Name = "Cancel";
                Visible = false;
                Position = UDim2.new(1,-20,0,0);
                Size = UDim2.new(0,20,0,20);
                Parent = button;
            })
            return button
        end
        
        local function CreateTextBox(readOnly)
            if readOnly then
                local box = CreateLabel(readOnly)
                return box
            else
                local box = Instance.new("TextBox")
                if not SettingsRemote:Invoke("ClearProps") then
                    box.ClearTextOnFocus = false
                end
                box.Font = Row.Font
                box.FontSize = Row.FontSize
                box.TextXAlignment = Row.TextXAlignment
                box.BackgroundTransparency = 1
                box.TextColor3 = Row.TextColor
                return box
            end
        end
        
        local function CreateDropDownItem(text, onClick)
            local button = Instance.new("TextButton")
            button.Font = DropDown.Font
            button.FontSize = DropDown.FontSize
            button.TextColor3 = DropDown.TextColor
            button.TextXAlignment = DropDown.TextXAlignment
            button.BackgroundColor3 = DropDown.BackColor
            button.AutoButtonColor = false
            button.BorderSizePixel = 0
            button.Active = true
            button.Text = text
            
            button.MouseEnter:connect(function()
                button.TextColor3 = DropDown.TextColorOver
                button.BackgroundColor3 = DropDown.BackColorOver
            end)
            button.MouseLeave:connect(function()
                button.TextColor3 = DropDown.TextColor
                button.BackgroundColor3 = DropDown.BackColor
            end)
            button.MouseButton1Click:connect(function()
                onClick(text)
            end)	
            return button
        end
        
        local function CreateDropDown(choices, currentChoice, readOnly, onClick)
            local frame = Instance.new("Frame")	
            frame.Name = "DropDown"
            frame.Size = UDim2.new(1, 0, 1, 0)
            frame.BackgroundTransparency = 1
            frame.Active = true
            
            local menu = nil
            local arrow = nil
            local expanded = false
            local margin = DropDown.BorderSizePixel;
            
            local button = Instance.new("TextButton")
            button.Font = Row.Font
            button.FontSize = Row.FontSize
            button.TextXAlignment = Row.TextXAlignment
            button.BackgroundTransparency = 1
            button.TextColor3 = Row.TextColor
            if readOnly then
                button.TextColor3 = Row.TextLockedColor
            end
            button.Text = currentChoice
            button.Size = UDim2.new(1, -2 * Styles.Margin, 1, 0)
            button.Position = UDim2.new(0, Styles.Margin, 0, 0)
            button.Parent = frame
            
            local function showArrow(color)
                if arrow then arrow:Destroy() end
                
                local graphicTemplate = Create('Frame',{
                    Name="Graphic";
                    BorderSizePixel = 0;
                    BackgroundColor3 = color;
                })
                local graphicSize = 16/2
                
                arrow = ArrowGraphic(graphicSize,'Down',true,graphicTemplate)
                arrow.Position = UDim2.new(1,-graphicSize * 2,0.5,-graphicSize/2)
                arrow.Parent = frame
            end
            
            local function hideMenu()
                expanded = false
                showArrow(DropDown.ArrowColor)
                if menu then menu:Destroy() end
            end
            
            local function showMenu()
                expanded = true
                menu = Instance.new("Frame")
                menu.Size = UDim2.new(1, -2 * margin, 0, #choices * DropDown.Height)
                menu.Position = UDim2.new(0, margin, 0, Row.Height + margin)
                menu.BackgroundTransparency = 0
                menu.BackgroundColor3 = DropDown.BackColor
                menu.BorderColor3 = DropDown.BorderColor
                menu.BorderSizePixel = DropDown.BorderSizePixel
                menu.Active = true
                menu.ZIndex = 5
                menu.Parent = frame
                
                local parentFrameHeight = menu.Parent.Parent.Parent.Parent.Size.Y.Offset
                local rowHeight = menu.Parent.Parent.Parent.Position.Y.Offset
                if (rowHeight + menu.Size.Y.Offset) > math.max(parentFrameHeight,PropertiesFrame.AbsoluteSize.y) then
                    menu.Position = UDim2.new(0, margin, 0, -1 * (#choices * DropDown.Height) - margin)
                end
                    
                local function choice(name)
                    onClick(name)
                    hideMenu()
                end
                
                for i,name in pairs(choices) do
                    local option = CreateDropDownItem(name, function()
                        choice(name)
                    end)
                    option.Size = UDim2.new(1, 0, 0, 16)
                    option.Position = UDim2.new(0, 0, 0, (i - 1) * DropDown.Height)
                    option.ZIndex = menu.ZIndex
                    option.Parent = menu
                end
            end
            
            showArrow(DropDown.ArrowColor)
            
            if not readOnly then
                
                button.MouseEnter:connect(function()
                    button.TextColor3 = Row.TextColor
                    showArrow(DropDown.ArrowColorOver)
                end)
                button.MouseLeave:connect(function()
                    button.TextColor3 = Row.TextColor
                    if not expanded then
                        showArrow(DropDown.ArrowColor)
                    end
                end)
                button.MouseButton1Click:connect(function()
                    if expanded then
                        hideMenu()
                    else
                        showMenu()
                    end
                end)
            end
            
            return frame,button
        end
        
        local function CreateBrickColor(readOnly, onClick)
            local frame = Instance.new("Frame")
            frame.Size = UDim2.new(1,0,1,0)
            frame.BackgroundTransparency = 1
            
            local colorPalette = Instance.new("Frame")
            colorPalette.BackgroundTransparency = 0
            colorPalette.SizeConstraint = Enum.SizeConstraint.RelativeXX
            colorPalette.Size = UDim2.new(1, -2 * BrickColors.OuterBorder, 1, -2 * BrickColors.OuterBorder)
            colorPalette.BorderSizePixel = BrickColors.BorderSizePixel
            colorPalette.BorderColor3 = BrickColors.BorderColor
            colorPalette.Position = UDim2.new(0, BrickColors.OuterBorder, 0, BrickColors.OuterBorder + Row.Height)
            colorPalette.ZIndex = 5
            colorPalette.Visible = false
            colorPalette.BorderSizePixel = BrickColors.OuterBorder
            colorPalette.BorderColor3 = BrickColors.OuterBorderColor
            colorPalette.Parent = frame
            
            local function show()
                colorPalette.Visible = true
            end
            
            local function hide()
                colorPalette.Visible = false
            end
            
            local function toggle()
                colorPalette.Visible = not colorPalette.Visible
            end
            
            local colorBox = Instance.new("TextButton", frame)
            colorBox.Position = UDim2.new(0, Styles.Margin, 0, Styles.Margin)
            colorBox.Size = UDim2.new(0, BrickColors.BoxSize, 0, BrickColors.BoxSize)
            colorBox.Text = ""
            colorBox.MouseButton1Click:connect(function()
                if not readOnly then
                    toggle()
                end
            end)
            
            if readOnly then
                colorBox.AutoButtonColor = false
            end
            
            local spacingBefore = (Styles.Margin * 2) + BrickColors.BoxSize
            
            local propertyLabel = CreateTextButton(readOnly, function()
                if not readOnly then
                    toggle()
                end
            end)
            propertyLabel.Size = UDim2.new(1, (-1 * spacingBefore) - Styles.Margin, 1, 0)
            propertyLabel.Position = UDim2.new(0, spacingBefore, 0, 0)
            propertyLabel.Parent = frame
            
            local size = (1 / BrickColors.ColorsPerRow)
            
            for index = 0, 127 do
                local brickColor = BrickColor.palette(index)
                local color3 = brickColor.Color
                
                local x = size * (index % BrickColors.ColorsPerRow)
                local y = size * math.floor(index / BrickColors.ColorsPerRow)
            
                local brickColorBox = Instance.new("TextButton")
                brickColorBox.Text = ""
                brickColorBox.Size = UDim2.new(size,0,size,0)
                brickColorBox.BackgroundColor3 = color3
                brickColorBox.Position = UDim2.new(x, 0, y, 0)
                brickColorBox.ZIndex = colorPalette.ZIndex
                brickColorBox.Parent = colorPalette
            
                brickColorBox.MouseButton1Click:connect(function()
                    hide()
                    onClick(brickColor)
                end)
            end
            
            return frame,propertyLabel,colorBox
        end
        
        local function CreateColor3Control(readOnly, onClick)
            local frame = Instance.new("Frame")
            frame.Size = UDim2.new(1,0,1,0)
            frame.BackgroundTransparency = 1
            
            local colorBox = Instance.new("TextButton", frame)
            colorBox.Position = UDim2.new(0, Styles.Margin, 0, Styles.Margin)
            colorBox.Size = UDim2.new(0, BrickColors.BoxSize, 0, BrickColors.BoxSize)
            colorBox.Text = ""
            colorBox.AutoButtonColor = false
            
            local spacingBefore = (Styles.Margin * 2) + BrickColors.BoxSize
            local box = CreateTextBox(readOnly)
            box.Size = UDim2.new(1, (-1 * spacingBefore) - Styles.Margin, 1, 0)
            box.Position = UDim2.new(0, spacingBefore, 0, 0)
            box.Parent = frame
            
            return frame,box,colorBox
        end
        
        function CreateCheckbox(value, readOnly, onClick)
            local checked = value
            local mouseover = false
        
            local checkboxFrame = Instance.new("ImageButton")
            checkboxFrame.Size = UDim2.new(0, Sprite.Width, 0, Sprite.Height)
            checkboxFrame.BackgroundTransparency = 1
            checkboxFrame.ClipsDescendants = true
            --checkboxFrame.Position = UDim2.new(0, Styles.Margin, 0, Styles.Margin)
        
            local spritesheetImage = Instance.new("ImageLabel", checkboxFrame)
            spritesheetImage.Name = "SpritesheetImageLabel"
            spritesheetImage.Size = UDim2.new(0, Spritesheet.Width, 0, Spritesheet.Height)
            spritesheetImage.Image = Spritesheet.Image
            spritesheetImage.BackgroundTransparency = 1
            
            local function updateSprite()
                local spriteName = GetCheckboxImageName(checked, readOnly, mouseover)
                local spritePosition = SpritePosition(spriteName)
                spritesheetImage.Position = UDim2.new(0, -1 * spritePosition[1], 0, -1 * spritePosition[2])
            end
            
            local function setValue(val)
                checked = val
                updateSprite()
            end
        
            if not readOnly then
                checkboxFrame.MouseEnter:connect(function() mouseover = true updateSprite() end)
                checkboxFrame.MouseLeave:connect(function() mouseover = false updateSprite() end)
                checkboxFrame.MouseButton1Click:connect(function()
                    onClick(checked)
                end)
            end
            
            updateSprite()
            
            return checkboxFrame, setValue
        end
        
        
        
        -- Code for handling controls of various data types --
        
        local Controls = {}
        
        Controls["default"] = function(object, propertyData, readOnly)
            local propertyName = propertyData["Name"]
            local propertyType = propertyData["ValueType"]
            
            local box = CreateTextBox(readOnly)
            box.Size = UDim2.new(1, -2 * Styles.Margin, 1, 0)
            box.Position = UDim2.new(0, Styles.Margin, 0, 0)
        
            local function update()
                local value = object[propertyName]
                box.Text = ToString(value, propertyType)
            end
            
            if not readOnly then
                box.FocusLost:connect(function(enterPressed)
                    Set(object, propertyData, ToValue(box.Text,propertyType))
                    update()
                end)
            end
            
            update()
            
            object.Changed:connect(function(property)
                if (property == propertyName) then
                    update()
                end
            end)
            
            return box
        end
        
        Controls["bool"] = function(object, propertyData, readOnly)
            local propertyName = propertyData["Name"]
            local checked = object[propertyName]
            
            local checkbox, setValue = CreateCheckbox(checked, readOnly, function(value)
                Set(object, propertyData, not checked)
            end)
            checkbox.Position = UDim2.new(0, Styles.Margin, 0, Styles.Margin)
            
            setValue(checked)
            
            local function update()
                checked = object[propertyName]
                setValue(checked)
            end
            
            object.Changed:connect(function(property)
                if (property == propertyName) then
                    update()
                end
            end)
            
            if object:IsA("BoolValue") then
                object.Changed:connect(function(val)
                    update()
                end)
            end
            
            update()
            
            return checkbox
        end
        
        Controls["BrickColor"] = function(object, propertyData, readOnly)
            local propertyName = propertyData["Name"]
        
            local frame,label,brickColorBox = CreateBrickColor(readOnly, function(brickColor)
                Set(object, propertyData, brickColor)
            end)
            
            local function update()
                local value = object[propertyName]
                brickColorBox.BackgroundColor3 = value.Color
                label.Text = tostring(value)
            end
            
            update()
            
            object.Changed:connect(function(property)
                if (property == propertyName) then
                    update()
                end
            end)
            
            return frame
        end
        
        Controls["Color3"] = function(object, propertyData, readOnly)
            local propertyName = propertyData["Name"]
        
            local frame,textBox,colorBox = CreateColor3Control(readOnly)
            
            textBox.FocusLost:connect(function(enterPressed)
                Set(object, propertyData, ToValue(textBox.Text,"Color3"))
                local value = object[propertyName]
                colorBox.BackgroundColor3 = value
                textBox.Text = ToString(value, "Color3")
            end)
                    
            local function update()
                local value = object[propertyName]
                colorBox.BackgroundColor3 = value
                textBox.Text = ToString(value, "Color3")
            end
            
            update()
            
            object.Changed:connect(function(property)
                if (property == propertyName) then
                    update()
                end
            end)
            
            return frame
        end
        
        Controls["Enum"] = function(object, propertyData, readOnly)
            local propertyName = propertyData["Name"]
            local propertyType = propertyData["ValueType"]
            
            local enumName = object[propertyName].Name
            
            local enumNames = {}
            for _,enum in pairs(Enum[tostring(propertyType)]:GetEnumItems()) do
                table.insert(enumNames, enum.Name)
            end
            
            local dropdown, propertyLabel = CreateDropDown(enumNames, enumName, readOnly, function(value)
                Set(object, propertyData, value)
            end)
            --dropdown.Parent = frame
            
            local function update()
                local value = object[propertyName].Name
                propertyLabel.Text = tostring(value)
            end
            
            update()
            
            object.Changed:connect(function(property)
                if (property == propertyName) then
                    update()
                end
            end)
            
            return dropdown
        end
        
        Controls["Object"] = function(object, propertyData, readOnly)
            local propertyName = propertyData["Name"]
            local propertyType = propertyData["ValueType"]
            
            local box = CreateObject(readOnly,function()end)
            box.Size = UDim2.new(1, -2 * Styles.Margin, 1, 0)
            box.Position = UDim2.new(0, Styles.Margin, 0, 0)
        
            local function update()
                if AwaitingObjectObj == object then
                    if AwaitingObjectValue == true then
                        box.Text = "Select an Object"
                        return
                    end
                end
                local value = object[propertyName]
                box.Text = ToString(value, propertyType)
            end
            
            if not readOnly then
                box.MouseButton1Click:connect(function()
                    if AwaitingObjectValue then
                        AwaitingObjectValue = false
                        update()
                        return
                    end
                    AwaitingObjectValue = true
                    AwaitingObjectObj = object
                    AwaitingObjectProp = propertyData
                    box.Text = "Select an Object"
                end)
                
                box.Cancel.Visible = true
                box.Cancel.MouseButton1Click:connect(function()
                    object[propertyName] = nil
                end)
            end
            
            update()
            
            object.Changed:connect(function(property)
                if (property == propertyName) then
                    update()
                end
            end)
            
            if object:IsA("ObjectValue") then
                object.Changed:connect(function(val)
                    update()
                end)
            end
            
            return box
        end
        
        function GetControl(object, propertyData, readOnly)
            local propertyType = propertyData["ValueType"]
            local control = nil
            
            if Controls[propertyType] then
                control = Controls[propertyType](object, propertyData, readOnly)
            elseif RbxApi.IsEnum(propertyType) then
                control = Controls["Enum"](object, propertyData, readOnly)
            else
                control = Controls["default"](object, propertyData, readOnly)
            end
            return control
        end
        -- Permissions
        
        function CanEditObject(object)
            local player = Players.LocalPlayer
            local character = player.Character
            return Permissions.CanEdit
        end
        
        function CanEditProperty(object,propertyData)
            local tags = propertyData["tags"]
            for _,name in pairs(tags) do
                if name == "readonly" then
                    return false
                end
            end
            return CanEditObject(object)
        end
        
        --RbxApi
        local function PropertyIsHidden(propertyData)
            local tags = propertyData["tags"]
            for _,name in pairs(tags) do
                if name == "deprecated"
                    or name == "hidden"
                    or name == "writeonly" then
                    return true
                end
            end
            return false
        end
        
        function Set(object, propertyData, value)
            local propertyName = propertyData["Name"]
            local propertyType = propertyData["ValueType"]
            
            if value == nil then return end
            
            for i,v in pairs(GetSelection()) do
                if CanEditProperty(v,propertyData) then
                    pcall(function()
                        --print("Setting " .. propertyName .. " to " .. tostring(value))
                        v[propertyName] = value
                    end)
                end
            end
        end
        
        function CreateRow(object, propertyData, isAlternateRow)
            local propertyName = propertyData["Name"]
            local propertyType = propertyData["ValueType"]
            local propertyValue = object[propertyName]
            --rowValue, rowValueType, isAlternate
            local backColor = Row.BackgroundColor;
            if (isAlternateRow) then
                backColor = Row.BackgroundColorAlternate
            end
            
            local readOnly = not CanEditProperty(object, propertyData)
            if propertyType == "Instance" or propertyName == "Parent" then readOnly = true end
        
            local rowFrame = Instance.new("Frame")
            rowFrame.Size = UDim2.new(1,0,0,Row.Height)
            rowFrame.BackgroundTransparency = 1
            rowFrame.Name = 'Row'
        
            local propertyLabelFrame = CreateCell()
            propertyLabelFrame.Parent = rowFrame
            propertyLabelFrame.ClipsDescendants = true
            
            local propertyLabel = CreateLabel(readOnly)
            propertyLabel.Text = propertyName
            propertyLabel.Size = UDim2.new(1, -1 * Row.TitleMarginLeft, 1, 0)
            propertyLabel.Position = UDim2.new(0, Row.TitleMarginLeft, 0, 0)
            propertyLabel.Parent = propertyLabelFrame
        
            local propertyValueFrame = CreateCell()
            propertyValueFrame.Size = UDim2.new(0.5, -1, 1, 0)
            propertyValueFrame.Position = UDim2.new(0.5, 0, 0, 0)
            propertyValueFrame.Parent = rowFrame
        
            local control = GetControl(object, propertyData, readOnly)
            control.Parent = propertyValueFrame
        
            rowFrame.MouseEnter:connect(function()
                propertyLabelFrame.BackgroundColor3 = Row.BackgroundColorMouseover
                propertyValueFrame.BackgroundColor3 = Row.BackgroundColorMouseover
            end)
            rowFrame.MouseLeave:connect(function()
                propertyLabelFrame.BackgroundColor3 = backColor
                propertyValueFrame.BackgroundColor3 = backColor
            end)
            
            propertyLabelFrame.BackgroundColor3 = backColor
            propertyValueFrame.BackgroundColor3 = backColor
            
            return rowFrame
        end
        
        function ClearPropertiesList()
            for _,instance in pairs(ContentFrame:GetChildren()) do
                instance:Destroy()
            end
        end
        
        local selection = Gui:FindFirstChild("Selection", 1)
        print(selection)
        
        function displayProperties(props)
            for i,v in pairs(props) do
                pcall(function()
                    local a = CreateRow(v.object, v.propertyData, ((numRows % 2) == 0))
                    a.Position = UDim2.new(0,0,0,numRows*Row.Height)
                    a.Parent = ContentFrame
                    numRows = numRows + 1
                end)
            end
        end
        
        function checkForDupe(prop,props)
            for i,v in pairs(props) do
                if v.propertyData.Name == prop.Name and v.propertyData.ValueType == prop.ValueType then
                    return true
                end
            end
            return false
        end
        
        function sortProps(t)
            table.sort(t, 
                function(x,y) return x.propertyData.Name < y.propertyData.Name
            end)
        end
        
        function showProperties(obj)
            ClearPropertiesList()
            if obj == nil then return end
            local propHolder = {}
            local foundProps = {}
            numRows = 0
            for _,nextObj in pairs(obj) do
                if not foundProps[nextObj.className] then
                    foundProps[nextObj.className] = true
                    for i,v in pairs(RbxApi.GetProperties(nextObj.className)) do
                        local suc, err = pcall(function()
                            if not (PropertyIsHidden(v)) and not checkForDupe(v,propHolder) then
                                if string.find(string.lower(v.Name),string.lower(propertiesSearch.Text)) or not searchingProperties() then
                                    table.insert(propHolder,{propertyData = v, object = nextObj})
                                end
                            end
                        end)
                        --[[if not suc then 
                            warn("Problem getting the value of property " .. v.Name .. " | " .. err)
                        end	--]]
                    end
                end
            end
            sortProps(propHolder)
            displayProperties(propHolder)
            ContentFrame.Size = UDim2.new(1, 0, 0, numRows * Row.Height)
            scrollBar.ScrollIndex = 0
            scrollBar.TotalSpace = numRows * Row.Height
            scrollBar.Update()
        end
        
        ----------------------------------------------------------------
        -----------------------SCROLLBAR STUFF--------------------------
        ----------------------------------------------------------------
        ----------------------------------------------------------------
        local ScrollBarWidth = 16
        
        local ScrollStyles = {
            Background      = Color3.new(233/255, 233/255, 233/255);
            Border          = Color3.new(149/255, 149/255, 149/255);
            Selected        = Color3.new( 63/255, 119/255, 189/255);
            BorderSelected  = Color3.new( 55/255, 106/255, 167/255);
            Text            = Color3.new(  0/255,   0/255,   0/255);
            TextDisabled    = Color3.new(128/255, 128/255, 128/255);
            TextSelected    = Color3.new(255/255, 255/255, 255/255);
            Button          = Color3.new(221/255, 221/255, 221/255);
            ButtonBorder    = Color3.new(149/255, 149/255, 149/255);
            ButtonSelected  = Color3.new(255/255,   0/255,   0/255);
            Field           = Color3.new(255/255, 255/255, 255/255);
            FieldBorder     = Color3.new(191/255, 191/255, 191/255);
            TitleBackground = Color3.new(178/255, 178/255, 178/255);
        }
        do
            local ZIndexLock = {}
            function SetZIndex(object,z)
                if not ZIndexLock[object] then
                    ZIndexLock[object] = true
                    if object:IsA'GuiObject' then
                        object.ZIndex = z
                    end
                    local children = object:GetChildren()
                    for i = 1,#children do
                        SetZIndex(children[i],z)
                    end
                    ZIndexLock[object] = nil
                end
            end
        end
        function SetZIndexOnChanged(object)
            return object.Changed:connect(function(p)
                if p == "ZIndex" then
                    SetZIndex(object,object.ZIndex)
                end
            end)
        end
        function Create(ty,data)
            local obj
            if type(ty) == 'string' then
                obj = Instance.new(ty)
            else
                obj = ty
            end
            for k, v in pairs(data) do
                if type(k) == 'number' then
                    v.Parent = obj
                else
                    obj[k] = v
                end
            end
            return obj
        end
        -- returns the ascendant ScreenGui of an object
        function GetScreen(screen)
            if screen == nil then return nil end
            while not screen:IsA("ScreenGui") do
                screen = screen.Parent
                if screen == nil then return nil end
            end
            return screen
        end
        -- AutoButtonColor doesn't always reset properly
        function ResetButtonColor(button)
            local active = button.Active
            button.Active = not active
            button.Active = active
        end
        
        function ArrowGraphic(size,dir,scaled,template)
            local Frame = Create('Frame',{
                Name = "Arrow Graphic";
                BorderSizePixel = 0;
                Size = UDim2.new(0,size,0,size);
                Transparency = 1;
            })
            if not template then
                template = Instance.new("Frame")
                template.BorderSizePixel = 0
            end
        
            local transform
            if dir == nil or dir == 'Up' then
                function transform(p,s) return p,s end
            elseif dir == 'Down' then
                function transform(p,s) return UDim2.new(0,p.X.Offset,0,size-p.Y.Offset-1),s end
            elseif dir == 'Left' then
                function transform(p,s) return UDim2.new(0,p.Y.Offset,0,p.X.Offset),UDim2.new(0,s.Y.Offset,0,s.X.Offset) end
            elseif dir == 'Right' then
                function transform(p,s) return UDim2.new(0,size-p.Y.Offset-1,0,p.X.Offset),UDim2.new(0,s.Y.Offset,0,s.X.Offset) end
            end
        
            local scale
            if scaled then
                function scale(p,s) return UDim2.new(p.X.Offset/size,0,p.Y.Offset/size,0),UDim2.new(s.X.Offset/size,0,s.Y.Offset/size,0) end
            else
                function scale(p,s) return p,s end
            end
        
            local o = math.floor(size/4)
            if size%2 == 0 then
                local n = size/2-1
                for i = 0,n do
                    local t = template:Clone()
                    local p,s = scale(transform(
                        UDim2.new(0,n-i,0,o+i),
                        UDim2.new(0,(i+1)*2,0,1)
                    ))
                    t.Position = p
                    t.Size = s
                    t.Parent = Frame
                end
            else
                local n = (size-1)/2
                for i = 0,n do
                    local t = template:Clone()
                    local p,s = scale(transform(
                        UDim2.new(0,n-i,0,o+i),
                        UDim2.new(0,i*2+1,0,1)
                    ))
                    t.Position = p
                    t.Size = s
                    t.Parent = Frame
                end
            end
            if size%4 > 1 then
                local t = template:Clone()
                local p,s = scale(transform(
                    UDim2.new(0,0,0,size-o-1),
                    UDim2.new(0,size,0,1)
                ))
                t.Position = p
                t.Size = s
                t.Parent = Frame
            end
            return Frame
        end
        
        function GripGraphic(size,dir,spacing,scaled,template)
            local Frame = Create('Frame',{
                Name = "Grip Graphic";
                BorderSizePixel = 0;
                Size = UDim2.new(0,size.x,0,size.y);
                Transparency = 1;
            })
            if not template then
                template = Instance.new("Frame")
                template.BorderSizePixel = 0
            end
        
            spacing = spacing or 2
        
            local scale
            if scaled then
                function scale(p) return UDim2.new(p.X.Offset/size.x,0,p.Y.Offset/size.y,0) end
            else
                function scale(p) return p end
            end
        
            if dir == 'Vertical' then
                for i=0,size.x-1,spacing do
                    local t = template:Clone()
                    t.Size = scale(UDim2.new(0,1,0,size.y))
                    t.Position = scale(UDim2.new(0,i,0,0))
                    t.Parent = Frame
                end
            elseif dir == nil or dir == 'Horizontal' then
                for i=0,size.y-1,spacing do
                    local t = template:Clone()
                    t.Size = scale(UDim2.new(0,size.x,0,1))
                    t.Position = scale(UDim2.new(0,0,0,i))
                    t.Parent = Frame
                end
            end
        
            return Frame
        end
        
        do
            local mt = {
                __index = {
                    GetScrollPercent = function(self)
                        return self.ScrollIndex/(self.TotalSpace-self.VisibleSpace)
                    end;
                    CanScrollDown = function(self)
                        return self.ScrollIndex + self.VisibleSpace < self.TotalSpace
                    end;
                    CanScrollUp = function(self)
                        return self.ScrollIndex > 0
                    end;
                    ScrollDown = function(self)
                        self.ScrollIndex = self.ScrollIndex + self.PageIncrement
                        self:Update()
                    end;
                    ScrollUp = function(self)
                        self.ScrollIndex = self.ScrollIndex - self.PageIncrement
                        self:Update()
                    end;
                    ScrollTo = function(self,index)
                        self.ScrollIndex = index
                        self:Update()
                    end;
                    SetScrollPercent = function(self,percent)
                        self.ScrollIndex = math.floor((self.TotalSpace - self.VisibleSpace)*percent + 0.5)
                        self:Update()
                    end;
                };
            }
            mt.__index.CanScrollRight = mt.__index.CanScrollDown
            mt.__index.CanScrollLeft = mt.__index.CanScrollUp
            mt.__index.ScrollLeft = mt.__index.ScrollUp
            mt.__index.ScrollRight = mt.__index.ScrollDown
        
            function ScrollBar(horizontal)
                -- create row scroll bar
                local ScrollFrame = Create('Frame',{
                    Name = "ScrollFrame";
                    Position = horizontal and UDim2.new(0,0,1,-ScrollBarWidth) or UDim2.new(1,-ScrollBarWidth,0,0);
                    Size = horizontal and UDim2.new(1,0,0,ScrollBarWidth) or UDim2.new(0,ScrollBarWidth,1,0);
                    BackgroundTransparency = 1;
                    Create('ImageButton',{
                        Name = "ScrollDown";
                        Position = horizontal and UDim2.new(1,-ScrollBarWidth,0,0) or UDim2.new(0,0,1,-ScrollBarWidth);
                        Size = UDim2.new(0, ScrollBarWidth, 0, ScrollBarWidth);
                        BackgroundColor3 = ScrollStyles.Button;
                        BorderColor3 = ScrollStyles.Border;
                        --BorderSizePixel = 0;
                    });
                    Create('ImageButton',{
                        Name = "ScrollUp";
                        Size = UDim2.new(0, ScrollBarWidth, 0, ScrollBarWidth);
                        BackgroundColor3 = ScrollStyles.Button;
                        BorderColor3 = ScrollStyles.Border;
                        --BorderSizePixel = 0;
                    });
                    Create('ImageButton',{
                        Name = "ScrollBar";
                        Size = horizontal and UDim2.new(1,-ScrollBarWidth*2,1,0) or UDim2.new(1,0,1,-ScrollBarWidth*2);
                        Position = horizontal and UDim2.new(0,ScrollBarWidth,0,0) or UDim2.new(0,0,0,ScrollBarWidth);
                        AutoButtonColor = false;
                        BackgroundColor3 = Color3.new(0.94902, 0.94902, 0.94902);
                        BorderColor3 = ScrollStyles.Border;
                        --BorderSizePixel = 0;
                        Create('ImageButton',{
                            Name = "ScrollThumb";
                            AutoButtonColor = false;
                            Size = UDim2.new(0, ScrollBarWidth, 0, ScrollBarWidth);
                            BackgroundColor3 = ScrollStyles.Button;
                            BorderColor3 = ScrollStyles.Border;
                            --BorderSizePixel = 0;
                        });
                    });
                })
        
                local graphicTemplate = Create('Frame',{
                    Name="Graphic";
                    BorderSizePixel = 0;
                    BackgroundColor3 = ScrollStyles.Border;
                })
                local graphicSize = ScrollBarWidth/2
        
                local ScrollDownFrame = ScrollFrame.ScrollDown
                    local ScrollDownGraphic = ArrowGraphic(graphicSize,horizontal and 'Right' or 'Down',true,graphicTemplate)
                    ScrollDownGraphic.Position = UDim2.new(0.5,-graphicSize/2,0.5,-graphicSize/2)
                    ScrollDownGraphic.Parent = ScrollDownFrame
                local ScrollUpFrame = ScrollFrame.ScrollUp
                    local ScrollUpGraphic = ArrowGraphic(graphicSize,horizontal and 'Left' or 'Up',true,graphicTemplate)
                    ScrollUpGraphic.Position = UDim2.new(0.5,-graphicSize/2,0.5,-graphicSize/2)
                    ScrollUpGraphic.Parent = ScrollUpFrame
                local ScrollBarFrame = ScrollFrame.ScrollBar
                local ScrollThumbFrame = ScrollBarFrame.ScrollThumb
                do
                    local size = ScrollBarWidth*3/8
                    local Decal = GripGraphic(Vector2.new(size,size),horizontal and 'Vertical' or 'Horizontal',2,graphicTemplate)
                    Decal.Position = UDim2.new(0.5,-size/2,0.5,-size/2)
                    Decal.Parent = ScrollThumbFrame
                end
        
                local MouseDrag = Create('ImageButton',{
                    Name = "MouseDrag";
                    Position = UDim2.new(-0.25,0,-0.25,0);
                    Size = UDim2.new(1.5,0,1.5,0);
                    Transparency = 1;
                    AutoButtonColor = false;
                    Active = true;
                    ZIndex = 10;
                })
        
                local Class = setmetatable({
                    GUI = ScrollFrame;
                    ScrollIndex = 0;
                    VisibleSpace = 0;
                    TotalSpace = 0;
                    PageIncrement = 1;
                },mt)
        
                local UpdateScrollThumb
                if horizontal then
                    function UpdateScrollThumb()
                        ScrollThumbFrame.Size = UDim2.new(Class.VisibleSpace/Class.TotalSpace,0,0,ScrollBarWidth)
                        if ScrollThumbFrame.AbsoluteSize.x < ScrollBarWidth then
                            ScrollThumbFrame.Size = UDim2.new(0,ScrollBarWidth,0,ScrollBarWidth)
                        end
                        local barSize = ScrollBarFrame.AbsoluteSize.x
                        ScrollThumbFrame.Position = UDim2.new(Class:GetScrollPercent()*(barSize - ScrollThumbFrame.AbsoluteSize.x)/barSize,0,0,0)
                    end
                else
                    function UpdateScrollThumb()
                        ScrollThumbFrame.Size = UDim2.new(0,ScrollBarWidth,Class.VisibleSpace/Class.TotalSpace,0)
                        if ScrollThumbFrame.AbsoluteSize.y < ScrollBarWidth then
                            ScrollThumbFrame.Size = UDim2.new(0,ScrollBarWidth,0,ScrollBarWidth)
                        end
                        local barSize = ScrollBarFrame.AbsoluteSize.y
                        ScrollThumbFrame.Position = UDim2.new(0,0,Class:GetScrollPercent()*(barSize - ScrollThumbFrame.AbsoluteSize.y)/barSize,0)
                    end
                end
        
                local lastDown
                local lastUp
                local scrollStyle = {BackgroundColor3=ScrollStyles.Border,BackgroundTransparency=0}
                local scrollStyle_ds = {BackgroundColor3=ScrollStyles.Border,BackgroundTransparency=0.7}
        
                local function Update()
                    local t = Class.TotalSpace
                    local v = Class.VisibleSpace
                    local s = Class.ScrollIndex
                    if v <= t then
                        if s > 0 then
                            if s + v > t then
                                Class.ScrollIndex = t - v
                            end
                        else
                            Class.ScrollIndex = 0
                        end
                    else
                        Class.ScrollIndex = 0
                    end
        
                    if Class.UpdateCallback then
                        if Class.UpdateCallback(Class) == false then
                            return
                        end
                    end
        
                    local down = Class:CanScrollDown()
                    local up = Class:CanScrollUp()
                    if down ~= lastDown then
                        lastDown = down
                        ScrollDownFrame.Active = down
                        ScrollDownFrame.AutoButtonColor = down
                        local children = ScrollDownGraphic:GetChildren()
                        local style = down and scrollStyle or scrollStyle_ds
                        for i = 1,#children do
                            Create(children[i],style)
                        end
                    end
                    if up ~= lastUp then
                        lastUp = up
                        ScrollUpFrame.Active = up
                        ScrollUpFrame.AutoButtonColor = up
                        local children = ScrollUpGraphic:GetChildren()
                        local style = up and scrollStyle or scrollStyle_ds
                        for i = 1,#children do
                            Create(children[i],style)
                        end
                    end
                    ScrollThumbFrame.Visible = down or up
                    UpdateScrollThumb()
                end
                Class.Update = Update
        
                SetZIndexOnChanged(ScrollFrame)
        
                local scrollEventID = 0
                ScrollDownFrame.MouseButton1Down:connect(function()
                    scrollEventID = tick()
                    local current = scrollEventID
                    local up_con
                    up_con = MouseDrag.MouseButton1Up:connect(function()
                        scrollEventID = tick()
                        MouseDrag.Parent = nil
                        ResetButtonColor(ScrollDownFrame)
                        up_con:disconnect(); drag = nil
                    end)
                    MouseDrag.Parent = GetScreen(ScrollFrame)
                    Class:ScrollDown()
                    wait(0.2) -- delay before auto scroll
                    while scrollEventID == current do
                        Class:ScrollDown()
                        if not Class:CanScrollDown() then break end
                        wait()
                    end
                end)
        
                ScrollDownFrame.MouseButton1Up:connect(function()
                    scrollEventID = tick()
                end)
        
                ScrollUpFrame.MouseButton1Down:connect(function()
                    scrollEventID = tick()
                    local current = scrollEventID
                    local up_con
                    up_con = MouseDrag.MouseButton1Up:connect(function()
                        scrollEventID = tick()
                        MouseDrag.Parent = nil
                        ResetButtonColor(ScrollUpFrame)
                        up_con:disconnect(); drag = nil
                    end)
                    MouseDrag.Parent = GetScreen(ScrollFrame)
                    Class:ScrollUp()
                    wait(0.2)
                    while scrollEventID == current do
                        Class:ScrollUp()
                        if not Class:CanScrollUp() then break end
                        wait()
                    end
                end)
        
                ScrollUpFrame.MouseButton1Up:connect(function()
                    scrollEventID = tick()
                end)
        
                if horizontal then
                    ScrollBarFrame.MouseButton1Down:connect(function(x,y)
                        scrollEventID = tick()
                        local current = scrollEventID
                        local up_con
                        up_con = MouseDrag.MouseButton1Up:connect(function()
                            scrollEventID = tick()
                            MouseDrag.Parent = nil
                            ResetButtonColor(ScrollUpFrame)
                            up_con:disconnect(); drag = nil
                        end)
                        MouseDrag.Parent = GetScreen(ScrollFrame)
                        if x > ScrollThumbFrame.AbsolutePosition.x then
                            Class:ScrollTo(Class.ScrollIndex + Class.VisibleSpace)
                            wait(0.2)
                            while scrollEventID == current do
                                if x < ScrollThumbFrame.AbsolutePosition.x + ScrollThumbFrame.AbsoluteSize.x then break end
                                Class:ScrollTo(Class.ScrollIndex + Class.VisibleSpace)
                                wait()
                            end
                        else
                            Class:ScrollTo(Class.ScrollIndex - Class.VisibleSpace)
                            wait(0.2)
                            while scrollEventID == current do
                                if x > ScrollThumbFrame.AbsolutePosition.x then break end
                                Class:ScrollTo(Class.ScrollIndex - Class.VisibleSpace)
                                wait()
                            end
                        end
                    end)
                else
                    ScrollBarFrame.MouseButton1Down:connect(function(x,y)
                        scrollEventID = tick()
                        local current = scrollEventID
                        local up_con
                        up_con = MouseDrag.MouseButton1Up:connect(function()
                            scrollEventID = tick()
                            MouseDrag.Parent = nil
                            ResetButtonColor(ScrollUpFrame)
                            up_con:disconnect(); drag = nil
                        end)
                        MouseDrag.Parent = GetScreen(ScrollFrame)
                        if y > ScrollThumbFrame.AbsolutePosition.y then
                            Class:ScrollTo(Class.ScrollIndex + Class.VisibleSpace)
                            wait(0.2)
                            while scrollEventID == current do
                                if y < ScrollThumbFrame.AbsolutePosition.y + ScrollThumbFrame.AbsoluteSize.y then break end
                                Class:ScrollTo(Class.ScrollIndex + Class.VisibleSpace)
                                wait()
                            end
                        else
                            Class:ScrollTo(Class.ScrollIndex - Class.VisibleSpace)
                            wait(0.2)
                            while scrollEventID == current do
                                if y > ScrollThumbFrame.AbsolutePosition.y then break end
                                Class:ScrollTo(Class.ScrollIndex - Class.VisibleSpace)
                                wait()
                            end
                        end
                    end)
                end
        
                if horizontal then
                    ScrollThumbFrame.MouseButton1Down:connect(function(x,y)
                        scrollEventID = tick()
                        local mouse_offset = x - ScrollThumbFrame.AbsolutePosition.x
                        local drag_con
                        local up_con
                        drag_con = MouseDrag.MouseMoved:connect(function(x,y)
                            local bar_abs_pos = ScrollBarFrame.AbsolutePosition.x
                            local bar_drag = ScrollBarFrame.AbsoluteSize.x - ScrollThumbFrame.AbsoluteSize.x
                            local bar_abs_one = bar_abs_pos + bar_drag
                            x = x - mouse_offset
                            x = x < bar_abs_pos and bar_abs_pos or x > bar_abs_one and bar_abs_one or x
                            x = x - bar_abs_pos
                            Class:SetScrollPercent(x/(bar_drag))
                        end)
                        up_con = MouseDrag.MouseButton1Up:connect(function()
                            scrollEventID = tick()
                            MouseDrag.Parent = nil
                            ResetButtonColor(ScrollThumbFrame)
                            drag_con:disconnect(); drag_con = nil
                            up_con:disconnect(); drag = nil
                        end)
                        MouseDrag.Parent = GetScreen(ScrollFrame)
                    end)
                else
                    ScrollThumbFrame.MouseButton1Down:connect(function(x,y)
                        scrollEventID = tick()
                        local mouse_offset = y - ScrollThumbFrame.AbsolutePosition.y
                        local drag_con
                        local up_con
                        drag_con = MouseDrag.MouseMoved:connect(function(x,y)
                            local bar_abs_pos = ScrollBarFrame.AbsolutePosition.y
                            local bar_drag = ScrollBarFrame.AbsoluteSize.y - ScrollThumbFrame.AbsoluteSize.y
                            local bar_abs_one = bar_abs_pos + bar_drag
                            y = y - mouse_offset
                            y = y < bar_abs_pos and bar_abs_pos or y > bar_abs_one and bar_abs_one or y
                            y = y - bar_abs_pos
                            Class:SetScrollPercent(y/(bar_drag))
                        end)
                        up_con = MouseDrag.MouseButton1Up:connect(function()
                            scrollEventID = tick()
                            MouseDrag.Parent = nil
                            ResetButtonColor(ScrollThumbFrame)
                            drag_con:disconnect(); drag_con = nil
                            up_con:disconnect(); drag = nil
                        end)
                        MouseDrag.Parent = GetScreen(ScrollFrame)
                    end)
                end
        
                function Class:Destroy()
                    ScrollFrame:Destroy()
                    MouseDrag:Destroy()
                    for k in pairs(Class) do
                        Class[k] = nil
                    end
                    setmetatable(Class,nil)
                end
        
                Update()
        
                return Class
            end
        end
        
        ----------------------------------------------------------------
        ----------------------------------------------------------------
        ----------------------------------------------------------------
        ----------------------------------------------------------------
        
        local MainFrame = Instance.new("Frame")
        MainFrame.Name = "MainFrame"
        MainFrame.Size = UDim2.new(1, -1 * ScrollBarWidth, 1, 0)
        MainFrame.Position = UDim2.new(0, 0, 0, 0)
        MainFrame.BackgroundTransparency = 1
        MainFrame.ClipsDescendants = true
        MainFrame.Parent = PropertiesFrame
        
        ContentFrame = Instance.new("Frame")
        ContentFrame.Name = "ContentFrame"
        ContentFrame.Size = UDim2.new(1, 0, 0, 0)
        ContentFrame.BackgroundTransparency = 1
        ContentFrame.Parent = MainFrame
        
        scrollBar = ScrollBar(false)
        scrollBar.PageIncrement = 1
        Create(scrollBar.GUI,{
            Position = UDim2.new(1,-ScrollBarWidth,0,0);
            Size = UDim2.new(0,ScrollBarWidth,1,0);
            Parent = PropertiesFrame;
        })
        
        scrollBarH = ScrollBar(true)
        scrollBarH.PageIncrement = ScrollBarWidth
        Create(scrollBarH.GUI,{
            Position = UDim2.new(0,0,1,-ScrollBarWidth);
            Size = UDim2.new(1,-ScrollBarWidth,0,ScrollBarWidth);
            Visible = false;
            Parent = PropertiesFrame;
        })
        
        do
            local listEntries = {}
            local nameConnLookup = {}
            
            function scrollBar.UpdateCallback(self)
                scrollBar.TotalSpace = ContentFrame.AbsoluteSize.Y
                scrollBar.VisibleSpace = MainFrame.AbsoluteSize.Y
                ContentFrame.Position = UDim2.new(ContentFrame.Position.X.Scale,ContentFrame.Position.X.Offset,0,-1*scrollBar.ScrollIndex)
            end
        
            function scrollBarH.UpdateCallback(self)
                
            end
        
            MainFrame.Changed:connect(function(p)
                if p == 'AbsoluteSize' then
                    scrollBarH.VisibleSpace = math.ceil(MainFrame.AbsoluteSize.x)
                    scrollBarH:Update()
                    scrollBar.VisibleSpace = math.ceil(MainFrame.AbsoluteSize.y)
                    scrollBar:Update()
                end
            end)
        
            local wheelAmount = Row.Height
            PropertiesFrame.MouseWheelForward:connect(function()
                if scrollBar.VisibleSpace - 1 > wheelAmount then
                    scrollBar:ScrollTo(scrollBar.ScrollIndex - wheelAmount)
                else
                    scrollBar:ScrollTo(scrollBar.ScrollIndex - scrollBar.VisibleSpace)
                end
            end)
            PropertiesFrame.MouseWheelBackward:connect(function()
                if scrollBar.VisibleSpace - 1 > wheelAmount then
                    scrollBar:ScrollTo(scrollBar.ScrollIndex + wheelAmount)
                else
                    scrollBar:ScrollTo(scrollBar.ScrollIndex + scrollBar.VisibleSpace)
                end
            end)
        end
        
        scrollBar.VisibleSpace = math.ceil(MainFrame.AbsoluteSize.y)
        scrollBar:Update()
        
        showProperties(GetSelection())
        
        bindSelectionChanged.Event:connect(function()
            showProperties(GetSelection())
        end)
        
        bindSetAwait.Event:connect(function(obj)
            if AwaitingObjectValue then
                AwaitingObjectValue = false
                local mySel = obj
                if mySel then
                    pcall(function()
                        Set(AwaitingObjectObj, AwaitingObjectProp, mySel)
                    end)
                end
            end
        end)
        
        propertiesSearch.Changed:connect(function(prop)
            if prop == "Text" then
                showProperties(GetSelection())
            end
        end)
        
        bindGetApi.OnInvoke = function()
            return RbxApi
        end
        
        bindGetAwait.OnInvoke = function()
            return AwaitingObjectValue
        end
        end)
        spawn(function()
            local top = D_E_X.ScriptEditor
        
        local editorGrid = top:WaitForChild("EditorGrid")
        
        local currentSource = ""
        
        local currentEditor = {
            x = 0,
            y = 0
        }
        
        local userInput = game:GetService("UserInputService")
        local mouse = game.Players.LocalPlayer:GetMouse()
        
        local topBar = top:WaitForChild("TopBar")
        local scriptBar = topBar:WaitForChild("ScriptBar")
        local scriptBarLeft = topBar:WaitForChild("ScriptBarLeft")
        local scriptBarRight = topBar:WaitForChild("ScriptBarRight")
        local clipboardButton = topBar:WaitForChild("Clipboard")
        
        local entryTemplate = topBar:WaitForChild("Entry")
        
        local openEvent = top:WaitForChild("OpenScript")
        
        local closeButton = top:WaitForChild("Close")
        
        local memoryScripts = {}
        
        local editingIndex = 0
        
        -- Scrollbar
        
        local ScrollBarWidth = 16
        
        local ScrollStyles = {
            Background      = Color3.new(233/255, 233/255, 233/255);
            Border          = Color3.new(149/255, 149/255, 149/255);
            Selected        = Color3.new( 63/255, 119/255, 189/255);
            BorderSelected  = Color3.new( 55/255, 106/255, 167/255);
            Text            = Color3.new(  0/255,   0/255,   0/255);
            TextDisabled    = Color3.new(128/255, 128/255, 128/255);
            TextSelected    = Color3.new(255/255, 255/255, 255/255);
            Button          = Color3.new(221/255, 221/255, 221/255);
            ButtonBorder    = Color3.new(149/255, 149/255, 149/255);
            ButtonSelected  = Color3.new(255/255,   0/255,   0/255);
            Field           = Color3.new(255/255, 255/255, 255/255);
            FieldBorder     = Color3.new(191/255, 191/255, 191/255);
            TitleBackground = Color3.new(178/255, 178/255, 178/255);
        }
        do
            local ZIndexLock = {}
            function SetZIndex(object,z)
                if not ZIndexLock[object] then
                    ZIndexLock[object] = true
                    if object:IsA'GuiObject' then
                        object.ZIndex = z
                    end
                    local children = object:GetChildren()
                    for i = 1,#children do
                        SetZIndex(children[i],z)
                    end
                    ZIndexLock[object] = nil
                end
            end
        end
        function SetZIndexOnChanged(object)
            return object.Changed:connect(function(p)
                if p == "ZIndex" then
                    SetZIndex(object,object.ZIndex)
                end
            end)
        end
        function Create(ty,data)
            local obj
            if type(ty) == 'string' then
                obj = Instance.new(ty)
            else
                obj = ty
            end
            for k, v in pairs(data) do
                if type(k) == 'number' then
                    v.Parent = obj
                else
                    obj[k] = v
                end
            end
            return obj
        end
        -- returns the ascendant ScreenGui of an object
        function GetScreen(screen)
            if screen == nil then return nil end
            while not screen:IsA("ScreenGui") do
                screen = screen.Parent
                if screen == nil then return nil end
            end
            return screen
        end
        -- AutoButtonColor doesn't always reset properly
        function ResetButtonColor(button)
            local active = button.Active
            button.Active = not active
            button.Active = active
        end
        
        function ArrowGraphic(size,dir,scaled,template)
            local Frame = Create('Frame',{
                Name = "Arrow Graphic";
                BorderSizePixel = 0;
                Size = UDim2.new(0,size,0,size);
                Transparency = 1;
            })
            if not template then
                template = Instance.new("Frame")
                template.BorderSizePixel = 0
            end
        
            local transform
            if dir == nil or dir == 'Up' then
                function transform(p,s) return p,s end
            elseif dir == 'Down' then
                function transform(p,s) return UDim2.new(0,p.X.Offset,0,size-p.Y.Offset-1),s end
            elseif dir == 'Left' then
                function transform(p,s) return UDim2.new(0,p.Y.Offset,0,p.X.Offset),UDim2.new(0,s.Y.Offset,0,s.X.Offset) end
            elseif dir == 'Right' then
                function transform(p,s) return UDim2.new(0,size-p.Y.Offset-1,0,p.X.Offset),UDim2.new(0,s.Y.Offset,0,s.X.Offset) end
            end
        
            local scale
            if scaled then
                function scale(p,s) return UDim2.new(p.X.Offset/size,0,p.Y.Offset/size,0),UDim2.new(s.X.Offset/size,0,s.Y.Offset/size,0) end
            else
                function scale(p,s) return p,s end
            end
        
            local o = math.floor(size/4)
            if size%2 == 0 then
                local n = size/2-1
                for i = 0,n do
                    local t = template:Clone()
                    local p,s = scale(transform(
                        UDim2.new(0,n-i,0,o+i),
                        UDim2.new(0,(i+1)*2,0,1)
                    ))
                    t.Position = p
                    t.Size = s
                    t.Parent = Frame
                end
            else
                local n = (size-1)/2
                for i = 0,n do
                    local t = template:Clone()
                    local p,s = scale(transform(
                        UDim2.new(0,n-i,0,o+i),
                        UDim2.new(0,i*2+1,0,1)
                    ))
                    t.Position = p
                    t.Size = s
                    t.Parent = Frame
                end
            end
            if size%4 > 1 then
                local t = template:Clone()
                local p,s = scale(transform(
                    UDim2.new(0,0,0,size-o-1),
                    UDim2.new(0,size,0,1)
                ))
                t.Position = p
                t.Size = s
                t.Parent = Frame
            end
            return Frame
        end
        
        function GripGraphic(size,dir,spacing,scaled,template)
            local Frame = Create('Frame',{
                Name = "Grip Graphic";
                BorderSizePixel = 0;
                Size = UDim2.new(0,size.x,0,size.y);
                Transparency = 1;
            })
            if not template then
                template = Instance.new("Frame")
                template.BorderSizePixel = 0
            end
        
            spacing = spacing or 2
        
            local scale
            if scaled then
                function scale(p) return UDim2.new(p.X.Offset/size.x,0,p.Y.Offset/size.y,0) end
            else
                function scale(p) return p end
            end
        
            if dir == 'Vertical' then
                for i=0,size.x-1,spacing do
                    local t = template:Clone()
                    t.Size = scale(UDim2.new(0,1,0,size.y))
                    t.Position = scale(UDim2.new(0,i,0,0))
                    t.Parent = Frame
                end
            elseif dir == nil or dir == 'Horizontal' then
                for i=0,size.y-1,spacing do
                    local t = template:Clone()
                    t.Size = scale(UDim2.new(0,size.x,0,1))
                    t.Position = scale(UDim2.new(0,0,0,i))
                    t.Parent = Frame
                end
            end
        
            return Frame
        end
        
        do
            local mt = {
                __index = {
                    GetScrollPercent = function(self)
                        return self.ScrollIndex/(self.TotalSpace-self.VisibleSpace)
                    end;
                    CanScrollDown = function(self)
                        return self.ScrollIndex + self.VisibleSpace < self.TotalSpace
                    end;
                    CanScrollUp = function(self)
                        return self.ScrollIndex > 0
                    end;
                    ScrollDown = function(self)
                        self.ScrollIndex = self.ScrollIndex + self.PageIncrement
                        self:Update()
                    end;
                    ScrollUp = function(self)
                        self.ScrollIndex = self.ScrollIndex - self.PageIncrement
                        self:Update()
                    end;
                    ScrollTo = function(self,index)
                        self.ScrollIndex = index
                        self:Update()
                    end;
                    SetScrollPercent = function(self,percent)
                        self.ScrollIndex = math.floor((self.TotalSpace - self.VisibleSpace)*percent + 0.5)
                        self:Update()
                    end;
                };
            }
            mt.__index.CanScrollRight = mt.__index.CanScrollDown
            mt.__index.CanScrollLeft = mt.__index.CanScrollUp
            mt.__index.ScrollLeft = mt.__index.ScrollUp
            mt.__index.ScrollRight = mt.__index.ScrollDown
        
            function ScrollBar(horizontal)
                -- create row scroll bar
                local ScrollFrame = Create('Frame',{
                    Name = "ScrollFrame";
                    Position = horizontal and UDim2.new(0,0,1,-ScrollBarWidth) or UDim2.new(1,-ScrollBarWidth,0,0);
                    Size = horizontal and UDim2.new(1,0,0,ScrollBarWidth) or UDim2.new(0,ScrollBarWidth,1,0);
                    BackgroundTransparency = 1;
                    Create('ImageButton',{
                        Name = "ScrollDown";
                        Position = horizontal and UDim2.new(1,-ScrollBarWidth,0,0) or UDim2.new(0,0,1,-ScrollBarWidth);
                        Size = UDim2.new(0, ScrollBarWidth, 0, ScrollBarWidth);
                        BackgroundColor3 = ScrollStyles.Button;
                        BorderColor3 = ScrollStyles.Border;
                        --BorderSizePixel = 0;
                    });
                    Create('ImageButton',{
                        Name = "ScrollUp";
                        Size = UDim2.new(0, ScrollBarWidth, 0, ScrollBarWidth);
                        BackgroundColor3 = ScrollStyles.Button;
                        BorderColor3 = ScrollStyles.Border;
                        --BorderSizePixel = 0;
                    });
                    Create('ImageButton',{
                        Name = "ScrollBar";
                        Size = horizontal and UDim2.new(1,-ScrollBarWidth*2,1,0) or UDim2.new(1,0,1,-ScrollBarWidth*2);
                        Position = horizontal and UDim2.new(0,ScrollBarWidth,0,0) or UDim2.new(0,0,0,ScrollBarWidth);
                        AutoButtonColor = false;
                        BackgroundColor3 = Color3.new(0.94902, 0.94902, 0.94902);
                        BorderColor3 = ScrollStyles.Border;
                        --BorderSizePixel = 0;
                        Create('ImageButton',{
                            Name = "ScrollThumb";
                            AutoButtonColor = false;
                            Size = UDim2.new(0, ScrollBarWidth, 0, ScrollBarWidth);
                            BackgroundColor3 = ScrollStyles.Button;
                            BorderColor3 = ScrollStyles.Border;
                            --BorderSizePixel = 0;
                        });
                    });
                })
        
                local graphicTemplate = Create('Frame',{
                    Name="Graphic";
                    BorderSizePixel = 0;
                    BackgroundColor3 = ScrollStyles.Border;
                })
                local graphicSize = ScrollBarWidth/2
        
                local ScrollDownFrame = ScrollFrame.ScrollDown
                    local ScrollDownGraphic = ArrowGraphic(graphicSize,horizontal and 'Right' or 'Down',true,graphicTemplate)
                    ScrollDownGraphic.Position = UDim2.new(0.5,-graphicSize/2,0.5,-graphicSize/2)
                    ScrollDownGraphic.Parent = ScrollDownFrame
                local ScrollUpFrame = ScrollFrame.ScrollUp
                    local ScrollUpGraphic = ArrowGraphic(graphicSize,horizontal and 'Left' or 'Up',true,graphicTemplate)
                    ScrollUpGraphic.Position = UDim2.new(0.5,-graphicSize/2,0.5,-graphicSize/2)
                    ScrollUpGraphic.Parent = ScrollUpFrame
                local ScrollBarFrame = ScrollFrame.ScrollBar
                local ScrollThumbFrame = ScrollBarFrame.ScrollThumb
                do
                    local size = ScrollBarWidth*3/8
                    local Decal = GripGraphic(Vector2.new(size,size),horizontal and 'Vertical' or 'Horizontal',2,graphicTemplate)
                    Decal.Position = UDim2.new(0.5,-size/2,0.5,-size/2)
                    Decal.Parent = ScrollThumbFrame
                end
        
                local MouseDrag = Create('ImageButton',{
                    Name = "MouseDrag";
                    Position = UDim2.new(-0.25,0,-0.25,0);
                    Size = UDim2.new(1.5,0,1.5,0);
                    Transparency = 1;
                    AutoButtonColor = false;
                    Active = true;
                    ZIndex = 10;
                })
        
                local Class = setmetatable({
                    GUI = ScrollFrame;
                    ScrollIndex = 0;
                    VisibleSpace = 0;
                    TotalSpace = 0;
                    PageIncrement = 1;
                },mt)
        
                local UpdateScrollThumb
                if horizontal then
                    function UpdateScrollThumb()
                        ScrollThumbFrame.Size = UDim2.new(Class.VisibleSpace/Class.TotalSpace,0,0,ScrollBarWidth)
                        if ScrollThumbFrame.AbsoluteSize.x < ScrollBarWidth then
                            ScrollThumbFrame.Size = UDim2.new(0,ScrollBarWidth,0,ScrollBarWidth)
                        end
                        local barSize = ScrollBarFrame.AbsoluteSize.x
                        ScrollThumbFrame.Position = UDim2.new(Class:GetScrollPercent()*(barSize - ScrollThumbFrame.AbsoluteSize.x)/barSize,0,0,0)
                    end
                else
                    function UpdateScrollThumb()
                        ScrollThumbFrame.Size = UDim2.new(0,ScrollBarWidth,Class.VisibleSpace/Class.TotalSpace,0)
                        if ScrollThumbFrame.AbsoluteSize.y < ScrollBarWidth then
                            ScrollThumbFrame.Size = UDim2.new(0,ScrollBarWidth,0,ScrollBarWidth)
                        end
                        local barSize = ScrollBarFrame.AbsoluteSize.y
                        ScrollThumbFrame.Position = UDim2.new(0,0,Class:GetScrollPercent()*(barSize - ScrollThumbFrame.AbsoluteSize.y)/barSize,0)
                    end
                end
        
                local lastDown
                local lastUp
                local scrollStyle = {BackgroundColor3=ScrollStyles.Border,BackgroundTransparency=0}
                local scrollStyle_ds = {BackgroundColor3=ScrollStyles.Border,BackgroundTransparency=0.7}
        
                local function Update()
                    local t = Class.TotalSpace
                    local v = Class.VisibleSpace
                    local s = Class.ScrollIndex
                    if v <= t then
                        if s > 0 then
                            if s + v > t then
                                Class.ScrollIndex = t - v
                            end
                        else
                            Class.ScrollIndex = 0
                        end
                    else
                        Class.ScrollIndex = 0
                    end
        
                    if Class.UpdateCallback then
                        if Class.UpdateCallback(Class) == false then
                            return
                        end
                    end
        
                    local down = Class:CanScrollDown()
                    local up = Class:CanScrollUp()
                    if down ~= lastDown then
                        lastDown = down
                        ScrollDownFrame.Active = down
                        ScrollDownFrame.AutoButtonColor = down
                        local children = ScrollDownGraphic:GetChildren()
                        local style = down and scrollStyle or scrollStyle_ds
                        for i = 1,#children do
                            Create(children[i],style)
                        end
                    end
                    if up ~= lastUp then
                        lastUp = up
                        ScrollUpFrame.Active = up
                        ScrollUpFrame.AutoButtonColor = up
                        local children = ScrollUpGraphic:GetChildren()
                        local style = up and scrollStyle or scrollStyle_ds
                        for i = 1,#children do
                            Create(children[i],style)
                        end
                    end
                    ScrollThumbFrame.Visible = down or up
                    UpdateScrollThumb()
                end
                Class.Update = Update
        
                SetZIndexOnChanged(ScrollFrame)
        
                local scrollEventID = 0
                ScrollDownFrame.MouseButton1Down:connect(function()
                    scrollEventID = tick()
                    local current = scrollEventID
                    local up_con
                    up_con = MouseDrag.MouseButton1Up:connect(function()
                        scrollEventID = tick()
                        MouseDrag.Parent = nil
                        ResetButtonColor(ScrollDownFrame)
                        up_con:disconnect(); drag = nil
                    end)
                    MouseDrag.Parent = GetScreen(ScrollFrame)
                    Class:ScrollDown()
                    wait(0.2) -- delay before auto scroll
                    while scrollEventID == current do
                        Class:ScrollDown()
                        if not Class:CanScrollDown() then break end
                        wait()
                    end
                end)
        
                ScrollDownFrame.MouseButton1Up:connect(function()
                    scrollEventID = tick()
                end)
        
                ScrollUpFrame.MouseButton1Down:connect(function()
                    scrollEventID = tick()
                    local current = scrollEventID
                    local up_con
                    up_con = MouseDrag.MouseButton1Up:connect(function()
                        scrollEventID = tick()
                        MouseDrag.Parent = nil
                        ResetButtonColor(ScrollUpFrame)
                        up_con:disconnect(); drag = nil
                    end)
                    MouseDrag.Parent = GetScreen(ScrollFrame)
                    Class:ScrollUp()
                    wait(0.2)
                    while scrollEventID == current do
                        Class:ScrollUp()
                        if not Class:CanScrollUp() then break end
                        wait()
                    end
                end)
        
                ScrollUpFrame.MouseButton1Up:connect(function()
                    scrollEventID = tick()
                end)
        
                if horizontal then
                    ScrollBarFrame.MouseButton1Down:connect(function(x,y)
                        scrollEventID = tick()
                        local current = scrollEventID
                        local up_con
                        up_con = MouseDrag.MouseButton1Up:connect(function()
                            scrollEventID = tick()
                            MouseDrag.Parent = nil
                            ResetButtonColor(ScrollUpFrame)
                            up_con:disconnect(); drag = nil
                        end)
                        MouseDrag.Parent = GetScreen(ScrollFrame)
                        if x > ScrollThumbFrame.AbsolutePosition.x then
                            Class:ScrollTo(Class.ScrollIndex + Class.VisibleSpace)
                            wait(0.2)
                            while scrollEventID == current do
                                if x < ScrollThumbFrame.AbsolutePosition.x + ScrollThumbFrame.AbsoluteSize.x then break end
                                Class:ScrollTo(Class.ScrollIndex + Class.VisibleSpace)
                                wait()
                            end
                        else
                            Class:ScrollTo(Class.ScrollIndex - Class.VisibleSpace)
                            wait(0.2)
                            while scrollEventID == current do
                                if x > ScrollThumbFrame.AbsolutePosition.x then break end
                                Class:ScrollTo(Class.ScrollIndex - Class.VisibleSpace)
                                wait()
                            end
                        end
                    end)
                else
                    ScrollBarFrame.MouseButton1Down:connect(function(x,y)
                        scrollEventID = tick()
                        local current = scrollEventID
                        local up_con
                        up_con = MouseDrag.MouseButton1Up:connect(function()
                            scrollEventID = tick()
                            MouseDrag.Parent = nil
                            ResetButtonColor(ScrollUpFrame)
                            up_con:disconnect(); drag = nil
                        end)
                        MouseDrag.Parent = GetScreen(ScrollFrame)
                        if y > ScrollThumbFrame.AbsolutePosition.y then
                            Class:ScrollTo(Class.ScrollIndex + Class.VisibleSpace)
                            wait(0.2)
                            while scrollEventID == current do
                                if y < ScrollThumbFrame.AbsolutePosition.y + ScrollThumbFrame.AbsoluteSize.y then break end
                                Class:ScrollTo(Class.ScrollIndex + Class.VisibleSpace)
                                wait()
                            end
                        else
                            Class:ScrollTo(Class.ScrollIndex - Class.VisibleSpace)
                            wait(0.2)
                            while scrollEventID == current do
                                if y > ScrollThumbFrame.AbsolutePosition.y then break end
                                Class:ScrollTo(Class.ScrollIndex - Class.VisibleSpace)
                                wait()
                            end
                        end
                    end)
                end
        
                if horizontal then
                    ScrollThumbFrame.MouseButton1Down:connect(function(x,y)
                        scrollEventID = tick()
                        local mouse_offset = x - ScrollThumbFrame.AbsolutePosition.x
                        local drag_con
                        local up_con
                        drag_con = MouseDrag.MouseMoved:connect(function(x,y)
                            local bar_abs_pos = ScrollBarFrame.AbsolutePosition.x
                            local bar_drag = ScrollBarFrame.AbsoluteSize.x - ScrollThumbFrame.AbsoluteSize.x
                            local bar_abs_one = bar_abs_pos + bar_drag
                            x = x - mouse_offset
                            x = x < bar_abs_pos and bar_abs_pos or x > bar_abs_one and bar_abs_one or x
                            x = x - bar_abs_pos
                            Class:SetScrollPercent(x/(bar_drag))
                        end)
                        up_con = MouseDrag.MouseButton1Up:connect(function()
                            scrollEventID = tick()
                            MouseDrag.Parent = nil
                            ResetButtonColor(ScrollThumbFrame)
                            drag_con:disconnect(); drag_con = nil
                            up_con:disconnect(); drag = nil
                        end)
                        MouseDrag.Parent = GetScreen(ScrollFrame)
                    end)
                else
                    ScrollThumbFrame.MouseButton1Down:connect(function(x,y)
                        scrollEventID = tick()
                        local mouse_offset = y - ScrollThumbFrame.AbsolutePosition.y
                        local drag_con
                        local up_con
                        drag_con = MouseDrag.MouseMoved:connect(function(x,y)
                            local bar_abs_pos = ScrollBarFrame.AbsolutePosition.y
                            local bar_drag = ScrollBarFrame.AbsoluteSize.y - ScrollThumbFrame.AbsoluteSize.y
                            local bar_abs_one = bar_abs_pos + bar_drag
                            y = y - mouse_offset
                            y = y < bar_abs_pos and bar_abs_pos or y > bar_abs_one and bar_abs_one or y
                            y = y - bar_abs_pos
                            Class:SetScrollPercent(y/(bar_drag))
                        end)
                        up_con = MouseDrag.MouseButton1Up:connect(function()
                            scrollEventID = tick()
                            MouseDrag.Parent = nil
                            ResetButtonColor(ScrollThumbFrame)
                            drag_con:disconnect(); drag_con = nil
                            up_con:disconnect(); drag = nil
                        end)
                        MouseDrag.Parent = GetScreen(ScrollFrame)
                    end)
                end
        
                function Class:Destroy()
                    ScrollFrame:Destroy()
                    MouseDrag:Destroy()
                    for k in pairs(Class) do
                        Class[k] = nil
                    end
                    setmetatable(Class,nil)
                end
        
                Update()
        
                return Class
            end
        end
        
        -- End Scrollbar
        
        local scrollBar = ScrollBar(false)
        scrollBar.PageIncrement = 16
        Create(scrollBar.GUI,{
            Position = UDim2.new(1,0,0,0);
            Size = UDim2.new(0,ScrollBarWidth,1,0);
            Parent = editorGrid;
        })
        
        local scrollBarH = ScrollBar(true)
        scrollBarH.PageIncrement = 8
        Create(scrollBarH.GUI,{
            Position = UDim2.new(0,0,1,0);
            Size = UDim2.new(1,0,0,ScrollBarWidth);
            Parent = editorGrid;
        })
        
        local entries = {}
        
        local grid = {}
        
        local count = 1
        local xCount = 1
        
        local lineSpan = 0
        
        for i = 0,490,8 do
            local newRow = {}
            for j = 0,390,16 do
                local cellText = Instance.new("TextLabel",editorGrid)
                cellText.BackgroundTransparency = 1
                cellText.BorderSizePixel = 0
                cellText.Text = ""
                cellText.Position = UDim2.new(0,i,0,j)
                cellText.Size = UDim2.new(0,8,0,16)
                cellText.Font = Enum.Font.SourceSans
                cellText.FontSize = Enum.FontSize.Size18
                table.insert(newRow,cellText)
                xCount = xCount + 1
            end
            table.insert(grid,newRow)
            count = count + 1
            xCount = 1
        end
        
        local syntaxHighlightList = {
            {["Keyword"] = "for", ["Color"] = Color3.new(0, 0, 127/255), ["Independent"] = true},
            {["Keyword"] = "local", ["Color"] = Color3.new(0, 0, 127/255), ["Independent"] = true},
            {["Keyword"] = "if", ["Color"] = Color3.new(0, 0, 127/255), ["Independent"] = true},
            {["Keyword"] = "then", ["Color"] = Color3.new(0, 0, 127/255), ["Independent"] = true},
            {["Keyword"] = "do", ["Color"] = Color3.new(0, 0, 127/255), ["Independent"] = true},
            {["Keyword"] = "while", ["Color"] = Color3.new(0, 0, 127/255), ["Independent"] = true},
            {["Keyword"] = "end", ["Color"] = Color3.new(0, 0, 127/255), ["Independent"] = true},
            {["Keyword"] = "function", ["Color"] = Color3.new(0, 0, 127/255), ["Independent"] = true},
            {["Keyword"] = "string", ["Color"] = Color3.new(0, 0, 127/255), ["Independent"] = true},
            {["Keyword"] = "table", ["Color"] = Color3.new(0, 0, 127/255), ["Independent"] = true},
            {["Keyword"] = "game", ["Color"] = Color3.new(0, 0, 127/255), ["Independent"] = true},
            {["Keyword"] = "workspace", ["Color"] = Color3.new(0, 0, 127/255), ["Independent"] = true},
            {["Keyword"] = "return", ["Color"] = Color3.new(0, 0, 127/255), ["Independent"] = true},
            {["Keyword"] = "break", ["Color"] = Color3.new(0, 0, 127/255), ["Independent"] = true},
            {["Keyword"] = "elseif", ["Color"] = Color3.new(0, 0, 127/255), ["Independent"] = true},
            {["Keyword"] = "in", ["Color"] = Color3.new(0, 0, 127/255), ["Independent"] = true},
            {["Keyword"] = "pairs", ["Color"] = Color3.new(0, 0, 127/255), ["Independent"] = true},
            {["Keyword"] = "ipairs", ["Color"] = Color3.new(0, 0, 127/255), ["Independent"] = true}
        }
        
        function checkMouseInGui(gui)
            if gui == nil then return false end
            local plrMouse = game.Players.LocalPlayer:GetMouse()
            local guiPosition = gui.AbsolutePosition
            local guiSize = gui.AbsoluteSize	
            
            if plrMouse.X >= guiPosition.x and plrMouse.X <= guiPosition.x + guiSize.x and plrMouse.Y >= guiPosition.y and plrMouse.Y <= guiPosition.y + guiSize.y then
                return true
            else
                return false
            end
        end
        
        function AddZeros(num,reach)
            local toConvert = tostring(num)
            while #toConvert < reach do
                toConvert = " "..toConvert
            end
            return toConvert
        end
        
        function buildScript(source,xOff,yOff,override)
            local buildingRows = true
            local buildScr = source
            
            local totalLines = 0
            
            --print(xOff,yOff)
            
            if currentSource ~= source then
                currentSource = source
            end
        
            if override then
                currentSource = source
                entries = {}
                while buildingRows do
                    local x,y = string.find(buildScr,"\n")
                    if x and y then
                        table.insert(entries,string.sub(buildScr,1,y))
                        buildScr = string.sub(buildScr,y+1,string.len(buildScr))
                    else
                        buildingRows = false
                        table.insert(entries,buildScr)
                    end
                end
            end
            
            totalLines = #entries
            lineSpan = #tostring(totalLines)
            
            if lineSpan == 1 then lineSpan = 2 end
            
            local currentRow = 1
            local currentColumn = 2 + lineSpan
            
            local colorTime = 0
            local colorReplace = nil
            
            local inString = false
            
            local workingEntries = entries
            
            --[[
            for i,v in pairs(entries) do
                table.insert(workingEntries,v)
            end
            
            for i = 1,yOff do
                table.remove(workingEntries,1)
            end
            --]]
            
            local delayance = xOff
        
            for i = 1,#grid do
                for j = 1,#grid[i] do
                    if i <= lineSpan then
                        local newNum = AddZeros(yOff + j,lineSpan)
                        local newDigit =  string.sub(newNum,i,i)
                        if newDigit == " " then
                            grid[i][j].Text = ""
                        else
                            grid[i][j].Text = newDigit
                        end
                        grid[i][j].BackgroundTransparency = 0
                        grid[i][j].BackgroundColor3 = Color3.new(163/255, 162/255, 165/255)
                        --grid[i][j].Font = Enum.Font.SourceSansBold
                    elseif i == lineSpan + 1 then
                        grid[i][j].Text = ""
                        grid[i][j].BackgroundTransparency = 0
                        grid[i][j].BackgroundColor3 = Color3.new(200/255, 200/255, 200/255)
                        --grid[i][j].Font = Enum.Font.SourceSans
                    else
                        grid[i][j].Text = ""
                        grid[i][j].BackgroundTransparency = 1
                        --grid[i][j].Font = Enum.Font.SourceSans
                    end
                end
            end
            
            while true do
                if currentRow > #workingEntries or currentRow > #grid[1] then break end
                local entry = workingEntries[currentRow+yOff]
                while string.len(entry) > 0 do
                    if string.sub(entry,1,1) == "\t" then entry = "    "..string.sub(entry,2) end
                    
                    if currentColumn > #grid then break end
                    
                    if delayance == 0 then
                        grid[currentColumn][currentRow].Text = string.sub(entry,1,1)
                    end
                    
                    -- Coloring
                    
                    if not inString then
                        for i,v in pairs(syntaxHighlightList) do
                            if string.sub(entry,1,string.len(v["Keyword"])) == v["Keyword"] then
                                if v["Independent"] then
                                    local outCheck = string.len(v["Keyword"])+1
                                    local outEntry = string.sub(entry,outCheck,outCheck)
                                    if not string.find(outEntry,"%w") then
                                        colorTime = string.len(v["Keyword"])
                                        colorReplace = v["Color"]
                                    end
                                else
                                    colorTime = string.len(v["Keyword"])
                                    colorReplace = v["Color"]
                                end
                            end
                        end
                    end
                    
                    if string.sub(entry,1,1) == "\"" and string.match(entry,"\".+\"") then
                        inString = true
                        colorTime = string.len(string.match(entry,"\".+\""))
                        colorReplace = Color3.new(170/255, 0, 1)
                    end
                    
                    if colorTime > 0 then
                        colorTime = colorTime - 1
                        grid[currentColumn][currentRow].TextColor3 = colorReplace
                        if colorTime == 0 then inString = false end
                    else
                        grid[currentColumn][currentRow].TextColor3 = Color3.new(0,0,0)
                        inString = false
                    end
                    
                    if delayance == 0 then
                        currentColumn = currentColumn + 1
                    else
                        delayance = delayance - 1
                    end
                    entry = string.sub(entry,2,string.len(entry))
                end
                currentRow = currentRow + 1
                currentColumn = 2 + lineSpan
                colorTime = 0
                delayance = xOff
                inString = false
            end
        end
        
        function scrollBar.UpdateCallback(self)
            scrollBar.TotalSpace = #entries * 16
            scrollBar.VisibleSpace = editorGrid.AbsoluteSize.Y
            buildScript(currentSource,math.floor(scrollBarH.ScrollIndex/8),math.floor(scrollBar.ScrollIndex/16))
        end
        
        function scrollBarH.UpdateCallback(self)
            scrollBarH.TotalSpace = (getLongestEntry(entries) + 1 + lineSpan) * 8
            scrollBarH.VisibleSpace = editorGrid.AbsoluteSize.X
            buildScript(currentSource,math.floor(scrollBarH.ScrollIndex/8),math.floor(scrollBar.ScrollIndex/16))
        end
        
        function getLongestEntry(tab)
            local longest = 0
            for i,v in pairs(tab) do
                if string.len(v) > longest then
                    longest = string.len(v)
                end
            end
            return longest
        end
        
        function openScript(scrObj)
            if scrObj:IsA("LocalScript") then
                scrObj.Archivable = true
                scrObj = scrObj:Clone()
                scrObj.Disabled = true
            end
            
            local scrName = scrObj.Name
            local scrSource = decompile(scrObj)
            
            table.insert(memoryScripts,{Name = scrName,Source = scrSource})
            
            local newTab = entryTemplate:Clone()
            newTab.Button.Text = scrName
            newTab.Position = UDim2.new(0,#scriptBar:GetChildren() * 100,0,0)
            newTab.Visible = true
            
            newTab.Button.MouseButton1Down:connect(function()
                for i,v in pairs(scriptBar:GetChildren()) do
                    if v == newTab then
                        editingIndex = i
                        buildScript(memoryScripts[i].Source,0,0,true)
                        scrollBar:ScrollTo(1)
                        scrollBar:Update()
                        scrollBarH:ScrollTo(1)
                        scrollBarH:Update()
                    end
                end
            end)
            
            newTab.Close.MouseButton1Click:connect(function()
                for i,v in pairs(scriptBar:GetChildren()) do
                    if v == newTab then
                        table.remove(memoryScripts,i)
                        if editingIndex == i then
                            editingIndex = #memoryScripts
                            if editingIndex > 0 then
                                buildScript(memoryScripts[#memoryScripts].Source,0,0,true)
                            else
                                buildScript("",0,0,true)
                            end
                        end
                        
                        scrollBar:ScrollTo(1)
                        scrollBar:Update()
                        scrollBarH:ScrollTo(1)
                        scrollBarH:Update()
                        
                        for i2 = i,#scriptBar:GetChildren() do
                            scriptBar:GetChildren()[i2].Position = scriptBar:GetChildren()[i2].Position + UDim2.new(0,-100,0,0)
                        end
                        if editingIndex > i then
                            editingIndex = editingIndex - 1
                        end
                        newTab:Destroy()
                    end
                end
            end)
            
            editingIndex = #memoryScripts
            buildScript(scrSource,0,0,true)
            
            newTab.Parent = scriptBar
        end
        
        function updateScriptBar()
            local entryCount = 0
            
            scriptBarLeft.Active = false
            scriptBarLeft.AutoButtonColor = false
            for i,v in pairs(scriptBarLeft["Arrow Graphic"]:GetChildren()) do
                v.BackgroundTransparency = 0.7
            end
            scriptBarRight.Active = false
            scriptBarRight.AutoButtonColor = false
            for i,v in pairs(scriptBarRight["Arrow Graphic"]:GetChildren()) do
                v.BackgroundTransparency = 0.7
            end
            for i,v in pairs(scriptBar:GetChildren()) do
                if v.Position.X.Offset < 0 then
                    scriptBarLeft.Active = true
                    scriptBarLeft.AutoButtonColor = true
                    for i,v in pairs(scriptBarLeft["Arrow Graphic"]:GetChildren()) do
                        v.BackgroundTransparency = 0
                    end
                elseif v.Position.X.Offset >= 0 then
                    entryCount = entryCount + 1
                    if entryCount == 5 then
                        scriptBarRight.Active = true
                        scriptBarRight.AutoButtonColor = true
                        for i,v in pairs(scriptBarRight["Arrow Graphic"]:GetChildren()) do
                            v.BackgroundTransparency = 0
                        end
                    end
                end
            end
        end
        
        scriptBar.ChildAdded:connect(updateScriptBar)
        scriptBar.ChildRemoved:connect(updateScriptBar)
        
        scriptBarLeft.MouseButton1Click:connect(function()
            if scriptBarLeft.Active == false then return end
            for i,v in pairs(scriptBar:GetChildren()) do
                v.Position = v.Position + UDim2.new(0,100,0,0)
            end
            updateScriptBar()
        end)
        
        scriptBarRight.MouseButton1Click:connect(function()
            if scriptBarRight.Active == false then return end
            for i,v in pairs(scriptBar:GetChildren()) do
                v.Position = v.Position + UDim2.new(0,-100,0,0)
            end
            updateScriptBar()
        end)
        
        mouse.Button1Down:connect(function()
            if checkMouseInGui(editorGrid) then
                --print("LETS EDIT!")
            end
        end)
        
        openEvent.Event:connect(function(...)
            top.Visible = true
            local args = {...}
            if #args > 0 then
                openScript(args[1])
            end
        end)
        
        clipboardButton.MouseButton1Click:connect(function()
            if Clipboard and Clipboard.set then
                Clipboard.set(currentSource)
            elseif CopyString then
                CopyString(currentSource)
            end
        end)
        
        closeButton.MouseButton1Click:connect(function()
            top.Visible = false
        end)
        
        --[[
        local scr = script.Parent:WaitForChild("Scr")
        local scr2 = script.Parent:WaitForChild("Scr2")
        local scr3 = script.Parent:WaitForChild("Scr3")
        local scr4 = script.Parent:WaitForChild("TOS")
        local scr5 = script.Parent:WaitForChild("HW")
        --]]
        
        buildScript("",0,0,true)
        --[[
        openScript(scr)
        openScript(scr2)
        openScript(scr3)
        openScript(scr4)
        openScript(scr5)
        --]]
        
        scrollBar:Update()
        scrollBarH:Update()
        end)
end)

Section5:NewButton("Madcity 2", "Madcity 2 script", function()
local SynapseXen_IIIiiIIliIlIIIlIii=select;local SynapseXen_lIiIIlIlIiliilI=string.byte;local SynapseXen_lIIIlillIIiliIl=string.sub;local SynapseXen_IlliliII=string.char;local SynapseXen_liiilIIIlliIi=type;local SynapseXen_llIiiiIililIIIlilill=table.concat;local unpack=unpack;local setmetatable=setmetatable;local pcall=pcall;local SynapseXen_lllliiIiilli,SynapseXen_lIiIl,SynapseXen_iiliIl,SynapseXen_lllIii;if bit and bit.bxor then SynapseXen_lllliiIiilli=bit.bxor;SynapseXen_lIiIl=function(SynapseXen_lIiiilIII,SynapseXen_liIIlIIlIIIiI)local SynapseXen_lllIllIlilliliI=SynapseXen_lllliiIiilli(SynapseXen_lIiiilIII,SynapseXen_liIIlIIlIIIiI)if SynapseXen_lllIllIlilliliI<0 then SynapseXen_lllIllIlilliliI=4294967296+SynapseXen_lllIllIlilliliI end;return SynapseXen_lllIllIlilliliI end else SynapseXen_lllliiIiilli=function(SynapseXen_lIiiilIII,SynapseXen_liIIlIIlIIIiI)local SynapseXen_iliIliiIiIIilllIiill=function(SynapseXen_iiliIliliiI,SynapseXen_iiiIIliiIIII)return SynapseXen_iiliIliliiI%(SynapseXen_iiiIIliiIIII*2)>=SynapseXen_iiiIIliiIIII end;local SynapseXen_liIlIIiilIIliIi=0;for SynapseXen_IililII=0,31 do SynapseXen_liIlIIiilIIliIi=SynapseXen_liIlIIiilIIliIi+(SynapseXen_iliIliiIiIIilllIiill(SynapseXen_lIiiilIII,2^SynapseXen_IililII)~=SynapseXen_iliIliiIiIIilllIiill(SynapseXen_liIIlIIlIIIiI,2^SynapseXen_IililII)and 2^SynapseXen_IililII or 0)end;return SynapseXen_liIlIIiilIIliIi end;SynapseXen_lIiIl=SynapseXen_lllliiIiilli end;SynapseXen_iiliIl=function(SynapseXen_IIllIliil,SynapseXen_lIIli,SynapseXen_lIilIIlliIliIl)return(SynapseXen_IIllIliil+SynapseXen_lIIli)%SynapseXen_lIilIIlliIliIl end;SynapseXen_lllIii=function(SynapseXen_IIllIliil,SynapseXen_lIIli,SynapseXen_lIilIIlliIliIl)return(SynapseXen_IIllIliil-SynapseXen_lIIli)%SynapseXen_lIilIIlliIliIl end;local function SynapseXen_liIlilIiIIiiiIiIli(SynapseXen_lllIllIlilliliI)if SynapseXen_lllIllIlilliliI<0 then SynapseXen_lllIllIlilliliI=4294967296+SynapseXen_lllIllIlilliliI end;return SynapseXen_lllIllIlilliliI end;local getfenv=getfenv;if not getfenv then getfenv=function()return _ENV end end;local SynapseXen_llIiIlilililllll={}local SynapseXen_IIiIilillIiiIIl={}local SynapseXen_iiilIii;local SynapseXen_iiilllliIiIIIIlI;local SynapseXen_iIiiiIIIIlllIllIIii={}local SynapseXen_iIIIlil={}for SynapseXen_IililII=0,255 do local SynapseXen_IilIiiill,SynapseXen_IilIiiIIiiiilIi=SynapseXen_IlliliII(SynapseXen_IililII),SynapseXen_IlliliII(SynapseXen_IililII,0)SynapseXen_iIiiiIIIIlllIllIIii[SynapseXen_IilIiiill]=SynapseXen_IilIiiIIiiiilIi;SynapseXen_iIIIlil[SynapseXen_IilIiiIIiiiilIi]=SynapseXen_IilIiiill end;local function SynapseXen_lIIIllIIlliiIliI(SynapseXen_iiIIiil,SynapseXen_lIIIiIll,SynapseXen_ilIIllilIlIi,SynapseXen_llllIIIII)if SynapseXen_ilIIllilIlIi>=256 then SynapseXen_ilIIllilIlIi,SynapseXen_llllIIIII=0,SynapseXen_llllIIIII+1;if SynapseXen_llllIIIII>=256 then SynapseXen_lIIIiIll={}SynapseXen_llllIIIII=1 end end;SynapseXen_lIIIiIll[SynapseXen_IlliliII(SynapseXen_ilIIllilIlIi,SynapseXen_llllIIIII)]=SynapseXen_iiIIiil;SynapseXen_ilIIllilIlIi=SynapseXen_ilIIllilIlIi+1;return SynapseXen_lIIIiIll,SynapseXen_ilIIllilIlIi,SynapseXen_llllIIIII end;local function SynapseXen_iIlIliIiIIIlIi(SynapseXen_IIlIIiillIiii)local function SynapseXen_iilIIIiliIiiliIilli(SynapseXen_liiIlI)local SynapseXen_llllIIIII='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'SynapseXen_liiIlI=string.gsub(SynapseXen_liiIlI,'[^'..SynapseXen_llllIIIII..'=]','')return SynapseXen_liiIlI:gsub('.',function(SynapseXen_IIllIliil)if SynapseXen_IIllIliil=='='then return''end;local SynapseXen_IIiIIiIIIiIlIillii,SynapseXen_illllIIlilIIi='',SynapseXen_llllIIIII:find(SynapseXen_IIllIliil)-1;for SynapseXen_IililII=6,1,-1 do SynapseXen_IIiIIiIIIiIlIillii=SynapseXen_IIiIIiIIIiIlIillii..(SynapseXen_illllIIlilIIi%2^SynapseXen_IililII-SynapseXen_illllIIlilIIi%2^(SynapseXen_IililII-1)>0 and'1'or'0')end;return SynapseXen_IIiIIiIIIiIlIillii end):gsub('%d%d%d?%d?%d?%d?%d?%d?',function(SynapseXen_IIllIliil)if#SynapseXen_IIllIliil~=8 then return''end;local SynapseXen_iiiIiiI=0;for SynapseXen_IililII=1,8 do SynapseXen_iiiIiiI=SynapseXen_iiiIiiI+(SynapseXen_IIllIliil:sub(SynapseXen_IililII,SynapseXen_IililII)=='1'and 2^(8-SynapseXen_IililII)or 0)end;return string.char(SynapseXen_iiiIiiI)end)end;SynapseXen_IIlIIiillIiii=SynapseXen_iilIIIiliIiiliIilli(SynapseXen_IIlIIiillIiii)local SynapseXen_illiIlI=SynapseXen_lIIIlillIIiliIl(SynapseXen_IIlIIiillIiii,1,1)if SynapseXen_illiIlI=="u"then return SynapseXen_lIIIlillIIiliIl(SynapseXen_IIlIIiillIiii,2)elseif SynapseXen_illiIlI~="c"then error("Synapse Xen - Failed to verify bytecode. Please make sure your Lua implementation supports non-null terminated strings.")end;SynapseXen_IIlIIiillIiii=SynapseXen_lIIIlillIIiliIl(SynapseXen_IIlIIiillIiii,2)local SynapseXen_IlliIIllIlII=#SynapseXen_IIlIIiillIiii;local SynapseXen_lIIIiIll={}local SynapseXen_ilIIllilIlIi,SynapseXen_llllIIIII=0,1;local SynapseXen_iillllIiIiI={}local SynapseXen_lllIllIlilliliI=1;local SynapseXen_liIIlIIiiIlilll=SynapseXen_lIIIlillIIiliIl(SynapseXen_IIlIIiillIiii,1,2)SynapseXen_iillllIiIiI[SynapseXen_lllIllIlilliliI]=SynapseXen_iIIIlil[SynapseXen_liIIlIIiiIlilll]or SynapseXen_lIIIiIll[SynapseXen_liIIlIIiiIlilll]SynapseXen_lllIllIlilliliI=SynapseXen_lllIllIlilliliI+1;for SynapseXen_IililII=3,SynapseXen_IlliIIllIlII,2 do local SynapseXen_iiliiiiIliIlIIli=SynapseXen_lIIIlillIIiliIl(SynapseXen_IIlIIiillIiii,SynapseXen_IililII,SynapseXen_IililII+1)local SynapseXen_lIllIlilI=SynapseXen_iIIIlil[SynapseXen_liIIlIIiiIlilll]or SynapseXen_lIIIiIll[SynapseXen_liIIlIIiiIlilll]if not SynapseXen_lIllIlilI then error("Synapse Xen - Failed to verify bytecode. Please make sure your Lua implementation supports non-null terminated strings.")end;local SynapseXen_ilIiilIII=SynapseXen_iIIIlil[SynapseXen_iiliiiiIliIlIIli]or SynapseXen_lIIIiIll[SynapseXen_iiliiiiIliIlIIli]if SynapseXen_ilIiilIII then SynapseXen_iillllIiIiI[SynapseXen_lllIllIlilliliI]=SynapseXen_ilIiilIII;SynapseXen_lllIllIlilliliI=SynapseXen_lllIllIlilliliI+1;SynapseXen_lIIIiIll,SynapseXen_ilIIllilIlIi,SynapseXen_llllIIIII=SynapseXen_lIIIllIIlliiIliI(SynapseXen_lIllIlilI..SynapseXen_lIIIlillIIiliIl(SynapseXen_ilIiilIII,1,1),SynapseXen_lIIIiIll,SynapseXen_ilIIllilIlIi,SynapseXen_llllIIIII)else local SynapseXen_iiIIiiIIi=SynapseXen_lIllIlilI..SynapseXen_lIIIlillIIiliIl(SynapseXen_lIllIlilI,1,1)SynapseXen_iillllIiIiI[SynapseXen_lllIllIlilliliI]=SynapseXen_iiIIiiIIi;SynapseXen_lllIllIlilliliI=SynapseXen_lllIllIlilliliI+1;SynapseXen_lIIIiIll,SynapseXen_ilIIllilIlIi,SynapseXen_llllIIIII=SynapseXen_lIIIllIIlliiIliI(SynapseXen_iiIIiiIIi,SynapseXen_lIIIiIll,SynapseXen_ilIIllilIlIi,SynapseXen_llllIIIII)end;SynapseXen_liIIlIIiiIlilll=SynapseXen_iiliiiiIliIlIIli end;return SynapseXen_llIiiiIililIIIlilill(SynapseXen_iillllIiIiI)end;local function SynapseXen_IIiIi(SynapseXen_iiiiliIIlillIi,SynapseXen_liiilIliIillIilllIIi,SynapseXen_IlIiIliliilililIIIl)if SynapseXen_IlIiIliliilililIIIl then local SynapseXen_IiIlllIlli=SynapseXen_iiiiliIIlillIi/2^(SynapseXen_liiilIliIillIilllIIi-1)%2^(SynapseXen_IlIiIliliilililIIIl-1-(SynapseXen_liiilIliIillIilllIIi-1)+1)return SynapseXen_IiIlllIlli-SynapseXen_IiIlllIlli%1 else local SynapseXen_llilil=2^(SynapseXen_liiilIliIillIilllIIi-1)if SynapseXen_iiiiliIIlillIi%(SynapseXen_llilil+SynapseXen_llilil)>=SynapseXen_llilil then return 1 else return 0 end end end;local function SynapseXen_lllliillliIliiIll()local SynapseXen_IliIIlllIIiIilI=SynapseXen_lllliiIiilli(4116816018,SynapseXen_IIiIilillIiiIIl[9])while true do if SynapseXen_IliIIlllIIiIilI==SynapseXen_lllliiIiilli(3771990128,SynapseXen_IIiIilillIiiIIl[13])then SynapseXen_iiilIii=function(SynapseXen_lIliilillIlil,SynapseXen_llIliiiIlilllli)return SynapseXen_lllliiIiilli(SynapseXen_lIliilillIlil+45245,SynapseXen_llIliiiIlilllli-10389)-SynapseXen_lllliiIiilli(1727241628,SynapseXen_IIiIilillIiiIIl[12])end;SynapseXen_IliIIlllIIiIilI=SynapseXen_lllliiIiilli(SynapseXen_IliIIlllIIiIilI,SynapseXen_lllliiIiilli(1522934311,SynapseXen_iiilllliIiIIIIlI))elseif SynapseXen_IliIIlllIIiIilI==SynapseXen_lllliiIiilli(625029223,SynapseXen_iiilllliIiIIIIlI)then SynapseXen_iiilIii=function(SynapseXen_lIliilillIlil,SynapseXen_llIliiiIlilllli)return SynapseXen_lllliiIiilli(SynapseXen_lIliilillIlil+26649,SynapseXen_llIliiiIlilllli+25544)+SynapseXen_lllliiIiilli(4144356226,SynapseXen_iiilllliIiIIIIlI)end;SynapseXen_IliIIlllIIiIilI=SynapseXen_IliIIlllIIiIilI+SynapseXen_lllliiIiilli(4144329290,SynapseXen_iiilllliIiIIIIlI)elseif SynapseXen_IliIIlllIIiIilI==SynapseXen_lllliiIiilli(1573955378,SynapseXen_IIiIilillIiiIIl[8])then SynapseXen_iiilIii=function(SynapseXen_lIliilillIlil,SynapseXen_llIliiiIlilllli)return SynapseXen_lllliiIiilli(SynapseXen_lIliilillIlil+29861,SynapseXen_llIliiiIlilllli-7944)+SynapseXen_lllliiIiilli(1727219737,SynapseXen_IIiIilillIiiIIl[12])end;SynapseXen_IliIIlllIIiIilI=SynapseXen_IliIIlllIIiIilI-SynapseXen_lllliiIiilli(43337316,SynapseXen_IIiIilillIiiIIl[3])elseif SynapseXen_IliIIlllIIiIilI==SynapseXen_lllliiIiilli(3877639770,SynapseXen_iiilllliIiIIIIlI)then return elseif SynapseXen_IliIIlllIIiIilI==SynapseXen_lllliiIiilli(3877689159,SynapseXen_iiilllliIiIIIIlI)then SynapseXen_iiilIii=function(SynapseXen_lIliilillIlil,SynapseXen_llIliiiIlilllli)return SynapseXen_lllliiIiilli(SynapseXen_lIliilillIlil-45144,SynapseXen_llIliiiIlilllli+25714)+SynapseXen_lllliiIiilli(4144325771,SynapseXen_iiilllliIiIIIIlI)end;SynapseXen_IliIIlllIIiIilI=SynapseXen_IliIIlllIIiIilI-SynapseXen_lllliiIiilli(3788233011,SynapseXen_IIiIilillIiiIIl[4])elseif SynapseXen_IliIIlllIIiIilI==SynapseXen_lllliiIiilli(625071498,SynapseXen_iiilllliIiIIIIlI)then SynapseXen_iiilIii=function(SynapseXen_lIliilillIlil,SynapseXen_llIliiiIlilllli)return SynapseXen_lllliiIiilli(SynapseXen_lIliilillIlil+27711,SynapseXen_llIliiiIlilllli+2598)+SynapseXen_lllliiIiilli(3788199000,SynapseXen_IIiIilillIiiIIl[4])end;SynapseXen_IliIIlllIIiIilI=SynapseXen_IliIIlllIIiIilI-SynapseXen_lllliiIiilli(3186070754,SynapseXen_IIiIilillIiiIIl[5])elseif SynapseXen_IliIIlllIIiIilI==SynapseXen_lllliiIiilli(2290320327,SynapseXen_iiilllliIiIIIIlI)then SynapseXen_iiilIii=function(SynapseXen_lIliilillIlil,SynapseXen_llIliiiIlilllli)return SynapseXen_lllliiIiilli(SynapseXen_lIliilillIlil+33796,SynapseXen_llIliiiIlilllli+17799)-SynapseXen_lllliiIiilli(43381892,SynapseXen_IIiIilillIiiIIl[3])end;SynapseXen_IliIIlllIIiIilI=SynapseXen_IliIIlllIIiIilI+SynapseXen_lllliiIiilli(3641485841,SynapseXen_IIiIilillIiiIIl[10])elseif SynapseXen_IliIIlllIIiIilI==SynapseXen_lllliiIiilli(3877647243,SynapseXen_iiilllliIiIIIIlI)then SynapseXen_iiilIii=function(SynapseXen_lIliilillIlil,SynapseXen_llIliiiIlilllli)return SynapseXen_lllliiIiilli(SynapseXen_lIliilillIlil-3896,SynapseXen_llIliiiIlilllli+13720)-SynapseXen_lllliiIiilli(4144350428,SynapseXen_iiilllliIiIIIIlI)end;SynapseXen_IliIIlllIIiIilI=SynapseXen_IliIIlllIIiIilI+SynapseXen_lllliiIiilli(4144328150,SynapseXen_iiilllliIiIIIIlI)elseif SynapseXen_IliIIlllIIiIilI==SynapseXen_lllliiIiilli(625032458,SynapseXen_iiilllliIiIIIIlI)then SynapseXen_iiilIii=function(SynapseXen_lIliilillIlil,SynapseXen_llIliiiIlilllli)return SynapseXen_lllliiIiilli(SynapseXen_lIliilillIlil-12830,SynapseXen_llIliiiIlilllli-49794)+SynapseXen_lllliiIiilli(4144321101,SynapseXen_iiilllliIiIIIIlI)end;SynapseXen_IliIIlllIIiIilI=SynapseXen_lllliiIiilli(SynapseXen_IliIIlllIIiIilI,SynapseXen_lllliiIiilli(895770534,SynapseXen_iiilllliIiIIIIlI))end end end;local function SynapseXen_lllIIiil(SynapseXen_Iiili)local SynapseXen_llllIilIIiIi=1;local SynapseXen_lIiilliIIIliiliIl;local SynapseXen_iIiIIlI;local function SynapseXen_lliiIlIil()local SynapseXen_iIlliiIIi=SynapseXen_lIiIIlIlIiliilI(SynapseXen_Iiili,SynapseXen_llllIilIIiIi,SynapseXen_llllIilIIiIi)SynapseXen_llllIilIIiIi=SynapseXen_llllIilIIiIi+1;return SynapseXen_iIlliiIIi end;local function SynapseXen_IlIliIIilIilIiIili()local SynapseXen_lIIlliIIillIi,SynapseXen_lIliilillIlil,SynapseXen_llIliiiIlilllli,SynapseXen_IllIilIililII=SynapseXen_lIiIIlIlIiliilI(SynapseXen_Iiili,SynapseXen_llllIilIIiIi,SynapseXen_llllIilIIiIi+3)SynapseXen_llllIilIIiIi=SynapseXen_llllIilIIiIi+4;return SynapseXen_IllIilIililII*16777216+SynapseXen_llIliiiIlilllli*65536+SynapseXen_lIliilillIlil*256+SynapseXen_lIIlliIIillIi end;local function SynapseXen_IIIIi()return SynapseXen_IlIliIIilIilIiIili()*4294967296+SynapseXen_IlIliIIilIilIiIili()end;local function SynapseXen_lIiiili()local SynapseXen_illlliliIilIlIlllI=SynapseXen_lIiIl(SynapseXen_IlIliIIilIilIiIili(),SynapseXen_llIiIlilililllll[2915256603]or(function()local SynapseXen_IIllIliil="print(bytecode)"SynapseXen_llIiIlilililllll[2915256603]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(2250183998,3301406097),SynapseXen_lllliiIiilli(2196977856,SynapseXen_IIiIilillIiiIIl[6]))-string.len(SynapseXen_IIllIliil)-#{2438087089,3235130027,3453984349,2954381967,2872439085,3404116875,1892740182}return SynapseXen_llIiIlilililllll[2915256603]end)())local SynapseXen_lIiiIllIlIilIlIIl=SynapseXen_lIiIl(SynapseXen_IlIliIIilIilIiIili(),SynapseXen_llIiIlilililllll[2598415021]or(function()local SynapseXen_IIllIliil="xen best rerubi paste"SynapseXen_llIiIlilililllll[2598415021]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(3454177771,366443506),SynapseXen_lllliiIiilli(3452305947,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{2266027084,721978795,1708419146}return SynapseXen_llIiIlilililllll[2598415021]end)())local SynapseXen_lliIiiIiIilliliiIlIl=1;local SynapseXen_IIiiiIIIIlI=SynapseXen_IIiIi(SynapseXen_lIiiIllIlIilIlIIl,1,20)*2^32+SynapseXen_illlliliIilIlIlllI;local SynapseXen_llliIIlIIIIllii=SynapseXen_IIiIi(SynapseXen_lIiiIllIlIilIlIIl,21,31)local SynapseXen_iIliIiIlilii=(-1)^SynapseXen_IIiIi(SynapseXen_lIiiIllIlIilIlIIl,32)if SynapseXen_llliIIlIIIIllii==0 then if SynapseXen_IIiiiIIIIlI==0 then return SynapseXen_iIliIiIlilii*0 else SynapseXen_llliIIlIIIIllii=1;SynapseXen_lliIiiIiIilliliiIlIl=0 end elseif SynapseXen_llliIIlIIIIllii==2047 then if SynapseXen_IIiiiIIIIlI==0 then return SynapseXen_iIliIiIlilii*1/0 else return SynapseXen_iIliIiIlilii*0/0 end end;return math.ldexp(SynapseXen_iIliIiIlilii,SynapseXen_llliIIlIIIIllii-1023)*(SynapseXen_lliIiiIiIilliliiIlIl+SynapseXen_IIiiiIIIIlI/2^52)end;local function SynapseXen_IlllilIiIII(SynapseXen_iiIilIliliillllIll)local SynapseXen_iiiili;if SynapseXen_iiIilIliliillllIll then SynapseXen_iiiili=SynapseXen_lIIIlillIIiliIl(SynapseXen_Iiili,SynapseXen_llllIilIIiIi,SynapseXen_llllIilIIiIi+SynapseXen_iiIilIliliillllIll-1)SynapseXen_llllIilIIiIi=SynapseXen_llllIilIIiIi+SynapseXen_iiIilIliliillllIll else SynapseXen_iiIilIliliillllIll=SynapseXen_lIiilliIIIliiliIl()if SynapseXen_iiIilIliliillllIll==0 then return""end;SynapseXen_iiiili=SynapseXen_lIIIlillIIiliIl(SynapseXen_Iiili,SynapseXen_llllIilIIiIi,SynapseXen_llllIilIIiIi+SynapseXen_iiIilIliliillllIll-1)SynapseXen_llllIilIIiIi=SynapseXen_llllIilIIiIi+SynapseXen_iiIilIliliillllIll end;return SynapseXen_iiiili end;local function SynapseXen_illIIIIlIiliIiII(SynapseXen_iiiili)local SynapseXen_IiIlllIlli={}for SynapseXen_IililII=1,#SynapseXen_iiiili do local SynapseXen_ilIiiIililiIIilIl=SynapseXen_iiiili:sub(SynapseXen_IililII,SynapseXen_IililII)SynapseXen_IiIlllIlli[#SynapseXen_IiIlllIlli+1]=string.char(SynapseXen_lllliiIiilli(string.byte(SynapseXen_ilIiiIililiIIilIl),SynapseXen_llIiIlilililllll[1610240348]or(function(...)local SynapseXen_IIllIliil="xen detects custom getfenv"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(587018454,2392318274)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(713096362,3581884431)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli-SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[1610240348]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(1541961986,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(9025103,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{2698566726,2963522215,526325626,2490410644,1254052820,3576349445,1502901140,2687917760}return SynapseXen_llIiIlilililllll[1610240348]end)(10795,"lliliililll",70,11241,"lli",{})))end;return table.concat(SynapseXen_IiIlllIlli)end;local function SynapseXen_lllIilillllIllil()local SynapseXen_ililIililIl={}local SynapseXen_IiIIlIIliI={}local SynapseXen_lIillIllIilllIIilli={}local SynapseXen_illilI={[SynapseXen_llIiIlilililllll[3165177811]or(function()local SynapseXen_IIllIliil="sponsored by ironbrew, jk xen is better"SynapseXen_llIiIlilililllll[3165177811]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(4263131548,3333982921),SynapseXen_lllliiIiilli(1213371620,SynapseXen_IIiIilillIiiIIl[12]))-string.len(SynapseXen_IIllIliil)-#{674608241,1398875853,4184366956,4143151457,2845969804,1119754047}return SynapseXen_llIiIlilililllll[3165177811]end)()]=SynapseXen_lIillIllIilllIIilli,[SynapseXen_llIiIlilililllll[2192695526]or(function()local SynapseXen_IIllIliil="level 1 crook = luraph, level 100 boss = xen"SynapseXen_llIiIlilililllll[2192695526]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(3308222780,1803198915),SynapseXen_lllliiIiilli(3856914548,SynapseXen_IIiIilillIiiIIl[12]))-string.len(SynapseXen_IIllIliil)-#{3999015762,3945958708,2049022515,84815787,4146546265,388334246,4294870552,3271674433}return SynapseXen_llIiIlilililllll[2192695526]end)()]=SynapseXen_ililIililIl,[SynapseXen_llIiIlilililllll[137836516]or(function(...)local SynapseXen_IIllIliil="so if you'we nyot awawe of expwoiting by this point, you've pwobabwy been wiving undew a wock that the pionyeews used to wide fow miwes. wobwox is often seen as an expwoit-infested gwound by most fwom the suwface, awthough this isn't the case."local SynapseXen_iIIiIlli=SynapseXen_iiilIii(3528501425,1165117923)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(4091017539,203966250)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli-SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[137836516]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(175529271,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(1822726764,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{270853703,1517191703}return SynapseXen_llIiIlilililllll[137836516]end)("iIiIlI",{},{},"llIlIiIIlIlilii",12976,4945,12271)]=SynapseXen_IiIIlIIliI}SynapseXen_IlIliIIilIilIiIili()for SynapseXen_IlIiiliI=1,SynapseXen_lllliiIiilli(SynapseXen_iIiIIlI(),SynapseXen_llIiIlilililllll[498322475]or(function()local SynapseXen_IIllIliil="i'm intercommunication about the most nonecclesiastical dll exploits for esp. they only characterization objects with a antepatriarchal in the geistesgeschichte for the esp."SynapseXen_llIiIlilililllll[498322475]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(2078623052,1228966654),SynapseXen_lllliiIiilli(485011622,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{2850066728,3332574603,3000039125,433512129,4049124244,2016794021,196592243,2637831711,3613577194,416215814}return SynapseXen_llIiIlilililllll[498322475]end)())do local SynapseXen_llIIlillliiiIlliilII=SynapseXen_lllliiIiilli(SynapseXen_IlIliIIilIilIiIili(),SynapseXen_llIiIlilililllll[323080668]or(function(...)local SynapseXen_IIllIliil="xen doesn't come with instance caching, sorry superskater"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(1072303742,1781817829)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(3875321089,419664215)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli+SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[323080668]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(579270171,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(3440597988,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{2664431489,1025118775,587557449,1608919359,1384821276}return SynapseXen_llIiIlilililllll[323080668]end)({},12029))local SynapseXen_IliiililIilllIi=SynapseXen_lliiIlIil()SynapseXen_lliiIlIil()local SynapseXen_liiilIIIlliIi=SynapseXen_lliiIlIil()local SynapseXen_iiliiili={[1226904341]=SynapseXen_llIIlillliiiIlliilII,[1067350247]=SynapseXen_IliiililIilllIi,[1480831596]=SynapseXen_IIiIi(SynapseXen_llIIlillliiiIlliilII,1,6),[346432802]=SynapseXen_IIiIi(SynapseXen_llIIlillliiiIlliilII,7,14)}if SynapseXen_liiilIIIlliIi==(SynapseXen_llIiIlilililllll[57973208]or(function(...)local SynapseXen_IIllIliil="i put more time into this shitty list of dead memes then i did into the obfuscator itself"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(268474470,1995697588)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(3801480660,493497971)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli+SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[57973208]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(1250395628,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(2708799022,SynapseXen_IIiIilillIiiIIl[6]))-string.len(SynapseXen_IIllIliil)-#{3921489514,893221731,2519225322,1560266070,1021619095,1613466285,2291721448,3368743134,18598475,670725732}return SynapseXen_llIiIlilililllll[57973208]end)(8140,"IIiIlIililIil","IiilIIIII","liI",8772,"IilIIl","llIiIlII","iilII",3703,"i"))then SynapseXen_iiliiili[566395536]=SynapseXen_IIiIi(SynapseXen_llIIlillliiiIlliilII,24,32)SynapseXen_iiliiili[1005106056]=SynapseXen_IIiIi(SynapseXen_llIIlillliiiIlliilII,15,23)elseif SynapseXen_liiilIIIlliIi==(SynapseXen_llIiIlilililllll[561935575]or(function()local SynapseXen_IIllIliil="inb4 posted on exploit reports section"SynapseXen_llIiIlilililllll[561935575]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(1352226375,600184240),SynapseXen_lllliiIiilli(363609761,SynapseXen_IIiIilillIiiIIl[12]))-string.len(SynapseXen_IIllIliil)-#{2098285949,576339825,3952215251,3075443650,2593543302,567753963,274935673,984031471,992022175}return SynapseXen_llIiIlilililllll[561935575]end)())then SynapseXen_iiliiili[815669057]=SynapseXen_IIiIi(SynapseXen_llIIlillliiiIlliilII,15,32)elseif SynapseXen_liiilIIIlliIi==(SynapseXen_llIiIlilililllll[4181652290]or(function(...)local SynapseXen_IIllIliil="wally bad bird"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(1738625647,3573050535)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(3420196950,874784613)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli-SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[4181652290]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(2032374795,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(1485055425,SynapseXen_IIiIilillIiiIIl[6]))-string.len(SynapseXen_IIllIliil)-#{4183972973,3918645069}return SynapseXen_llIiIlilililllll[4181652290]end)("liiiIlIii",{},{},{},"IlIliiiiIlllIIIIiI"))then SynapseXen_iiliiili[980776686]=SynapseXen_IIiIi(SynapseXen_llIIlillliiiIlliilII,15,32)-131071 end;SynapseXen_lIillIllIilllIIilli[SynapseXen_IlIiiliI]=SynapseXen_iiliiili end;SynapseXen_IlIliIIilIilIiIili()SynapseXen_IlIliIIilIilIiIili()SynapseXen_lliiIlIil()SynapseXen_illilI[2063335321]=SynapseXen_lllliiIiilli(SynapseXen_lliiIlIil(),SynapseXen_llIiIlilililllll[2408855568]or(function(...)local SynapseXen_IIllIliil="what are you trying to say? that fucking one dot + dot + dot + many dots is not adding adding 1 dot + dot and then adding all the dots together????"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(1472324154,886052439)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(1430684387,2864304322)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli-SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[2408855568]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(673233999,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(2868515100,SynapseXen_IIiIilillIiiIIl[4]))-string.len(SynapseXen_IIllIliil)-#{895727441,307497785,3408170529,3298967808}return SynapseXen_llIiIlilililllll[2408855568]end)(3340,10232))SynapseXen_lliiIlIil()SynapseXen_IlIliIIilIilIiIili()SynapseXen_illilI[1950924936]=SynapseXen_lllliiIiilli(SynapseXen_lliiIlIil(),SynapseXen_llIiIlilililllll[1537664137]or(function()local SynapseXen_IIllIliil="pain exist is gonna connect the dots of xen"SynapseXen_llIiIlilililllll[1537664137]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(1051670800,1036990119),SynapseXen_lllliiIiilli(4100200531,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{662589910,858729847,193130397,3731937306}return SynapseXen_llIiIlilililllll[1537664137]end)())SynapseXen_IlIliIIilIilIiIili()for SynapseXen_IlIiiliI=1,SynapseXen_lllliiIiilli(SynapseXen_iIiIIlI(),SynapseXen_llIiIlilililllll[2304065554]or(function(...)local SynapseXen_IIllIliil="hi xen doesn't work on sk8r please help"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(1954907571,2488788493)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(3242613980,1052376421)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli-SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[2304065554]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(1048071119,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(2225167858,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{4016966667,1844082195,2571956185,3860436137,1096331305,1840176956,1402395101,3436797482,1987083856}return SynapseXen_llIiIlilililllll[2304065554]end)(4283))do local SynapseXen_liiilIIIlliIi=SynapseXen_lliiIlIil()local SynapseXen_ilIlll;if SynapseXen_liiilIIIlliIi==(SynapseXen_llIiIlilililllll[714928352]or(function()local SynapseXen_IIllIliil="yed"SynapseXen_llIiIlilililllll[714928352]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(3349245890,2463892589),SynapseXen_lllliiIiilli(2725796893,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{399464330,1978483280,2139022349,2411363588,3191657186,4203891279,1254367472,973021510,269162454,3844325288}return SynapseXen_llIiIlilililllll[714928352]end)())then SynapseXen_ilIlll=SynapseXen_lliiIlIil()~=0 elseif SynapseXen_liiilIIIlliIi==(SynapseXen_llIiIlilililllll[282095761]or(function()local SynapseXen_IIllIliil="pain is gonna use the backspace method on xen"SynapseXen_llIiIlilililllll[282095761]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(1212801442,1079608893),SynapseXen_lllliiIiilli(3052838273,SynapseXen_IIiIilillIiiIIl[5]))-string.len(SynapseXen_IIllIliil)-#{2573307576,4195171709,1646177581,627898265}return SynapseXen_llIiIlilililllll[282095761]end)())then SynapseXen_ilIlll=SynapseXen_lIiiili()elseif SynapseXen_liiilIIIlliIi==(SynapseXen_llIiIlilililllll[2674192878]or(function(...)local SynapseXen_IIllIliil="imagine using some lua minifier tool and thinking you are a badass"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(926259269,3221546033)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(2327064026,1967930159)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli+SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[2674192878]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(1874194143,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(4269226055,SynapseXen_IIiIilillIiiIIl[12]))-string.len(SynapseXen_IIllIliil)-#{1469665404,2648642290,2739128297}return SynapseXen_llIiIlilililllll[2674192878]end)({}))then SynapseXen_ilIlll=SynapseXen_lIIIlillIIiliIl(SynapseXen_illIIIIlIiliIiII(SynapseXen_IlllilIiIII()),1,-2)end;SynapseXen_ililIililIl[SynapseXen_IlIiiliI-1]=SynapseXen_ilIlll end;for SynapseXen_IlIiiliI=1,SynapseXen_lllliiIiilli(SynapseXen_iIiIIlI(),SynapseXen_llIiIlilililllll[3238405576]or(function()local SynapseXen_IIllIliil="now comes with a free n word pass"SynapseXen_llIiIlilililllll[3238405576]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(2477788348,531141556),SynapseXen_lllliiIiilli(2774246594,SynapseXen_IIiIilillIiiIIl[9]))-string.len(SynapseXen_IIllIliil)-#{4036219094,945380366}return SynapseXen_llIiIlilililllll[3238405576]end)())do SynapseXen_IiIIlIIliI[SynapseXen_IlIiiliI-1]=SynapseXen_lllIilillllIllil()end;return SynapseXen_illilI end;do assert(SynapseXen_IlllilIiIII(4)=="\27Xen","Synapse Xen - Failed to verify bytecode. Please make sure your Lua implementation supports non-null terminated strings.")SynapseXen_iIiIIlI=SynapseXen_IlIliIIilIilIiIili;SynapseXen_lIiilliIIIliiliIl=SynapseXen_IlIliIIilIilIiIili;local SynapseXen_iiliiIliilliiiiliIII=SynapseXen_IlllilIiIII()SynapseXen_IlIliIIilIilIiIili()SynapseXen_iiilllliIiIIIIlI=SynapseXen_liIlilIiIIiiiIiIli(SynapseXen_iIiIIlI())SynapseXen_lliiIlIil()local SynapseXen_lliliIIIiIIl=0;for SynapseXen_IililII=1,#SynapseXen_iiliiIliilliiiiliIII do local SynapseXen_ilIiiIililiIIilIl=SynapseXen_iiliiIliilliiiiliIII:sub(SynapseXen_IililII,SynapseXen_IililII)SynapseXen_lliliIIIiIIl=SynapseXen_lliliIIIiIIl+string.byte(SynapseXen_ilIiiIililiIIilIl)end;SynapseXen_lliliIIIiIIl=SynapseXen_lllliiIiilli(SynapseXen_lliliIIIiIIl,SynapseXen_iiilllliIiIIIIlI)for SynapseXen_IlIiiliI=1,SynapseXen_lliiIlIil()do SynapseXen_IIiIilillIiiIIl[SynapseXen_IlIiiliI]=SynapseXen_lIiIl(SynapseXen_iIiIIlI(),SynapseXen_lliliIIIiIIl)end;SynapseXen_lllliillliIliiIll()end;return SynapseXen_lllIilillllIllil()end;local function SynapseXen_Iiiii(...)return SynapseXen_IIIiiIIliIlIIIlIii('#',...),{...}end;local function SynapseXen_IliIIiliIIIllIlilIII(SynapseXen_illilI,SynapseXen_IiIIliiIIIl,SynapseXen_liiiIliIliiliil)local SynapseXen_ililIililIl=SynapseXen_illilI[SynapseXen_llIiIlilililllll[2192695526]or(function()local SynapseXen_IIllIliil="level 1 crook = luraph, level 100 boss = xen"SynapseXen_llIiIlilililllll[2192695526]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(3308222780,1803198915),SynapseXen_lllliiIiilli(3856914548,SynapseXen_IIiIilillIiiIIl[12]))-string.len(SynapseXen_IIllIliil)-#{3999015762,3945958708,2049022515,84815787,4146546265,388334246,4294870552,3271674433}return SynapseXen_llIiIlilililllll[2192695526]end)()]local SynapseXen_lIillIllIilllIIilli=SynapseXen_illilI[SynapseXen_llIiIlilililllll[3165177811]or(function()local SynapseXen_IIllIliil="sponsored by ironbrew, jk xen is better"SynapseXen_llIiIlilililllll[3165177811]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(4263131548,3333982921),SynapseXen_lllliiIiilli(1213371620,SynapseXen_IIiIilillIiiIIl[12]))-string.len(SynapseXen_IIllIliil)-#{674608241,1398875853,4184366956,4143151457,2845969804,1119754047}return SynapseXen_llIiIlilililllll[3165177811]end)()]local SynapseXen_IiIIlIIliI=SynapseXen_illilI[SynapseXen_llIiIlilililllll[137836516]or(function(...)local SynapseXen_IIllIliil="so if you'we nyot awawe of expwoiting by this point, you've pwobabwy been wiving undew a wock that the pionyeews used to wide fow miwes. wobwox is often seen as an expwoit-infested gwound by most fwom the suwface, awthough this isn't the case."local SynapseXen_iIIiIlli=SynapseXen_iiilIii(3528501425,1165117923)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(4091017539,203966250)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli-SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[137836516]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(175529271,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(1822726764,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{270853703,1517191703}return SynapseXen_llIiIlilililllll[137836516]end)("iIiIlI",{},{},"llIlIiIIlIlilii",12976,4945,12271)]return function(...)local SynapseXen_iliIllliIIIillilI,SynapseXen_iillliiIlI=1,-1;local SynapseXen_iIlIllIllilIill,SynapseXen_liIiIiiIiIillllilIi={},SynapseXen_IIIiiIIliIlIIIlIii('#',...)-1;local SynapseXen_ilIIIiIilIIiilIIlii=0;local SynapseXen_IIIIIIiiiiiIlIililI={}local SynapseXen_illlliI={}local SynapseXen_ilIIllIlliiiiIIill=setmetatable({},{__index=SynapseXen_IIIIIIiiiiiIlIililI,__newindex=function(SynapseXen_llllIillilIlI,SynapseXen_IllilliIl,SynapseXen_lliIlliIil)if SynapseXen_IllilliIl>SynapseXen_iillliiIlI then SynapseXen_iillliiIlI=SynapseXen_IllilliIl end;SynapseXen_IIIIIIiiiiiIlIililI[SynapseXen_IllilliIl]=SynapseXen_lliIlliIil end})local function SynapseXen_iiIliliiIl()local SynapseXen_iiliiili,SynapseXen_IiIlIii;while true do SynapseXen_iiliiili=SynapseXen_lIillIllIilllIIilli[SynapseXen_iliIllliIIIillilI]SynapseXen_IiIlIii=SynapseXen_iiliiili[1067350247]SynapseXen_iliIllliIIIillilI=SynapseXen_iliIllliIIIillilI+1;if SynapseXen_IiIlIii==(SynapseXen_llIiIlilililllll[2470864435]or(function()local SynapseXen_IIllIliil="epic gamer vision"SynapseXen_llIiIlilililllll[2470864435]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(3076167878,2106506439),SynapseXen_lllliiIiilli(1037283010,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{2803385291,1475685753,3596129469,2418901892,2864307200,2857512017,1066143418,3580565164,1145918274,1882653263}return SynapseXen_llIiIlilililllll[2470864435]end)())then local SynapseXen_liIIlIIiiiiiIill=SynapseXen_iiliIl(SynapseXen_iiliiili[566395536],SynapseXen_llIiIlilililllll[3642741831]or(function()local SynapseXen_IIllIliil="sometimes it be like that"SynapseXen_llIiIlilililllll[3642741831]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(4262869914,1393478217),SynapseXen_lllliiIiilli(1947618899,SynapseXen_IIiIilillIiiIIl[10]))-string.len(SynapseXen_IIllIliil)-#{2518529575,2713096719}return SynapseXen_llIiIlilililllll[3642741831]end)(),512)local SynapseXen_ilIiiIililiIIilIl=SynapseXen_lllliiIiilli(SynapseXen_iiliiili[1005106056],SynapseXen_llIiIlilililllll[3403987802]or(function()local SynapseXen_IIllIliil="can we have an f in chat for ripull"SynapseXen_llIiIlilililllll[3403987802]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(3061337945,4277160954),SynapseXen_lllliiIiilli(3212981249,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{100765050}return SynapseXen_llIiIlilililllll[3403987802]end)())local SynapseXen_liillIliIiiliIllIlI=SynapseXen_ilIIllIlliiiiIIill;if SynapseXen_liIIlIIiiiiiIill>255 then SynapseXen_liIIlIIiiiiiIill=SynapseXen_ililIililIl[SynapseXen_liIIlIIiiiiiIill-256]else SynapseXen_liIIlIIiiiiiIill=SynapseXen_liillIliIiiliIllIlI[SynapseXen_liIIlIIiiiiiIill]end;if SynapseXen_ilIiiIililiIIilIl>255 then SynapseXen_ilIiiIililiIIilIl=SynapseXen_ililIililIl[SynapseXen_ilIiiIililiIIilIl-256]else SynapseXen_ilIiiIililiIIilIl=SynapseXen_liillIliIiiliIllIlI[SynapseXen_ilIiiIililiIIilIl]end;SynapseXen_liillIliIiiliIllIlI[SynapseXen_lllIii(SynapseXen_iiliiili[346432802],SynapseXen_llIiIlilililllll[2920868394]or(function()local SynapseXen_IIllIliil="aspect network better obfuscator"SynapseXen_llIiIlilililllll[2920868394]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(2070908885,2605693440),SynapseXen_lllliiIiilli(389785261,SynapseXen_iiilllliIiIIIIlI))-SynapseXen_IiIlIii-string.len(SynapseXen_IIllIliil)-#{1402952529,1507895026,1465774348,753953809,2517929960,312891459}return SynapseXen_llIiIlilililllll[2920868394]end)(),256)]=SynapseXen_liIIlIIiiiiiIill-SynapseXen_ilIiiIililiIIilIl elseif SynapseXen_IiIlIii==(SynapseXen_llIiIlilililllll[3234579082]or(function()local SynapseXen_IIllIliil="now with shitty xor string obfuscation"SynapseXen_llIiIlilililllll[3234579082]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(1813808485,3449849881),SynapseXen_lllliiIiilli(1455308352,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{2305668134,1887512020,802972923,158010904,2132231739,2118110707,1627015726,1295576873}return SynapseXen_llIiIlilililllll[3234579082]end)())then SynapseXen_ilIIllIlliiiiIIill[SynapseXen_iiliIl(SynapseXen_iiliiili[346432802],SynapseXen_llIiIlilililllll[2367824780]or(function(...)local SynapseXen_IIllIliil="baby i just fell for uwu,,,,,, i wanna be with uwu!11!!"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(3401927140,243214568)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(926443883,3368550436)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli+SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[2367824780]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(3156609718,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(2409159043,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{1866514651,1354158345}return SynapseXen_llIiIlilililllll[2367824780]end)(6230,2409,809,{}),256)]=SynapseXen_ililIililIl[SynapseXen_lllliiIiilli(SynapseXen_iiliiili[815669057],SynapseXen_llIiIlilililllll[1741872478]or(function()local SynapseXen_IIllIliil="hi my 2.5mb script doesn't work with xen please help"SynapseXen_llIiIlilililllll[1741872478]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(841138138,925300902),SynapseXen_lllliiIiilli(127101613,SynapseXen_IIiIilillIiiIIl[3]))-SynapseXen_IiIlIii-string.len(SynapseXen_IIllIliil)-#{4068850122,1823328981,4085355650,3273328794,1283831167,3951885861,747340482,3853103609}return SynapseXen_llIiIlilililllll[1741872478]end)())]elseif SynapseXen_IiIlIii==(SynapseXen_llIiIlilililllll[3029480339]or(function(...)local SynapseXen_IIllIliil="wait for someone on devforum to say they are gonna deobfuscate this"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(101539462,579698077)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(3765211209,529776741)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli-SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[3029480339]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(325763195,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(2263022149,SynapseXen_IIiIilillIiiIIl[2]))-string.len(SynapseXen_IIllIliil)-#{3544551298,841873863,3810676484,2402205221,2449624785,941307563,2710092313,1734757357}return SynapseXen_llIiIlilililllll[3029480339]end)(13826,10212,9855,4167,"i",{},7885,"l",6009))then local SynapseXen_iiIiiili=SynapseXen_lllliiIiilli(SynapseXen_iiliiili[346432802],SynapseXen_llIiIlilililllll[6512934]or(function()local SynapseXen_IIllIliil="my way to go against expwoiting is to have safety measuwes. i 1 wocawscwipt and onwy moduwes. hewe's how it wowks: this scwipt bewow stowes the moduwes in a tabwe fow each moduwe we send the wist with the moduwes and moduwe infowmation and use inyit a function in my moduwe that wiww stowe the info and aftew it has send to aww the moduwes it wiww dewete them. so whenyevew the cwient twies to hack they cant get the moduwes. onwy this peace of wocawscwipt."SynapseXen_llIiIlilililllll[6512934]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(3508958408,3486656396),SynapseXen_lllliiIiilli(4218215804,SynapseXen_IIiIilillIiiIIl[1]))-string.len(SynapseXen_IIllIliil)-#{1727881436}return SynapseXen_llIiIlilililllll[6512934]end)())local SynapseXen_ilIiiIililiIIilIl=SynapseXen_iiliIl(SynapseXen_iiliiili[1005106056],SynapseXen_llIiIlilililllll[1077646743]or(function(...)local SynapseXen_IIllIliil="xen detects custom getfenv"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(2186125494,2803774440)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(2795801232,1499191897)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli+SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[1077646743]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(2152405307,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(1377682881,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-SynapseXen_IiIlIii-#{1102346770}return SynapseXen_llIiIlilililllll[1077646743]end)({},12175,{},"lI",7034,7634,{},"IIiIilIiliiiIiiiiI",{},7274),512)local SynapseXen_liillIliIiiliIllIlI=SynapseXen_ilIIllIlliiiiIIill;local SynapseXen_lIlIlIiiIilil=SynapseXen_iiIiiili+2;local SynapseXen_illllIiIilllIlilIlII={SynapseXen_liillIliIiiliIllIlI[SynapseXen_iiIiiili](SynapseXen_liillIliIiiliIllIlI[SynapseXen_iiIiiili+1],SynapseXen_liillIliIiiliIllIlI[SynapseXen_iiIiiili+2])}for SynapseXen_IlIiiliI=1,SynapseXen_ilIiiIililiIIilIl do SynapseXen_ilIIllIlliiiiIIill[SynapseXen_lIlIlIiiIilil+SynapseXen_IlIiiliI]=SynapseXen_illllIiIilllIlilIlII[SynapseXen_IlIiiliI]end;if SynapseXen_liillIliIiiliIllIlI[SynapseXen_iiIiiili+3]~=nil then SynapseXen_liillIliIiiliIllIlI[SynapseXen_iiIiiili+2]=SynapseXen_liillIliIiiliIllIlI[SynapseXen_iiIiiili+3]else SynapseXen_iliIllliIIIillilI=SynapseXen_iliIllliIIIillilI+1 end elseif SynapseXen_IiIlIii==(SynapseXen_llIiIlilililllll[2967821179]or(function()local SynapseXen_IIllIliil="level 1 crook = luraph, level 100 boss = xen"SynapseXen_llIiIlilililllll[2967821179]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(3653239515,2448259589),SynapseXen_lllliiIiilli(3210187706,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{4239546330,1015849445}return SynapseXen_llIiIlilililllll[2967821179]end)())then local SynapseXen_liIIlIIiiiiiIill=SynapseXen_iiliIl(SynapseXen_iiliiili[566395536],SynapseXen_llIiIlilililllll[2925600353]or(function(...)local SynapseXen_IIllIliil="xen best rerubi paste"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(2161519016,3372934591)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(324342807,3970640190)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli+SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[2925600353]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(385511122,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(2820694581,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-SynapseXen_IiIlIii-#{1978215135,4127879803,3402858936,2685829074,938024152,3309410550}return SynapseXen_llIiIlilililllll[2925600353]end)(12133,"lllIlIllIIliiIlllI",{},2778,9902,1120,{},{},"IIli",{}),512)local SynapseXen_ilIiiIililiIIilIl=SynapseXen_iiliIl(SynapseXen_lllIii(SynapseXen_iiliiili[1005106056],SynapseXen_llIiIlilililllll[2662733885]or(function(...)local SynapseXen_IIllIliil="imagine using some lua minifier tool and thinking you are a badass"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(2415470198,3675372624)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(58058885,4236937957)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli+SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[2662733885]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(2464015782,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(825385276,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{89476150,814357521,2186688251}return SynapseXen_llIiIlilililllll[2662733885]end)({},{},8213,"lliiiIilII","IIliilIIliIiIilIiIl",3822),512),SynapseXen_ilIIIiIilIIiilIIlii,512)local SynapseXen_liillIliIiiliIllIlI=SynapseXen_ilIIllIlliiiiIIill;if SynapseXen_liIIlIIiiiiiIill>255 then SynapseXen_liIIlIIiiiiiIill=SynapseXen_ililIililIl[SynapseXen_liIIlIIiiiiiIill-256]else SynapseXen_liIIlIIiiiiiIill=SynapseXen_liillIliIiiliIllIlI[SynapseXen_liIIlIIiiiiiIill]end;if SynapseXen_ilIiiIililiIIilIl>255 then SynapseXen_ilIiiIililiIIilIl=SynapseXen_ililIililIl[SynapseXen_ilIiiIililiIIilIl-256]else SynapseXen_ilIiiIililiIIilIl=SynapseXen_liillIliIiiliIllIlI[SynapseXen_ilIiiIililiIIilIl]end;SynapseXen_liillIliIiiliIllIlI[SynapseXen_iiliIl(SynapseXen_iiliIl(SynapseXen_iiliiili[346432802],SynapseXen_llIiIlilililllll[96204814]or(function(...)local SynapseXen_IIllIliil="double-header fair! this rationalization has a overenthusiastically anticheat! you will get nonpermissible for exploiting!"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(4070577868,2673050847)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(1360624687,2934361084)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli+SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[96204814]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(2269725150,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(3893445129,SynapseXen_IIiIilillIiiIIl[3]))-string.len(SynapseXen_IIllIliil)-#{1248972397}return SynapseXen_llIiIlilililllll[96204814]end)("llliliIlli",4526,{},"ilIlll",3144,{},5847),256),SynapseXen_ilIIIiIilIIiilIIlii,256)]=SynapseXen_liIIlIIiiiiiIill*SynapseXen_ilIiiIililiIIilIl elseif SynapseXen_IiIlIii==(SynapseXen_llIiIlilililllll[3017446150]or(function()local SynapseXen_IIllIliil="sometimes it be like that"SynapseXen_llIiIlilililllll[3017446150]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(2100953955,3366102559),SynapseXen_lllliiIiilli(1117773350,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{825134537,3715085107,3916492565,1963165236,4273052100,1496815058,1834765316,1206941037,520166930,2647892477}return SynapseXen_llIiIlilililllll[3017446150]end)())then SynapseXen_ilIIllIlliiiiIIill[SynapseXen_lllIii(SynapseXen_iiliiili[346432802],SynapseXen_llIiIlilililllll[1014410343]or(function(...)local SynapseXen_IIllIliil="this is so sad, alexa play ripull.mp4"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(2527179424,3906362278)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(3671891052,623099399)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli+SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[1014410343]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(3070099421,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(1065393149,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-SynapseXen_IiIlIii-#{276065816,3492743691,790615786,3074318293,2699937739}return SynapseXen_llIiIlilililllll[1014410343]end)({},"illlliiiiliIiIl","iiiIilIllIllIIilI",{},5245,{},7312),256)]=not SynapseXen_ilIIllIlliiiiIIill[SynapseXen_lllIii(SynapseXen_iiliiili[566395536],SynapseXen_llIiIlilililllll[2093853729]or(function()local SynapseXen_IIllIliil="hi xen crashes on my axon paste plz help"SynapseXen_llIiIlilililllll[2093853729]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(3212189788,2183957982),SynapseXen_lllliiIiilli(3395086611,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{3135848561,4037612902,1915478246}return SynapseXen_llIiIlilililllll[2093853729]end)(),512)]elseif SynapseXen_IiIlIii==(SynapseXen_llIiIlilililllll[1158090334]or(function(...)local SynapseXen_IIllIliil="hi devforum"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(410694334,371547591)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(922362235,3372623614)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli-SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[1158090334]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(3821976660,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(4010034953,SynapseXen_IIiIilillIiiIIl[3]))-string.len(SynapseXen_IIllIliil)-#{3491091452,1297904540,3370935625,4242655570,2873766292,1443779113}return SynapseXen_llIiIlilililllll[1158090334]end)("IIliIIIiI",8506,"llI",{}))then SynapseXen_ilIIllIlliiiiIIill[SynapseXen_lllliiIiilli(SynapseXen_iiliiili[346432802],SynapseXen_llIiIlilililllll[819215737]or(function(...)local SynapseXen_IIllIliil="wally bad bird"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(2401542722,2903380580)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(858177154,3436803771)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli+SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[819215737]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(1278944649,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(3071912698,SynapseXen_IIiIilillIiiIIl[10]))-string.len(SynapseXen_IIllIliil)-SynapseXen_IiIlIii-#{2036778580,61807534,2677146968,1754745645}return SynapseXen_llIiIlilililllll[819215737]end)("IIllIiiillIiiI",5547,12965,"iilliIlIilliliiIl","iI",{},{},"IllIlI","lIlliliiIl"))]=SynapseXen_lllIii(SynapseXen_iiliiili[566395536],SynapseXen_llIiIlilililllll[3559275416]or(function(...)local SynapseXen_IIllIliil="can we have an f in chat for ripull"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(1796761031,3564970862)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(2562721514,1732268114)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli-SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[3559275416]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(1998425655,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(1064490386,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-SynapseXen_IiIlIii-#{3150676188,663894909,3581237637,1027863715,2440200907,2399693486}return SynapseXen_llIiIlilililllll[3559275416]end)("IlIiiilIl",3211,"iIiiiIi",8496,{},"I",{},"IlliIl"),512)~=0;if SynapseXen_iiliIl(SynapseXen_iiliiili[1005106056],SynapseXen_llIiIlilililllll[748667214]or(function()local SynapseXen_IIllIliil="wait for someone on devforum to say they are gonna deobfuscate this"SynapseXen_llIiIlilililllll[748667214]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(42188066,3573526752),SynapseXen_lllliiIiilli(545660781,SynapseXen_iiilllliIiIIIIlI))-SynapseXen_IiIlIii-string.len(SynapseXen_IIllIliil)-#{1498411160,1814317103,3391486794,2469754010,451577694,3685672920,3268402107,1018591531,1542535499}return SynapseXen_llIiIlilililllll[748667214]end)(),512)~=0 then SynapseXen_iliIllliIIIillilI=SynapseXen_iliIllliIIIillilI+1 end elseif SynapseXen_IiIlIii==(SynapseXen_llIiIlilililllll[3060284206]or(function(...)local SynapseXen_IIllIliil="i put more time into this shitty list of dead memes then i did into the obfuscator itself"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(2522341582,2002597889)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(3676074388,3676004111)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli-SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[3060284206]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(955050930,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(786644375,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{1405095348,239427548,3677192301,3628862219,1153530256,4029699265,2486272455,1478368792,3760070723}return SynapseXen_llIiIlilililllll[3060284206]end)(5503,920,2207,{}))then SynapseXen_ilIIllIlliiiiIIill[SynapseXen_lllIii(SynapseXen_iiliiili[346432802],SynapseXen_llIiIlilililllll[3653590139]or(function()local SynapseXen_IIllIliil="what are you trying to say? that fucking one dot + dot + dot + many dots is not adding adding 1 dot + dot and then adding all the dots together????"SynapseXen_llIiIlilililllll[3653590139]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(3722926252,700684872),SynapseXen_lllliiIiilli(52485396,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{947288852,960730630,4018632592,4133795378,693042779,1111685987,265647060,570083180}return SynapseXen_llIiIlilililllll[3653590139]end)(),256)]=#SynapseXen_ilIIllIlliiiiIIill[SynapseXen_lllIii(SynapseXen_iiliiili[566395536],SynapseXen_llIiIlilililllll[571122166]or(function()local SynapseXen_IIllIliil="pain is gonna use the backspace method on xen"SynapseXen_llIiIlilililllll[571122166]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(4049547058,1095570044),SynapseXen_lllliiIiilli(1192651861,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{1239247995,1539657963,1166153585,3350161093}return SynapseXen_llIiIlilililllll[571122166]end)(),512)]elseif SynapseXen_IiIlIii==(SynapseXen_llIiIlilililllll[204936550]or(function(...)local SynapseXen_IIllIliil="sponsored by ironbrew, jk xen is better"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(3306286735,1937339414)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(389508137,3905481952)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli+SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[204936550]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(3519778052,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(2426880915,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{3890814450,2065464453,1240470098,2726131945,2553653197}return SynapseXen_llIiIlilililllll[204936550]end)({},"IlIilIii",{},6735,{},2072))then local SynapseXen_iiIiiili=SynapseXen_lllIii(SynapseXen_iiliiili[346432802],SynapseXen_llIiIlilililllll[1247770859]or(function(...)local SynapseXen_IIllIliil="xen doesn't come with instance caching, sorry superskater"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(2611205295,1861096138)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(3779920601,515069499)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli-SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[1247770859]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(2389594032,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(2351408036,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-SynapseXen_IiIlIii-#{174151218,428651987}return SynapseXen_llIiIlilililllll[1247770859]end)(12034,14974,{},{},10194),256)~=0;local SynapseXen_liIIlIIiiiiiIill=SynapseXen_lllIii(SynapseXen_iiliIl(SynapseXen_iiliiili[566395536],SynapseXen_llIiIlilililllll[2015932811]or(function()local SynapseXen_IIllIliil="i'm intercommunication about the most nonecclesiastical dll exploits for esp. they only characterization objects with a antepatriarchal in the geistesgeschichte for the esp."SynapseXen_llIiIlilililllll[2015932811]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(2953945243,860913406),SynapseXen_lllliiIiilli(1950685221,SynapseXen_iiilllliIiIIIIlI))-SynapseXen_IiIlIii-string.len(SynapseXen_IIllIliil)-#{1822589983,809582901,3635195631,3366741081,323384818,3895443718,3920745265,3900264420}return SynapseXen_llIiIlilililllll[2015932811]end)(),512),SynapseXen_ilIIIiIilIIiilIIlii,512)local SynapseXen_ilIiiIililiIIilIl=SynapseXen_lllliiIiilli(SynapseXen_iiliiili[1005106056],SynapseXen_llIiIlilililllll[1994540297]or(function(...)local SynapseXen_IIllIliil="print(bytecode)"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(1367230434,434099384)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(2352441380,1942550526)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli+SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[1994540297]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(390696678,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(3794826114,SynapseXen_IIiIilillIiiIIl[5]))-string.len(SynapseXen_IIllIliil)-SynapseXen_IiIlIii-#{3786477963,780812738,3613563651,2339086704}return SynapseXen_llIiIlilililllll[1994540297]end)({},6035,"l","liIlli",{},4076,"l","iililiIilllIllli","IIiiiIlililIlii",{}))local SynapseXen_liillIliIiiliIllIlI=SynapseXen_ilIIllIlliiiiIIill;if SynapseXen_liIIlIIiiiiiIill>255 then SynapseXen_liIIlIIiiiiiIill=SynapseXen_ililIililIl[SynapseXen_liIIlIIiiiiiIill-256]else SynapseXen_liIIlIIiiiiiIill=SynapseXen_liillIliIiiliIllIlI[SynapseXen_liIIlIIiiiiiIill]end;if SynapseXen_ilIiiIililiIIilIl>255 then SynapseXen_ilIiiIililiIIilIl=SynapseXen_ililIililIl[SynapseXen_ilIiiIililiIIilIl-256]else SynapseXen_ilIiiIililiIIilIl=SynapseXen_liillIliIiiliIllIlI[SynapseXen_ilIiiIililiIIilIl]end;if SynapseXen_liIIlIIiiiiiIill==SynapseXen_ilIiiIililiIIilIl~=SynapseXen_iiIiiili then SynapseXen_iliIllliIIIillilI=SynapseXen_iliIllliIIIillilI+1 end elseif SynapseXen_IiIlIii==(SynapseXen_llIiIlilililllll[2711187333]or(function()local SynapseXen_IIllIliil="hi xen crashes on my axon paste plz help"SynapseXen_llIiIlilililllll[2711187333]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(2020742693,3839006022),SynapseXen_lllliiIiilli(1806074741,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{1335759657,3202395693,4098143814,4215394843,2253382175}return SynapseXen_llIiIlilililllll[2711187333]end)())then SynapseXen_ilIIllIlliiiiIIill[SynapseXen_lllliiIiilli(SynapseXen_iiliiili[346432802],SynapseXen_llIiIlilililllll[176262687]or(function(...)local SynapseXen_IIllIliil="xen best rerubi paste"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(3639844980,3468114609)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(2873747821,1421239790)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli-SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[176262687]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(2624946673,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(2100658822,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{325257531,3847152079}return SynapseXen_llIiIlilililllll[176262687]end)("ilIli","IlIIliliiiiiii",{},"lIl","IlIIlIl",{},"illlilIlilIIiIlli"))]=SynapseXen_liiiIliIliiliil[SynapseXen_lllliiIiilli(SynapseXen_iiliiili[566395536],SynapseXen_llIiIlilililllll[2969993609]or(function()local SynapseXen_IIllIliil="imagine using some lua minifier tool and thinking you are a badass"SynapseXen_llIiIlilililllll[2969993609]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(3678070974,1833655963),SynapseXen_lllliiIiilli(125472219,SynapseXen_IIiIilillIiiIIl[2]))-string.len(SynapseXen_IIllIliil)-#{3339501662}return SynapseXen_llIiIlilililllll[2969993609]end)())]elseif SynapseXen_IiIlIii==(SynapseXen_llIiIlilililllll[133154011]or(function(...)local SynapseXen_IIllIliil="hi xen doesn't work on sk8r please help"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(4039915663,3844854216)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(3085103589,1209880114)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli-SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[133154011]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(4218821856,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(429134516,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{1427987408,4200060968}return SynapseXen_llIiIlilililllll[133154011]end)(3740,{},{},13373))then local SynapseXen_iiIiiili=SynapseXen_lllIii(SynapseXen_iiliiili[346432802],SynapseXen_llIiIlilililllll[3945733056]or(function()local SynapseXen_IIllIliil="inb4 posted on exploit reports section"SynapseXen_llIiIlilililllll[3945733056]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(2851169560,3084989957),SynapseXen_lllliiIiilli(3910415843,SynapseXen_iiilllliIiIIIIlI))-SynapseXen_IiIlIii-string.len(SynapseXen_IIllIliil)-#{2030783709,3783732026,3103399093,4106686272}return SynapseXen_llIiIlilililllll[3945733056]end)(),256)local SynapseXen_liIIlIIiiiiiIill=SynapseXen_lllliiIiilli(SynapseXen_iiliiili[566395536],SynapseXen_llIiIlilililllll[4064945322]or(function(...)local SynapseXen_IIllIliil="level 1 crook = luraph, level 100 boss = xen"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(1160914271,2673520202)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(805779627,3489204106)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli+SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[4064945322]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(1745024820,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(1164751861,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-SynapseXen_IiIlIii-#{3275210161,3055700126,1212705239,1433857490,3103919644,3584176468,2257759146,2126754042,3893271243,694626367}return SynapseXen_llIiIlilililllll[4064945322]end)(11731,"IiililiIillIiIillil","lIIillIIilll",{},12383,"llIIlIliIliiliIlIlI"))local SynapseXen_ilIiiIililiIIilIl=SynapseXen_iiliIl(SynapseXen_iiliiili[1005106056],SynapseXen_llIiIlilililllll[2403325993]or(function()local SynapseXen_IIllIliil="wally bad bird"SynapseXen_llIiIlilililllll[2403325993]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(3806160161,3596298412),SynapseXen_lllliiIiilli(2240795491,SynapseXen_IIiIilillIiiIIl[2]))-string.len(SynapseXen_IIllIliil)-#{489766199,2161400981,2284317591,2798919142,2846593863,124967516,3563983643}return SynapseXen_llIiIlilililllll[2403325993]end)(),512)local SynapseXen_liillIliIiiliIllIlI=SynapseXen_ilIIllIlliiiiIIill;if SynapseXen_ilIiiIililiIIilIl==0 then SynapseXen_iliIllliIIIillilI=SynapseXen_iliIllliIIIillilI+1;SynapseXen_ilIiiIililiIIilIl=SynapseXen_lIillIllIilllIIilli[SynapseXen_iliIllliIIIillilI][1226904341]end;local SynapseXen_lIlIlIiiIilil=(SynapseXen_ilIiiIililiIIilIl-1)*50;local SynapseXen_IllllIlIlIiI=SynapseXen_liillIliIiiliIllIlI[SynapseXen_iiIiiili]if SynapseXen_liIIlIIiiiiiIill==0 then SynapseXen_liIIlIIiiiiiIill=SynapseXen_iillliiIlI-SynapseXen_iiIiiili end;for SynapseXen_IlIiiliI=1,SynapseXen_liIIlIIiiiiiIill do SynapseXen_IllllIlIlIiI[SynapseXen_lIlIlIiiIilil+SynapseXen_IlIiiliI]=SynapseXen_liillIliIiiliIllIlI[SynapseXen_iiIiiili+SynapseXen_IlIiiliI]end elseif SynapseXen_IiIlIii==(SynapseXen_llIiIlilililllll[32928342]or(function()local SynapseXen_IIllIliil="this is so sad, alexa play ripull.mp4"SynapseXen_llIiIlilililllll[32928342]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(4273647132,2024236712),SynapseXen_lllliiIiilli(2223715242,SynapseXen_IIiIilillIiiIIl[3]))-string.len(SynapseXen_IIllIliil)-#{2143900482,1864223813,3592283379,1771481982,482253819,66280298,1514637564,3369748745}return SynapseXen_llIiIlilililllll[32928342]end)())then SynapseXen_ilIIllIlliiiiIIill[SynapseXen_lllliiIiilli(SynapseXen_iiliiili[346432802],SynapseXen_llIiIlilililllll[3625662521]or(function()local SynapseXen_IIllIliil="HELP ME PEOPLE ARE CRASHING MY GAME PLZ HELP"SynapseXen_llIiIlilililllll[3625662521]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(2158601262,556443240),SynapseXen_lllliiIiilli(1451327315,SynapseXen_iiilllliIiIIIIlI))-SynapseXen_IiIlIii-string.len(SynapseXen_IIllIliil)-#{3030350007,694155841}return SynapseXen_llIiIlilililllll[3625662521]end)())]={}elseif SynapseXen_IiIlIii==(SynapseXen_llIiIlilililllll[3629547653]or(function()local SynapseXen_IIllIliil="pain exist is gonna connect the dots of xen"SynapseXen_llIiIlilililllll[3629547653]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(2444039639,3236553117),SynapseXen_lllliiIiilli(2789410900,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{3168913107,1358027638,4221619599,2816773465}return SynapseXen_llIiIlilililllll[3629547653]end)())then local SynapseXen_liIIlIIiiiiiIill=SynapseXen_lllIii(SynapseXen_iiliiili[566395536],SynapseXen_llIiIlilililllll[4012936719]or(function(...)local SynapseXen_IIllIliil="what are you trying to say? that fucking one dot + dot + dot + many dots is not adding adding 1 dot + dot and then adding all the dots together????"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(2505083372,358212674)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(2825743383,1469248159)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli+SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[4012936719]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(3634093240,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(2945153563,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{4114771146}return SynapseXen_llIiIlilililllll[4012936719]end)(7197,5019),512)local SynapseXen_ilIiiIililiIIilIl=SynapseXen_iiliIl(SynapseXen_iiliiili[1005106056],SynapseXen_llIiIlilililllll[3193169696]or(function()local SynapseXen_IIllIliil="baby i just fell for uwu,,,,,, i wanna be with uwu!11!!"SynapseXen_llIiIlilililllll[3193169696]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(2919437659,2406396406),SynapseXen_lllliiIiilli(3597203607,SynapseXen_iiilllliIiIIIIlI))-SynapseXen_IiIlIii-string.len(SynapseXen_IIllIliil)-#{2893974093,2909973740,749770717,4066381170,3838121912,2441150021,670969133,888318175,1018919930,994116952}return SynapseXen_llIiIlilililllll[3193169696]end)(),512)local SynapseXen_liillIliIiiliIllIlI=SynapseXen_ilIIllIlliiiiIIill;if SynapseXen_liIIlIIiiiiiIill>255 then SynapseXen_liIIlIIiiiiiIill=SynapseXen_ililIililIl[SynapseXen_liIIlIIiiiiiIill-256]else SynapseXen_liIIlIIiiiiiIill=SynapseXen_liillIliIiiliIllIlI[SynapseXen_liIIlIIiiiiiIill]end;if SynapseXen_ilIiiIililiIIilIl>255 then SynapseXen_ilIiiIililiIIilIl=SynapseXen_ililIililIl[SynapseXen_ilIiiIililiIIilIl-256]else SynapseXen_ilIiiIililiIIilIl=SynapseXen_liillIliIiiliIllIlI[SynapseXen_ilIiiIililiIIilIl]end;SynapseXen_liillIliIiiliIllIlI[SynapseXen_iiliIl(SynapseXen_iiliiili[346432802],SynapseXen_llIiIlilililllll[3896009972]or(function()local SynapseXen_IIllIliil="this is a christian obfuscator, no cursing allowed in our scripts"SynapseXen_llIiIlilililllll[3896009972]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(593754525,3283175437),SynapseXen_lllliiIiilli(1563727409,SynapseXen_IIiIilillIiiIIl[5]))-SynapseXen_IiIlIii-string.len(SynapseXen_IIllIliil)-#{1282583170,2344323634,733147713,2706110960,799082018,1294297390,653641234}return SynapseXen_llIiIlilililllll[3896009972]end)(),256)]=SynapseXen_liIIlIIiiiiiIill%SynapseXen_ilIiiIililiIIilIl elseif SynapseXen_IiIlIii==(SynapseXen_llIiIlilililllll[1452384964]or(function()local SynapseXen_IIllIliil="luraph better then xen bros :pensive:"SynapseXen_llIiIlilililllll[1452384964]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(3153417637,1154861303),SynapseXen_lllliiIiilli(2580649890,SynapseXen_IIiIilillIiiIIl[12]))-string.len(SynapseXen_IIllIliil)-#{3304956344,4102077568}return SynapseXen_llIiIlilililllll[1452384964]end)())then local SynapseXen_liillIliIiiliIllIlI=SynapseXen_ilIIllIlliiiiIIill;local SynapseXen_liIIlIIiiiiiIill=SynapseXen_lllliiIiilli(SynapseXen_iiliiili[566395536],SynapseXen_llIiIlilililllll[102700514]or(function(...)local SynapseXen_IIllIliil="hi my 2.5mb script doesn't work with xen please help"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(2186101318,3684830011)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(1041011185,3253983902)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli+SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[102700514]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(3061310931,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(2305497852,SynapseXen_IIiIilillIiiIIl[12]))-string.len(SynapseXen_IIllIliil)-SynapseXen_IiIlIii-#{661300164,3226765155,2748868861,3251803407,191736928,2891290518,2860337105}return SynapseXen_llIiIlilililllll[102700514]end)("Ilil",9000,1009,"i",5150,3429,{},12341,"IlilIil",{}))local SynapseXen_IiilIIi=SynapseXen_liillIliIiiliIllIlI[SynapseXen_liIIlIIiiiiiIill]for SynapseXen_IlIiiliI=SynapseXen_liIIlIIiiiiiIill+1,SynapseXen_iiliIl(SynapseXen_iiliiili[1005106056],SynapseXen_llIiIlilililllll[2916989410]or(function(...)local SynapseXen_IIllIliil="i put more time into this shitty list of dead memes then i did into the obfuscator itself"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(2803349628,610522002)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(2938084146,1356907177)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli-SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[2916989410]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(2635374783,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(3915558869,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{1387735056,2970999094,3616012136,260793677,4044732457,1049370906}return SynapseXen_llIiIlilililllll[2916989410]end)({},"lIIIIiIIilIllIiIli",{},"lllII","iIIliiiilllllIliIIl"),512)do SynapseXen_IiilIIi=SynapseXen_IiilIIi..SynapseXen_liillIliIiiliIllIlI[SynapseXen_IlIiiliI]end;SynapseXen_ilIIllIlliiiiIIill[SynapseXen_iiliIl(SynapseXen_iiliiili[346432802],SynapseXen_llIiIlilililllll[842773773]or(function(...)local SynapseXen_IIllIliil="sometimes it be like that"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(674831086,223987661)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(3526861532,3526790541)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli+SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[842773773]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(2230087188,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(1452009483,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-SynapseXen_IiIlIii-#{1074687871}return SynapseXen_llIiIlilililllll[842773773]end)(8728,{}),256)]=SynapseXen_IiilIIi elseif SynapseXen_IiIlIii==(SynapseXen_llIiIlilililllll[2831985085]or(function(...)local SynapseXen_IIllIliil="xen best rerubi paste"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(4033925090,680430901)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(4188565188,106421629)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli-SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[2831985085]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(421881600,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(3276713543,SynapseXen_IIiIilillIiiIIl[3]))-string.len(SynapseXen_IIllIliil)-#{3397961700}return SynapseXen_llIiIlilililllll[2831985085]end)(7242,{},1587,"iIi",{},"IlIiiIlIiiiiI"))then local SynapseXen_iiIiiili=SynapseXen_iiliIl(SynapseXen_lllliiIiilli(SynapseXen_iiliiili[346432802],SynapseXen_llIiIlilililllll[3708138960]or(function(...)local SynapseXen_IIllIliil="https://twitter.com/Ripull_RBLX/status/1059334518581145603"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(2412498715,2475728110)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(1774309019,1774237139)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli+SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[3708138960]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(3762931894,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(185999303,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{4143068922}return SynapseXen_llIiIlilililllll[3708138960]end)("ilili",12706)),SynapseXen_ilIIIiIilIIiilIIlii,256)local SynapseXen_liIIlIIiiiiiIill=SynapseXen_lllliiIiilli(SynapseXen_iiliiili[566395536],SynapseXen_llIiIlilililllll[1956160982]or(function(...)local SynapseXen_IIllIliil="xen doesn't come with instance caching, sorry superskater"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(2388511105,962539799)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(3258016915,1036971039)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli+SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[1956160982]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(3111764894,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(4185910469,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-SynapseXen_IiIlIii-#{3425956449,1331912030,686219761,2663370152,3592987717,606653909}return SynapseXen_llIiIlilililllll[1956160982]end)("iiIiIIiiIlliIli",9928,{},6100,{},{},12128))local SynapseXen_ilIiiIililiIIilIl=SynapseXen_lllliiIiilli(SynapseXen_lllIii(SynapseXen_iiliiili[1005106056],SynapseXen_llIiIlilililllll[1022468529]or(function(...)local SynapseXen_IIllIliil="now with shitty xor string obfuscation"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(62692255,4053644745)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(4103943526,191030677)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli+SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[1022468529]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(3093844906,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(3175832197,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{3215308234,2230319176,3012842349,891224617,1504110937,2364406016}return SynapseXen_llIiIlilililllll[1022468529]end)("IlIlIiIlIIlIIIlIi",11412,"lllIllIIiiIIii",{}),512),SynapseXen_ilIIIiIilIIiilIIlii)local SynapseXen_liillIliIiiliIllIlI=SynapseXen_ilIIllIlliiiiIIill;SynapseXen_liIIlIIiiiiiIill=SynapseXen_liillIliIiiliIllIlI[SynapseXen_liIIlIIiiiiiIill]if SynapseXen_ilIiiIililiIIilIl>255 then SynapseXen_ilIiiIililiIIilIl=SynapseXen_ililIililIl[SynapseXen_ilIiiIililiIIilIl-256]else SynapseXen_ilIiiIililiIIilIl=SynapseXen_liillIliIiiliIllIlI[SynapseXen_ilIiiIililiIIilIl]end;SynapseXen_liillIliIiiliIllIlI[SynapseXen_iiIiiili+1]=SynapseXen_liIIlIIiiiiiIill;SynapseXen_liillIliIiiliIllIlI[SynapseXen_iiIiiili]=SynapseXen_liIIlIIiiiiiIill[SynapseXen_ilIiiIililiIIilIl]elseif SynapseXen_IiIlIii==(SynapseXen_llIiIlilililllll[2800949405]or(function(...)local SynapseXen_IIllIliil="hi xen doesn't work on sk8r please help"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(1597980603,2385097867)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(1753877818,2541115469)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli-SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[2800949405]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(2948640076,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(2312228504,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{1265830136,3686970394,770183649,1592759040}return SynapseXen_llIiIlilililllll[2800949405]end)("iIiIIIiilIiiIIil",{},"lIilIIillliiIiiIIII",{},{},{},5837,"iilIilIiIilil",{},{}))then local SynapseXen_iiIiiili=SynapseXen_lllIii(SynapseXen_iiliiili[346432802],SynapseXen_llIiIlilililllll[1920967919]or(function()local SynapseXen_IIllIliil="aspect network better obfuscator"SynapseXen_llIiIlilililllll[1920967919]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(998705396,728349510),SynapseXen_lllliiIiilli(3890818434,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{898886378,908851623,1913897313,1632794929,3631506398,2084283023,3455884027,3536717195,2562223822}return SynapseXen_llIiIlilililllll[1920967919]end)(),256)local SynapseXen_liIIlIIiiiiiIill=SynapseXen_lllIii(SynapseXen_iiliiili[566395536],SynapseXen_llIiIlilililllll[3708671052]or(function(...)local SynapseXen_IIllIliil="thats how mafia works"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(3577141105,1700766860)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(3771199904,3771129000)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli-SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[3708671052]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(167852789,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(1666956229,SynapseXen_IIiIilillIiiIIl[10]))-string.len(SynapseXen_IIllIliil)-#{3236295242,2458799037,3239927840,2695340417,3313940137}return SynapseXen_llIiIlilililllll[3708671052]end)("liiiIiIIi","IIIllI",6790,204,"lIilIIilliIIIIIIl",{},"llIIllIil","II","IiIIliilIliili"),512)local SynapseXen_ilIiiIililiIIilIl=SynapseXen_iiliIl(SynapseXen_lllliiIiilli(SynapseXen_iiliiili[1005106056],SynapseXen_llIiIlilililllll[3483268004]or(function()local SynapseXen_IIllIliil="this is so sad, alexa play ripull.mp4"SynapseXen_llIiIlilililllll[3483268004]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(3686218537,2537000687),SynapseXen_lllliiIiilli(4253619138,SynapseXen_IIiIilillIiiIIl[2]))-SynapseXen_IiIlIii-string.len(SynapseXen_IIllIliil)-#{3910573201,2735449541}return SynapseXen_llIiIlilililllll[3483268004]end)()),SynapseXen_ilIIIiIilIIiilIIlii,512)local SynapseXen_liillIliIiiliIllIlI=SynapseXen_ilIIllIlliiiiIIill;local SynapseXen_IilIIi,SynapseXen_ilIilIllIll;local SynapseXen_IIIliIilIliliIl,SynapseXen_IilliIlIilIilIIii;SynapseXen_IilIIi={}if SynapseXen_liIIlIIiiiiiIill~=1 then if SynapseXen_liIIlIIiiiiiIill~=0 then SynapseXen_IIIliIilIliliIl=SynapseXen_iiIiiili+SynapseXen_liIIlIIiiiiiIill-1 else SynapseXen_IIIliIilIliliIl=SynapseXen_iillliiIlI end;SynapseXen_IilliIlIilIilIIii=0;for SynapseXen_IlIiiliI=SynapseXen_iiIiiili+1,SynapseXen_IIIliIilIliliIl do SynapseXen_IilliIlIilIilIIii=SynapseXen_IilliIlIilIilIIii+1;SynapseXen_IilIIi[SynapseXen_IilliIlIilIilIIii]=SynapseXen_liillIliIiiliIllIlI[SynapseXen_IlIiiliI]end;SynapseXen_IIIliIilIliliIl,SynapseXen_ilIilIllIll=SynapseXen_Iiiii(SynapseXen_liillIliIiiliIllIlI[SynapseXen_iiIiiili](unpack(SynapseXen_IilIIi,1,SynapseXen_IIIliIilIliliIl-SynapseXen_iiIiiili)))else SynapseXen_IIIliIilIliliIl,SynapseXen_ilIilIllIll=SynapseXen_Iiiii(SynapseXen_liillIliIiiliIllIlI[SynapseXen_iiIiiili]())end;SynapseXen_iillliiIlI=SynapseXen_iiIiiili-1;if SynapseXen_ilIiiIililiIIilIl~=1 then if SynapseXen_ilIiiIililiIIilIl~=0 then SynapseXen_IIIliIilIliliIl=SynapseXen_iiIiiili+SynapseXen_ilIiiIililiIIilIl-2 else SynapseXen_IIIliIilIliliIl=SynapseXen_IIIliIilIliliIl+SynapseXen_iiIiiili-1 end;SynapseXen_IilliIlIilIilIIii=0;for SynapseXen_IlIiiliI=SynapseXen_iiIiiili,SynapseXen_IIIliIilIliliIl do SynapseXen_IilliIlIilIilIIii=SynapseXen_IilliIlIilIilIIii+1;SynapseXen_liillIliIiiliIllIlI[SynapseXen_IlIiiliI]=SynapseXen_ilIilIllIll[SynapseXen_IilliIlIilIilIIii]end end elseif SynapseXen_IiIlIii==(SynapseXen_llIiIlilililllll[2121236446]or(function()local SynapseXen_IIllIliil="pain exist is gonna connect the dots of xen"SynapseXen_llIiIlilililllll[2121236446]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(2670148308,2496142862),SynapseXen_lllliiIiilli(4000670792,SynapseXen_IIiIilillIiiIIl[1]))-string.len(SynapseXen_IIllIliil)-#{867154268,3510520406,2309223217,1862301591,2803304219}return SynapseXen_llIiIlilililllll[2121236446]end)())then if SynapseXen_lllliiIiilli(SynapseXen_iiliiili[815669057],SynapseXen_llIiIlilililllll[2788711780]or(function()local SynapseXen_IIllIliil="sometimes it be like that"SynapseXen_llIiIlilililllll[2788711780]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(868862390,1902362324),SynapseXen_lllliiIiilli(3047922240,SynapseXen_iiilllliIiIIIIlI))-SynapseXen_IiIlIii-string.len(SynapseXen_IIllIliil)-#{4194105380}return SynapseXen_llIiIlilililllll[2788711780]end)())==(SynapseXen_llIiIlilililllll[3042869329]or(function(...)local SynapseXen_IIllIliil="i put more time into this shitty list of dead memes then i did into the obfuscator itself"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(4071316990,1070892622)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(718096166,3576893757)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli-SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[3042869329]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(3663518576,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(3760479437,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{2070249553,4069462089,2409603032,2424087648}return SynapseXen_llIiIlilililllll[3042869329]end)("I",11246,{},{},{},"iiiill",5066,10467))then SynapseXen_ilIIllIlliiiiIIill[SynapseXen_lllIii(SynapseXen_iiliiili[346432802],SynapseXen_llIiIlilililllll[3437770199]or(function()local SynapseXen_IIllIliil="hi devforum"SynapseXen_llIiIlilililllll[3437770199]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(2073616208,1514705028),SynapseXen_lllliiIiilli(4114085881,SynapseXen_IIiIilillIiiIIl[7]))-SynapseXen_IiIlIii-string.len(SynapseXen_IIllIliil)-#{4167395485,2356425368,519861276,1195718067,1701715453}return SynapseXen_llIiIlilililllll[3437770199]end)(),256)]=SynapseXen_iiilllliIiIIIIlI else SynapseXen_ilIIllIlliiiiIIill[SynapseXen_lllIii(SynapseXen_iiliiili[346432802],SynapseXen_llIiIlilililllll[3437770199]or(function()local SynapseXen_IIllIliil="hi devforum"SynapseXen_llIiIlilililllll[3437770199]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(2073616208,1514705028),SynapseXen_lllliiIiilli(4114085881,SynapseXen_IIiIilillIiiIIl[7]))-SynapseXen_IiIlIii-string.len(SynapseXen_IIllIliil)-#{4167395485,2356425368,519861276,1195718067,1701715453}return SynapseXen_llIiIlilililllll[3437770199]end)(),256)]=SynapseXen_IIiIilillIiiIIl[SynapseXen_lllliiIiilli(SynapseXen_iiliiili[815669057],SynapseXen_llIiIlilililllll[2788711780]or(function()local SynapseXen_IIllIliil="sometimes it be like that"SynapseXen_llIiIlilililllll[2788711780]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(868862390,1902362324),SynapseXen_lllliiIiilli(3047922240,SynapseXen_iiilllliIiIIIIlI))-SynapseXen_IiIlIii-string.len(SynapseXen_IIllIliil)-#{4194105380}return SynapseXen_llIiIlilililllll[2788711780]end)())]end elseif SynapseXen_IiIlIii==(SynapseXen_llIiIlilililllll[3808627737]or(function(...)local SynapseXen_IIllIliil="now comes with a free n word pass"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(3047276393,1512862949)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(1649150650,2645829229)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli-SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[3808627737]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(2829654123,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(181544318,SynapseXen_IIiIilillIiiIIl[8]))-string.len(SynapseXen_IIllIliil)-#{3289087218,4229902530,676491983,2076090477,2397706273,2944356048,3490497410,4168790180,1625394931}return SynapseXen_llIiIlilililllll[3808627737]end)({}))then local SynapseXen_iiIiiili=SynapseXen_lllliiIiilli(SynapseXen_iiliIl(SynapseXen_iiliiili[346432802],SynapseXen_llIiIlilililllll[1420087048]or(function(...)local SynapseXen_IIllIliil="sponsored by ironbrew, jk xen is better"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(2130438004,3328277648)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(3930357377,364624571)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli+SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[1420087048]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(32351631,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(1559079632,SynapseXen_IIiIilillIiiIIl[1]))-string.len(SynapseXen_IIllIliil)-SynapseXen_IiIlIii-#{3650649829,4140718843}return SynapseXen_llIiIlilililllll[1420087048]end)(12284,"IIiliiIlliiIIIll",{},1372,{},{}),256),SynapseXen_ilIIIiIilIIiilIIlii)local SynapseXen_lIilliiliI={}for SynapseXen_IlIiiliI=1,#SynapseXen_illlliI do local SynapseXen_illil=SynapseXen_illlliI[SynapseXen_IlIiiliI]for SynapseXen_IlIiIiilililli=0,#SynapseXen_illil do local SynapseXen_IlIiillliIilIl=SynapseXen_illil[SynapseXen_IlIiIiilililli]local SynapseXen_liillIliIiiliIllIlI=SynapseXen_IlIiillliIilIl[1]local SynapseXen_llllIilIIiIi=SynapseXen_IlIiillliIilIl[2]if SynapseXen_liillIliIiiliIllIlI==SynapseXen_ilIIllIlliiiiIIill and SynapseXen_llllIilIIiIi>=SynapseXen_iiIiiili then SynapseXen_lIilliiliI[SynapseXen_llllIilIIiIi]=SynapseXen_liillIliIiiliIllIlI[SynapseXen_llllIilIIiIi]SynapseXen_IlIiillliIilIl[1]=SynapseXen_lIilliiliI end end end elseif SynapseXen_IiIlIii==(SynapseXen_llIiIlilililllll[2715618556]or(function()local SynapseXen_IIllIliil="wally bad bird"SynapseXen_llIiIlilililllll[2715618556]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(1369172513,3615788521),SynapseXen_lllliiIiilli(3771935664,SynapseXen_IIiIilillIiiIIl[12]))-string.len(SynapseXen_IIllIliil)-#{2834217323,2976627380,662786993,3712959442,77882530}return SynapseXen_llIiIlilililllll[2715618556]end)())then SynapseXen_ilIIllIlliiiiIIill[SynapseXen_lllliiIiilli(SynapseXen_iiliiili[346432802],SynapseXen_llIiIlilililllll[4267193193]or(function(...)local SynapseXen_IIllIliil="inb4 posted on exploit reports section"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(4139978130,569881030)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(1795737102,2499253074)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli+SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[4267193193]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(831415877,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(296873521,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-SynapseXen_IiIlIii-#{1077094579,1313238858}return SynapseXen_llIiIlilililllll[4267193193]end)({},"iIiilIIiiliIi",6418,10210))]=SynapseXen_ilIIllIlliiiiIIill[SynapseXen_lllliiIiilli(SynapseXen_iiliiili[566395536],SynapseXen_llIiIlilililllll[1289533663]or(function(...)local SynapseXen_IIllIliil="so if you'we nyot awawe of expwoiting by this point, you've pwobabwy been wiving undew a wock that the pionyeews used to wide fow miwes. wobwox is often seen as an expwoit-infested gwound by most fwom the suwface, awthough this isn't the case."local SynapseXen_iIIiIlli=SynapseXen_iiilIii(2076984314,2438844369)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(1651443187,2643534048)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli+SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[1289533663]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(1276357547,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(1367543085,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{1696481179,1845795614,553504442}return SynapseXen_llIiIlilililllll[1289533663]end)("IliiIIIiIi",2826,1930,{}))]elseif SynapseXen_IiIlIii==(SynapseXen_llIiIlilililllll[2877938225]or(function()local SynapseXen_IIllIliil="this is so sad, alexa play ripull.mp4"SynapseXen_llIiIlilililllll[2877938225]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(726345595,2770267426),SynapseXen_lllliiIiilli(78786148,SynapseXen_IIiIilillIiiIIl[9]))-string.len(SynapseXen_IIllIliil)-#{1896771130,1147445446,1547142664,201437782,383464880,4066872194}return SynapseXen_llIiIlilililllll[2877938225]end)())then SynapseXen_ilIIllIlliiiiIIill[SynapseXen_lllIii(SynapseXen_iiliiili[346432802],SynapseXen_llIiIlilililllll[2131204581]or(function(...)local SynapseXen_IIllIliil="luraph better then xen bros :pensive:"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(2383657349,3117437933)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(614659427,3680325753)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli-SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[2131204581]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(1133343775,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(2695423121,SynapseXen_IIiIilillIiiIIl[7]))-string.len(SynapseXen_IIllIliil)-#{3506666341,1244125723,2459935140,3729635821,3193098402,3415698898}return SynapseXen_llIiIlilililllll[2131204581]end)("IiIiilIiIl","iiIiliiiIiiIiIlIil",14101,7746,10524,"II"),256)]=-SynapseXen_ilIIllIlliiiiIIill[SynapseXen_lllliiIiilli(SynapseXen_iiliiili[566395536],SynapseXen_llIiIlilililllll[1668591438]or(function()local SynapseXen_IIllIliil="now comes with a free n word pass"SynapseXen_llIiIlilililllll[1668591438]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(707854167,3889869162),SynapseXen_lllliiIiilli(988725512,SynapseXen_iiilllliIiIIIIlI))-SynapseXen_IiIlIii-string.len(SynapseXen_IIllIliil)-#{1552951931,2505089760,2551440187,4023595931,1499310309}return SynapseXen_llIiIlilililllll[1668591438]end)())]elseif SynapseXen_IiIlIii==(SynapseXen_llIiIlilililllll[3906859506]or(function(...)local SynapseXen_IIllIliil="wait for someone on devforum to say they are gonna deobfuscate this"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(1365201359,2249826317)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(1823087966,2471898731)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli-SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[3906859506]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(3365329371,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(3906468283,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{2943988810,2921049480,967654249,1447945497,4005031543}return SynapseXen_llIiIlilililllll[3906859506]end)("iIllliilIiiIIi",14934,11854,"iilIiIlIliIiIlIliI","iliIllllIlIlllliI"))then local SynapseXen_liillIliIiiliIllIlI=SynapseXen_ilIIllIlliiiiIIill;for SynapseXen_IlIiiliI=SynapseXen_iiliIl(SynapseXen_iiliiili[346432802],SynapseXen_llIiIlilililllll[3192097410]or(function(...)local SynapseXen_IIllIliil="i put more time into this shitty list of dead memes then i did into the obfuscator itself"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(1371423391,2533715985)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(1216246515,3078732191)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli-SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[3192097410]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(3787689274,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(2524119494,SynapseXen_IIiIilillIiiIIl[2]))-string.len(SynapseXen_IIllIliil)-#{3013961753,3636563318,3032894834,1140403138,1749775127,660282041,756878237,1670009028,1137810891,2084649152}return SynapseXen_llIiIlilililllll[3192097410]end)(14828,{}),256),SynapseXen_lllIii(SynapseXen_iiliiili[566395536],SynapseXen_llIiIlilililllll[2385167708]or(function(...)local SynapseXen_IIllIliil="wally bad bird"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(3376387928,3063072638)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(3760990197,533997832)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli+SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[2385167708]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(719119602,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(3902128385,SynapseXen_IIiIilillIiiIIl[5]))-string.len(SynapseXen_IIllIliil)-#{2484511570,2348735249}return SynapseXen_llIiIlilililllll[2385167708]end)(713,{},1564,{},3266,"l",{}),512)do SynapseXen_liillIliIiiliIllIlI[SynapseXen_IlIiiliI]=nil end elseif SynapseXen_IiIlIii==(SynapseXen_llIiIlilililllll[2151882536]or(function()local SynapseXen_IIllIliil="skisploit is the superior obfuscator, clearly."SynapseXen_llIiIlilililllll[2151882536]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(947572694,420151478),SynapseXen_lllliiIiilli(3597984224,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{2235727085,1432754263,2390913893,1289962471,2978027289,2492006325,2561110841}return SynapseXen_llIiIlilililllll[2151882536]end)())then local SynapseXen_iiIiiili=SynapseXen_lllIii(SynapseXen_iiliIl(SynapseXen_iiliiili[346432802],SynapseXen_llIiIlilililllll[3255342811]or(function()local SynapseXen_IIllIliil="hi xen doesn't work on sk8r please help"SynapseXen_llIiIlilililllll[3255342811]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(468331048,1911329028),SynapseXen_lllliiIiilli(2730421845,SynapseXen_IIiIilillIiiIIl[11]))-SynapseXen_IiIlIii-string.len(SynapseXen_IIllIliil)-#{530319685}return SynapseXen_llIiIlilililllll[3255342811]end)(),256),SynapseXen_ilIIIiIilIIiilIIlii,256)~=0;local SynapseXen_liIIlIIiiiiiIill=SynapseXen_lllIii(SynapseXen_iiliiili[566395536],SynapseXen_llIiIlilililllll[4112032049]or(function(...)local SynapseXen_IIllIliil="xen best rerubi paste"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(396556756,4101669013)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(3809168773,3809098034)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli+SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[4112032049]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(3719016178,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(3380023025,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{105697702,3093726965,1534415039,63248993,1406060382,1961332838,2015639396,4290039317,1590047378,530516910}return SynapseXen_llIiIlilililllll[4112032049]end)(2570,"l","lliIIiIiiliiIi",{},{},{},"iiilIlIiiiiiilII","IililIlIIIIiIliIlI",11336,{}),512)local SynapseXen_ilIiiIililiIIilIl=SynapseXen_lllliiIiilli(SynapseXen_iiliiili[1005106056],SynapseXen_llIiIlilililllll[2687209193]or(function()local SynapseXen_IIllIliil="https://twitter.com/Ripull_RBLX/status/1059334518581145603"SynapseXen_llIiIlilililllll[2687209193]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(1713048068,3247596217),SynapseXen_lllliiIiilli(1351451974,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{1429194745,3197844748,4189616607}return SynapseXen_llIiIlilililllll[2687209193]end)())local SynapseXen_liillIliIiiliIllIlI=SynapseXen_ilIIllIlliiiiIIill;if SynapseXen_liIIlIIiiiiiIill>255 then SynapseXen_liIIlIIiiiiiIill=SynapseXen_ililIililIl[SynapseXen_liIIlIIiiiiiIill-256]else SynapseXen_liIIlIIiiiiiIill=SynapseXen_liillIliIiiliIllIlI[SynapseXen_liIIlIIiiiiiIill]end;if SynapseXen_ilIiiIililiIIilIl>255 then SynapseXen_ilIiiIililiIIilIl=SynapseXen_ililIililIl[SynapseXen_ilIiiIililiIIilIl-256]else SynapseXen_ilIiiIililiIIilIl=SynapseXen_liillIliIiiliIllIlI[SynapseXen_ilIiiIililiIIilIl]end;if SynapseXen_liIIlIIiiiiiIill<SynapseXen_ilIiiIililiIIilIl~=SynapseXen_iiIiiili then SynapseXen_iliIllliIIIillilI=SynapseXen_iliIllliIIIillilI+1 end elseif SynapseXen_IiIlIii==(SynapseXen_llIiIlilililllll[3204716085]or(function()local SynapseXen_IIllIliil="hi my 2.5mb script doesn't work with xen please help"SynapseXen_llIiIlilililllll[3204716085]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(4094661964,3896673090),SynapseXen_lllliiIiilli(3947456836,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{1609733304,1017608648,2980616423,102976084,3863236518,2180684675,1476462802,932542488,1936787423}return SynapseXen_llIiIlilililllll[3204716085]end)())then local SynapseXen_liIIlIIiiiiiIill=SynapseXen_lllliiIiilli(SynapseXen_iiliiili[566395536],SynapseXen_llIiIlilililllll[1682110834]or(function()local SynapseXen_IIllIliil="now with shitty xor string obfuscation"SynapseXen_llIiIlilililllll[1682110834]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(488844078,426629513),SynapseXen_lllliiIiilli(2393574978,SynapseXen_IIiIilillIiiIIl[9]))-SynapseXen_IiIlIii-string.len(SynapseXen_IIllIliil)-#{851317357,3756795899}return SynapseXen_llIiIlilililllll[1682110834]end)())local SynapseXen_ilIiiIililiIIilIl=SynapseXen_lllliiIiilli(SynapseXen_iiliiili[1005106056],SynapseXen_llIiIlilililllll[2628092098]or(function()local SynapseXen_IIllIliil="hi xen crashes on my axon paste plz help"SynapseXen_llIiIlilililllll[2628092098]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(4216631563,2304684634),SynapseXen_lllliiIiilli(2232294773,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{3150996169,2935834975,3376947929,1661827209,2654256072,183498942,3641850627,1317474738,3379559756,2504346459}return SynapseXen_llIiIlilililllll[2628092098]end)())local SynapseXen_liillIliIiiliIllIlI=SynapseXen_ilIIllIlliiiiIIill;if SynapseXen_liIIlIIiiiiiIill>255 then SynapseXen_liIIlIIiiiiiIill=SynapseXen_ililIililIl[SynapseXen_liIIlIIiiiiiIill-256]else SynapseXen_liIIlIIiiiiiIill=SynapseXen_liillIliIiiliIllIlI[SynapseXen_liIIlIIiiiiiIill]end;if SynapseXen_ilIiiIililiIIilIl>255 then SynapseXen_ilIiiIililiIIilIl=SynapseXen_ililIililIl[SynapseXen_ilIiiIililiIIilIl-256]else SynapseXen_ilIiiIililiIIilIl=SynapseXen_liillIliIiiliIllIlI[SynapseXen_ilIiiIililiIIilIl]end;SynapseXen_liillIliIiiliIllIlI[SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(SynapseXen_iiliiili[346432802],SynapseXen_llIiIlilililllll[3631339276]or(function()local SynapseXen_IIllIliil="thats how mafia works"SynapseXen_llIiIlilililllll[3631339276]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(1115543668,2528819895),SynapseXen_lllliiIiilli(890080142,SynapseXen_IIiIilillIiiIIl[4]))-SynapseXen_IiIlIii-string.len(SynapseXen_IIllIliil)-#{234438525,608619111,3214638130,826002291,2941922612,2107294378}return SynapseXen_llIiIlilililllll[3631339276]end)()),SynapseXen_ilIIIiIilIIiilIIlii)]=SynapseXen_liIIlIIiiiiiIill+SynapseXen_ilIiiIililiIIilIl elseif SynapseXen_IiIlIii==(SynapseXen_llIiIlilililllll[926821908]or(function()local SynapseXen_IIllIliil="what are you trying to say? that fucking one dot + dot + dot + many dots is not adding adding 1 dot + dot and then adding all the dots together????"SynapseXen_llIiIlilililllll[926821908]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(1634054047,424253890),SynapseXen_lllliiIiilli(2401789872,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{1816490303,1386158436}return SynapseXen_llIiIlilililllll[926821908]end)())then SynapseXen_ilIIIiIilIIiilIIlii=SynapseXen_ilIIllIlliiiiIIill[SynapseXen_iiliIl(SynapseXen_iiliiili[346432802],SynapseXen_llIiIlilililllll[1542432153]or(function(...)local SynapseXen_IIllIliil="i'm intercommunication about the most nonecclesiastical dll exploits for esp. they only characterization objects with a antepatriarchal in the geistesgeschichte for the esp."local SynapseXen_iIIiIlli=SynapseXen_iiilIii(2952236228,4209009239)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(3656451266,638528281)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli-SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[1542432153]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(2034896016,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(2797110087,SynapseXen_IIiIilillIiiIIl[9]))-string.len(SynapseXen_IIllIliil)-#{2620966221,3414822636,812660111,791005397,3174211307,4213235144,1043784895}return SynapseXen_llIiIlilililllll[1542432153]end)({},"ilIi",3415,"iiiliiIiilIi","ilIl",{},{},{}),256)]elseif SynapseXen_IiIlIii==(SynapseXen_llIiIlilililllll[281611129]or(function()local SynapseXen_IIllIliil="luraph better then xen bros :pensive:"SynapseXen_llIiIlilililllll[281611129]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(2370465143,4117741453),SynapseXen_lllliiIiilli(2058128302,SynapseXen_IIiIilillIiiIIl[3]))-string.len(SynapseXen_IIllIliil)-#{2271436194,2843829706,1546222556,2638722080,3101504812,3976561661,449510979,1166269985}return SynapseXen_llIiIlilililllll[281611129]end)())then local SynapseXen_liIIlIIiiiiiIill,SynapseXen_ilIiiIililiIIilIl=SynapseXen_iiliIl(SynapseXen_iiliiili[566395536],SynapseXen_llIiIlilililllll[2733293823]or(function()local SynapseXen_IIllIliil="print(bytecode)"SynapseXen_llIiIlilililllll[2733293823]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(951575024,1980170473),SynapseXen_lllliiIiilli(3115703276,SynapseXen_iiilllliIiIIIIlI))-SynapseXen_IiIlIii-string.len(SynapseXen_IIllIliil)-#{3397946871,2362300657,2658431358,3030758811,2515770031}return SynapseXen_llIiIlilililllll[2733293823]end)(),512),SynapseXen_lllliiIiilli(SynapseXen_iiliiili[1005106056],SynapseXen_llIiIlilililllll[1341204238]or(function()local SynapseXen_IIllIliil="this is so sad, alexa play ripull.mp4"SynapseXen_llIiIlilililllll[1341204238]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(2322689981,3491315084),SynapseXen_lllliiIiilli(2909537589,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{3347907288,509049538,2876571771,2939718566,211712015,4093618161,931433162,1336936584,130829420,1012026944}return SynapseXen_llIiIlilililllll[1341204238]end)())local SynapseXen_liillIliIiiliIllIlI=SynapseXen_ilIIllIlliiiiIIill;if SynapseXen_liIIlIIiiiiiIill>255 then SynapseXen_liIIlIIiiiiiIill=SynapseXen_ililIililIl[SynapseXen_liIIlIIiiiiiIill-256]else SynapseXen_liIIlIIiiiiiIill=SynapseXen_liillIliIiiliIllIlI[SynapseXen_liIIlIIiiiiiIill]end;if SynapseXen_ilIiiIililiIIilIl>255 then SynapseXen_ilIiiIililiIIilIl=SynapseXen_ililIililIl[SynapseXen_ilIiiIililiIIilIl-256]else SynapseXen_ilIiiIililiIIilIl=SynapseXen_liillIliIiiliIllIlI[SynapseXen_ilIiiIililiIIilIl]end;SynapseXen_liillIliIiiliIllIlI[SynapseXen_lllIii(SynapseXen_iiliiili[346432802],SynapseXen_llIiIlilililllll[3999773801]or(function()local SynapseXen_IIllIliil="this is a christian obfuscator, no cursing allowed in our scripts"SynapseXen_llIiIlilililllll[3999773801]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(2688763368,959721601),SynapseXen_lllliiIiilli(1853056612,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{2607665975,1766251687,2772594020,936664423,3787659181,2684142265,3460396593,1975062516}return SynapseXen_llIiIlilililllll[3999773801]end)(),256)][SynapseXen_liIIlIIiiiiiIill]=SynapseXen_ilIiiIililiIIilIl elseif SynapseXen_IiIlIii==(SynapseXen_llIiIlilililllll[2165237902]or(function(...)local SynapseXen_IIllIliil="https://twitter.com/Ripull_RBLX/status/1059334518581145603"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(2222357158,1395096544)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(3734086284,560906226)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli-SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[2165237902]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(2127381127,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(1587145715,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{1266167750,451950434,2977192145,1430604337,1876670977,4209528931,2531175288,2924026973,412427490,2158262095}return SynapseXen_llIiIlilililllll[2165237902]end)("lIlllliilIIIiiIl",{},{},11419,{},2622,{},"liIIil"))then local SynapseXen_liIIlIIiiiiiIill=SynapseXen_lllIii(SynapseXen_iiliiili[566395536],SynapseXen_llIiIlilililllll[1309519351]or(function(...)local SynapseXen_IIllIliil="thats how mafia works"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(3409840536,2254411593)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(2184317186,2110668494)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli-SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[1309519351]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(4185442432,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(1126118651,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-SynapseXen_IiIlIii-#{2587957657,2169838075,1658734982}return SynapseXen_llIiIlilililllll[1309519351]end)(10895,"liilIiIiililIii","IlliIiiiiliIliiIi"),512)local SynapseXen_ilIiiIililiIIilIl=SynapseXen_iiliIl(SynapseXen_iiliiili[1005106056],SynapseXen_llIiIlilililllll[1759058112]or(function()local SynapseXen_IIllIliil="my way to go against expwoiting is to have safety measuwes. i 1 wocawscwipt and onwy moduwes. hewe's how it wowks: this scwipt bewow stowes the moduwes in a tabwe fow each moduwe we send the wist with the moduwes and moduwe infowmation and use inyit a function in my moduwe that wiww stowe the info and aftew it has send to aww the moduwes it wiww dewete them. so whenyevew the cwient twies to hack they cant get the moduwes. onwy this peace of wocawscwipt."SynapseXen_llIiIlilililllll[1759058112]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(749050066,424937942),SynapseXen_lllliiIiilli(3270896425,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{4109915926}return SynapseXen_llIiIlilililllll[1759058112]end)(),512)local SynapseXen_liillIliIiiliIllIlI=SynapseXen_ilIIllIlliiiiIIill;if SynapseXen_liIIlIIiiiiiIill>255 then SynapseXen_liIIlIIiiiiiIill=SynapseXen_ililIililIl[SynapseXen_liIIlIIiiiiiIill-256]else SynapseXen_liIIlIIiiiiiIill=SynapseXen_liillIliIiiliIllIlI[SynapseXen_liIIlIIiiiiiIill]end;if SynapseXen_ilIiiIililiIIilIl>255 then SynapseXen_ilIiiIililiIIilIl=SynapseXen_ililIililIl[SynapseXen_ilIiiIililiIIilIl-256]else SynapseXen_ilIiiIililiIIilIl=SynapseXen_liillIliIiiliIllIlI[SynapseXen_ilIiiIililiIIilIl]end;SynapseXen_liillIliIiiliIllIlI[SynapseXen_lllliiIiilli(SynapseXen_iiliiili[346432802],SynapseXen_llIiIlilililllll[2408549080]or(function()local SynapseXen_IIllIliil="sponsored by ironbrew, jk xen is better"SynapseXen_llIiIlilililllll[2408549080]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(2254547070,3435926132),SynapseXen_lllliiIiilli(123337815,SynapseXen_IIiIilillIiiIIl[8]))-string.len(SynapseXen_IIllIliil)-#{2760688179}return SynapseXen_llIiIlilililllll[2408549080]end)())]=SynapseXen_liIIlIIiiiiiIill/SynapseXen_ilIiiIililiIIilIl elseif SynapseXen_IiIlIii==(SynapseXen_llIiIlilililllll[588035404]or(function(...)local SynapseXen_IIllIliil="SYNAPSE XEN [FE BYPASS] [BETTER THEN LURAPH] [AMAZING] OMG OMG OMG !!!!!!"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(3322443685,1507967340)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(3016165,4291970967)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli+SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[588035404]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(2275467353,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(4014208603,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{989396979,1898842613,2430152658,1334083329,3801434267}return SynapseXen_llIiIlilililllll[588035404]end)("i",{}))then local SynapseXen_liIIlIIiiiiiIill=SynapseXen_lllIii(SynapseXen_iiliiili[566395536],SynapseXen_llIiIlilililllll[2237070050]or(function(...)local SynapseXen_IIllIliil="double-header fair! this rationalization has a overenthusiastically anticheat! you will get nonpermissible for exploiting!"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(1943891035,3742893749)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(2944709897,1350276982)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli+SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[2237070050]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(4092538011,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(2345648877,SynapseXen_IIiIilillIiiIIl[7]))-string.len(SynapseXen_IIllIliil)-SynapseXen_IiIlIii-#{869306151,332968503,1529265095,2283208861}return SynapseXen_llIiIlilililllll[2237070050]end)("llIllliiIiilI",13737,{},"liiilll",{},{},{}),512)local SynapseXen_ilIiiIililiIIilIl=SynapseXen_lllliiIiilli(SynapseXen_iiliiili[1005106056],SynapseXen_llIiIlilililllll[32329169]or(function(...)local SynapseXen_IIllIliil="hi xen crashes on my axon paste plz help"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(791384995,1410446731)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(303294606,3991699692)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli+SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[32329169]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(4076910832,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(3318489288,SynapseXen_IIiIilillIiiIIl[8]))-string.len(SynapseXen_IIllIliil)-SynapseXen_IiIlIii-#{4091920663,1865960777,2003630605,687308536,4239382494,1702505442,4124044666,1383104497}return SynapseXen_llIiIlilililllll[32329169]end)("IIlllI",1357,13601,2602,"IiIlIlilIiIliI",11179,"Ii","IiiiiiIlll"))local SynapseXen_liillIliIiiliIllIlI=SynapseXen_ilIIllIlliiiiIIill;if SynapseXen_liIIlIIiiiiiIill>255 then SynapseXen_liIIlIIiiiiiIill=SynapseXen_ililIililIl[SynapseXen_liIIlIIiiiiiIill-256]else SynapseXen_liIIlIIiiiiiIill=SynapseXen_liillIliIiiliIllIlI[SynapseXen_liIIlIIiiiiiIill]end;if SynapseXen_ilIiiIililiIIilIl>255 then SynapseXen_ilIiiIililiIIilIl=SynapseXen_ililIililIl[SynapseXen_ilIiiIililiIIilIl-256]else SynapseXen_ilIiiIililiIIilIl=SynapseXen_liillIliIiiliIllIlI[SynapseXen_ilIiiIililiIIilIl]end;SynapseXen_liillIliIiiliIllIlI[SynapseXen_lllliiIiilli(SynapseXen_iiliiili[346432802],SynapseXen_llIiIlilililllll[3447041758]or(function(...)local SynapseXen_IIllIliil="i put more time into this shitty list of dead memes then i did into the obfuscator itself"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(2695317528,3249538989)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(2480326299,1814658562)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli+SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[3447041758]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(1331894597,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(3648110346,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{1330532873,2310332068,10218447,3743718473,1618446397}return SynapseXen_llIiIlilililllll[3447041758]end)(357,{},12066,"iIllIlIliIiIIl","lIlII",{},{},6152,"IiIIiIiIiil","lil"))]=SynapseXen_liIIlIIiiiiiIill^SynapseXen_ilIiiIililiIIilIl elseif SynapseXen_IiIlIii==(SynapseXen_llIiIlilililllll[3078449499]or(function(...)local SynapseXen_IIllIliil="inb4 posted on exploit reports section"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(1609958764,2762838905)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(1848180167,2446800722)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli+SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[3078449499]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(2701487198,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(2203117952,SynapseXen_IIiIilillIiiIIl[10]))-string.len(SynapseXen_IIllIliil)-#{3869974015,476968758,2503911449,974363054,3737738379,647627224,3217622170,3950541908,952322243,4027903204}return SynapseXen_llIiIlilililllll[3078449499]end)(14379))then if not not SynapseXen_ilIIllIlliiiiIIill[SynapseXen_lllIii(SynapseXen_iiliiili[346432802],SynapseXen_llIiIlilililllll[1005101888]or(function()local SynapseXen_IIllIliil="hi xen doesn't work on sk8r please help"SynapseXen_llIiIlilililllll[1005101888]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(3960764161,4013916275),SynapseXen_lllliiIiilli(4096329224,SynapseXen_iiilllliIiIIIIlI))-SynapseXen_IiIlIii-string.len(SynapseXen_IIllIliil)-#{4288943204,1296743716,1102906068,2184266122,254027026}return SynapseXen_llIiIlilililllll[1005101888]end)(),256)]==(SynapseXen_lllIii(SynapseXen_iiliiili[1005106056],SynapseXen_llIiIlilililllll[1874383145]or(function()local SynapseXen_IIllIliil="now comes with a free n word pass"SynapseXen_llIiIlilililllll[1874383145]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(2844533639,3171769055),SynapseXen_lllliiIiilli(3816969101,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{3110572731,3233510807}return SynapseXen_llIiIlilililllll[1874383145]end)(),512)==0)then SynapseXen_iliIllliIIIillilI=SynapseXen_iliIllliIIIillilI+1 end elseif SynapseXen_IiIlIii==(SynapseXen_llIiIlilililllll[4281231858]or(function()local SynapseXen_IIllIliil="i'm intercommunication about the most nonecclesiastical dll exploits for esp. they only characterization objects with a antepatriarchal in the geistesgeschichte for the esp."SynapseXen_llIiIlilililllll[4281231858]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(4123734545,1715156375),SynapseXen_lllliiIiilli(1693712864,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{2857817990,1298592473}return SynapseXen_llIiIlilililllll[4281231858]end)())then SynapseXen_liiiIliIliiliil[SynapseXen_lllliiIiilli(SynapseXen_iiliiili[566395536],SynapseXen_llIiIlilililllll[2376779607]or(function()local SynapseXen_IIllIliil="imagine using some lua minifier tool and thinking you are a badass"SynapseXen_llIiIlilililllll[2376779607]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(4223684433,224784477),SynapseXen_lllliiIiilli(31239768,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{1505542653,3087716944,288112974}return SynapseXen_llIiIlilililllll[2376779607]end)())]=SynapseXen_ilIIllIlliiiiIIill[SynapseXen_iiliIl(SynapseXen_iiliiili[346432802],SynapseXen_llIiIlilililllll[2555538724]or(function(...)local SynapseXen_IIllIliil="SECURE API, IMPOSSIBLE TO BYPASS!"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(1758456774,1943295903)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(4233300998,61690784)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli-SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[2555538724]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(115006246,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(3938759257,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{798030689,1220785564}return SynapseXen_llIiIlilililllll[2555538724]end)({},{},{},{},7880),256)]elseif SynapseXen_IiIlIii==(SynapseXen_llIiIlilililllll[1077506405]or(function()local SynapseXen_IIllIliil="thats how mafia works"SynapseXen_llIiIlilililllll[1077506405]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(530764089,2744156937),SynapseXen_lllliiIiilli(1261939713,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{1916213402,2235326715,436961665,767046603,2801214618,3634096220,2054979879}return SynapseXen_llIiIlilililllll[1077506405]end)())then local SynapseXen_lIlIliiiiiIiI=SynapseXen_IiIIlIIliI[SynapseXen_lllliiIiilli(SynapseXen_iiliiili[815669057],SynapseXen_llIiIlilililllll[2114830193]or(function(...)local SynapseXen_IIllIliil="aspect network better obfuscator"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(21187976,1381645850)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(3321420606,973568034)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli+SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[2114830193]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(4270420155,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(1519687057,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{3071855812,1880261756,2229216620,1869321164,2648414935,3707551984,3741185007}return SynapseXen_llIiIlilililllll[2114830193]end)("iIill","iiiilllllliiIIliII",{},{},"lIiIiiliIIIIiIIi"))]local SynapseXen_liillIliIiiliIllIlI=SynapseXen_ilIIllIlliiiiIIill;local SynapseXen_iliIilIiliii;local SynapseXen_illliIiIl;if SynapseXen_lIlIliiiiiIiI[2063335321]~=0 then SynapseXen_iliIilIiliii={}SynapseXen_illliIiIl=setmetatable({},{__index=function(SynapseXen_llllIillilIlI,SynapseXen_IllilliIl)local SynapseXen_IIilllIiI=SynapseXen_iliIilIiliii[SynapseXen_IllilliIl]return SynapseXen_IIilllIiI[1][SynapseXen_IIilllIiI[2]]end,__newindex=function(SynapseXen_llllIillilIlI,SynapseXen_IllilliIl,SynapseXen_lliIlliIil)local SynapseXen_IIilllIiI=SynapseXen_iliIilIiliii[SynapseXen_IllilliIl]SynapseXen_IIilllIiI[1][SynapseXen_IIilllIiI[2]]=SynapseXen_lliIlliIil end})for SynapseXen_IlIiiliI=1,SynapseXen_lIlIliiiiiIiI[2063335321]do local SynapseXen_lIlIIiIIlIIiiiIiiiI=SynapseXen_lIillIllIilllIIilli[SynapseXen_iliIllliIIIillilI]if SynapseXen_lIlIIiIIlIIiiiIiiiI[1067350247]==(SynapseXen_llIiIlilililllll[1064666643]or(function(...)local SynapseXen_IIllIliil="xen detects custom getfenv"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(395011576,1316782711)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(2654151806,1640847020)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli+SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[1064666643]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(3977423660,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(1138848595,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{3654640814,2193377481,3408752195,1073206840,3090452631,2404271643,3029407488,547163421,2167605937}return SynapseXen_llIiIlilililllll[1064666643]end)("iIIlllliiiI"))then SynapseXen_iliIilIiliii[SynapseXen_IlIiiliI-1]={SynapseXen_liillIliIiiliIllIlI,SynapseXen_lllliiIiilli(SynapseXen_lIlIIiIIlIIiiiIiiiI[566395536],SynapseXen_llIiIlilililllll[1118598026]or(function()local SynapseXen_IIllIliil="can we have an f in chat for ripull"SynapseXen_llIiIlilililllll[1118598026]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(545999044,698525724),SynapseXen_lllliiIiilli(3492110283,SynapseXen_IIiIilillIiiIIl[10]))-string.len(SynapseXen_IIllIliil)-#{1686569373,4210347520,3112693827,3085380980,2616425608,1796159266}return SynapseXen_llIiIlilililllll[1118598026]end)())}elseif SynapseXen_lIlIIiIIlIIiiiIiiiI[1067350247]==(SynapseXen_llIiIlilililllll[1734116242]or(function(...)local SynapseXen_IIllIliil="level 1 crook = luraph, level 100 boss = xen"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(4228992353,1341787720)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(3896046705,398933320)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli-SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[1734116242]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(2610116791,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(3749506974,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{1287213556,2700319844,2113563822,2960525100,2212908032,999047519,3873967401,1946372251,2447767295,145406692}return SynapseXen_llIiIlilililllll[1734116242]end)({},11546,"IIilIiIilllI",580,7557,"lIilIlIlilIiiIllI",{},{}))then SynapseXen_iliIilIiliii[SynapseXen_IlIiiliI-1]={SynapseXen_liiiIliIliiliil,SynapseXen_lllliiIiilli(SynapseXen_lIlIIiIIlIIiiiIiiiI[566395536],SynapseXen_llIiIlilililllll[1736505470]or(function(...)local SynapseXen_IIllIliil="pain is gonna use the backspace method on xen"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(1899576193,3918692763)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(3185170274,1109810790)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli-SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[1736505470]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(1928933626,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(492182096,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{2414105578,3247393372,1348309565,1437045346,800655415,500254896,1949883452}return SynapseXen_llIiIlilililllll[1736505470]end)(3138,{}))}end;SynapseXen_iliIllliIIIillilI=SynapseXen_iliIllliIIIillilI+1 end;SynapseXen_illlliI[#SynapseXen_illlliI+1]=SynapseXen_iliIilIiliii end;SynapseXen_liillIliIiiliIllIlI[SynapseXen_lllliiIiilli(SynapseXen_iiliIl(SynapseXen_iiliiili[346432802],SynapseXen_llIiIlilililllll[68307750]or(function()local SynapseXen_IIllIliil="hi xen doesn't work on sk8r please help"SynapseXen_llIiIlilililllll[68307750]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(4077279671,297668310),SynapseXen_lllliiIiilli(364469889,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{874275963,3148685587}return SynapseXen_llIiIlilililllll[68307750]end)(),256),SynapseXen_ilIIIiIilIIiilIIlii)]=SynapseXen_IliIIiliIIIllIlilIII(SynapseXen_lIlIliiiiiIiI,SynapseXen_IiIIliiIIIl,SynapseXen_illliIiIl)elseif SynapseXen_IiIlIii==(SynapseXen_llIiIlilililllll[1100871294]or(function()local SynapseXen_IIllIliil="this is so sad, alexa play ripull.mp4"SynapseXen_llIiIlilililllll[1100871294]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(1689182139,864627629),SynapseXen_lllliiIiilli(2686625071,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{3279226375,3945780818,2043394652,291438049,777147427,3247813026,3009630145,1737562891,235959489,2358274342}return SynapseXen_llIiIlilililllll[1100871294]end)())then local SynapseXen_iiIiiili=SynapseXen_iiliIl(SynapseXen_iiliiili[346432802],SynapseXen_llIiIlilililllll[3247589411]or(function(...)local SynapseXen_IIllIliil="print(bytecode)"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(1381814140,3024633194)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(3300419158,994570634)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli-SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[3247589411]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(2574779956,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(2288638341,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{597518549,1327031411,2196189977,1061328507,1268790939,3259729154,1140805625,898805156,3659313011}return SynapseXen_llIiIlilililllll[3247589411]end)({},{},9431,"il",{}),256)local SynapseXen_liIIlIIiiiiiIill=SynapseXen_lllliiIiilli(SynapseXen_iiliIl(SynapseXen_iiliiili[566395536],SynapseXen_llIiIlilililllll[1652695205]or(function()local SynapseXen_IIllIliil="so if you'we nyot awawe of expwoiting by this point, you've pwobabwy been wiving undew a wock that the pionyeews used to wide fow miwes. wobwox is often seen as an expwoit-infested gwound by most fwom the suwface, awthough this isn't the case."SynapseXen_llIiIlilililllll[1652695205]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(2377717168,1991612450),SynapseXen_lllliiIiilli(201890916,SynapseXen_iiilllliIiIIIIlI))-SynapseXen_IiIlIii-string.len(SynapseXen_IIllIliil)-#{1830565974,2548976552,4203443636}return SynapseXen_llIiIlilililllll[1652695205]end)(),512),SynapseXen_ilIIIiIilIIiilIIlii)local SynapseXen_liillIliIiiliIllIlI=SynapseXen_ilIIllIlliiiiIIill;local SynapseXen_IilliIlIilIilIIii,SynapseXen_lilllIiiIIliIIi;local SynapseXen_IIIliIilIliliIl;if SynapseXen_liIIlIIiiiiiIill==1 then return elseif SynapseXen_liIIlIIiiiiiIill==0 then SynapseXen_IIIliIilIliliIl=SynapseXen_iillliiIlI else SynapseXen_IIIliIilIliliIl=SynapseXen_iiIiiili+SynapseXen_liIIlIIiiiiiIill-2 end;SynapseXen_lilllIiiIIliIIi={}SynapseXen_IilliIlIilIilIIii=0;for SynapseXen_IlIiiliI=SynapseXen_iiIiiili,SynapseXen_IIIliIilIliliIl do SynapseXen_IilliIlIilIilIIii=SynapseXen_IilliIlIilIilIIii+1;SynapseXen_lilllIiiIIliIIi[SynapseXen_IilliIlIilIilIIii]=SynapseXen_liillIliIiiliIllIlI[SynapseXen_IlIiiliI]end;return SynapseXen_lilllIiiIIliIIi,SynapseXen_IilliIlIilIilIIii elseif SynapseXen_IiIlIii==(SynapseXen_llIiIlilililllll[35909835]or(function(...)local SynapseXen_IIllIliil="hi my 2.5mb script doesn't work with xen please help"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(2551459509,3997801867)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(511641234,3783335745)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli+SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[35909835]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(815486317,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(2982429728,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{1982786495,1823248195,1760317184,4110296851,2222356428,3350663909,3326529121,1756821594,2582298739}return SynapseXen_llIiIlilililllll[35909835]end)("IliliiiliIIII",10375,"iiIIIiIIIl",{},"IIilIiiiIilIiI",{},4699,14987))then local SynapseXen_iiIiiili=SynapseXen_lllIii(SynapseXen_iiliiili[346432802],SynapseXen_llIiIlilililllll[4212437725]or(function(...)local SynapseXen_IIllIliil="i'm intercommunication about the most nonecclesiastical dll exploits for esp. they only characterization objects with a antepatriarchal in the geistesgeschichte for the esp."local SynapseXen_iIIiIlli=SynapseXen_iiilIii(2007426855,2662416479)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(1829224620,2465750356)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli+SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[4212437725]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(2696187001,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(3198558648,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-SynapseXen_IiIlIii-#{391848413,2204980531,2606714145,3941361458,819822435,1636711451,4171505760,3548997745}return SynapseXen_llIiIlilililllll[4212437725]end)(2483,11170),256)local SynapseXen_liIIlIIiiiiiIill=SynapseXen_lllIii(SynapseXen_iiliiili[566395536],SynapseXen_llIiIlilililllll[2910260881]or(function(...)local SynapseXen_IIllIliil="yed"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(3929314755,4045321180)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(3356680130,938317935)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli-SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[2910260881]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(3180722704,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(1371289266,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-SynapseXen_IiIlIii-#{4187995138,349638066,2017007569,2369381938,898135798,2232683596,53054083,1594268391,1989139130,3827108146}return SynapseXen_llIiIlilililllll[2910260881]end)(10797,338,5505,9214,12499,"illlIIIIiii"),512)local SynapseXen_liillIliIiiliIllIlI,SynapseXen_lllliiiiIiiilliIl=SynapseXen_ilIIllIlliiiiIIill,SynapseXen_iIlIllIllilIill;SynapseXen_iillliiIlI=SynapseXen_iiIiiili-1;for SynapseXen_IlIiiliI=SynapseXen_iiIiiili,SynapseXen_iiIiiili+(SynapseXen_liIIlIIiiiiiIill>0 and SynapseXen_liIIlIIiiiiiIill-1 or SynapseXen_liIiIiiIiIillllilIi)do SynapseXen_liillIliIiiliIllIlI[SynapseXen_IlIiiliI]=SynapseXen_lllliiiiIiiilliIl[SynapseXen_IlIiiliI-SynapseXen_iiIiiili]end elseif SynapseXen_IiIlIii==(SynapseXen_llIiIlilililllll[1135515189]or(function()local SynapseXen_IIllIliil="my way to go against expwoiting is to have safety measuwes. i 1 wocawscwipt and onwy moduwes. hewe's how it wowks: this scwipt bewow stowes the moduwes in a tabwe fow each moduwe we send the wist with the moduwes and moduwe infowmation and use inyit a function in my moduwe that wiww stowe the info and aftew it has send to aww the moduwes it wiww dewete them. so whenyevew the cwient twies to hack they cant get the moduwes. onwy this peace of wocawscwipt."SynapseXen_llIiIlilililllll[1135515189]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(3359121347,2910984334),SynapseXen_lllliiIiilli(2461014853,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{3035878047,1725703747,3878499956,437253485,1749381494,928807620}return SynapseXen_llIiIlilililllll[1135515189]end)())then local SynapseXen_ilIiiIililiIIilIl=SynapseXen_iiliIl(SynapseXen_iiliiili[1005106056],SynapseXen_llIiIlilililllll[3153793159]or(function()local SynapseXen_IIllIliil="hi xen crashes on my axon paste plz help"SynapseXen_llIiIlilililllll[3153793159]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(1566132388,708740143),SynapseXen_lllliiIiilli(2154035187,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{3498851272,2472189878}return SynapseXen_llIiIlilililllll[3153793159]end)(),512)local SynapseXen_liillIliIiiliIllIlI=SynapseXen_ilIIllIlliiiiIIill;if SynapseXen_ilIiiIililiIIilIl>255 then SynapseXen_ilIiiIililiIIilIl=SynapseXen_ililIililIl[SynapseXen_ilIiiIililiIIilIl-256]else SynapseXen_ilIiiIililiIIilIl=SynapseXen_liillIliIiiliIllIlI[SynapseXen_ilIiiIililiIIilIl]end;SynapseXen_liillIliIiiliIllIlI[SynapseXen_lllliiIiilli(SynapseXen_iiliiili[346432802],SynapseXen_llIiIlilililllll[283403757]or(function()local SynapseXen_IIllIliil="skisploit is the superior obfuscator, clearly."SynapseXen_llIiIlilililllll[283403757]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(2719668066,3385384654),SynapseXen_lllliiIiilli(2387133191,SynapseXen_IIiIilillIiiIIl[1]))-string.len(SynapseXen_IIllIliil)-#{2126076958,316423570,3546978127,1591072954}return SynapseXen_llIiIlilililllll[283403757]end)())]=SynapseXen_liillIliIiiliIllIlI[SynapseXen_lllliiIiilli(SynapseXen_iiliiili[566395536],SynapseXen_llIiIlilililllll[4232949883]or(function()local SynapseXen_IIllIliil="HELP ME PEOPLE ARE CRASHING MY GAME PLZ HELP"SynapseXen_llIiIlilililllll[4232949883]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(377347104,1981356483),SynapseXen_lllliiIiilli(110600471,SynapseXen_IIiIilillIiiIIl[12]))-string.len(SynapseXen_IIllIliil)-#{1429756629,2920189198,2683234702,2656183737,1852776038,3834571778}return SynapseXen_llIiIlilililllll[4232949883]end)())][SynapseXen_ilIiiIililiIIilIl]elseif SynapseXen_IiIlIii==(SynapseXen_llIiIlilililllll[3839110430]or(function()local SynapseXen_IIllIliil="xen best rerubi paste"SynapseXen_llIiIlilililllll[3839110430]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(1276117645,3236867165),SynapseXen_lllliiIiilli(2078615992,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{3975201502,3250803466,3761211804,2476411377,815837335,766474453,1129334311}return SynapseXen_llIiIlilililllll[3839110430]end)())then local SynapseXen_iiIiiili=SynapseXen_lllIii(SynapseXen_iiliiili[346432802],SynapseXen_llIiIlilililllll[2952514664]or(function()local SynapseXen_IIllIliil="xen doesn't come with instance caching, sorry superskater"SynapseXen_llIiIlilililllll[2952514664]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(841859118,3691811615),SynapseXen_lllliiIiilli(1405460748,SynapseXen_IIiIilillIiiIIl[5]))-SynapseXen_IiIlIii-string.len(SynapseXen_IIllIliil)-#{1275294946,1853704884,1333519679,460805628,3218778868,3828186178,4282641709,2543645289}return SynapseXen_llIiIlilililllll[2952514664]end)(),256)local SynapseXen_liillIliIiiliIllIlI=SynapseXen_ilIIllIlliiiiIIill;local SynapseXen_lIiIlliiil=SynapseXen_liillIliIiiliIllIlI[SynapseXen_iiIiiili+2]local SynapseXen_liiIllIllIlllIIliIl=SynapseXen_liillIliIiiliIllIlI[SynapseXen_iiIiiili]+SynapseXen_lIiIlliiil;SynapseXen_liillIliIiiliIllIlI[SynapseXen_iiIiiili]=SynapseXen_liiIllIllIlllIIliIl;if SynapseXen_lIiIlliiil>0 then if SynapseXen_liiIllIllIlllIIliIl<=SynapseXen_liillIliIiiliIllIlI[SynapseXen_iiIiiili+1]then SynapseXen_iliIllliIIIillilI=SynapseXen_iliIllliIIIillilI+SynapseXen_iiliiili[980776686]SynapseXen_liillIliIiiliIllIlI[SynapseXen_iiIiiili+3]=SynapseXen_liiIllIllIlllIIliIl end else if SynapseXen_liiIllIllIlllIIliIl>=SynapseXen_liillIliIiiliIllIlI[SynapseXen_iiIiiili+1]then SynapseXen_iliIllliIIIillilI=SynapseXen_iliIllliIIIillilI+SynapseXen_iiliiili[980776686]SynapseXen_liillIliIiiliIllIlI[SynapseXen_iiIiiili+3]=SynapseXen_liiIllIllIlllIIliIl end end elseif SynapseXen_IiIlIii==(SynapseXen_llIiIlilililllll[917958896]or(function(...)local SynapseXen_IIllIliil="what are you trying to say? that fucking one dot + dot + dot + many dots is not adding adding 1 dot + dot and then adding all the dots together????"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(984692760,3135450269)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(79092222,4215898788)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli+SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[917958896]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(284803396,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(3714025242,SynapseXen_IIiIilillIiiIIl[8]))-string.len(SynapseXen_IIllIliil)-#{4195194011,1829815777,713495310,2297157883,2648001758,2798526412}return SynapseXen_llIiIlilililllll[917958896]end)("illIiiiilIlIIi",13147))then local SynapseXen_liIIlIIiiiiiIill=SynapseXen_ilIIllIlliiiiIIill[SynapseXen_iiliIl(SynapseXen_iiliIl(SynapseXen_iiliiili[566395536],SynapseXen_llIiIlilililllll[3944894270]or(function(...)local SynapseXen_IIllIliil="can we have an f in chat for ripull"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(1784199301,2578561507)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(2864016160,1430970427)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli-SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[3944894270]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(2949751516,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(1588414896,SynapseXen_IIiIilillIiiIIl[3]))-string.len(SynapseXen_IIllIliil)-#{407714104,3849186809,3339148248,2462963777,81477960,4077513462}return SynapseXen_llIiIlilililllll[3944894270]end)({},{},"i",917,"i",11286),512),SynapseXen_ilIIIiIilIIiilIIlii,512)]if not not SynapseXen_liIIlIIiiiiiIill==(SynapseXen_lllIii(SynapseXen_iiliiili[1005106056],SynapseXen_llIiIlilililllll[31428499]or(function(...)local SynapseXen_IIllIliil="xen best rerubi paste"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(2055130632,1823791077)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(2046727911,2248253617)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli-SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[31428499]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(3354950935,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(428468992,SynapseXen_IIiIilillIiiIIl[11]))-string.len(SynapseXen_IIllIliil)-SynapseXen_IiIlIii-#{2339015182,985038778,3016551820,172130767,3448206785,2348980808}return SynapseXen_llIiIlilililllll[31428499]end)(3558,13662,"lll","IilIlIIlIi",14611,8419,"lillIiilliIIiil"),512)==0)then SynapseXen_iliIllliIIIillilI=SynapseXen_iliIllliIIIillilI+1 else SynapseXen_ilIIllIlliiiiIIill[SynapseXen_iiliIl(SynapseXen_iiliIl(SynapseXen_iiliiili[346432802],SynapseXen_llIiIlilililllll[339330178]or(function()local SynapseXen_IIllIliil="hi xen crashes on my axon paste plz help"SynapseXen_llIiIlilililllll[339330178]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(79865976,2085513786),SynapseXen_lllliiIiilli(3933230831,SynapseXen_IIiIilillIiiIIl[6]))-SynapseXen_IiIlIii-string.len(SynapseXen_IIllIliil)-#{785008199,1095057484,2079041005}return SynapseXen_llIiIlilililllll[339330178]end)(),256),SynapseXen_ilIIIiIilIIiilIIlii,256)]=SynapseXen_liIIlIIiiiiiIill end elseif SynapseXen_IiIlIii==(SynapseXen_llIiIlilililllll[898980900]or(function(...)local SynapseXen_IIllIliil="xen doesn't come with instance caching, sorry superskater"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(2056960151,2629330222)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(4012597717,282396414)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli-SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[898980900]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(2756381465,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(4083233462,SynapseXen_IIiIilillIiiIIl[2]))-string.len(SynapseXen_IIllIliil)-#{2204545114,953486522,364532586}return SynapseXen_llIiIlilililllll[898980900]end)("lIiIlilIllIlIIiIIl",{},"llIIllilIl",7298,{},"IIllIliiiIIiilil",2746,4168,6775,"iiIilIlIIIiIIIillll"))then SynapseXen_iliIllliIIIillilI=SynapseXen_iliIllliIIIillilI+SynapseXen_iiliiili[980776686]elseif SynapseXen_IiIlIii==(SynapseXen_llIiIlilililllll[3381432463]or(function()local SynapseXen_IIllIliil="https://twitter.com/Ripull_RBLX/status/1059334518581145603"SynapseXen_llIiIlilililllll[3381432463]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(887709605,3671284262),SynapseXen_lllliiIiilli(423499481,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{701039613,499790930,1632819836,1730231190,628003684,1366159264,500268473,1381234231}return SynapseXen_llIiIlilililllll[3381432463]end)())then local SynapseXen_iiIiiili=SynapseXen_lllliiIiilli(SynapseXen_iiliiili[346432802],SynapseXen_llIiIlilililllll[63873423]or(function(...)local SynapseXen_IIllIliil="epic gamer vision"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(1371166847,3502635143)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(2693039407,1601944677)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli+SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[63873423]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(3511402655,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(2815346049,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{2478571506,1276823596,2624776984,325520420,220992153,1183647793,2567285315,910336948,477633812}return SynapseXen_llIiIlilililllll[63873423]end)({},"liiIlillIillill"))local SynapseXen_liillIliIiiliIllIlI=SynapseXen_ilIIllIlliiiiIIill;SynapseXen_liillIliIiiliIllIlI[SynapseXen_iiIiiili]=assert(tonumber(SynapseXen_liillIliIiiliIllIlI[SynapseXen_iiIiiili]),'`for` initial value must be a number')SynapseXen_liillIliIiiliIllIlI[SynapseXen_iiIiiili+1]=assert(tonumber(SynapseXen_liillIliIiiliIllIlI[SynapseXen_iiIiiili+1]),'`for` limit must be a number')SynapseXen_liillIliIiiliIllIlI[SynapseXen_iiIiiili+2]=assert(tonumber(SynapseXen_liillIliIiiliIllIlI[SynapseXen_iiIiiili+2]),'`for` step must be a number')SynapseXen_liillIliIiiliIllIlI[SynapseXen_iiIiiili]=SynapseXen_liillIliIiiliIllIlI[SynapseXen_iiIiiili]-SynapseXen_liillIliIiiliIllIlI[SynapseXen_iiIiiili+2]SynapseXen_iliIllliIIIillilI=SynapseXen_iliIllliIIIillilI+SynapseXen_iiliiili[980776686]elseif SynapseXen_IiIlIii==(SynapseXen_llIiIlilililllll[1775815709]or(function(...)local SynapseXen_IIllIliil="i'm intercommunication about the most nonecclesiastical dll exploits for esp. they only characterization objects with a antepatriarchal in the geistesgeschichte for the esp."local SynapseXen_iIIiIlli=SynapseXen_iiilIii(3808777648,1825129287)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(1185082482,3109905727)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli-SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[1775815709]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(2788306886,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(3779338746,SynapseXen_IIiIilillIiiIIl[11]))-string.len(SynapseXen_IIllIliil)-#{3174386131,256683616,3712613695}return SynapseXen_llIiIlilililllll[1775815709]end)(5748,"lIilIIlilliIIlIi"))then local SynapseXen_iiIiiili=SynapseXen_lllIii(SynapseXen_iiliiili[346432802],SynapseXen_llIiIlilililllll[3115044703]or(function(...)local SynapseXen_IIllIliil="so if you'we nyot awawe of expwoiting by this point, you've pwobabwy been wiving undew a wock that the pionyeews used to wide fow miwes. wobwox is often seen as an expwoit-infested gwound by most fwom the suwface, awthough this isn't the case."local SynapseXen_iIIiIlli=SynapseXen_iiilIii(3398995211,4277335699)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(399712059,3895286406)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli-SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[3115044703]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(2339407628,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(1591729355,SynapseXen_IIiIilillIiiIIl[4]))-string.len(SynapseXen_IIllIliil)-SynapseXen_IiIlIii-#{1226094324,3318095745}return SynapseXen_llIiIlilililllll[3115044703]end)("liIIlillliii","iIilli"),256)~=0;local SynapseXen_liIIlIIiiiiiIill=SynapseXen_lllIii(SynapseXen_lllliiIiilli(SynapseXen_iiliiili[566395536],SynapseXen_llIiIlilililllll[2014203204]or(function(...)local SynapseXen_IIllIliil="now comes with a free n word pass"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(2636494331,1971828591)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(8683595,8612674)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli+SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[2014203204]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(1472469434,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(1525775745,SynapseXen_IIiIilillIiiIIl[1]))-string.len(SynapseXen_IIllIliil)-SynapseXen_IiIlIii-#{771622252,665175783}return SynapseXen_llIiIlilililllll[2014203204]end)({},"IIIIii",11228,14619,6668,"liIIIIli",{})),SynapseXen_ilIIIiIilIIiilIIlii,512)local SynapseXen_ilIiiIililiIIilIl=SynapseXen_lllIii(SynapseXen_iiliiili[1005106056],SynapseXen_llIiIlilililllll[536462663]or(function(...)local SynapseXen_IIllIliil="SYNAPSE XEN [FE BYPASS] [BETTER THEN LURAPH] [AMAZING] OMG OMG OMG !!!!!!"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(390686907,3063022778)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(2312465565,1982520694)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli-SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[536462663]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(3726888726,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(2298444070,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-SynapseXen_IiIlIii-#{3944117547,3495549399,2899648830}return SynapseXen_llIiIlilililllll[536462663]end)(847,9991,{},"li","iliIliIilIIilillIl","llIilIII",13875,9436,{},{}),512)local SynapseXen_liillIliIiiliIllIlI=SynapseXen_ilIIllIlliiiiIIill;if SynapseXen_liIIlIIiiiiiIill>255 then SynapseXen_liIIlIIiiiiiIill=SynapseXen_ililIililIl[SynapseXen_liIIlIIiiiiiIill-256]else SynapseXen_liIIlIIiiiiiIill=SynapseXen_liillIliIiiliIllIlI[SynapseXen_liIIlIIiiiiiIill]end;if SynapseXen_ilIiiIililiIIilIl>255 then SynapseXen_ilIiiIililiIIilIl=SynapseXen_ililIililIl[SynapseXen_ilIiiIililiIIilIl-256]else SynapseXen_ilIiiIililiIIilIl=SynapseXen_liillIliIiiliIllIlI[SynapseXen_ilIiiIililiIIilIl]end;if SynapseXen_liIIlIIiiiiiIill<=SynapseXen_ilIiiIililiIIilIl~=SynapseXen_iiIiiili then SynapseXen_iliIllliIIIillilI=SynapseXen_iliIllliIIIillilI+1 end elseif SynapseXen_IiIlIii==(SynapseXen_llIiIlilililllll[490473438]or(function()local SynapseXen_IIllIliil="this is a christian obfuscator, no cursing allowed in our scripts"SynapseXen_llIiIlilililllll[490473438]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(2736015417,3916331696),SynapseXen_lllliiIiilli(3178770390,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{2027079104,1889603456}return SynapseXen_llIiIlilililllll[490473438]end)())then SynapseXen_IiIIliiIIIl[SynapseXen_ililIililIl[SynapseXen_lllliiIiilli(SynapseXen_iiliiili[815669057],SynapseXen_llIiIlilililllll[1125788769]or(function(...)local SynapseXen_IIllIliil="baby i just fell for uwu,,,,,, i wanna be with uwu!11!!"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(1720501007,1422722097)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(3510632872,784343546)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli-SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[1125788769]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(1597188033,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(3885242410,SynapseXen_IIiIilillIiiIIl[9]))-string.len(SynapseXen_IIllIliil)-#{3452806485,1024289672,1815932014,34436617,3491334759,3556266165}return SynapseXen_llIiIlilililllll[1125788769]end)(12968,9078,{},{}))]]=SynapseXen_ilIIllIlliiiiIIill[SynapseXen_lllIii(SynapseXen_iiliiili[346432802],SynapseXen_llIiIlilililllll[2246483514]or(function(...)local SynapseXen_IIllIliil="hi devforum"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(1905392901,387237405)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(3739159819,555834050)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli+SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[2246483514]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(2045192466,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(3899042539,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-SynapseXen_IiIlIii-#{2011801856,4065335165,1976688486}return SynapseXen_llIiIlilililllll[2246483514]end)(5457,8494),256)]elseif SynapseXen_IiIlIii==(SynapseXen_llIiIlilililllll[1143461716]or(function()local SynapseXen_IIllIliil="SECURE API, IMPOSSIBLE TO BYPASS!"SynapseXen_llIiIlilililllll[1143461716]=SynapseXen_lllliiIiilli(SynapseXen_iiilIii(2422148277,1763699121),SynapseXen_lllliiIiilli(242948142,SynapseXen_iiilllliIiIIIIlI))-string.len(SynapseXen_IIllIliil)-#{3133963965,4029563187,1434724335,3675981895,3986732996}return SynapseXen_llIiIlilililllll[1143461716]end)())then SynapseXen_ilIIllIlliiiiIIill[SynapseXen_iiliIl(SynapseXen_lllIii(SynapseXen_iiliiili[346432802],SynapseXen_llIiIlilililllll[1553558609]or(function(...)local SynapseXen_IIllIliil="wait for someone on devforum to say they are gonna deobfuscate this"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(3214762821,3083080871)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(235438561,235367457)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli+SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[1553558609]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(2847404917,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(470375690,SynapseXen_IIiIilillIiiIIl[5]))-string.len(SynapseXen_IIllIliil)-SynapseXen_IiIlIii-#{2729340896,1531043271,2248115010,564647344,92779197}return SynapseXen_llIiIlilililllll[1553558609]end)(8648),256),SynapseXen_ilIIIiIilIIiilIIlii,256)]=SynapseXen_IiIIliiIIIl[SynapseXen_ililIililIl[SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(SynapseXen_iiliiili[815669057],SynapseXen_llIiIlilililllll[2194517393]or(function(...)local SynapseXen_IIllIliil="this is so sad, alexa play ripull.mp4"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(3814555636,2753062801)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(3433172089,3433101363)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli-SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[2194517393]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(888779956,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(1045051423,SynapseXen_IIiIilillIiiIIl[8]))-string.len(SynapseXen_IIllIliil)-SynapseXen_IiIlIii-#{1257968512,3481756071,2592026410,2467727446,2536496878,2344752742,2517786119,606181712,60173236,3533909026}return SynapseXen_llIiIlilililllll[2194517393]end)("IliiiiiilIlIIllIlI","iIillIIIl")),SynapseXen_ilIIIiIilIIiilIIlii)]]elseif SynapseXen_IiIlIii==(SynapseXen_llIiIlilililllll[378424675]or(function(...)local SynapseXen_IIllIliil="level 1 crook = luraph, level 100 boss = xen"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(3581357315,3365839171)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(555662829,3739327025)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli+SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[378424675]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(1606753126,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(3368560210,SynapseXen_IIiIilillIiiIIl[9]))-string.len(SynapseXen_IIllIliil)-#{3707240530,2955290239,1779500383}return SynapseXen_llIiIlilililllll[378424675]end)(9819,9299,1095,"lIllliIlIilli",{},{}))then local SynapseXen_iiIiiili=SynapseXen_iiliIl(SynapseXen_lllIii(SynapseXen_iiliiili[346432802],SynapseXen_llIiIlilililllll[2924521039]or(function(...)local SynapseXen_IIllIliil="what are you trying to say? that fucking one dot + dot + dot + many dots is not adding adding 1 dot + dot and then adding all the dots together????"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(3344807659,4066422028)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(3820064978,474919167)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli+SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[2924521039]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(2982573788,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(1633801848,SynapseXen_IIiIilillIiiIIl[1]))-string.len(SynapseXen_IIllIliil)-SynapseXen_IiIlIii-#{2152081660,1964077177,1413285585,4041422369}return SynapseXen_llIiIlilililllll[2924521039]end)(4220,{},"iiiIlIl","iiI","iI",{},7568,"liIIiIIIIIllI",{},"iIIliliiI"),256),SynapseXen_ilIIIiIilIIiilIIlii,256)local SynapseXen_liIIlIIiiiiiIill=SynapseXen_lllIii(SynapseXen_iiliiili[566395536],SynapseXen_llIiIlilililllll[2086864760]or(function(...)local SynapseXen_IIllIliil="this is so sad, alexa play ripull.mp4"local SynapseXen_iIIiIlli=SynapseXen_iiilIii(759444268,2002849822)local SynapseXen_liilliIliIII={...}for SynapseXen_IililII,SynapseXen_iliiIli in pairs(SynapseXen_liilliIliIII)do local SynapseXen_IlIIIlIiiiiiIi;local SynapseXen_IliIIIiIilll=type(SynapseXen_iliiIli)if SynapseXen_IliIIIiIilll=="number"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli elseif SynapseXen_IliIIIiIilll=="string"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iliiIli:len()elseif SynapseXen_IliIIIiIilll=="table"then SynapseXen_IlIIIlIiiiiiIi=SynapseXen_iiilIii(1359406173,2935592396)end;SynapseXen_iIIiIlli=SynapseXen_iIIiIlli-SynapseXen_IlIIIlIiiiiiIi end;SynapseXen_llIiIlilililllll[2086864760]=SynapseXen_lllliiIiilli(SynapseXen_lllliiIiilli(2162081805,SynapseXen_iIIiIlli),SynapseXen_lllliiIiilli(306672983,SynapseXen_IIiIilillIiiIIl[11]))-string.len(SynapseXen_IIllIliil)-SynapseXen_IiIlIii-#{2223884273,2113346805,3213829693,1657230758,1232810692}return SynapseXen_llIiIlilililllll[2086864760]end)({},8560,"IIlIi",10869,"ilIlIiIIIiIilIlllII",12486,3763,{},"iIlii"),512)local SynapseXen_liillIliIiiliIllIlI=SynapseXen_ilIIllIlliiiiIIill;local SynapseXen_IilIIi,SynapseXen_ilIilIllIll;local SynapseXen_IIIliIilIliliIl;local SynapseXen_iiIIlilIIllllil=0;SynapseXen_IilIIi={}if SynapseXen_liIIlIIiiiiiIill~=1 then if SynapseXen_liIIlIIiiiiiIill~=0 then SynapseXen_IIIliIilIliliIl=SynapseXen_iiIiiili+SynapseXen_liIIlIIiiiiiIill-1 else SynapseXen_IIIliIilIliliIl=SynapseXen_iillliiIlI end;for SynapseXen_IlIiiliI=SynapseXen_iiIiiili+1,SynapseXen_IIIliIilIliliIl do SynapseXen_IilIIi[#SynapseXen_IilIIi+1]=SynapseXen_liillIliIiiliIllIlI[SynapseXen_IlIiiliI]end;SynapseXen_ilIilIllIll={SynapseXen_liillIliIiiliIllIlI[SynapseXen_iiIiiili](unpack(SynapseXen_IilIIi,1,SynapseXen_IIIliIilIliliIl-SynapseXen_iiIiiili))}else SynapseXen_ilIilIllIll={SynapseXen_liillIliIiiliIllIlI[SynapseXen_iiIiiili]()}end;for SynapseXen_liiIllIllIlllIIliIl in next,SynapseXen_ilIilIllIll do if SynapseXen_liiIllIllIlllIIliIl>SynapseXen_iiIIlilIIllllil then SynapseXen_iiIIlilIIllllil=SynapseXen_liiIllIllIlllIIliIl end end;return SynapseXen_ilIilIllIll,SynapseXen_iiIIlilIIllllil end end end;local SynapseXen_IilIIi={...}for SynapseXen_IlIiiliI=0,SynapseXen_liIiIiiIiIillllilIi do if SynapseXen_IlIiiliI>=SynapseXen_illilI[1950924936]then SynapseXen_iIlIllIllilIill[SynapseXen_IlIiiliI-SynapseXen_illilI[1950924936]]=SynapseXen_IilIIi[SynapseXen_IlIiiliI+1]else SynapseXen_ilIIllIlliiiiIIill[SynapseXen_IlIiiliI]=SynapseXen_IilIIi[SynapseXen_IlIiiliI+1]end end;local SynapseXen_liIIlIIiiiiiIill,SynapseXen_ilIiiIililiIIilIl=SynapseXen_iiIliliiIl()if SynapseXen_liIIlIIiiiiiIill and SynapseXen_ilIiiIililiIIilIl>0 then return unpack(SynapseXen_liIIlIIiiiiiIill,1,SynapseXen_ilIiiIililiIIilIl)end;return end end;local function SynapseXen_IiliIIIIIiiIl(SynapseXen_IiillIiilllliIlIilI,SynapseXen_IiIIliiIIIl)local SynapseXen_iIilIIIIiill=SynapseXen_lllIIiil(SynapseXen_IiillIiilllliIlIilI)return SynapseXen_IliIIiliIIIllIlilIII(SynapseXen_iIilIIIIiill,SynapseXen_IiIIliiIIIl or getfenv(0)),SynapseXen_iIilIIIIiill end;return SynapseXen_IiliIIIIIiiIl(SynapseXen_iIlIliIiIIIlIi(""),getfenv())()
end)        

Section6:NewButton("Davi_scripts youtube channel", "Copy davi_scripts youtube channel", function()
    setclipboard("https://www.youtube.com/c/davigameplay456")
Notification.new("success", "Copied!", "Copied davi_scripts youtube channel!")
end)

Section6:NewButton("VG hub", "Copy VG hub's discord invite link!", function()
    setclipboard("https://discord.gg/n28rEVuUJu")
Notification.new("success", "Copied!", "Copied vg hub's discord invite link!")
end)

Section6:NewButton("Fps counter (Jn hh gaming)", "Copy jn hh gaming's youtube channel!", function()
    setclipboard("https://www.youtube.com/c/JNHHGaming")
Notification.new("success", "Copied!", "Copied Jn hh gaming's youtube channel")
end)

Section6:NewButton("Pet sim x (Blacktrap)", "Copy the blacktrap's discord to clipboard", function()
    setclipboard("https://discord.gg/qdqjhnb7yV")
Notification.new("success", "Copied!", "Copied blacktrap's discord")
end)

Section6:NewButton("Bedwars 1 (Vape v4)", "Copy the website of the script to the clipboard", function()
    setclipboard("https://7granddadpgn.github.io")
Notification.new("success", "Copied!", "Copied Vape v4 website!")
end)

Section6:NewButton("Bedwars 2 (Jn hh gaming v2)", "Copy the jn hh gaming's youtube channel to clipboard", function()
    setclipboard("https://www.youtube.com/c/JNHHGaming")
Notification.new("success", "Copied!", "Copied Jn hh gaming's youtube channel")
end)

Section6:NewButton("Adopt me (Diamond hub)", "Copy the Diamond hub discord invite", function()
    setclipboard("https://discord.gg/97TMWDFGNN")
Notification.new("success", "Copied!", "Copied the Diamond hub discord invite")
end)

Section6:NewButton("Arsenal (Pwner hub best script ever)", "Copy the pwner hub discord invite", function()
    setclipboard("https://discord.gg/GaanUUUbht")
Notification.new("success", "Copied!", "Copied the Pwner hub discord invite")
end)

--Toogle ui
Section1:NewKeybind("Toogle ui", "Toogle ui", Enum.KeyCode.RightAlt, function()
	Library:ToggleUI()
end)
